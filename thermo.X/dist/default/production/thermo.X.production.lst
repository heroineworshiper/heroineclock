

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Aug 23 07:10:37 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F6585
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           ; Version 1.45
    41                           ; Generated 16/11/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F6585 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     
    75                           	psect	idataCOMRAM
    76  000CDB                     __pidataCOMRAM:
    77                           	opt stack 0
    78                           
    79                           ;initializer for _invalid
    80  000CDB  01                 	db	1
    81                           
    82                           ;initializer for _degrees
    83  000CDC  FF                 	db	255
    84                           
    85                           	psect	idataBANK0
    86  000AD0                     __pidataBANK0:
    87                           	opt stack 0
    88                           
    89                           ;initializer for _temp_table
    90  000AD0  FF38               	dw	65336
    91  000AD2  EE2C               	dw	60972
    92  000AD4  FF6A               	dw	65386
    93  000AD6  E9D9               	dw	59865
    94  000AD8  FF9C               	dw	65436
    95  000ADA  E4CC               	dw	58572
    96  000ADC  FFCE               	dw	65486
    97  000ADE  DEDE               	dw	57054
    98  000AE0  0000               	dw	0
    99  000AE2  D822               	dw	55330
   100  000AE4  0032               	dw	50
   101  000AE6  D079               	dw	53369
   102  000AE8  0064               	dw	100
   103  000AEA  C80E               	dw	51214
   104  000AEC  0096               	dw	150
   105  000AEE  BEC5               	dw	48837
   106  000AF0  00C8               	dw	200
   107  000AF2  B4EC               	dw	46316
   108  000AF4  00FA               	dw	250
   109  000AF6  AA80               	dw	43648
   110  000AF8  012C               	dw	300
   111  000AFA  9FB2               	dw	40882
   112  000AFC  015E               	dw	350
   113  000AFE  94A9               	dw	38057
   114  000B00  0190               	dw	400
   115  000B02  89A1               	dw	35233
   116  000B04  01C2               	dw	450
   117  000B06  7EBD               	dw	32445
   118  000B08  01F4               	dw	500
   119  000B0A  7429               	dw	29737
   120  000B0C  0226               	dw	550
   121  000B0E  69F5               	dw	27125
   122  000B10  0258               	dw	600
   123  000B12  6053               	dw	24659
   124  000B14  028A               	dw	650
   125  000B16  573F               	dw	22335
   126  000B18  02BC               	dw	700
   127  000B1A  4EDB               	dw	20187
   128  000B1C  02EE               	dw	750
   129  000B1E  4710               	dw	18192
   130  000B20  0320               	dw	800
   131  000B22  4001               	dw	16385
   132  000B24  0352               	dw	850
   133  000B26  3986               	dw	14726
   134  000B28  0384               	dw	900
   135  000B2A  36E0               	dw	14048
   136  000B2C  03B6               	dw	950
   137  000B2E  2E64               	dw	11876
   138  000B30  03E8               	dw	1000
   139  000B32  2866               	dw	10342
   140  000B34  041A               	dw	1050
   141  000B36  2575               	dw	9589
   142  000B38  044C               	dw	1100
   143  000B3A  21AA               	dw	8618
   144                           
   145                           	psect	idataBANK1
   146  000CD0                     __pidataBANK1:
   147                           	opt stack 0
   148                           
   149                           ;initializer for handle_test@test_table
   150  000CD0  00                 	db	0
   151  000CD1  0B                 	db	11
   152  000CD2  16                 	db	22
   153  000CD3  21                 	db	33
   154  000CD4  2C                 	db	44
   155  000CD5  37                 	db	55
   156  000CD6  42                 	db	66
   157  000CD7  4D                 	db	77
   158  000CD8  58                 	db	88
   159  000CD9  63                 	db	99
   160  000CDA  64                 	db	100
   161                           
   162                           	psect	mediumconst
   163  00BEAA                     __pmediumconst:
   164                           	opt stack 0
   165  00BEAA  00                 	db	0
   166  00BEAB                     handle_test@F13104:
   167                           	opt stack 0
   168  00BEAB  00                 	db	0
   169  00BEAC  00                 	db	0
   170  00BEAD  00                 	db	0
   171  00BEAE  02                 	db	2
   172  00BEAF  00                 	db	0
   173  00BEB0  00                 	db	0
   174  00BEB1  00                 	db	0
   175  00BEB2  01                 	db	1
   176  00BEB3  00                 	db	0
   177  00BEB4  00                 	db	0
   178  00BEB5  02                 	db	2
   179  00BEB6  00                 	db	0
   180  00BEB7  20                 	db	32
   181  00BEB8  00                 	db	0
   182  00BEB9  00                 	db	0
   183  00BEBA  00                 	db	0
   184  00BEBB  00                 	db	0
   185  00BEBC  01                 	db	1
   186  00BEBD  00                 	db	0
   187  00BEBE  00                 	db	0
   188  00BEBF  00                 	db	0
   189  00BEC0  00                 	db	0
   190  00BEC1  01                 	db	1
   191  00BEC2  00                 	db	0
   192  00BEC3  00                 	db	0
   193  00BEC4  02                 	db	2
   194  00BEC5  00                 	db	0
   195  00BEC6  00                 	db	0
   196  00BEC7  02                 	db	2
   197  00BEC8  00                 	db	0
   198  00BEC9  00                 	db	0
   199  00BECA  00                 	db	0
   200  00BECB  00                 	db	0
   201  00BECC  04                 	db	4
   202  00BECD  00                 	db	0
   203  00BECE  00                 	db	0
   204  00BECF  00                 	db	0
   205  00BED0  00                 	db	0
   206  00BED1  04                 	db	4
   207  00BED2  00                 	db	0
   208  00BED3  00                 	db	0
   209  00BED4  00                 	db	0
   210  00BED5  08                 	db	8
   211  00BED6  00                 	db	0
   212  00BED7  04                 	db	4
   213  00BED8  00                 	db	0
   214  00BED9  00                 	db	0
   215  00BEDA  00                 	db	0
   216  00BEDB  00                 	db	0
   217  00BEDC  08                 	db	8
   218  00BEDD  00                 	db	0
   219  00BEDE  00                 	db	0
   220  00BEDF  08                 	db	8
   221  00BEE0  00                 	db	0
   222  00BEE1  00                 	db	0
   223  00BEE2  00                 	db	0
   224  00BEE3  00                 	db	0
   225  00BEE4  00                 	db	0
   226  00BEE5  20                 	db	32
   227  00BEE6  00                 	db	0
   228  00BEE7  00                 	db	0
   229  00BEE8  00                 	db	0
   230  00BEE9  10                 	db	16
   231  00BEEA  00                 	db	0
   232  00BEEB  00                 	db	0
   233  00BEEC  00                 	db	0
   234  00BEED  20                 	db	32
   235  00BEEE  00                 	db	0
   236  00BEEF  08                 	db	8
   237  00BEF0  00                 	db	0
   238  00BEF1  00                 	db	0
   239  00BEF2  00                 	db	0
   240  00BEF3  00                 	db	0
   241  00BEF4  08                 	db	8
   242  00BEF5  00                 	db	0
   243  00BEF6  00                 	db	0
   244  00BEF7  04                 	db	4
   245  00BEF8  00                 	db	0
   246  00BEF9  00                 	db	0
   247  00BEFA  00                 	db	0
   248  00BEFB  00                 	db	0
   249  00BEFC  00                 	db	0
   250  00BEFD  08                 	db	8
   251  00BEFE  00                 	db	0
   252  00BEFF  00                 	db	0
   253  00BF00  00                 	db	0
   254  00BF01  04                 	db	4
   255  00BF02  00                 	db	0
   256  00BF03  00                 	db	0
   257  00BF04  04                 	db	4
   258  00BF05  00                 	db	0
   259  00BF06  00                 	db	0
   260  00BF07  02                 	db	2
   261  00BF08  00                 	db	0
   262  00BF09  00                 	db	0
   263  00BF0A  00                 	db	0
   264  00BF0B  00                 	db	0
   265  00BF0C  02                 	db	2
   266  00BF0D  00                 	db	0
   267  00BF0E  00                 	db	0
   268  00BF0F  00                 	db	0
   269  00BF10  00                 	db	0
   270  00BF11  01                 	db	1
   271  00BF12  00                 	db	0
   272  00BF13  00                 	db	0
   273  00BF14  01                 	db	1
   274  00BF15  00                 	db	0
   275  00BF16  00                 	db	0
   276  00BF17  20                 	db	32
   277  00BF18  00                 	db	0
   278  00BF19  00                 	db	0
   279  00BF1A  00                 	db	0
   280  00BF1B  00                 	db	0
   281  00BF1C  00                 	db	0
   282  00BF1D  02                 	db	2
   283  00BF1E  00                 	db	0
   284  00BF1F  00                 	db	0
   285  00BF20  00                 	db	0
   286  00BF21  00                 	db	0
   287  00BF22  01                 	db	1
   288  00BF23  00                 	db	0
   289  00BF24  00                 	db	0
   290  00BF25  00                 	db	0
   291  00BF26  02                 	db	2
   292  00BF27  00                 	db	0
   293  00BF28  00                 	db	0
   294  00BF29  00                 	db	0
   295  00BF2A  03                 	db	3
   296  00BF2B  20                 	db	32
   297  00BF2C  01                 	db	1
   298  00BF2D  00                 	db	0
   299  00BF2E  00                 	db	0
   300  00BF2F  02                 	db	2
   301  00BF30  04                 	db	4
   302  00BF31  00                 	db	0
   303  00BF32  00                 	db	0
   304  00BF33  04                 	db	4
   305  00BF34  00                 	db	0
   306  00BF35  08                 	db	8
   307  00BF36  00                 	db	0
   308  00BF37  00                 	db	0
   309  00BF38  00                 	db	0
   310  00BF39  30                 	db	48
   311  00BF3A  00                 	db	0
   312  00BF3B  04                 	db	4
   313  00BF3C  00                 	db	0
   314  00BF3D  08                 	db	8
   315  00BF3E  00                 	db	0
   316  00BF3F  02                 	db	2
   317  00BF40  04                 	db	4
   318  00BF41  00                 	db	0
   319  00BF42  00                 	db	0
   320  00BF43  20                 	db	32
   321  00BF44  01                 	db	1
   322  00BF45  00                 	db	0
   323  00BF46  00                 	db	0
   324  00BF47  00                 	db	0
   325  00BF48  00                 	db	0
   326  00BF49  00                 	db	0
   327  00BF4A  03                 	db	3
   328  00BF4B  00                 	db	0
   329  00BF4C  08                 	db	8
   330  00BF4D  01                 	db	1
   331  00BF4E  00                 	db	0
   332  00BF4F  08                 	db	8
   333  00BF50  02                 	db	2
   334  00BF51  00                 	db	0
   335  00BF52  00                 	db	0
   336  00BF53  00                 	db	0
   337  00BF54  00                 	db	0
   338  00BF55  06                 	db	6
   339  00BF56  00                 	db	0
   340  00BF57  08                 	db	8
   341  00BF58  02                 	db	2
   342  00BF59  00                 	db	0
   343  00BF5A  00                 	db	0
   344  00BF5B  00                 	db	0
   345  00BF5C  08                 	db	8
   346  00BF5D  01                 	db	1
   347  00BF5E  00                 	db	0
   348  00BF5F                     __end_ofhandle_test@F13104:
   349                           	opt stack 0
   350  00BF5F                     _led_masks3:
   351                           	opt stack 0
   352  00BF5F  20                 	db	32
   353  00BF60  01                 	db	1
   354  00BF61  03                 	db	3
   355  00BF62  03                 	db	3
   356  00BF63  00                 	db	0
   357  00BF64  00                 	db	0
   358  00BF65  00                 	db	0
   359  00BF66  03                 	db	3
   360  00BF67  20                 	db	32
   361  00BF68  02                 	db	2
   362  00BF69  03                 	db	3
   363  00BF6A  02                 	db	2
   364  00BF6B  00                 	db	0
   365  00BF6C  02                 	db	2
   366  00BF6D  03                 	db	3
   367  00BF6E  03                 	db	3
   368  00BF6F  00                 	db	0
   369  00BF70  03                 	db	3
   370  00BF71  00                 	db	0
   371  00BF72  03                 	db	3
   372  00BF73  00                 	db	0
   373  00BF74  03                 	db	3
   374  00BF75  03                 	db	3
   375  00BF76  01                 	db	1
   376  00BF77  20                 	db	32
   377  00BF78  03                 	db	3
   378  00BF79  03                 	db	3
   379  00BF7A  01                 	db	1
   380  00BF7B  00                 	db	0
   381  00BF7C  00                 	db	0
   382  00BF7D  01                 	db	1
   383  00BF7E  03                 	db	3
   384  00BF7F  20                 	db	32
   385  00BF80  03                 	db	3
   386  00BF81  03                 	db	3
   387  00BF82  03                 	db	3
   388  00BF83  00                 	db	0
   389  00BF84  03                 	db	3
   390  00BF85  03                 	db	3
   391  00BF86  03                 	db	3
   392  00BF87                     __end_of_led_masks3:
   393                           	opt stack 0
   394  00BF87                     _led_masks2:
   395                           	opt stack 0
   396  00BF87  06                 	db	6
   397  00BF88  0C                 	db	12
   398  00BF89  0C                 	db	12
   399  00BF8A  00                 	db	0
   400  00BF8B  02                 	db	2
   401  00BF8C  04                 	db	4
   402  00BF8D  00                 	db	0
   403  00BF8E  00                 	db	0
   404  00BF8F  0A                 	db	10
   405  00BF90  08                 	db	8
   406  00BF91  0C                 	db	12
   407  00BF92  00                 	db	0
   408  00BF93  0A                 	db	10
   409  00BF94  0C                 	db	12
   410  00BF95  04                 	db	4
   411  00BF96  00                 	db	0
   412  00BF97  0E                 	db	14
   413  00BF98  04                 	db	4
   414  00BF99  00                 	db	0
   415  00BF9A  00                 	db	0
   416  00BF9B  0C                 	db	12
   417  00BF9C  0C                 	db	12
   418  00BF9D  04                 	db	4
   419  00BF9E  00                 	db	0
   420  00BF9F  0C                 	db	12
   421  00BFA0  0C                 	db	12
   422  00BFA1  0C                 	db	12
   423  00BFA2  00                 	db	0
   424  00BFA3  02                 	db	2
   425  00BFA4  0C                 	db	12
   426  00BFA5  00                 	db	0
   427  00BFA6  00                 	db	0
   428  00BFA7  0E                 	db	14
   429  00BFA8  0C                 	db	12
   430  00BFA9  0C                 	db	12
   431  00BFAA  00                 	db	0
   432  00BFAB  0E                 	db	14
   433  00BFAC  0C                 	db	12
   434  00BFAD  04                 	db	4
   435  00BFAE  00                 	db	0
   436  00BFAF                     __end_of_led_masks2:
   437                           	opt stack 0
   438  00BFAF                     _hex_table:
   439                           	opt stack 0
   440  00BFAF  30                 	db	48
   441  00BFB0  31                 	db	49
   442  00BFB1  32                 	db	50
   443  00BFB2  33                 	db	51
   444  00BFB3  34                 	db	52
   445  00BFB4  35                 	db	53
   446  00BFB5  36                 	db	54
   447  00BFB6  37                 	db	55
   448  00BFB7  38                 	db	56
   449  00BFB8  39                 	db	57
   450  00BFB9  61                 	db	97
   451  00BFBA  62                 	db	98
   452  00BFBB  63                 	db	99
   453  00BFBC  64                 	db	100
   454  00BFBD  65                 	db	101
   455  00BFBE  66                 	db	102
   456  00BFBF                     __end_of_hex_table:
   457                           	opt stack 0
   458  00BFBF                     _PACKET_KEY:
   459                           	opt stack 0
   460  00BFBF  FF                 	db	255
   461  00BFC0  98                 	db	152
   462  00BFC1  DF                 	db	223
   463  00BFC2  72                 	db	114
   464  00BFC3  36                 	db	54
   465  00BFC4  B9                 	db	185
   466  00BFC5  0D                 	db	13
   467  00BFC6  48                 	db	72
   468  00BFC7  82                 	db	130
   469  00BFC8  C9                 	db	201
   470  00BFC9  28                 	db	40
   471  00BFCA  31                 	db	49
   472  00BFCB  2F                 	db	47
   473  00BFCC  56                 	db	86
   474  00BFCD  E5                 	db	229
   475  00BFCE  7C                 	db	124
   476  00BFCF                     __end_of_PACKET_KEY:
   477                           	opt stack 0
   478  00BFCF                     _led_masks1:
   479                           	opt stack 0
   480  00BFCF  00                 	db	0
   481  00BFD0  00                 	db	0
   482  00BFD1  30                 	db	48
   483  00BFD2  00                 	db	0
   484  00BFD3                     __end_of_led_masks1:
   485                           	opt stack 0
   486  00BFD3                     _invalid_mask:
   487                           	opt stack 0
   488  00BFD3  08                 	db	8
   489  00BFD4  02                 	db	2
   490  00BFD5  00                 	db	0
   491  00BFD6  00                 	db	0
   492  00BFD7                     __end_of_invalid_mask:
   493                           	opt stack 0
   494  00BFD7                     STR_3:
   495  00BFD7  57                 	db	87	;'W'
   496  00BFD8  65                 	db	101	;'e'
   497  00BFD9  6C                 	db	108	;'l'
   498  00BFDA  63                 	db	99	;'c'
   499  00BFDB  6F                 	db	111	;'o'
   500  00BFDC  6D                 	db	109	;'m'
   501  00BFDD  65                 	db	101	;'e'
   502  00BFDE  20                 	db	32
   503  00BFDF  74                 	db	116	;'t'
   504  00BFE0  6F                 	db	111	;'o'
   505  00BFE1  20                 	db	32
   506  00BFE2  54                 	db	84	;'T'
   507  00BFE3  68                 	db	104	;'h'
   508  00BFE4  65                 	db	101	;'e'
   509  00BFE5  72                 	db	114	;'r'
   510  00BFE6  6D                 	db	109	;'m'
   511  00BFE7  6F                 	db	111	;'o'
   512  00BFE8  6D                 	db	109	;'m'
   513  00BFE9  65                 	db	101	;'e'
   514  00BFEA  74                 	db	116	;'t'
   515  00BFEB  65                 	db	101	;'e'
   516  00BFEC  72                 	db	114	;'r'
   517  00BFED  20                 	db	32
   518  00BFEE  32                 	db	50	;'2'
   519  00BFEF  0A                 	db	10
   520  00BFF0  00                 	db	0
   521  00BFF1                     STR_1:
   522  00BFF1  67                 	db	103	;'g'
   523  00BFF2  65                 	db	101	;'e'
   524  00BFF3  74                 	db	116	;'t'
   525  00BFF4  5F                 	db	95	;'_'
   526  00BFF5  74                 	db	116	;'t'
   527  00BFF6  65                 	db	101	;'e'
   528  00BFF7  6D                 	db	109	;'m'
   529  00BFF8  70                 	db	112	;'p'
   530  00BFF9  20                 	db	32
   531  00BFFA  00                 	db	0
   532  00BFFB                     STR_2:
   533  00BFFB  46                 	db	70	;'F'
   534  00BFFC  3D                 	db	61	;'='
   535  00BFFD  00                 	db	0
   536  0000                     
   537                           ; #config settings
   538  00BFFE  00                 	db	0	; dummy byte at the end
   539  0000                     
   540                           	psect	nvCOMRAM
   541  000049                     __pnvCOMRAM:
   542                           	opt stack 0
   543  000049                     _handle_serial:
   544                           	opt stack 0
   545  000049                     	ds	2
   546  0000                     _TXREG	set	4013
   547  0000                     _PORTBbits	set	3969
   548  0000                     _PIR2bits	set	4001
   549  0000                     _INTCONbits	set	4082
   550  0000                     _INTCON2bits	set	4081
   551  0000                     _LATBbits	set	3978
   552  0000                     _TRISBbits	set	3987
   553  0000                     _TRISG	set	3992
   554  0000                     _TRISF	set	3991
   555  0000                     _TRISC	set	3988
   556  0000                     _TRISA	set	3986
   557  0000                     _CCP2CON	set	4026
   558  0000                     _CCPR2L	set	4027
   559  0000                     _CCPR2H	set	4028
   560  0000                     _T1CON	set	4045
   561  0000                     _PIE1bits	set	3997
   562  0000                     _RCSTA	set	4011
   563  0000                     _SPBRG	set	4015
   564  0000                     _SPBRGH	set	3967
   565  0000                     _BAUDCTL	set	3966
   566  0000                     _TXSTA	set	4012
   567  0000                     _LATDbits	set	3980
   568  0000                     _TRISDbits	set	3989
   569  0000                     _ADCON1	set	4033
   570  0000                     _RCREG	set	4014
   571  0000                     _PIR1bits	set	3998
   572  0000                     _LATG	set	3983
   573  0000                     _LATF	set	3982
   574  0000                     _LATC	set	3979
   575  0000                     _LATA	set	3977
   576                           
   577                           	psect	cinit
   578  00093C                     __pcinit:
   579                           	opt stack 0
   580  00093C                     start_initialization:
   581                           	opt stack 0
   582  00093C                     __initialization:
   583                           	opt stack 0
   584                           
   585                           ; Initialize objects allocated to BANK1 (11 bytes)
   586                           ; load TBLPTR registers with __pidataBANK1
   587  00093C  0ED0               	movlw	low __pidataBANK1
   588  00093E  6EF6               	movwf	tblptrl,c
   589  000940  0E0C               	movlw	high __pidataBANK1
   590  000942  6EF7               	movwf	tblptrh,c
   591  000944  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   592  000946  6EF8               	movwf	tblptru,c
   593  000948  EE01  F0B5         	lfsr	0,__pdataBANK1
   594  00094C  EE10 F00B          	lfsr	1,11
   595  000950                     copy_data0:
   596  000950  0009               	tblrd		*+
   597  000952  CFF5 FFEE          	movff	tablat,postinc0
   598  000956  50E5               	movf	postdec1,w,c
   599  000958  50E1               	movf	fsr1l,w,c
   600  00095A  E1FA               	bnz	copy_data0
   601                           
   602                           ; Initialize objects allocated to BANK0 (108 bytes)
   603                           ; load TBLPTR registers with __pidataBANK0
   604  00095C  0ED0               	movlw	low __pidataBANK0
   605  00095E  6EF6               	movwf	tblptrl,c
   606  000960  0E0A               	movlw	high __pidataBANK0
   607  000962  6EF7               	movwf	tblptrh,c
   608  000964  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   609  000966  6EF8               	movwf	tblptru,c
   610  000968  EE00  F060         	lfsr	0,__pdataBANK0
   611  00096C  EE10 F06C          	lfsr	1,108
   612  000970                     copy_data1:
   613  000970  0009               	tblrd		*+
   614  000972  CFF5 FFEE          	movff	tablat,postinc0
   615  000976  50E5               	movf	postdec1,w,c
   616  000978  50E1               	movf	fsr1l,w,c
   617  00097A  E1FA               	bnz	copy_data1
   618                           
   619                           ; Initialize objects allocated to COMRAM (2 bytes)
   620                           ; load TBLPTR registers with __pidataCOMRAM
   621  00097C  0EDB               	movlw	low __pidataCOMRAM
   622  00097E  6EF6               	movwf	tblptrl,c
   623  000980  0E0C               	movlw	high __pidataCOMRAM
   624  000982  6EF7               	movwf	tblptrh,c
   625  000984  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   626  000986  6EF8               	movwf	tblptru,c
   627  000988  0009               	tblrd		*+	;fetch initializer
   628  00098A  CFF5 F04B          	movff	tablat,__pdataCOMRAM
   629  00098E  0009               	tblrd		*+	;fetch initializer
   630  000990  CFF5 F04C          	movff	tablat,__pdataCOMRAM+1
   631                           
   632                           ; Clear objects allocated to BIGRAM (1024 bytes)
   633  000994  EE01  F0C4         	lfsr	0,__pbssBIGRAM
   634  000998  EE14 F000          	lfsr	1,1024
   635  00099C                     clear_0:
   636  00099C  6AEE               	clrf	postinc0,c
   637  00099E  50E5               	movf	postdec1,w,c
   638  0009A0  50E1               	movf	fsr1l,w,c
   639  0009A2  E1FC               	bnz	clear_0
   640  0009A4  50E2               	movf	fsr1h,w,c
   641  0009A6  E1FA               	bnz	clear_0
   642                           
   643                           ; Clear objects allocated to BANK1 (4 bytes)
   644  0009A8  0101               	movlb	1
   645  0009AA  6BC3               	clrf	(__pbssBANK1+3)& (0+255),b
   646  0009AC  6BC2               	clrf	(__pbssBANK1+2)& (0+255),b
   647  0009AE  6BC1               	clrf	(__pbssBANK1+1)& (0+255),b
   648  0009B0  6BC0               	clrf	__pbssBANK1& (0+255),b
   649                           
   650                           ; Clear objects allocated to COMRAM (28 bytes)
   651  0009B2  EE00  F02D         	lfsr	0,__pbssCOMRAM
   652  0009B6  0E1C               	movlw	28
   653  0009B8                     clear_1:
   654  0009B8  6AEE               	clrf	postinc0,c
   655  0009BA  06E8               	decf	wreg,f,c
   656  0009BC  E1FD               	bnz	clear_1
   657  0009BE                     end_of_initialization:
   658                           	opt stack 0
   659  0009BE                     __end_of__initialization:
   660                           	opt stack 0
   661  0009BE  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   662  0009C0  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   663  0009C2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   664  0009C4  6EF8               	movwf	tblptru,c
   665  0009C6  0100               	movlb	0
   666  0009C8  EF67  F003         	goto	_main	;jump to C main() function
   667                           tblptru	equ	0xFF8
   668                           tblptrh	equ	0xFF7
   669                           tblptrl	equ	0xFF6
   670                           tablat	equ	0xFF5
   671                           postinc0	equ	0xFEE
   672                           wreg	equ	0xFE8
   673                           postdec1	equ	0xFE5
   674                           fsr1h	equ	0xFE2
   675                           fsr1l	equ	0xFE1
   676                           
   677                           	psect	bssCOMRAM
   678  00002D                     __pbssCOMRAM:
   679                           	opt stack 0
   680  00002D                     _serial_data:
   681                           	opt stack 0
   682  00002D                     	ds	4
   683  000031                     _adc_count:
   684                           	opt stack 0
   685  000031                     	ds	4
   686  000035                     _adc_accum:
   687                           	opt stack 0
   688  000035                     	ds	4
   689  000039                     _uart_position2:
   690                           	opt stack 0
   691  000039                     	ds	2
   692  00003B                     _uart_position1:
   693                           	opt stack 0
   694  00003B                     	ds	2
   695  00003D                     _uart_size:
   696                           	opt stack 0
   697  00003D                     	ds	2
   698  00003F                     _interrupt_done:
   699                           	opt stack 0
   700  00003F                     	ds	1
   701  000040                     _led_mask3:
   702                           	opt stack 0
   703  000040                     	ds	1
   704  000041                     _led_mask2:
   705                           	opt stack 0
   706  000041                     	ds	1
   707  000042                     _led_mask1:
   708                           	opt stack 0
   709  000042                     	ds	1
   710  000043                     _led_mask0:
   711                           	opt stack 0
   712  000043                     	ds	1
   713  000044                     _timeout_counter:
   714                           	opt stack 0
   715  000044                     	ds	1
   716  000045                     _data_offset:
   717                           	opt stack 0
   718  000045                     	ds	1
   719  000046                     _key_offset:
   720                           	opt stack 0
   721  000046                     	ds	1
   722  000047                     _serial_in:
   723                           	opt stack 0
   724  000047                     	ds	1
   725  000048                     _have_serial:
   726                           	opt stack 0
   727  000048                     	ds	1
   728                           tblptru	equ	0xFF8
   729                           tblptrh	equ	0xFF7
   730                           tblptrl	equ	0xFF6
   731                           tablat	equ	0xFF5
   732                           postinc0	equ	0xFEE
   733                           wreg	equ	0xFE8
   734                           postdec1	equ	0xFE5
   735                           fsr1h	equ	0xFE2
   736                           fsr1l	equ	0xFE1
   737                           
   738                           	psect	dataCOMRAM
   739  00004B                     __pdataCOMRAM:
   740                           	opt stack 0
   741  00004B                     _invalid:
   742                           	opt stack 0
   743  00004B                     	ds	1
   744  00004C                     _degrees:
   745                           	opt stack 0
   746  00004C                     	ds	1
   747                           tblptru	equ	0xFF8
   748                           tblptrh	equ	0xFF7
   749                           tblptrl	equ	0xFF6
   750                           tablat	equ	0xFF5
   751                           postinc0	equ	0xFEE
   752                           wreg	equ	0xFE8
   753                           postdec1	equ	0xFE5
   754                           fsr1h	equ	0xFE2
   755                           fsr1l	equ	0xFE1
   756                           
   757                           	psect	dataBANK0
   758  000060                     __pdataBANK0:
   759                           	opt stack 0
   760  000060                     _temp_table:
   761                           	opt stack 0
   762  000060                     	ds	108
   763                           tblptru	equ	0xFF8
   764                           tblptrh	equ	0xFF7
   765                           tblptrl	equ	0xFF6
   766                           tablat	equ	0xFF5
   767                           postinc0	equ	0xFEE
   768                           wreg	equ	0xFE8
   769                           postdec1	equ	0xFE5
   770                           fsr1h	equ	0xFE2
   771                           fsr1l	equ	0xFE1
   772                           
   773                           	psect	bssBANK1
   774  0001C0                     __pbssBANK1:
   775                           	opt stack 0
   776  0001C0                     _time_hz:
   777                           	opt stack 0
   778  0001C0                     	ds	2
   779  0001C2                     handle_test@test_index:
   780                           	opt stack 0
   781  0001C2                     	ds	1
   782  0001C3                     _test_state:
   783                           	opt stack 0
   784  0001C3                     	ds	1
   785                           tblptru	equ	0xFF8
   786                           tblptrh	equ	0xFF7
   787                           tblptrl	equ	0xFF6
   788                           tablat	equ	0xFF5
   789                           postinc0	equ	0xFEE
   790                           wreg	equ	0xFE8
   791                           postdec1	equ	0xFE5
   792                           fsr1h	equ	0xFE2
   793                           fsr1l	equ	0xFE1
   794                           
   795                           	psect	dataBANK1
   796  0001B5                     __pdataBANK1:
   797                           	opt stack 0
   798  0001B5                     handle_test@test_table:
   799                           	opt stack 0
   800  0001B5                     	ds	11
   801                           tblptru	equ	0xFF8
   802                           tblptrh	equ	0xFF7
   803                           tblptrl	equ	0xFF6
   804                           tablat	equ	0xFF5
   805                           postinc0	equ	0xFEE
   806                           wreg	equ	0xFE8
   807                           postdec1	equ	0xFE5
   808                           fsr1h	equ	0xFE2
   809                           fsr1l	equ	0xFE1
   810                           
   811                           	psect	bssBIGRAM
   812  0001C4                     __pbssBIGRAM:
   813                           	opt stack 0
   814  0001C4                     _uart_buffer:
   815                           	opt stack 0
   816  0001C4                     	ds	1024
   817                           tblptru	equ	0xFF8
   818                           tblptrh	equ	0xFF7
   819                           tblptrl	equ	0xFF6
   820                           tablat	equ	0xFF5
   821                           postinc0	equ	0xFEE
   822                           wreg	equ	0xFE8
   823                           postdec1	equ	0xFE5
   824                           fsr1h	equ	0xFE2
   825                           fsr1l	equ	0xFE1
   826                           
   827                           	psect	cstackBANK1
   828  000100                     __pcstackBANK1:
   829                           	opt stack 0
   830  000100                     handle_test@test_mask:
   831                           	opt stack 0
   832                           
   833                           ; 180 bytes @ 0x0
   834  000100                     	ds	180
   835  0001B4                     handle_test@test_mask_size:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0xB4
   839  0001B4                     	ds	1
   840                           tblptru	equ	0xFF8
   841                           tblptrh	equ	0xFF7
   842                           tblptrl	equ	0xFF6
   843                           tablat	equ	0xFF5
   844                           postinc0	equ	0xFEE
   845                           wreg	equ	0xFE8
   846                           postdec1	equ	0xFE5
   847                           fsr1h	equ	0xFE2
   848                           fsr1l	equ	0xFE1
   849                           
   850                           	psect	cstackBANK0
   851  0000CC                     __pcstackBANK0:
   852                           	opt stack 0
   853  0000CC                     print_number@number:
   854                           	opt stack 0
   855                           
   856                           ; 4 bytes @ 0x0
   857  0000CC                     	ds	4
   858  0000D0                     
   859                           ; 1 bytes @ 0x4
   860  0000D0                     	ds	1
   861  0000D1                     get_temp@failed:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0x5
   865  0000D1                     	ds	1
   866  0000D2                     get_temp@i:
   867                           	opt stack 0
   868                           
   869                           ; 1 bytes @ 0x6
   870  0000D2                     	ds	1
   871  0000D3                     main@i:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0x7
   875  0000D3                     	ds	2
   876                           tblptru	equ	0xFF8
   877                           tblptrh	equ	0xFF7
   878                           tblptrl	equ	0xFF6
   879                           tablat	equ	0xFF5
   880                           postinc0	equ	0xFEE
   881                           wreg	equ	0xFE8
   882                           postdec1	equ	0xFE5
   883                           fsr1h	equ	0xFE2
   884                           fsr1l	equ	0xFE1
   885                           
   886                           	psect	cstackCOMRAM
   887  000001                     __pcstackCOMRAM:
   888                           	opt stack 0
   889  000001                     ??_isr:
   890  000001                     
   891                           ; 1 bytes @ 0x0
   892  000001                     	ds	18
   893  000013                     ?___awdiv:
   894                           	opt stack 0
   895  000013                     ?___lldiv:
   896                           	opt stack 0
   897  000013                     print_byte@c:
   898                           	opt stack 0
   899  000013                     ___lbmod@divisor:
   900                           	opt stack 0
   901  000013                     ___awdiv@dividend:
   902                           	opt stack 0
   903  000013                     ___lldiv@dividend:
   904                           	opt stack 0
   905                           
   906                           ; 4 bytes @ 0x12
   907  000013                     	ds	1
   908  000014                     ___lbmod@dividend:
   909                           	opt stack 0
   910  000014                     print_text@s:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x13
   914  000014                     	ds	1
   915  000015                     ___lbmod@counter:
   916                           	opt stack 0
   917  000015                     ___awdiv@divisor:
   918                           	opt stack 0
   919                           
   920                           ; 2 bytes @ 0x14
   921  000015                     	ds	1
   922  000016                     ___lbmod@rem:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x15
   926  000016                     	ds	1
   927  000017                     ___awdiv@counter:
   928                           	opt stack 0
   929  000017                     ___lldiv@divisor:
   930                           	opt stack 0
   931                           
   932                           ; 4 bytes @ 0x16
   933  000017                     	ds	1
   934  000018                     ___awdiv@sign:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x17
   938  000018                     	ds	1
   939  000019                     ___awdiv@quotient:
   940                           	opt stack 0
   941                           
   942                           ; 2 bytes @ 0x18
   943  000019                     	ds	2
   944  00001B                     ??_draw_degrees:
   945  00001B                     ___lldiv@quotient:
   946                           	opt stack 0
   947                           
   948                           ; 4 bytes @ 0x1A
   949  00001B                     	ds	2
   950  00001D                     draw_degrees@temp:
   951                           	opt stack 0
   952                           
   953                           ; 2 bytes @ 0x1C
   954  00001D                     	ds	2
   955  00001F                     draw_degrees@force:
   956                           	opt stack 0
   957  00001F                     ___lldiv@counter:
   958                           	opt stack 0
   959                           
   960                           ; 1 bytes @ 0x1E
   961  00001F                     	ds	1
   962  000020                     ?___llmod:
   963                           	opt stack 0
   964  000020                     draw_degrees@index:
   965                           	opt stack 0
   966  000020                     ___llmod@dividend:
   967                           	opt stack 0
   968                           
   969                           ; 4 bytes @ 0x1F
   970  000020                     	ds	2
   971  000022                     
   972                           ; 1 bytes @ 0x21
   973  000022                     	ds	2
   974  000024                     ___llmod@divisor:
   975                           	opt stack 0
   976                           
   977                           ; 4 bytes @ 0x23
   978  000024                     	ds	4
   979  000028                     ___llmod@counter:
   980                           	opt stack 0
   981                           
   982                           ; 1 bytes @ 0x27
   983  000028                     	ds	1
   984  000029                     print_number_nospace@number:
   985                           	opt stack 0
   986                           
   987                           ; 4 bytes @ 0x28
   988  000029                     	ds	4
   989  00002D                     tblptru	equ	0xFF8
   990                           tblptrh	equ	0xFF7
   991                           tblptrl	equ	0xFF6
   992                           tablat	equ	0xFF5
   993                           postinc0	equ	0xFEE
   994                           wreg	equ	0xFE8
   995                           postdec1	equ	0xFE5
   996                           fsr1h	equ	0xFE2
   997                           fsr1l	equ	0xFE1
   998                           
   999                           ; 1 bytes @ 0x2C
  1000 ;;
  1001 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1002 ;;
  1003 ;; *************** function _main *****************
  1004 ;; Defined at:
  1005 ;;		line 765 in file "thermo.c"
  1006 ;; Parameters:    Size  Location     Type
  1007 ;;		None
  1008 ;; Auto vars:     Size  Location     Type
  1009 ;;  i               2    7[BANK0 ] unsigned int 
  1010 ;; Return value:  Size  Location     Type
  1011 ;;                  1    wreg      void 
  1012 ;; Registers used:
  1013 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1014 ;; Tracked objects:
  1015 ;;		On entry : 0/0
  1016 ;;		On exit  : 0/0
  1017 ;;		Unchanged: 0/0
  1018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1020 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1022 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1023 ;;Total ram usage:        2 bytes
  1024 ;; Hardware stack levels required when called:    5
  1025 ;; This function calls:
  1026 ;;		Absolute function
  1027 ;;		_get_key
  1028 ;;		_get_temp
  1029 ;;		_handle_test
  1030 ;;		_handle_thermo
  1031 ;;		_print_text
  1032 ;; This function is called by:
  1033 ;;		Startup code after reset
  1034 ;; This function uses a non-reentrant model
  1035 ;;
  1036                           
  1037                           	psect	text0
  1038  0006CE                     __ptext0:
  1039                           	opt stack 0
  1040  0006CE                     _main:
  1041                           	opt stack 0
  1042  0006CE  FFFF               	dw	65535	; assembler added errata NOP
  1043                           
  1044                           ;thermo.c: 768: ADCON1 = 0b00001110;
  1045                           
  1046                           ;incstack = 0
  1047  0006D0  0E0E               	movlw	14
  1048  0006D2  6EC1               	movwf	4033,c	;volatile
  1049                           
  1050                           ;thermo.c: 769: TRISDbits.TRISD7 = 0;
  1051  0006D4  9E95               	bcf	3989,7,c	;volatile
  1052                           
  1053                           ;thermo.c: 770: LATDbits.LATD7 = 1;
  1054  0006D6  8E8C               	bsf	3980,7,c	;volatile
  1055                           
  1056                           ;thermo.c: 782: TXSTA = 0b00100100;
  1057  0006D8  0E24               	movlw	36
  1058  0006DA  6EAC               	movwf	4012,c	;volatile
  1059                           
  1060                           ;thermo.c: 783: BAUDCTL = 0x08;
  1061  0006DC  0E08               	movlw	8
  1062  0006DE  6E7E               	movwf	3966,c	;volatile
  1063                           
  1064                           ;thermo.c: 784: SPBRGH = 303 >> 8;
  1065  0006E0  0E01               	movlw	1
  1066  0006E2  6E7F               	movwf	3967,c	;volatile
  1067                           
  1068                           ;thermo.c: 785: SPBRG = 303 & 0xff;
  1069  0006E4  0E2F               	movlw	47
  1070  0006E6  6EAF               	movwf	4015,c	;volatile
  1071                           
  1072                           ;thermo.c: 786: PIR1bits.RCIF = 0;
  1073  0006E8  9A9E               	bcf	3998,5,c	;volatile
  1074                           
  1075                           ;thermo.c: 791: have_serial = 0;
  1076  0006EA  0E00               	movlw	0
  1077  0006EC  6E48               	movwf	_have_serial,c
  1078                           
  1079                           ;thermo.c: 792: handle_serial = get_key;
  1080  0006EE  0E3C               	movlw	low _get_key
  1081  0006F0  6E49               	movwf	_handle_serial,c
  1082  0006F2  0E0B               	movlw	high _get_key
  1083  0006F4  6E4A               	movwf	_handle_serial+1,c
  1084                           
  1085                           ;thermo.c: 793: key_offset = 0;
  1086  0006F6  0E00               	movlw	0
  1087  0006F8  6E46               	movwf	_key_offset,c
  1088                           
  1089                           ;thermo.c: 794: RCSTA = 0b10010000;
  1090  0006FA  0E90               	movlw	144
  1091  0006FC  6EAB               	movwf	4011,c	;volatile
  1092                           
  1093                           ;thermo.c: 795: PIE1bits.RCIE = 1;
  1094  0006FE  8A9D               	bsf	3997,5,c	;volatile
  1095                           
  1096                           ;thermo.c: 796: timeout_counter = 0;
  1097  000700  0E00               	movlw	0
  1098  000702  6E44               	movwf	_timeout_counter,c
  1099                           
  1100                           ;thermo.c: 803: T1CON = 0xb1;
  1101  000704  0EB1               	movlw	177
  1102  000706  6ECD               	movwf	4045,c	;volatile
  1103                           
  1104                           ;thermo.c: 804: CCPR2H = (10000000 / 4 / 8 / 250 - 1) >> 8;
  1105  000708  0E04               	movlw	4
  1106  00070A  6EBC               	movwf	4028,c	;volatile
  1107                           
  1108                           ;thermo.c: 805: CCPR2L = (10000000 / 4 / 8 / 250 - 1) & 0xff;
  1109  00070C  0EE1               	movlw	225
  1110  00070E  6EBB               	movwf	4027,c	;volatile
  1111                           
  1112                           ;thermo.c: 806: CCP2CON = 0x0b;
  1113  000710  0E0B               	movlw	11
  1114  000712  6EBA               	movwf	4026,c	;volatile
  1115                           
  1116                           ;thermo.c: 813: TRISA = ~0b00101110;
  1117  000714  0ED1               	movlw	209
  1118  000716  6E92               	movwf	3986,c	;volatile
  1119                           
  1120                           ;thermo.c: 814: TRISC = ~0b00001111;
  1121  000718  0EF0               	movlw	240
  1122  00071A  6E94               	movwf	3988,c	;volatile
  1123                           
  1124                           ;thermo.c: 815: TRISF = ~0b00111111;
  1125  00071C  0EC0               	movlw	192
  1126  00071E  6E97               	movwf	3991,c	;volatile
  1127                           
  1128                           ;thermo.c: 816: TRISG = ~0b00000011;
  1129  000720  0EFC               	movlw	252
  1130  000722  6E98               	movwf	3992,c	;volatile
  1131                           
  1132                           ;thermo.c: 817: handle_test();
  1133  000724  ECAC  F002         	call	_handle_test	;wreg free
  1134                           
  1135                           ;thermo.c: 820: TRISBbits.TRISB6 = 1;
  1136  000728  8C93               	bsf	3987,6,c	;volatile
  1137                           
  1138                           ;thermo.c: 821: LATBbits.LATB6 = 1;
  1139  00072A  8C8A               	bsf	3978,6,c	;volatile
  1140                           
  1141                           ;thermo.c: 822: INTCON2bits.RBPU = 0;
  1142  00072C  9EF1               	bcf	intcon2,7,c	;volatile
  1143                           
  1144                           ;thermo.c: 833: INTCONbits.PEIE = 1;
  1145  00072E  8CF2               	bsf	intcon,6,c	;volatile
  1146                           
  1147                           ;thermo.c: 834: INTCONbits.GIE = 1;
  1148  000730  8EF2               	bsf	intcon,7,c	;volatile
  1149                           
  1150                           ;thermo.c: 837: uint16_t i;
  1151                           ;thermo.c: 838: for(i = 0; i < 32768; i++)
  1152  000732  0E00               	movlw	0
  1153  000734  0100               	movlb	0	; () banked
  1154  000736  6FD4               	movwf	(main@i+1)& (0+255),b
  1155  000738  0E00               	movlw	0
  1156  00073A  6FD3               	movwf	main@i& (0+255),b
  1157  00073C                     l2262:
  1158  00073C  FFFF               	dw	65535	; assembler added errata NOP
  1159                           
  1160                           ; BSR set to: 0
  1161  00073E  0E80               	movlw	128
  1162  000740  5DD4               	subwf	(main@i+1)& (0+255),w,b
  1163  000742  B0D8               	btfsc	status,0,c
  1164  000744  D005               	goto	u1710
  1165                           
  1166                           ; BSR set to: 0
  1167                           
  1168                           ; BSR set to: 0
  1169  000746  0004               	clrwdt		;# 
  1170  000748  0100               	movlb	0	; () banked
  1171  00074A  4BD3               	infsnz	main@i& (0+255),f,b
  1172  00074C  2BD4               	incf	(main@i+1)& (0+255),f,b
  1173  00074E  D7F6               	goto	l2262
  1174  000750                     u1710:
  1175  000750  FFFF               	dw	65535	; assembler added errata NOP
  1176                           
  1177                           ; BSR set to: 0
  1178                           ;thermo.c: 841: }
  1179                           ;thermo.c: 844: print_text("Welcome to Thermometer 2\n");
  1180                           
  1181                           ; BSR set to: 0
  1182  000752  0ED7               	movlw	low STR_3
  1183  000754  6E14               	movwf	print_text@s,c
  1184  000756  0EBF               	movlw	high STR_3
  1185  000758  6E15               	movwf	print_text@s+1,c
  1186  00075A  EC18  F006         	call	_print_text	;wreg free
  1187                           
  1188                           ;thermo.c: 860: print_text("\n");
  1189  00075E  0EEF               	movlw	low (STR_3+24)
  1190  000760  6E14               	movwf	print_text@s,c
  1191  000762  0EBF               	movlw	high (STR_3+24)
  1192  000764  6E15               	movwf	print_text@s+1,c
  1193  000766  EC18  F006         	call	_print_text	;wreg free
  1194  00076A                     l263:
  1195  00076A  FFFF               	dw	65535	; assembler added errata NOP
  1196  00076C  0004               	clrwdt		;# 
  1197                           
  1198                           ;thermo.c: 867: if(have_serial)
  1199  00076E  5048               	movf	_have_serial,w,c
  1200  000770  B4D8               	btfsc	status,2,c
  1201  000772  D010               	goto	u1739
  1202                           
  1203                           ;thermo.c: 868: {
  1204                           ;thermo.c: 869: have_serial = 0;
  1205  000774  0E00               	movlw	0
  1206  000776  6E48               	movwf	_have_serial,c
  1207                           
  1208                           ;thermo.c: 870: handle_serial();
  1209  000778  D801               	call	u1738
  1210  00077A  D00C               	goto	u1739
  1211  00077C                     u1738:
  1212  00077C  FFFF               	dw	65535	; assembler added errata NOP
  1213  00077E  0005               	push	
  1214  000780  6EFA               	movwf	pclath,c
  1215  000782  5049               	movf	_handle_serial,w,c
  1216  000784  6EFD               	movwf	tosl,c
  1217  000786  504A               	movf	_handle_serial+1,w,c
  1218  000788  6EFE               	movwf	tosh,c
  1219  00078A  50F8               	movf	tblptru,w,c
  1220  00078C  6EFF               	movwf	tosu,c
  1221  00078E  50FA               	movf	pclath,w,c
  1222  000790  0012               	return		;indir
  1223  000792  FFFF               	dw	65535	; errata NOP
  1224  000794                     u1739:
  1225  000794  FFFF               	dw	65535	; assembler added errata NOP
  1226                           
  1227                           ;thermo.c: 871: }
  1228                           ;thermo.c: 877: if(PIR2bits.CCP2IF)
  1229  000796  A0A1               	btfss	4001,0,c	;volatile
  1230  000798  D009               	goto	l267
  1231                           
  1232                           ;thermo.c: 878: {
  1233                           ;thermo.c: 879: PIR2bits.CCP2IF = 0;
  1234  00079A  90A1               	bcf	4001,0,c	;volatile
  1235                           
  1236                           ;thermo.c: 882: if(PORTBbits.RB6)
  1237  00079C  AC81               	btfss	3969,6,c	;volatile
  1238  00079E  D003               	goto	l266
  1239                           
  1240                           ;thermo.c: 883: {
  1241                           ;thermo.c: 885: handle_thermo();
  1242  0007A0  ECCF  F005         	call	_handle_thermo	;wreg free
  1243                           
  1244                           ;thermo.c: 886: }
  1245  0007A4  D003               	goto	l267
  1246  0007A6                     l266:
  1247  0007A6  FFFF               	dw	65535	; assembler added errata NOP
  1248                           
  1249                           ;thermo.c: 887: else
  1250                           ;thermo.c: 888: {
  1251                           ;thermo.c: 889: handle_test();
  1252  0007A8  ECAC  F002         	call	_handle_test	;wreg free
  1253  0007AC                     l267:
  1254  0007AC  FFFF               	dw	65535	; assembler added errata NOP
  1255                           
  1256                           ;thermo.c: 890: }
  1257                           ;thermo.c: 891: }
  1258                           ;thermo.c: 914: if(uart_size > 0 && PIR1bits.TXIF)
  1259  0007AE  503D               	movf	_uart_size,w,c
  1260  0007B0  103E               	iorwf	_uart_size+1,w,c
  1261  0007B2  A4D8               	btfss	status,2,c
  1262  0007B4  A89E               	btfss	3998,4,c	;volatile
  1263  0007B6  D7D9               	goto	l263
  1264                           
  1265                           ;thermo.c: 915: {
  1266                           ;thermo.c: 916: PIR1bits.TXIF = 0;
  1267  0007B8  989E               	bcf	3998,4,c	;volatile
  1268                           
  1269                           ;thermo.c: 917: TXREG = uart_buffer[uart_position2++];
  1270  0007BA  0EC4               	movlw	low _uart_buffer
  1271  0007BC  2439               	addwf	_uart_position2,w,c
  1272  0007BE  6ED9               	movwf	fsr2l,c
  1273  0007C0  0E01               	movlw	high _uart_buffer
  1274  0007C2  203A               	addwfc	_uart_position2+1,w,c
  1275  0007C4  6EDA               	movwf	fsr2h,c
  1276  0007C6  50DF               	movf	indf2,w,c
  1277  0007C8  6EAD               	movwf	4013,c	;volatile
  1278  0007CA  4A39               	infsnz	_uart_position2,f,c
  1279  0007CC  2A3A               	incf	_uart_position2+1,f,c
  1280                           
  1281                           ;thermo.c: 918: uart_size--;
  1282  0007CE  063D               	decf	_uart_size,f,c
  1283  0007D0  A0D8               	btfss	status,0,c
  1284  0007D2  063E               	decf	_uart_size+1,f,c
  1285                           
  1286                           ;thermo.c: 919: if(uart_position2 >= 1024)
  1287  0007D4  0E04               	movlw	4
  1288  0007D6  5C3A               	subwf	_uart_position2+1,w,c
  1289  0007D8  A0D8               	btfss	status,0,c
  1290  0007DA  D7C7               	goto	l263
  1291                           
  1292                           ;thermo.c: 920: {
  1293                           ;thermo.c: 921: uart_position2 = 0;
  1294  0007DC  0E00               	movlw	0
  1295  0007DE  6E3A               	movwf	_uart_position2+1,c
  1296  0007E0  0E00               	movlw	0
  1297  0007E2  6E39               	movwf	_uart_position2,c
  1298  0007E4  D7C2               	goto	l263
  1299  0007E6                     __end_of_main:
  1300                           	opt stack 0
  1301                           tosu	equ	0xFFF
  1302                           tosh	equ	0xFFE
  1303                           tosl	equ	0xFFD
  1304                           pclath	equ	0xFFA
  1305                           tblptru	equ	0xFF8
  1306                           tblptrh	equ	0xFF7
  1307                           tblptrl	equ	0xFF6
  1308                           tablat	equ	0xFF5
  1309                           intcon	equ	0xFF2
  1310                           intcon2	equ	0xFF1
  1311                           postinc0	equ	0xFEE
  1312                           wreg	equ	0xFE8
  1313                           postdec1	equ	0xFE5
  1314                           fsr1h	equ	0xFE2
  1315                           fsr1l	equ	0xFE1
  1316                           indf2	equ	0xFDF
  1317                           fsr2h	equ	0xFDA
  1318                           fsr2l	equ	0xFD9
  1319                           status	equ	0xFD8
  1320                           
  1321 ;; *************** function _handle_thermo *****************
  1322 ;; Defined at:
  1323 ;;		line 572 in file "thermo.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;		None
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;		None
  1328 ;; Return value:  Size  Location     Type
  1329 ;;                  1    wreg      void 
  1330 ;; Registers used:
  1331 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1332 ;; Tracked objects:
  1333 ;;		On entry : 0/0
  1334 ;;		On exit  : 0/0
  1335 ;;		Unchanged: 0/0
  1336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1341 ;;Total ram usage:        0 bytes
  1342 ;; Hardware stack levels used:    1
  1343 ;; Hardware stack levels required when called:    3
  1344 ;; This function calls:
  1345 ;;		_draw_degrees
  1346 ;; This function is called by:
  1347 ;;		_main
  1348 ;; This function uses a non-reentrant model
  1349 ;;
  1350                           
  1351                           	psect	text1
  1352  000B9E                     __ptext1:
  1353                           	opt stack 0
  1354  000B9E                     _handle_thermo:
  1355                           	opt stack 0
  1356  000B9E  FFFF               	dw	65535	; assembler added errata NOP
  1357                           
  1358                           ;thermo.c: 574: time_hz++;
  1359                           
  1360                           ;incstack = 0
  1361  000BA0  0101               	movlb	1	; () banked
  1362  000BA2  4BC0               	infsnz	_time_hz& (0+255),f,b
  1363  000BA4  2BC1               	incf	(_time_hz+1)& (0+255),f,b
  1364                           
  1365                           ; BSR set to: 1
  1366                           ;thermo.c: 580: if(time_hz >= 250)
  1367  000BA6  51C1               	movf	(_time_hz+1)& (0+255),w,b
  1368  000BA8  E104               	bnz	u1580
  1369  000BAA  0EFA               	movlw	250
  1370  000BAC  5DC0               	subwf	_time_hz& (0+255),w,b
  1371  000BAE  A0D8               	btfss	status,0,c
  1372  000BB0  D01F               	goto	l223
  1373  000BB2                     u1580:
  1374                           
  1375                           ; BSR set to: 1
  1376                           ;thermo.c: 581: {
  1377                           ;thermo.c: 582: time_hz = 0;
  1378  000BB2  0E00               	movlw	0
  1379  000BB4  6FC1               	movwf	(_time_hz+1)& (0+255),b
  1380  000BB6  0E00               	movlw	0
  1381  000BB8  6FC0               	movwf	_time_hz& (0+255),b
  1382                           
  1383                           ; BSR set to: 1
  1384                           ;thermo.c: 642: if(timeout_counter < 60)
  1385  000BBA  0E3C               	movlw	60
  1386  000BBC  6044               	cpfslt	_timeout_counter,c
  1387  000BBE  D002               	goto	l224
  1388                           
  1389                           ; BSR set to: 1
  1390                           ;thermo.c: 643: {
  1391                           ;thermo.c: 644: timeout_counter++;
  1392  000BC0  2A44               	incf	_timeout_counter,f,c
  1393                           
  1394                           ;thermo.c: 645: }
  1395  000BC2  D003               	goto	l225
  1396  000BC4                     l224:
  1397  000BC4  FFFF               	dw	65535	; assembler added errata NOP
  1398                           
  1399                           ; BSR set to: 1
  1400                           ;thermo.c: 646: else
  1401                           ;thermo.c: 647: {
  1402                           ;thermo.c: 648: invalid = 1;
  1403                           
  1404                           ; BSR set to: 1
  1405  000BC6  0E01               	movlw	1
  1406  000BC8  6E4B               	movwf	_invalid,c
  1407  000BCA                     l225:
  1408  000BCA  FFFF               	dw	65535	; assembler added errata NOP
  1409                           
  1410                           ; BSR set to: 1
  1411                           ;thermo.c: 649: }
  1412                           ;thermo.c: 654: draw_degrees();
  1413                           
  1414                           ; BSR set to: 1
  1415  000BCC  EC95  F001         	call	_draw_degrees	;wreg free
  1416                           
  1417                           ;thermo.c: 657: adc_accum = 0;
  1418  000BD0  0E00               	movlw	0
  1419  000BD2  6E35               	movwf	_adc_accum,c
  1420  000BD4  0E00               	movlw	0
  1421  000BD6  6E36               	movwf	_adc_accum+1,c
  1422  000BD8  0E00               	movlw	0
  1423  000BDA  6E37               	movwf	_adc_accum+2,c
  1424  000BDC  0E00               	movlw	0
  1425  000BDE  6E38               	movwf	_adc_accum+3,c
  1426                           
  1427                           ;thermo.c: 658: adc_count = 0;
  1428  000BE0  0E00               	movlw	0
  1429  000BE2  6E31               	movwf	_adc_count,c
  1430  000BE4  0E00               	movlw	0
  1431  000BE6  6E32               	movwf	_adc_count+1,c
  1432  000BE8  0E00               	movlw	0
  1433  000BEA  6E33               	movwf	_adc_count+2,c
  1434  000BEC  0E00               	movlw	0
  1435  000BEE  6E34               	movwf	_adc_count+3,c
  1436  000BF0                     l223:
  1437  000BF0  FFFF               	dw	65535	; assembler added errata NOP
  1438  000BF2  0012               	return		;funcret
  1439  000BF4  FFFF               	dw	65535	; errata NOP
  1440  000BF6                     __end_of_handle_thermo:
  1441                           	opt stack 0
  1442                           tosu	equ	0xFFF
  1443                           tosh	equ	0xFFE
  1444                           tosl	equ	0xFFD
  1445                           pclath	equ	0xFFA
  1446                           tblptru	equ	0xFF8
  1447                           tblptrh	equ	0xFF7
  1448                           tblptrl	equ	0xFF6
  1449                           tablat	equ	0xFF5
  1450                           intcon	equ	0xFF2
  1451                           intcon2	equ	0xFF1
  1452                           postinc0	equ	0xFEE
  1453                           wreg	equ	0xFE8
  1454                           postdec1	equ	0xFE5
  1455                           fsr1h	equ	0xFE2
  1456                           fsr1l	equ	0xFE1
  1457                           indf2	equ	0xFDF
  1458                           fsr2h	equ	0xFDA
  1459                           fsr2l	equ	0xFD9
  1460                           status	equ	0xFD8
  1461                           
  1462 ;; *************** function _handle_test *****************
  1463 ;; Defined at:
  1464 ;;		line 435 in file "thermo.c"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;		None
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;  test_mask     180    0[BANK1 ] const unsigned char [4][
  1469 ;;  test_mask_si    1  180[BANK1 ] const unsigned char 
  1470 ;; Return value:  Size  Location     Type
  1471 ;;                  1    wreg      void 
  1472 ;; Registers used:
  1473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1474 ;; Tracked objects:
  1475 ;;		On entry : 0/0
  1476 ;;		On exit  : 0/0
  1477 ;;		Unchanged: 0/0
  1478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1480 ;;      Locals:         0       0     181       0       0       0       0       0       0       0       0       0       
      +0       0
  1481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1482 ;;      Totals:         0       0     181       0       0       0       0       0       0       0       0       0       
      +0       0
  1483 ;;Total ram usage:      181 bytes
  1484 ;; Hardware stack levels used:    1
  1485 ;; Hardware stack levels required when called:    3
  1486 ;; This function calls:
  1487 ;;		_draw_degrees
  1488 ;;		_write_leds
  1489 ;; This function is called by:
  1490 ;;		_main
  1491 ;; This function uses a non-reentrant model
  1492 ;;
  1493                           
  1494                           	psect	text2
  1495  000558                     __ptext2:
  1496                           	opt stack 0
  1497  000558                     _handle_test:
  1498                           	opt stack 0
  1499  000558  FFFF               	dw	65535	; assembler added errata NOP
  1500                           
  1501                           ;thermo.c: 437: static uint8_t test_table[] =
  1502                           ;thermo.c: 438: {
  1503                           ;thermo.c: 439: 0, 11, 22, 33, 44, 55, 66, 77, 88, 99, 100
  1504                           ;thermo.c: 440: };
  1505                           ;thermo.c: 441: static char test_index = 0;
  1506                           ;thermo.c: 442: const uint8_t test_mask[][4] =
  1507                           ;thermo.c: 443: {
  1508                           ;thermo.c: 445: { 0b00000000, 0b00000000, 0b00000000, 0b00000010 },
  1509                           ;thermo.c: 446: { 0b00000000, 0b00000000, 0b00000000, 0b00000001 },
  1510                           ;thermo.c: 447: { 0b00000000, 0b00000000, 0b00000010, 0b00000000 },
  1511                           ;thermo.c: 448: { 0b00100000, 0b00000000, 0b00000000, 0b00000000 },
  1512                           
  1513                           ;incstack = 0
  1514  00055A  0EAB               	movlw	low handle_test@F13104
  1515  00055C  6EF6               	movwf	tblptrl,c
  1516  00055E                     	if	1	;There is more than 1 active tblptr byte
  1517  00055E  0EBE               	movlw	high handle_test@F13104
  1518  000560  6EF7               	movwf	tblptrh,c
  1519  000562                     	endif
  1520  000562                     	if	0	;There are less than 3 active tblptr bytes
  1521  000562                     	endif
  1522  000562  EE21  F000         	lfsr	2,handle_test@test_mask
  1523  000566  0EB3               	movlw	179
  1524  000568                     u1520:
  1525  000568  0009               	tblrd		*+
  1526  00056A  FFFF               	dw	65535	; errata NOP
  1527  00056C  CFF5 FFDE          	movff	tablat,postinc2
  1528  000570  06E8               	decf	wreg,f,c
  1529  000572  E2FA               	bc	u1520
  1530                           
  1531                           ;thermo.c: 503: const char test_mask_size = sizeof(test_mask) / 4;
  1532  000574  0E2D               	movlw	45
  1533  000576  0101               	movlb	1	; () banked
  1534  000578  6FB4               	movwf	handle_test@test_mask_size& (0+255),b
  1535                           
  1536                           ;thermo.c: 505: switch(test_state)
  1537  00057A  D098               	goto	l207
  1538  00057C  FFFF               	dw	65535	; assembler added errata NOP
  1539                           
  1540                           ; BSR set to: 1
  1541                           ;thermo.c: 508: led_mask0 = 0b00101110;
  1542                           
  1543                           ; BSR set to: 1
  1544  00057E  0E2E               	movlw	46
  1545  000580  6E43               	movwf	_led_mask0,c
  1546                           
  1547                           ;thermo.c: 509: led_mask1 = 0b00001111;
  1548  000582  0E0F               	movlw	15
  1549  000584  6E42               	movwf	_led_mask1,c
  1550                           
  1551                           ;thermo.c: 510: led_mask2 = 0b00111111;
  1552  000586  0E3F               	movlw	63
  1553  000588  6E41               	movwf	_led_mask2,c
  1554                           
  1555                           ;thermo.c: 511: led_mask3 = 0b00000011;
  1556  00058A  0E03               	movlw	3
  1557  00058C  6E40               	movwf	_led_mask3,c
  1558                           
  1559                           ; BSR set to: 1
  1560                           ;thermo.c: 512: write_leds();
  1561  00058E  EC5D  F006         	call	_write_leds	;wreg free
  1562                           
  1563                           ;thermo.c: 513: test_state++;
  1564  000592  0101               	movlb	1	; () banked
  1565  000594  2BC3               	incf	_test_state& (0+255),f,b
  1566                           
  1567                           ; BSR set to: 1
  1568                           ;thermo.c: 514: time_hz = 0;
  1569  000596  0E00               	movlw	0
  1570  000598  6FC1               	movwf	(_time_hz+1)& (0+255),b
  1571  00059A  0E00               	movlw	0
  1572  00059C  6FC0               	movwf	_time_hz& (0+255),b
  1573                           
  1574                           ;thermo.c: 515: break;
  1575  00059E  D094               	goto	l209
  1576  0005A0  FFFF               	dw	65535	; assembler added errata NOP
  1577                           
  1578                           ; BSR set to: 1
  1579                           ;thermo.c: 518: time_hz++;
  1580                           
  1581                           ; BSR set to: 1
  1582  0005A2  4BC0               	infsnz	_time_hz& (0+255),f,b
  1583  0005A4  2BC1               	incf	(_time_hz+1)& (0+255),f,b
  1584                           
  1585                           ; BSR set to: 1
  1586                           ;thermo.c: 519: if(time_hz >= 250 * 5)
  1587  0005A6  0EE2               	movlw	226
  1588  0005A8  5DC0               	subwf	_time_hz& (0+255),w,b
  1589  0005AA  0E04               	movlw	4
  1590  0005AC  59C1               	subwfb	(_time_hz+1)& (0+255),w,b
  1591  0005AE  A0D8               	btfss	status,0,c
  1592  0005B0  D08B               	goto	l209
  1593                           
  1594                           ; BSR set to: 1
  1595                           ;thermo.c: 520: {
  1596                           ;thermo.c: 521: test_state++;
  1597  0005B2  2BC3               	incf	_test_state& (0+255),f,b
  1598                           
  1599                           ; BSR set to: 1
  1600                           ;thermo.c: 522: time_hz = 0;
  1601  0005B4  0E00               	movlw	0
  1602  0005B6  6FC1               	movwf	(_time_hz+1)& (0+255),b
  1603  0005B8  0E00               	movlw	0
  1604  0005BA  6FC0               	movwf	_time_hz& (0+255),b
  1605  0005BC  D025               	goto	l2100
  1606  0005BE  FFFF               	dw	65535	; assembler added errata NOP
  1607                           
  1608                           ; BSR set to: 1
  1609                           ;thermo.c: 528: time_hz++;
  1610                           
  1611                           ; BSR set to: 1
  1612  0005C0  4BC0               	infsnz	_time_hz& (0+255),f,b
  1613  0005C2  2BC1               	incf	(_time_hz+1)& (0+255),f,b
  1614                           
  1615                           ; BSR set to: 1
  1616                           ;thermo.c: 529: if(time_hz >= 250 / 2)
  1617  0005C4  51C1               	movf	(_time_hz+1)& (0+255),w,b
  1618  0005C6  E104               	bnz	u1540
  1619  0005C8  0E7D               	movlw	125
  1620  0005CA  5DC0               	subwf	_time_hz& (0+255),w,b
  1621  0005CC  A0D8               	btfss	status,0,c
  1622  0005CE  D07C               	goto	l209
  1623  0005D0                     u1540:
  1624                           
  1625                           ; BSR set to: 1
  1626                           ;thermo.c: 530: {
  1627                           ;thermo.c: 531: if(test_index < sizeof(test_table))
  1628  0005D0  0E0B               	movlw	11
  1629  0005D2  61C2               	cpfslt	handle_test@test_index& (0+255),b
  1630  0005D4  D012               	goto	l214
  1631                           
  1632                           ; BSR set to: 1
  1633                           ;thermo.c: 532: {
  1634                           ;thermo.c: 533: time_hz = 0;
  1635  0005D6  0E00               	movlw	0
  1636  0005D8  6FC1               	movwf	(_time_hz+1)& (0+255),b
  1637  0005DA  0E00               	movlw	0
  1638  0005DC  6FC0               	movwf	_time_hz& (0+255),b
  1639                           
  1640                           ; BSR set to: 1
  1641                           ;thermo.c: 534: degrees = test_table[test_index];
  1642  0005DE  51C2               	movf	handle_test@test_index& (0+255),w,b
  1643  0005E0  0D01               	mullw	1
  1644  0005E2  0EB5               	movlw	low handle_test@test_table
  1645  0005E4  24F3               	addwf	prodl,w,c
  1646  0005E6  6ED9               	movwf	fsr2l,c
  1647  0005E8  0E01               	movlw	high handle_test@test_table
  1648  0005EA  20F4               	addwfc	prodh,w,c
  1649  0005EC  6EDA               	movwf	fsr2h,c
  1650  0005EE  50DF               	movf	indf2,w,c
  1651  0005F0  6E4C               	movwf	_degrees,c
  1652                           
  1653                           ; BSR set to: 1
  1654                           ;thermo.c: 535: test_index++;
  1655  0005F2  2BC2               	incf	handle_test@test_index& (0+255),f,b
  1656                           
  1657                           ; BSR set to: 1
  1658                           ;thermo.c: 536: draw_degrees();
  1659  0005F4  EC95  F001         	call	_draw_degrees	;wreg free
  1660                           
  1661                           ;thermo.c: 537: }
  1662  0005F8  D067               	goto	l209
  1663  0005FA                     l214:
  1664  0005FA  FFFF               	dw	65535	; assembler added errata NOP
  1665                           
  1666                           ;thermo.c: 538: else
  1667                           ;thermo.c: 539: {
  1668                           ;thermo.c: 540: time_hz = 250 / 4;
  1669  0005FC  0E00               	movlw	0
  1670  0005FE  0101               	movlb	1	; () banked
  1671  000600  6FC1               	movwf	(_time_hz+1)& (0+255),b
  1672  000602  0E3E               	movlw	62
  1673  000604  6FC0               	movwf	_time_hz& (0+255),b
  1674                           
  1675                           ; BSR set to: 1
  1676                           ;thermo.c: 541: test_state++;
  1677  000606  2BC3               	incf	_test_state& (0+255),f,b
  1678  000608                     l2100:
  1679  000608  FFFF               	dw	65535	; assembler added errata NOP
  1680                           
  1681                           ; BSR set to: 1
  1682                           ;thermo.c: 542: test_index = 0;
  1683  00060A  0E00               	movlw	0
  1684  00060C  6FC2               	movwf	handle_test@test_index& (0+255),b
  1685                           
  1686                           ; BSR set to: 1
  1687                           ;thermo.c: 543: }
  1688                           ;thermo.c: 544: }
  1689                           ;thermo.c: 545: break;
  1690                           
  1691                           ; BSR set to: 1
  1692  00060E  D05C               	goto	l209
  1693  000610  FFFF               	dw	65535	; assembler added errata NOP
  1694                           
  1695                           ; BSR set to: 1
  1696                           ;thermo.c: 548: time_hz++;
  1697                           
  1698                           ; BSR set to: 1
  1699  000612  4BC0               	infsnz	_time_hz& (0+255),f,b
  1700  000614  2BC1               	incf	(_time_hz+1)& (0+255),f,b
  1701                           
  1702                           ; BSR set to: 1
  1703                           ;thermo.c: 549: if(time_hz >= 250 / 4)
  1704  000616  51C1               	movf	(_time_hz+1)& (0+255),w,b
  1705  000618  E104               	bnz	u1560
  1706  00061A  0E3E               	movlw	62
  1707  00061C  5DC0               	subwf	_time_hz& (0+255),w,b
  1708  00061E  A0D8               	btfss	status,0,c
  1709  000620  D053               	goto	l209
  1710  000622                     u1560:
  1711                           
  1712                           ; BSR set to: 1
  1713                           ;thermo.c: 550: {
  1714                           ;thermo.c: 551: time_hz = 0;
  1715  000622  0E00               	movlw	0
  1716  000624  6FC1               	movwf	(_time_hz+1)& (0+255),b
  1717  000626  0E00               	movlw	0
  1718  000628  6FC0               	movwf	_time_hz& (0+255),b
  1719                           
  1720                           ; BSR set to: 1
  1721                           ;thermo.c: 552: if(test_index < test_mask_size)
  1722  00062A  51B4               	movf	handle_test@test_mask_size& (0+255),w,b
  1723  00062C  5DC2               	subwf	handle_test@test_index& (0+255),w,b
  1724  00062E  B0D8               	btfsc	status,0,c
  1725  000630  D038               	goto	l218
  1726                           
  1727                           ; BSR set to: 1
  1728                           ;thermo.c: 553: {
  1729                           ;thermo.c: 554: led_mask0 = test_mask[test_index][0];
  1730  000632  51C2               	movf	handle_test@test_index& (0+255),w,b
  1731  000634  0D04               	mullw	4
  1732  000636  0E00               	movlw	low handle_test@test_mask
  1733  000638  24F3               	addwf	prodl,w,c
  1734  00063A  6ED9               	movwf	fsr2l,c
  1735  00063C  0E01               	movlw	high handle_test@test_mask
  1736  00063E  20F4               	addwfc	prodh,w,c
  1737  000640  6EDA               	movwf	fsr2h,c
  1738  000642  50DF               	movf	indf2,w,c
  1739  000644  6E43               	movwf	_led_mask0,c
  1740                           
  1741                           ;thermo.c: 555: led_mask1 = test_mask[test_index][1];
  1742  000646  51C2               	movf	handle_test@test_index& (0+255),w,b
  1743  000648  0D04               	mullw	4
  1744  00064A  0E01               	movlw	1
  1745  00064C  26F3               	addwf	prodl,f,c
  1746  00064E  0E00               	movlw	0
  1747  000650  22F4               	addwfc	prodh,f,c
  1748  000652  0E00               	movlw	low handle_test@test_mask
  1749  000654  24F3               	addwf	prodl,w,c
  1750  000656  6ED9               	movwf	fsr2l,c
  1751  000658  0E01               	movlw	high handle_test@test_mask
  1752  00065A  20F4               	addwfc	prodh,w,c
  1753  00065C  6EDA               	movwf	fsr2h,c
  1754  00065E  50DF               	movf	indf2,w,c
  1755  000660  6E42               	movwf	_led_mask1,c
  1756                           
  1757                           ;thermo.c: 556: led_mask2 = test_mask[test_index][2];
  1758  000662  51C2               	movf	handle_test@test_index& (0+255),w,b
  1759  000664  0D04               	mullw	4
  1760  000666  0E02               	movlw	2
  1761  000668  26F3               	addwf	prodl,f,c
  1762  00066A  0E00               	movlw	0
  1763  00066C  22F4               	addwfc	prodh,f,c
  1764  00066E  0E00               	movlw	low handle_test@test_mask
  1765  000670  24F3               	addwf	prodl,w,c
  1766  000672  6ED9               	movwf	fsr2l,c
  1767  000674  0E01               	movlw	high handle_test@test_mask
  1768  000676  20F4               	addwfc	prodh,w,c
  1769  000678  6EDA               	movwf	fsr2h,c
  1770  00067A  50DF               	movf	indf2,w,c
  1771  00067C  6E41               	movwf	_led_mask2,c
  1772                           
  1773                           ;thermo.c: 557: led_mask3 = test_mask[test_index][3];
  1774  00067E  51C2               	movf	handle_test@test_index& (0+255),w,b
  1775  000680  0D04               	mullw	4
  1776  000682  0E03               	movlw	3
  1777  000684  26F3               	addwf	prodl,f,c
  1778  000686  0E00               	movlw	0
  1779  000688  22F4               	addwfc	prodh,f,c
  1780  00068A  0E00               	movlw	low handle_test@test_mask
  1781  00068C  24F3               	addwf	prodl,w,c
  1782  00068E  6ED9               	movwf	fsr2l,c
  1783  000690  0E01               	movlw	high handle_test@test_mask
  1784  000692  20F4               	addwfc	prodh,w,c
  1785  000694  6EDA               	movwf	fsr2h,c
  1786  000696  50DF               	movf	indf2,w,c
  1787  000698  6E40               	movwf	_led_mask3,c
  1788                           
  1789                           ; BSR set to: 1
  1790                           ;thermo.c: 558: test_index++;
  1791  00069A  2BC2               	incf	handle_test@test_index& (0+255),f,b
  1792                           
  1793                           ; BSR set to: 1
  1794                           ;thermo.c: 559: write_leds();
  1795  00069C  EC5D  F006         	call	_write_leds	;wreg free
  1796                           
  1797                           ;thermo.c: 560: }
  1798  0006A0  D013               	goto	l209
  1799  0006A2                     l218:
  1800  0006A2  FFFF               	dw	65535	; assembler added errata NOP
  1801                           
  1802                           ;thermo.c: 561: else
  1803                           ;thermo.c: 562: {
  1804                           ;thermo.c: 563: test_state = 0;
  1805  0006A4  0E00               	movlw	0
  1806  0006A6  0101               	movlb	1	; () banked
  1807  0006A8  6FC3               	movwf	_test_state& (0+255),b
  1808                           
  1809                           ; BSR set to: 1
  1810                           ;thermo.c: 568: }
  1811                           
  1812                           ; BSR set to: 1
  1813                           ;thermo.c: 564: }
  1814                           ;thermo.c: 565: }
  1815                           ;thermo.c: 566: break;
  1816                           
  1817                           ; BSR set to: 1
  1818  0006AA  D00E               	goto	l209
  1819  0006AC                     l207:
  1820  0006AC  FFFF               	dw	65535	; assembler added errata NOP
  1821                           
  1822                           ; BSR set to: 1
  1823                           
  1824                           ; BSR set to: 1
  1825  0006AE  51C3               	movf	_test_state& (0+255),w,b
  1826                           
  1827                           ; Switch size 1, requested type "space"
  1828                           ; Number of cases is 4, Range of values is 0 to 3
  1829                           ; switch strategies available:
  1830                           ; Name         Instructions Cycles
  1831                           ; simple_byte           13     7 (average)
  1832                           ;	Chosen strategy is simple_byte
  1833  0006B0  0A00               	xorlw	0	; case 0
  1834  0006B2  B4D8               	btfsc	status,2,c
  1835  0006B4  D763               	goto	l208
  1836  0006B6  0A01               	xorlw	1	; case 1
  1837  0006B8  B4D8               	btfsc	status,2,c
  1838  0006BA  D772               	goto	l210
  1839  0006BC  0A03               	xorlw	3	; case 2
  1840  0006BE  B4D8               	btfsc	status,2,c
  1841  0006C0  D77E               	goto	l212
  1842  0006C2  0A01               	xorlw	1	; case 3
  1843  0006C4  B4D8               	btfsc	status,2,c
  1844  0006C6  D7A4               	goto	l216
  1845  0006C8                     l209:
  1846  0006C8  FFFF               	dw	65535	; assembler added errata NOP
  1847                           
  1848                           ; BSR set to: 1
  1849  0006CA  0012               	return		;funcret
  1850  0006CC  FFFF               	dw	65535	; errata NOP
  1851  0006CE                     __end_of_handle_test:
  1852                           	opt stack 0
  1853                           tosu	equ	0xFFF
  1854                           tosh	equ	0xFFE
  1855                           tosl	equ	0xFFD
  1856                           pclath	equ	0xFFA
  1857                           tblptru	equ	0xFF8
  1858                           tblptrh	equ	0xFF7
  1859                           tblptrl	equ	0xFF6
  1860                           tablat	equ	0xFF5
  1861                           prodh	equ	0xFF4
  1862                           prodl	equ	0xFF3
  1863                           intcon	equ	0xFF2
  1864                           intcon2	equ	0xFF1
  1865                           postinc0	equ	0xFEE
  1866                           wreg	equ	0xFE8
  1867                           postdec1	equ	0xFE5
  1868                           fsr1h	equ	0xFE2
  1869                           fsr1l	equ	0xFE1
  1870                           indf2	equ	0xFDF
  1871                           postinc2	equ	0xFDE
  1872                           fsr2h	equ	0xFDA
  1873                           fsr2l	equ	0xFD9
  1874                           status	equ	0xFD8
  1875                           
  1876 ;; *************** function _get_key *****************
  1877 ;; Defined at:
  1878 ;;		line 712 in file "thermo.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;		None
  1881 ;; Auto vars:     Size  Location     Type
  1882 ;;		None
  1883 ;; Return value:  Size  Location     Type
  1884 ;;                  1    wreg      void 
  1885 ;; Registers used:
  1886 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1887 ;; Tracked objects:
  1888 ;;		On entry : 0/0
  1889 ;;		On exit  : 0/0
  1890 ;;		Unchanged: 0/0
  1891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1896 ;;Total ram usage:        0 bytes
  1897 ;; Hardware stack levels used:    1
  1898 ;; Hardware stack levels required when called:    1
  1899 ;; This function calls:
  1900 ;;		Nothing
  1901 ;; This function is called by:
  1902 ;;		_get_temp
  1903 ;;		_main
  1904 ;; This function uses a non-reentrant model
  1905 ;;
  1906                           
  1907                           	psect	text3
  1908  000B3C                     __ptext3:
  1909                           	opt stack 0
  1910  000B3C                     _get_key:
  1911                           	opt stack 0
  1912  000B3C  FFFF               	dw	65535	; assembler added errata NOP
  1913                           
  1914                           ;thermo.c: 715: if(serial_in == PACKET_KEY[key_offset])
  1915                           
  1916                           ;incstack = 0
  1917  000B3E  5046               	movf	_key_offset,w,c
  1918  000B40  0D01               	mullw	1
  1919  000B42  0EBF               	movlw	low _PACKET_KEY
  1920  000B44  24F3               	addwf	prodl,w,c
  1921  000B46  6EF6               	movwf	tblptrl,c
  1922  000B48  0EBF               	movlw	high _PACKET_KEY
  1923  000B4A  20F4               	addwfc	prodh,w,c
  1924  000B4C  6EF7               	movwf	tblptrh,c
  1925  000B4E                     	if	0	;There are less than 3 active tblptr bytes
  1926  000B4E                     	endif
  1927  000B4E  0008               	tblrd		*
  1928  000B50  FFFF               	dw	65535	; errata NOP
  1929  000B52  50F5               	movf	tablat,w,c
  1930  000B54  1847               	xorwf	_serial_in,w,c
  1931  000B56  A4D8               	btfss	status,2,c
  1932  000B58  D00B               	goto	l239
  1933                           
  1934                           ;thermo.c: 716: {
  1935                           ;thermo.c: 717: key_offset++;
  1936  000B5A  2A46               	incf	_key_offset,f,c
  1937                           
  1938                           ;thermo.c: 718: if(key_offset >= sizeof(PACKET_KEY))
  1939  000B5C  0E0F               	movlw	15
  1940  000B5E  6446               	cpfsgt	_key_offset,c
  1941  000B60  D01B               	goto	l244
  1942                           
  1943                           ;thermo.c: 719: {
  1944                           ;thermo.c: 720: handle_serial = get_temp;
  1945  000B62  0EE6               	movlw	low _get_temp
  1946  000B64  6E49               	movwf	_handle_serial,c
  1947  000B66  0E07               	movlw	high _get_temp
  1948  000B68  6E4A               	movwf	_handle_serial+1,c
  1949                           
  1950                           ;thermo.c: 721: data_offset = 0;
  1951  000B6A  0E00               	movlw	0
  1952  000B6C  6E45               	movwf	_data_offset,c
  1953                           
  1954                           ;thermo.c: 722: }
  1955                           ;thermo.c: 723: }
  1956  000B6E  D014               	goto	l244
  1957  000B70                     l239:
  1958  000B70  FFFF               	dw	65535	; assembler added errata NOP
  1959                           
  1960                           ;thermo.c: 724: else
  1961                           ;thermo.c: 725: if(serial_in == PACKET_KEY[0])
  1962  000B72  0EBF               	movlw	low _PACKET_KEY
  1963  000B74  6EF6               	movwf	tblptrl,c
  1964  000B76                     	if	1	;There is more than 1 active tblptr byte
  1965  000B76  0EBF               	movlw	high _PACKET_KEY
  1966  000B78  6EF7               	movwf	tblptrh,c
  1967  000B7A                     	endif
  1968  000B7A                     	if	0	;There are less than 3 active tblptr bytes
  1969  000B7A                     	endif
  1970  000B7A  0008               	tblrd		*
  1971  000B7C  FFFF               	dw	65535	; errata NOP
  1972  000B7E  50F5               	movf	tablat,w,c
  1973  000B80  1847               	xorwf	_serial_in,w,c
  1974  000B82  A4D8               	btfss	status,2,c
  1975  000B84  D002               	goto	l242
  1976                           
  1977                           ;thermo.c: 726: {
  1978                           ;thermo.c: 727: key_offset = 1;
  1979  000B86  0E01               	movlw	1
  1980  000B88  D005               	goto	L1
  1981  000B8A                     l242:
  1982  000B8A  FFFF               	dw	65535	; assembler added errata NOP
  1983                           
  1984                           ;thermo.c: 729: else
  1985                           ;thermo.c: 730: if(key_offset > 0)
  1986  000B8C  5046               	movf	_key_offset,w,c
  1987  000B8E  B4D8               	btfsc	status,2,c
  1988  000B90  D003               	goto	l244
  1989                           
  1990                           ;thermo.c: 731: {
  1991                           ;thermo.c: 735: key_offset = 0;
  1992  000B92  0E00               	movlw	0
  1993  000B94                     L1:
  1994  000B94  FFFF               	dw	65535	; assembler added errata NOP
  1995  000B96  6E46               	movwf	_key_offset,c
  1996  000B98                     l244:
  1997  000B98  FFFF               	dw	65535	; assembler added errata NOP
  1998  000B9A  0012               	return		;funcret
  1999  000B9C  FFFF               	dw	65535	; errata NOP
  2000  000B9E                     __end_of_get_key:
  2001                           	opt stack 0
  2002                           tosu	equ	0xFFF
  2003                           tosh	equ	0xFFE
  2004                           tosl	equ	0xFFD
  2005                           pclath	equ	0xFFA
  2006                           tblptru	equ	0xFF8
  2007                           tblptrh	equ	0xFF7
  2008                           tblptrl	equ	0xFF6
  2009                           tablat	equ	0xFF5
  2010                           prodh	equ	0xFF4
  2011                           prodl	equ	0xFF3
  2012                           intcon	equ	0xFF2
  2013                           intcon2	equ	0xFF1
  2014                           postinc0	equ	0xFEE
  2015                           wreg	equ	0xFE8
  2016                           postdec1	equ	0xFE5
  2017                           fsr1h	equ	0xFE2
  2018                           fsr1l	equ	0xFE1
  2019                           indf2	equ	0xFDF
  2020                           postinc2	equ	0xFDE
  2021                           fsr2h	equ	0xFDA
  2022                           fsr2l	equ	0xFD9
  2023                           status	equ	0xFD8
  2024                           
  2025 ;; *************** function _get_temp *****************
  2026 ;; Defined at:
  2027 ;;		line 667 in file "thermo.c"
  2028 ;; Parameters:    Size  Location     Type
  2029 ;;		None
  2030 ;; Auto vars:     Size  Location     Type
  2031 ;;  i               1    6[BANK0 ] unsigned char 
  2032 ;;  failed          1    5[BANK0 ] unsigned char 
  2033 ;; Return value:  Size  Location     Type
  2034 ;;                  1    wreg      void 
  2035 ;; Registers used:
  2036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2037 ;; Tracked objects:
  2038 ;;		On entry : 0/0
  2039 ;;		On exit  : 0/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2043 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2044 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2045 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2046 ;;Total ram usage:        3 bytes
  2047 ;; Hardware stack levels used:    1
  2048 ;; Hardware stack levels required when called:    4
  2049 ;; This function calls:
  2050 ;;		_draw_degrees
  2051 ;;		_print_byte
  2052 ;;		_print_number
  2053 ;;		_print_text
  2054 ;; This function is called by:
  2055 ;;		_get_key
  2056 ;;		_main
  2057 ;; This function uses a non-reentrant model
  2058 ;;
  2059                           
  2060                           	psect	text4
  2061  0007E6                     __ptext4:
  2062                           	opt stack 0
  2063  0007E6                     _get_temp:
  2064                           	opt stack 0
  2065  0007E6  FFFF               	dw	65535	; assembler added errata NOP
  2066                           
  2067                           ;thermo.c: 670: serial_data[data_offset++] = serial_in;
  2068                           
  2069                           ;incstack = 0
  2070  0007E8  5045               	movf	_data_offset,w,c
  2071  0007EA  0D01               	mullw	1
  2072  0007EC  0E2D               	movlw	low _serial_data
  2073  0007EE  24F3               	addwf	prodl,w,c
  2074  0007F0  6ED9               	movwf	fsr2l,c
  2075  0007F2  0E00               	movlw	high _serial_data
  2076  0007F4  20F4               	addwfc	prodh,w,c
  2077  0007F6  6EDA               	movwf	fsr2h,c
  2078  0007F8  C047  FFDF         	movff	_serial_in,indf2
  2079  0007FC  2A45               	incf	_data_offset,f,c
  2080                           
  2081                           ;thermo.c: 671: if(data_offset >= 4)
  2082  0007FE  0E03               	movlw	3
  2083  000800  6445               	cpfsgt	_data_offset,c
  2084  000802  D04D               	goto	l233
  2085                           
  2086                           ;thermo.c: 672: {
  2087                           ;thermo.c: 673: key_offset = 0;
  2088  000804  0E00               	movlw	0
  2089  000806  6E46               	movwf	_key_offset,c
  2090                           
  2091                           ;thermo.c: 674: handle_serial = get_key;
  2092  000808  0E3C               	movlw	low _get_key
  2093  00080A  6E49               	movwf	_handle_serial,c
  2094  00080C  0E0B               	movlw	high _get_key
  2095  00080E  6E4A               	movwf	_handle_serial+1,c
  2096                           
  2097                           ;thermo.c: 676: uint8_t i;
  2098                           ;thermo.c: 677: uint8_t failed = 0;
  2099  000810  0E00               	movlw	0
  2100  000812  0100               	movlb	0	; () banked
  2101  000814  6FD1               	movwf	get_temp@failed& (0+255),b
  2102                           
  2103                           ; BSR set to: 0
  2104                           ;thermo.c: 678: for(i = 1; i < 4; i++)
  2105  000816  0E01               	movlw	1
  2106  000818  6FD2               	movwf	get_temp@i& (0+255),b
  2107  00081A                     l2154:
  2108  00081A  FFFF               	dw	65535	; assembler added errata NOP
  2109                           
  2110                           ; BSR set to: 0
  2111  00081C  0E03               	movlw	3
  2112  00081E  65D2               	cpfsgt	get_temp@i& (0+255),b
  2113  000820  D001               	goto	l230
  2114  000822  D013               	goto	u1630
  2115  000824                     l230:
  2116  000824  FFFF               	dw	65535	; assembler added errata NOP
  2117                           
  2118                           ; BSR set to: 0
  2119                           ;thermo.c: 679: {
  2120                           ;thermo.c: 680: if(serial_data[0] != serial_data[i])
  2121                           
  2122                           ; BSR set to: 0
  2123  000826  51D2               	movf	get_temp@i& (0+255),w,b
  2124  000828  0D01               	mullw	1
  2125  00082A  0E2D               	movlw	low _serial_data
  2126  00082C  24F3               	addwf	prodl,w,c
  2127  00082E  6ED9               	movwf	fsr2l,c
  2128  000830  0E00               	movlw	high _serial_data
  2129  000832  20F4               	addwfc	prodh,w,c
  2130  000834  6EDA               	movwf	fsr2h,c
  2131  000836  502D               	movf	_serial_data,w,c
  2132  000838  18DE               	xorwf	postinc2,w,c
  2133  00083A  B4D8               	btfsc	status,2,c
  2134  00083C  D003               	goto	l232
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;thermo.c: 681: {
  2138                           ;thermo.c: 683: failed = 1;
  2139  00083E  0E01               	movlw	1
  2140  000840  6FD1               	movwf	get_temp@failed& (0+255),b
  2141                           
  2142                           ;thermo.c: 684: break;
  2143  000842  D003               	goto	u1630
  2144  000844                     l232:
  2145  000844  FFFF               	dw	65535	; assembler added errata NOP
  2146                           
  2147                           ; BSR set to: 0
  2148                           
  2149                           ; BSR set to: 0
  2150  000846  2BD2               	incf	get_temp@i& (0+255),f,b
  2151  000848  D7E8               	goto	l2154
  2152  00084A                     u1630:
  2153  00084A  FFFF               	dw	65535	; assembler added errata NOP
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;thermo.c: 685: }
  2157                           ;thermo.c: 686: }
  2158                           ;thermo.c: 689: if(!failed)
  2159                           
  2160                           ; BSR set to: 0
  2161  00084C  51D1               	movf	get_temp@failed& (0+255),w,b
  2162  00084E  A4D8               	btfss	status,2,c
  2163  000850  D026               	goto	l233
  2164                           
  2165                           ; BSR set to: 0
  2166                           ;thermo.c: 690: {
  2167                           ;thermo.c: 691: timeout_counter = 0;
  2168  000852  0E00               	movlw	0
  2169  000854  6E44               	movwf	_timeout_counter,c
  2170                           
  2171                           ; BSR set to: 0
  2172                           ;thermo.c: 692: degrees = serial_data[0];
  2173  000856  C02D  F04C         	movff	_serial_data,_degrees
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;thermo.c: 693: if(degrees == 0xff)
  2177  00085A  284C               	incf	_degrees,w,c
  2178  00085C  A4D8               	btfss	status,2,c
  2179  00085E  D002               	goto	l234
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;thermo.c: 694: {
  2183                           ;thermo.c: 695: invalid = 1;
  2184  000860  0E01               	movlw	1
  2185  000862  D002               	goto	L2
  2186  000864                     l234:
  2187  000864  FFFF               	dw	65535	; assembler added errata NOP
  2188                           
  2189                           ; BSR set to: 0
  2190                           ;thermo.c: 697: else
  2191                           ;thermo.c: 698: {
  2192                           ;thermo.c: 699: invalid = 0;
  2193                           
  2194                           ; BSR set to: 0
  2195  000866  0E00               	movlw	0
  2196  000868                     L2:
  2197  000868  FFFF               	dw	65535	; assembler added errata NOP
  2198  00086A  6E4B               	movwf	_invalid,c
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;thermo.c: 700: }
  2202                           ;thermo.c: 703: print_text("get_temp ");
  2203                           
  2204                           ; BSR set to: 0
  2205  00086C  0EF1               	movlw	low STR_1
  2206  00086E  6E14               	movwf	print_text@s,c
  2207  000870  0EBF               	movlw	high STR_1
  2208  000872  6E15               	movwf	print_text@s+1,c
  2209  000874  EC18  F006         	call	_print_text	;wreg free
  2210                           
  2211                           ;thermo.c: 704: print_text("F=");
  2212  000878  0EFB               	movlw	low STR_2
  2213  00087A  6E14               	movwf	print_text@s,c
  2214  00087C  0EBF               	movlw	high STR_2
  2215  00087E  6E15               	movwf	print_text@s+1,c
  2216  000880  EC18  F006         	call	_print_text	;wreg free
  2217                           
  2218                           ;thermo.c: 705: print_number(degrees);
  2219  000884  504C               	movf	_degrees,w,c
  2220  000886  0100               	movlb	0	; () banked
  2221  000888  6FCC               	movwf	print_number@number& (0+255),b
  2222  00088A  6BCD               	clrf	(print_number@number+1)& (0+255),b
  2223  00088C  6BCE               	clrf	(print_number@number+2)& (0+255),b
  2224  00088E  6BCF               	clrf	(print_number@number+3)& (0+255),b
  2225  000890  EC4D  F006         	call	_print_number	;wreg free
  2226                           
  2227                           ;thermo.c: 706: print_byte('\n');
  2228  000894  0E0A               	movlw	10
  2229  000896  ECFB  F005         	call	_print_byte
  2230                           
  2231                           ;thermo.c: 707: draw_degrees();
  2232  00089A  EC95  F001         	call	_draw_degrees	;wreg free
  2233  00089E                     l233:
  2234  00089E  FFFF               	dw	65535	; assembler added errata NOP
  2235  0008A0  0012               	return		;funcret
  2236  0008A2  FFFF               	dw	65535	; errata NOP
  2237  0008A4                     __end_of_get_temp:
  2238                           	opt stack 0
  2239                           tosu	equ	0xFFF
  2240                           tosh	equ	0xFFE
  2241                           tosl	equ	0xFFD
  2242                           pclath	equ	0xFFA
  2243                           tblptru	equ	0xFF8
  2244                           tblptrh	equ	0xFF7
  2245                           tblptrl	equ	0xFF6
  2246                           tablat	equ	0xFF5
  2247                           prodh	equ	0xFF4
  2248                           prodl	equ	0xFF3
  2249                           intcon	equ	0xFF2
  2250                           intcon2	equ	0xFF1
  2251                           postinc0	equ	0xFEE
  2252                           wreg	equ	0xFE8
  2253                           postdec1	equ	0xFE5
  2254                           fsr1h	equ	0xFE2
  2255                           fsr1l	equ	0xFE1
  2256                           indf2	equ	0xFDF
  2257                           postinc2	equ	0xFDE
  2258                           fsr2h	equ	0xFDA
  2259                           fsr2l	equ	0xFD9
  2260                           status	equ	0xFD8
  2261                           
  2262 ;; *************** function _print_text *****************
  2263 ;; Defined at:
  2264 ;;		line 282 in file "thermo.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;  s               2   19[COMRAM] PTR const unsigned char 
  2267 ;;		 -> STR_4(2), STR_3(26), STR_2(3), STR_1(10), 
  2268 ;; Auto vars:     Size  Location     Type
  2269 ;;		None
  2270 ;; Return value:  Size  Location     Type
  2271 ;;                  1    wreg      void 
  2272 ;; Registers used:
  2273 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2274 ;; Tracked objects:
  2275 ;;		On entry : 0/0
  2276 ;;		On exit  : 0/0
  2277 ;;		Unchanged: 0/0
  2278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2279 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2282 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2283 ;;Total ram usage:        2 bytes
  2284 ;; Hardware stack levels used:    1
  2285 ;; Hardware stack levels required when called:    2
  2286 ;; This function calls:
  2287 ;;		_print_byte
  2288 ;; This function is called by:
  2289 ;;		_get_temp
  2290 ;;		_main
  2291 ;; This function uses a non-reentrant model
  2292 ;;
  2293                           
  2294                           	psect	text5
  2295  000C30                     __ptext5:
  2296                           	opt stack 0
  2297  000C30                     _print_text:
  2298                           	opt stack 0
  2299  000C30  FFFF               	dw	65535	; assembler added errata NOP
  2300                           
  2301                           ;thermo.c: 284: while(*s != 0)
  2302                           
  2303                           ;incstack = 0
  2304  000C32  D00C               	goto	l122
  2305  000C34  FFFF               	dw	65535	; assembler added errata NOP
  2306                           
  2307                           ;thermo.c: 285: {
  2308                           ;thermo.c: 286: print_byte(*s);
  2309  000C36  C014  FFF6         	movff	print_text@s,tblptrl
  2310  000C3A  C015  FFF7         	movff	print_text@s+1,tblptrh
  2311  000C3E                     	if	0	;tblptru may be non-zero
  2312  000C3E                     	endif
  2313  000C3E                     	if	0	;tblptru may be non-zero
  2314  000C3E                     	endif
  2315  000C3E  0008               	tblrd		*
  2316  000C40  FFFF               	dw	65535	; errata NOP
  2317  000C42  50F5               	movf	tablat,w,c
  2318  000C44  ECFB  F005         	call	_print_byte
  2319                           
  2320                           ;thermo.c: 287: s++;
  2321  000C48  4A14               	infsnz	print_text@s,f,c
  2322  000C4A  2A15               	incf	print_text@s+1,f,c
  2323  000C4C                     l122:
  2324  000C4C  FFFF               	dw	65535	; assembler added errata NOP
  2325  000C4E  C014  FFF6         	movff	print_text@s,tblptrl
  2326  000C52  C015  FFF7         	movff	print_text@s+1,tblptrh
  2327  000C56                     	if	0	;tblptru may be non-zero
  2328  000C56                     	endif
  2329  000C56                     	if	0	;tblptru may be non-zero
  2330  000C56                     	endif
  2331  000C56  0008               	tblrd		*
  2332  000C58  FFFF               	dw	65535	; errata NOP
  2333  000C5A  50F5               	movf	tablat,w,c
  2334  000C5C  0900               	iorlw	0
  2335  000C5E  B4D8               	btfsc	status,2,c
  2336  000C60  0012               	return		;funcret
  2337  000C62  FFFF               	dw	65535	; assembler added errata NOP
  2338  000C64  D7E7               	goto	l123
  2339  000C66  FFFF               	dw	65535	; errata NOP
  2340  000C68                     __end_of_print_text:
  2341                           	opt stack 0
  2342                           tosu	equ	0xFFF
  2343                           tosh	equ	0xFFE
  2344                           tosl	equ	0xFFD
  2345                           pclath	equ	0xFFA
  2346                           tblptru	equ	0xFF8
  2347                           tblptrh	equ	0xFF7
  2348                           tblptrl	equ	0xFF6
  2349                           tablat	equ	0xFF5
  2350                           prodh	equ	0xFF4
  2351                           prodl	equ	0xFF3
  2352                           intcon	equ	0xFF2
  2353                           intcon2	equ	0xFF1
  2354                           postinc0	equ	0xFEE
  2355                           wreg	equ	0xFE8
  2356                           postdec1	equ	0xFE5
  2357                           fsr1h	equ	0xFE2
  2358                           fsr1l	equ	0xFE1
  2359                           indf2	equ	0xFDF
  2360                           postinc2	equ	0xFDE
  2361                           fsr2h	equ	0xFDA
  2362                           fsr2l	equ	0xFD9
  2363                           status	equ	0xFD8
  2364                           
  2365 ;; *************** function _print_number *****************
  2366 ;; Defined at:
  2367 ;;		line 310 in file "thermo.c"
  2368 ;; Parameters:    Size  Location     Type
  2369 ;;  number          4    0[BANK0 ] unsigned long 
  2370 ;; Auto vars:     Size  Location     Type
  2371 ;;		None
  2372 ;; Return value:  Size  Location     Type
  2373 ;;                  1    wreg      void 
  2374 ;; Registers used:
  2375 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2376 ;; Tracked objects:
  2377 ;;		On entry : 0/0
  2378 ;;		On exit  : 0/0
  2379 ;;		Unchanged: 0/0
  2380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2381 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2384 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2385 ;;Total ram usage:        4 bytes
  2386 ;; Hardware stack levels used:    1
  2387 ;; Hardware stack levels required when called:    3
  2388 ;; This function calls:
  2389 ;;		_print_byte
  2390 ;;		_print_number_nospace
  2391 ;; This function is called by:
  2392 ;;		_get_temp
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           	psect	text6
  2397  000C9A                     __ptext6:
  2398                           	opt stack 0
  2399  000C9A                     _print_number:
  2400                           	opt stack 0
  2401  000C9A  FFFF               	dw	65535	; assembler added errata NOP
  2402                           
  2403                           ;thermo.c: 312: print_number_nospace(number);
  2404                           
  2405                           ;incstack = 0
  2406  000C9C  C0CC  F029         	movff	print_number@number,print_number_nospace@number
  2407  000CA0  C0CD  F02A         	movff	print_number@number+1,print_number_nospace@number+1
  2408  000CA4  C0CE  F02B         	movff	print_number@number+2,print_number_nospace@number+2
  2409  000CA8  C0CF  F02C         	movff	print_number@number+3,print_number_nospace@number+3
  2410  000CAC  EC65  F000         	call	_print_number_nospace	;wreg free
  2411                           
  2412                           ;thermo.c: 313: print_byte(' ');
  2413  000CB0  0E20               	movlw	32
  2414  000CB2  ECFB  F005         	call	_print_byte
  2415  000CB6  0012               	return		;funcret
  2416  000CB8  FFFF               	dw	65535	; errata NOP
  2417  000CBA                     __end_of_print_number:
  2418                           	opt stack 0
  2419                           tosu	equ	0xFFF
  2420                           tosh	equ	0xFFE
  2421                           tosl	equ	0xFFD
  2422                           pclath	equ	0xFFA
  2423                           tblptru	equ	0xFF8
  2424                           tblptrh	equ	0xFF7
  2425                           tblptrl	equ	0xFF6
  2426                           tablat	equ	0xFF5
  2427                           prodh	equ	0xFF4
  2428                           prodl	equ	0xFF3
  2429                           intcon	equ	0xFF2
  2430                           intcon2	equ	0xFF1
  2431                           postinc0	equ	0xFEE
  2432                           wreg	equ	0xFE8
  2433                           postdec1	equ	0xFE5
  2434                           fsr1h	equ	0xFE2
  2435                           fsr1l	equ	0xFE1
  2436                           indf2	equ	0xFDF
  2437                           postinc2	equ	0xFDE
  2438                           fsr2h	equ	0xFDA
  2439                           fsr2l	equ	0xFD9
  2440                           status	equ	0xFD8
  2441                           
  2442 ;; *************** function _print_number_nospace *****************
  2443 ;; Defined at:
  2444 ;;		line 292 in file "thermo.c"
  2445 ;; Parameters:    Size  Location     Type
  2446 ;;  number          4   40[COMRAM] unsigned long 
  2447 ;; Auto vars:     Size  Location     Type
  2448 ;;		None
  2449 ;; Return value:  Size  Location     Type
  2450 ;;                  1    wreg      void 
  2451 ;; Registers used:
  2452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2453 ;; Tracked objects:
  2454 ;;		On entry : 0/0
  2455 ;;		On exit  : 0/0
  2456 ;;		Unchanged: 0/0
  2457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2458 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2461 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2462 ;;Total ram usage:        4 bytes
  2463 ;; Hardware stack levels used:    1
  2464 ;; Hardware stack levels required when called:    2
  2465 ;; This function calls:
  2466 ;;		___lldiv
  2467 ;;		___llmod
  2468 ;;		_print_byte
  2469 ;; This function is called by:
  2470 ;;		_print_number
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474                           	psect	text7
  2475  0000CA                     __ptext7:
  2476                           	opt stack 0
  2477  0000CA                     _print_number_nospace:
  2478                           	opt stack 0
  2479  0000CA  FFFF               	dw	65535	; assembler added errata NOP
  2480                           
  2481                           ;thermo.c: 294: if(number >= 10000000) print_byte('0' + (number / 10000000));
  2482                           
  2483                           ;incstack = 0
  2484  0000CC  502C               	movf	print_number_nospace@number+3,w,c
  2485  0000CE  E108               	bnz	u1250
  2486  0000D0  0E80               	movlw	128
  2487  0000D2  5C29               	subwf	print_number_nospace@number,w,c
  2488  0000D4  0E96               	movlw	150
  2489  0000D6  582A               	subwfb	print_number_nospace@number+1,w,c
  2490  0000D8  0E98               	movlw	152
  2491  0000DA  582B               	subwfb	print_number_nospace@number+2,w,c
  2492  0000DC  A0D8               	btfss	status,0,c
  2493  0000DE  D016               	goto	l128
  2494  0000E0                     u1250:
  2495  0000E0  C029  F013         	movff	print_number_nospace@number,___lldiv@dividend
  2496  0000E4  C02A  F014         	movff	print_number_nospace@number+1,___lldiv@dividend+1
  2497  0000E8  C02B  F015         	movff	print_number_nospace@number+2,___lldiv@dividend+2
  2498  0000EC  C02C  F016         	movff	print_number_nospace@number+3,___lldiv@dividend+3
  2499  0000F0  0E80               	movlw	128
  2500  0000F2  6E17               	movwf	___lldiv@divisor,c
  2501  0000F4  0E96               	movlw	150
  2502  0000F6  6E18               	movwf	___lldiv@divisor+1,c
  2503  0000F8  0E98               	movlw	152
  2504  0000FA  6E19               	movwf	___lldiv@divisor+2,c
  2505  0000FC  0E00               	movlw	0
  2506  0000FE  6E1A               	movwf	___lldiv@divisor+3,c
  2507  000100  ECE6  F004         	call	___lldiv	;wreg free
  2508  000104  5013               	movf	?___lldiv,w,c
  2509  000106  0F30               	addlw	48
  2510  000108  ECFB  F005         	call	_print_byte
  2511  00010C                     l128:
  2512  00010C  FFFF               	dw	65535	; assembler added errata NOP
  2513                           
  2514                           ;thermo.c: 295: if(number >= 1000000) print_byte('0' + (number / 1000000));
  2515  00010E  502C               	movf	print_number_nospace@number+3,w,c
  2516  000110  E108               	bnz	u1260
  2517  000112  0E40               	movlw	64
  2518  000114  5C29               	subwf	print_number_nospace@number,w,c
  2519  000116  0E42               	movlw	66
  2520  000118  582A               	subwfb	print_number_nospace@number+1,w,c
  2521  00011A  0E0F               	movlw	15
  2522  00011C  582B               	subwfb	print_number_nospace@number+2,w,c
  2523  00011E  A0D8               	btfss	status,0,c
  2524  000120  D016               	goto	l129
  2525  000122                     u1260:
  2526  000122  C029  F013         	movff	print_number_nospace@number,___lldiv@dividend
  2527  000126  C02A  F014         	movff	print_number_nospace@number+1,___lldiv@dividend+1
  2528  00012A  C02B  F015         	movff	print_number_nospace@number+2,___lldiv@dividend+2
  2529  00012E  C02C  F016         	movff	print_number_nospace@number+3,___lldiv@dividend+3
  2530  000132  0E40               	movlw	64
  2531  000134  6E17               	movwf	___lldiv@divisor,c
  2532  000136  0E42               	movlw	66
  2533  000138  6E18               	movwf	___lldiv@divisor+1,c
  2534  00013A  0E0F               	movlw	15
  2535  00013C  6E19               	movwf	___lldiv@divisor+2,c
  2536  00013E  0E00               	movlw	0
  2537  000140  6E1A               	movwf	___lldiv@divisor+3,c
  2538  000142  ECE6  F004         	call	___lldiv	;wreg free
  2539  000146  5013               	movf	?___lldiv,w,c
  2540  000148  0F30               	addlw	48
  2541  00014A  ECFB  F005         	call	_print_byte
  2542  00014E                     l129:
  2543  00014E  FFFF               	dw	65535	; assembler added errata NOP
  2544                           
  2545                           ;thermo.c: 296: if(number >= 100000) print_byte('0' + (number / 100000));
  2546  000150  502C               	movf	print_number_nospace@number+3,w,c
  2547  000152  E108               	bnz	u1270
  2548  000154  0EA0               	movlw	160
  2549  000156  5C29               	subwf	print_number_nospace@number,w,c
  2550  000158  0E86               	movlw	134
  2551  00015A  582A               	subwfb	print_number_nospace@number+1,w,c
  2552  00015C  0E01               	movlw	1
  2553  00015E  582B               	subwfb	print_number_nospace@number+2,w,c
  2554  000160  A0D8               	btfss	status,0,c
  2555  000162  D016               	goto	l130
  2556  000164                     u1270:
  2557  000164  C029  F013         	movff	print_number_nospace@number,___lldiv@dividend
  2558  000168  C02A  F014         	movff	print_number_nospace@number+1,___lldiv@dividend+1
  2559  00016C  C02B  F015         	movff	print_number_nospace@number+2,___lldiv@dividend+2
  2560  000170  C02C  F016         	movff	print_number_nospace@number+3,___lldiv@dividend+3
  2561  000174  0EA0               	movlw	160
  2562  000176  6E17               	movwf	___lldiv@divisor,c
  2563  000178  0E86               	movlw	134
  2564  00017A  6E18               	movwf	___lldiv@divisor+1,c
  2565  00017C  0E01               	movlw	1
  2566  00017E  6E19               	movwf	___lldiv@divisor+2,c
  2567  000180  0E00               	movlw	0
  2568  000182  6E1A               	movwf	___lldiv@divisor+3,c
  2569  000184  ECE6  F004         	call	___lldiv	;wreg free
  2570  000188  5013               	movf	?___lldiv,w,c
  2571  00018A  0F30               	addlw	48
  2572  00018C  ECFB  F005         	call	_print_byte
  2573  000190                     l130:
  2574  000190  FFFF               	dw	65535	; assembler added errata NOP
  2575                           
  2576                           ;thermo.c: 297: if(number >= 10000) print_byte('0' + (number / 10000));
  2577  000192  502C               	movf	print_number_nospace@number+3,w,c
  2578  000194  102B               	iorwf	print_number_nospace@number+2,w,c
  2579  000196  E106               	bnz	u1280
  2580  000198  0E10               	movlw	16
  2581  00019A  5C29               	subwf	print_number_nospace@number,w,c
  2582  00019C  0E27               	movlw	39
  2583  00019E  582A               	subwfb	print_number_nospace@number+1,w,c
  2584  0001A0  A0D8               	btfss	status,0,c
  2585  0001A2  D016               	goto	l131
  2586  0001A4                     u1280:
  2587  0001A4  C029  F013         	movff	print_number_nospace@number,___lldiv@dividend
  2588  0001A8  C02A  F014         	movff	print_number_nospace@number+1,___lldiv@dividend+1
  2589  0001AC  C02B  F015         	movff	print_number_nospace@number+2,___lldiv@dividend+2
  2590  0001B0  C02C  F016         	movff	print_number_nospace@number+3,___lldiv@dividend+3
  2591  0001B4  0E10               	movlw	16
  2592  0001B6  6E17               	movwf	___lldiv@divisor,c
  2593  0001B8  0E27               	movlw	39
  2594  0001BA  6E18               	movwf	___lldiv@divisor+1,c
  2595  0001BC  0E00               	movlw	0
  2596  0001BE  6E19               	movwf	___lldiv@divisor+2,c
  2597  0001C0  0E00               	movlw	0
  2598  0001C2  6E1A               	movwf	___lldiv@divisor+3,c
  2599  0001C4  ECE6  F004         	call	___lldiv	;wreg free
  2600  0001C8  5013               	movf	?___lldiv,w,c
  2601  0001CA  0F30               	addlw	48
  2602  0001CC  ECFB  F005         	call	_print_byte
  2603  0001D0                     l131:
  2604  0001D0  FFFF               	dw	65535	; assembler added errata NOP
  2605                           
  2606                           ;thermo.c: 298: if(number >= 1000) print_byte('0' + ((number / 1000) % 10));
  2607  0001D2  502C               	movf	print_number_nospace@number+3,w,c
  2608  0001D4  102B               	iorwf	print_number_nospace@number+2,w,c
  2609  0001D6  E106               	bnz	u1290
  2610  0001D8  0EE8               	movlw	232
  2611  0001DA  5C29               	subwf	print_number_nospace@number,w,c
  2612  0001DC  0E03               	movlw	3
  2613  0001DE  582A               	subwfb	print_number_nospace@number+1,w,c
  2614  0001E0  A0D8               	btfss	status,0,c
  2615  0001E2  D028               	goto	l132
  2616  0001E4                     u1290:
  2617  0001E4  0EE8               	movlw	232
  2618  0001E6  6E17               	movwf	___lldiv@divisor,c
  2619  0001E8  0E03               	movlw	3
  2620  0001EA  6E18               	movwf	___lldiv@divisor+1,c
  2621  0001EC  0E00               	movlw	0
  2622  0001EE  6E19               	movwf	___lldiv@divisor+2,c
  2623  0001F0  0E00               	movlw	0
  2624  0001F2  6E1A               	movwf	___lldiv@divisor+3,c
  2625  0001F4  C029  F013         	movff	print_number_nospace@number,___lldiv@dividend
  2626  0001F8  C02A  F014         	movff	print_number_nospace@number+1,___lldiv@dividend+1
  2627  0001FC  C02B  F015         	movff	print_number_nospace@number+2,___lldiv@dividend+2
  2628  000200  C02C  F016         	movff	print_number_nospace@number+3,___lldiv@dividend+3
  2629  000204  ECE6  F004         	call	___lldiv	;wreg free
  2630  000208  C013  F020         	movff	?___lldiv,___llmod@dividend
  2631  00020C  C014  F021         	movff	?___lldiv+1,___llmod@dividend+1
  2632  000210  C015  F022         	movff	?___lldiv+2,___llmod@dividend+2
  2633  000214  C016  F023         	movff	?___lldiv+3,___llmod@dividend+3
  2634  000218  0E0A               	movlw	10
  2635  00021A  6E24               	movwf	___llmod@divisor,c
  2636  00021C  0E00               	movlw	0
  2637  00021E  6E25               	movwf	___llmod@divisor+1,c
  2638  000220  0E00               	movlw	0
  2639  000222  6E26               	movwf	___llmod@divisor+2,c
  2640  000224  0E00               	movlw	0
  2641  000226  6E27               	movwf	___llmod@divisor+3,c
  2642  000228  EC2E  F005         	call	___llmod	;wreg free
  2643  00022C  5020               	movf	?___llmod,w,c
  2644  00022E  0F30               	addlw	48
  2645  000230  ECFB  F005         	call	_print_byte
  2646  000234                     l132:
  2647  000234  FFFF               	dw	65535	; assembler added errata NOP
  2648                           
  2649                           ;thermo.c: 299: if(number >= 100) print_byte('0' + ((number / 100) % 10));
  2650  000236  502C               	movf	print_number_nospace@number+3,w,c
  2651  000238  102B               	iorwf	print_number_nospace@number+2,w,c
  2652  00023A  102A               	iorwf	print_number_nospace@number+1,w,c
  2653  00023C  E104               	bnz	u1300
  2654  00023E  0E64               	movlw	100
  2655  000240  5C29               	subwf	print_number_nospace@number,w,c
  2656  000242  A0D8               	btfss	status,0,c
  2657  000244  D028               	goto	l133
  2658  000246                     u1300:
  2659  000246  0E64               	movlw	100
  2660  000248  6E17               	movwf	___lldiv@divisor,c
  2661  00024A  0E00               	movlw	0
  2662  00024C  6E18               	movwf	___lldiv@divisor+1,c
  2663  00024E  0E00               	movlw	0
  2664  000250  6E19               	movwf	___lldiv@divisor+2,c
  2665  000252  0E00               	movlw	0
  2666  000254  6E1A               	movwf	___lldiv@divisor+3,c
  2667  000256  C029  F013         	movff	print_number_nospace@number,___lldiv@dividend
  2668  00025A  C02A  F014         	movff	print_number_nospace@number+1,___lldiv@dividend+1
  2669  00025E  C02B  F015         	movff	print_number_nospace@number+2,___lldiv@dividend+2
  2670  000262  C02C  F016         	movff	print_number_nospace@number+3,___lldiv@dividend+3
  2671  000266  ECE6  F004         	call	___lldiv	;wreg free
  2672  00026A  C013  F020         	movff	?___lldiv,___llmod@dividend
  2673  00026E  C014  F021         	movff	?___lldiv+1,___llmod@dividend+1
  2674  000272  C015  F022         	movff	?___lldiv+2,___llmod@dividend+2
  2675  000276  C016  F023         	movff	?___lldiv+3,___llmod@dividend+3
  2676  00027A  0E0A               	movlw	10
  2677  00027C  6E24               	movwf	___llmod@divisor,c
  2678  00027E  0E00               	movlw	0
  2679  000280  6E25               	movwf	___llmod@divisor+1,c
  2680  000282  0E00               	movlw	0
  2681  000284  6E26               	movwf	___llmod@divisor+2,c
  2682  000286  0E00               	movlw	0
  2683  000288  6E27               	movwf	___llmod@divisor+3,c
  2684  00028A  EC2E  F005         	call	___llmod	;wreg free
  2685  00028E  5020               	movf	?___llmod,w,c
  2686  000290  0F30               	addlw	48
  2687  000292  ECFB  F005         	call	_print_byte
  2688  000296                     l133:
  2689  000296  FFFF               	dw	65535	; assembler added errata NOP
  2690                           
  2691                           ;thermo.c: 300: if(number >= 10) print_byte('0' + ((number / 10) % 10));
  2692  000298  502C               	movf	print_number_nospace@number+3,w,c
  2693  00029A  102B               	iorwf	print_number_nospace@number+2,w,c
  2694  00029C  102A               	iorwf	print_number_nospace@number+1,w,c
  2695  00029E  E104               	bnz	u1310
  2696  0002A0  0E0A               	movlw	10
  2697  0002A2  5C29               	subwf	print_number_nospace@number,w,c
  2698  0002A4  A0D8               	btfss	status,0,c
  2699  0002A6  D028               	goto	l134
  2700  0002A8                     u1310:
  2701  0002A8  0E0A               	movlw	10
  2702  0002AA  6E17               	movwf	___lldiv@divisor,c
  2703  0002AC  0E00               	movlw	0
  2704  0002AE  6E18               	movwf	___lldiv@divisor+1,c
  2705  0002B0  0E00               	movlw	0
  2706  0002B2  6E19               	movwf	___lldiv@divisor+2,c
  2707  0002B4  0E00               	movlw	0
  2708  0002B6  6E1A               	movwf	___lldiv@divisor+3,c
  2709  0002B8  C029  F013         	movff	print_number_nospace@number,___lldiv@dividend
  2710  0002BC  C02A  F014         	movff	print_number_nospace@number+1,___lldiv@dividend+1
  2711  0002C0  C02B  F015         	movff	print_number_nospace@number+2,___lldiv@dividend+2
  2712  0002C4  C02C  F016         	movff	print_number_nospace@number+3,___lldiv@dividend+3
  2713  0002C8  ECE6  F004         	call	___lldiv	;wreg free
  2714  0002CC  C013  F020         	movff	?___lldiv,___llmod@dividend
  2715  0002D0  C014  F021         	movff	?___lldiv+1,___llmod@dividend+1
  2716  0002D4  C015  F022         	movff	?___lldiv+2,___llmod@dividend+2
  2717  0002D8  C016  F023         	movff	?___lldiv+3,___llmod@dividend+3
  2718  0002DC  0E0A               	movlw	10
  2719  0002DE  6E24               	movwf	___llmod@divisor,c
  2720  0002E0  0E00               	movlw	0
  2721  0002E2  6E25               	movwf	___llmod@divisor+1,c
  2722  0002E4  0E00               	movlw	0
  2723  0002E6  6E26               	movwf	___llmod@divisor+2,c
  2724  0002E8  0E00               	movlw	0
  2725  0002EA  6E27               	movwf	___llmod@divisor+3,c
  2726  0002EC  EC2E  F005         	call	___llmod	;wreg free
  2727  0002F0  5020               	movf	?___llmod,w,c
  2728  0002F2  0F30               	addlw	48
  2729  0002F4  ECFB  F005         	call	_print_byte
  2730  0002F8                     l134:
  2731  0002F8  FFFF               	dw	65535	; assembler added errata NOP
  2732                           
  2733                           ;thermo.c: 301: print_byte('0' + (number % 10));
  2734  0002FA  C029  F020         	movff	print_number_nospace@number,___llmod@dividend
  2735  0002FE  C02A  F021         	movff	print_number_nospace@number+1,___llmod@dividend+1
  2736  000302  C02B  F022         	movff	print_number_nospace@number+2,___llmod@dividend+2
  2737  000306  C02C  F023         	movff	print_number_nospace@number+3,___llmod@dividend+3
  2738  00030A  0E0A               	movlw	10
  2739  00030C  6E24               	movwf	___llmod@divisor,c
  2740  00030E  0E00               	movlw	0
  2741  000310  6E25               	movwf	___llmod@divisor+1,c
  2742  000312  0E00               	movlw	0
  2743  000314  6E26               	movwf	___llmod@divisor+2,c
  2744  000316  0E00               	movlw	0
  2745  000318  6E27               	movwf	___llmod@divisor+3,c
  2746  00031A  EC2E  F005         	call	___llmod	;wreg free
  2747  00031E  5020               	movf	?___llmod,w,c
  2748  000320  0F30               	addlw	48
  2749  000322  ECFB  F005         	call	_print_byte
  2750  000326  0012               	return		;funcret
  2751  000328  FFFF               	dw	65535	; errata NOP
  2752  00032A                     __end_of_print_number_nospace:
  2753                           	opt stack 0
  2754                           tosu	equ	0xFFF
  2755                           tosh	equ	0xFFE
  2756                           tosl	equ	0xFFD
  2757                           pclath	equ	0xFFA
  2758                           tblptru	equ	0xFF8
  2759                           tblptrh	equ	0xFF7
  2760                           tblptrl	equ	0xFF6
  2761                           tablat	equ	0xFF5
  2762                           prodh	equ	0xFF4
  2763                           prodl	equ	0xFF3
  2764                           intcon	equ	0xFF2
  2765                           intcon2	equ	0xFF1
  2766                           postinc0	equ	0xFEE
  2767                           wreg	equ	0xFE8
  2768                           postdec1	equ	0xFE5
  2769                           fsr1h	equ	0xFE2
  2770                           fsr1l	equ	0xFE1
  2771                           indf2	equ	0xFDF
  2772                           postinc2	equ	0xFDE
  2773                           fsr2h	equ	0xFDA
  2774                           fsr2l	equ	0xFD9
  2775                           status	equ	0xFD8
  2776                           
  2777 ;; *************** function _print_byte *****************
  2778 ;; Defined at:
  2779 ;;		line 269 in file "thermo.c"
  2780 ;; Parameters:    Size  Location     Type
  2781 ;;  c               1    wreg     unsigned char 
  2782 ;; Auto vars:     Size  Location     Type
  2783 ;;  c               1   18[COMRAM] unsigned char 
  2784 ;; Return value:  Size  Location     Type
  2785 ;;                  1    wreg      void 
  2786 ;; Registers used:
  2787 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2788 ;; Tracked objects:
  2789 ;;		On entry : 0/0
  2790 ;;		On exit  : 0/0
  2791 ;;		Unchanged: 0/0
  2792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2794 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2796 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2797 ;;Total ram usage:        1 bytes
  2798 ;; Hardware stack levels used:    1
  2799 ;; Hardware stack levels required when called:    1
  2800 ;; This function calls:
  2801 ;;		Nothing
  2802 ;; This function is called by:
  2803 ;;		_print_text
  2804 ;;		_print_number_nospace
  2805 ;;		_print_number
  2806 ;;		_get_temp
  2807 ;;		_print_number2
  2808 ;;		_print_hex2
  2809 ;;		_print_bin_nospace
  2810 ;;		_dump_leds
  2811 ;; This function uses a non-reentrant model
  2812 ;;
  2813                           
  2814                           	psect	text8
  2815  000BF6                     __ptext8:
  2816                           	opt stack 0
  2817  000BF6                     _print_byte:
  2818                           	opt stack 0
  2819  000BF6  FFFF               	dw	65535	; assembler added errata NOP
  2820                           
  2821                           ;incstack = 0
  2822                           ;print_byte@c stored from wreg
  2823  000BF8  6E13               	movwf	print_byte@c,c
  2824                           
  2825                           ;thermo.c: 271: if(uart_size < 1024)
  2826  000BFA  0E04               	movlw	4
  2827  000BFC  5C3E               	subwf	_uart_size+1,w,c
  2828  000BFE  B0D8               	btfsc	status,0,c
  2829  000C00  D014               	goto	l118
  2830                           
  2831                           ;thermo.c: 272: {
  2832                           ;thermo.c: 273: uart_buffer[uart_position1++] = c;
  2833  000C02  0EC4               	movlw	low _uart_buffer
  2834  000C04  243B               	addwf	_uart_position1,w,c
  2835  000C06  6ED9               	movwf	fsr2l,c
  2836  000C08  0E01               	movlw	high _uart_buffer
  2837  000C0A  203C               	addwfc	_uart_position1+1,w,c
  2838  000C0C  6EDA               	movwf	fsr2h,c
  2839  000C0E  C013  FFDF         	movff	print_byte@c,indf2
  2840  000C12  4A3B               	infsnz	_uart_position1,f,c
  2841  000C14  2A3C               	incf	_uart_position1+1,f,c
  2842                           
  2843                           ;thermo.c: 274: uart_size++;
  2844  000C16  4A3D               	infsnz	_uart_size,f,c
  2845  000C18  2A3E               	incf	_uart_size+1,f,c
  2846                           
  2847                           ;thermo.c: 275: if(uart_position1 >= 1024)
  2848  000C1A  0E04               	movlw	4
  2849  000C1C  5C3C               	subwf	_uart_position1+1,w,c
  2850  000C1E  A0D8               	btfss	status,0,c
  2851  000C20  D004               	goto	l118
  2852                           
  2853                           ;thermo.c: 276: {
  2854                           ;thermo.c: 277: uart_position1 = 0;
  2855  000C22  0E00               	movlw	0
  2856  000C24  6E3C               	movwf	_uart_position1+1,c
  2857  000C26  0E00               	movlw	0
  2858  000C28  6E3B               	movwf	_uart_position1,c
  2859  000C2A                     l118:
  2860  000C2A  FFFF               	dw	65535	; assembler added errata NOP
  2861  000C2C  0012               	return		;funcret
  2862  000C2E  FFFF               	dw	65535	; errata NOP
  2863  000C30                     __end_of_print_byte:
  2864                           	opt stack 0
  2865                           tosu	equ	0xFFF
  2866                           tosh	equ	0xFFE
  2867                           tosl	equ	0xFFD
  2868                           pclath	equ	0xFFA
  2869                           tblptru	equ	0xFF8
  2870                           tblptrh	equ	0xFF7
  2871                           tblptrl	equ	0xFF6
  2872                           tablat	equ	0xFF5
  2873                           prodh	equ	0xFF4
  2874                           prodl	equ	0xFF3
  2875                           intcon	equ	0xFF2
  2876                           intcon2	equ	0xFF1
  2877                           postinc0	equ	0xFEE
  2878                           wreg	equ	0xFE8
  2879                           postdec1	equ	0xFE5
  2880                           fsr1h	equ	0xFE2
  2881                           fsr1l	equ	0xFE1
  2882                           indf2	equ	0xFDF
  2883                           postinc2	equ	0xFDE
  2884                           fsr2h	equ	0xFDA
  2885                           fsr2l	equ	0xFD9
  2886                           status	equ	0xFD8
  2887                           
  2888 ;; *************** function ___llmod *****************
  2889 ;; Defined at:
  2890 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/llmod.c"
  2891 ;; Parameters:    Size  Location     Type
  2892 ;;  dividend        4   31[COMRAM] unsigned long 
  2893 ;;  divisor         4   35[COMRAM] unsigned long 
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;  counter         1   39[COMRAM] unsigned char 
  2896 ;; Return value:  Size  Location     Type
  2897 ;;                  4   31[COMRAM] unsigned long 
  2898 ;; Registers used:
  2899 ;;		wreg, status,2, status,0
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2905 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2906 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2908 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2909 ;;Total ram usage:        9 bytes
  2910 ;; Hardware stack levels used:    1
  2911 ;; Hardware stack levels required when called:    1
  2912 ;; This function calls:
  2913 ;;		Nothing
  2914 ;; This function is called by:
  2915 ;;		_print_number_nospace
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           	psect	text9
  2920  000A5C                     __ptext9:
  2921                           	opt stack 0
  2922  000A5C                     ___llmod:
  2923                           	opt stack 0
  2924  000A5C  FFFF               	dw	65535	; assembler added errata NOP
  2925                           
  2926                           ;incstack = 0
  2927  000A5E  5024               	movf	___llmod@divisor,w,c
  2928  000A60  1025               	iorwf	___llmod@divisor+1,w,c
  2929  000A62  1026               	iorwf	___llmod@divisor+2,w,c
  2930  000A64  1027               	iorwf	___llmod@divisor+3,w,c
  2931  000A66  B4D8               	btfsc	status,2,c
  2932  000A68  D028               	goto	l638
  2933  000A6A  0E01               	movlw	1
  2934  000A6C  6E28               	movwf	___llmod@counter,c
  2935  000A6E  D007               	goto	l633
  2936  000A70  FFFF               	dw	65535	; assembler added errata NOP
  2937  000A72  90D8               	bcf	status,0,c
  2938  000A74  3624               	rlcf	___llmod@divisor,f,c
  2939  000A76  3625               	rlcf	___llmod@divisor+1,f,c
  2940  000A78  3626               	rlcf	___llmod@divisor+2,f,c
  2941  000A7A  3627               	rlcf	___llmod@divisor+3,f,c
  2942  000A7C  2A28               	incf	___llmod@counter,f,c
  2943  000A7E                     l633:
  2944  000A7E  FFFF               	dw	65535	; assembler added errata NOP
  2945  000A80  AE27               	btfss	___llmod@divisor+3,7,c
  2946  000A82  D7F6               	goto	l634
  2947  000A84                     u1230:
  2948  000A84  FFFF               	dw	65535	; assembler added errata NOP
  2949  000A86  5024               	movf	___llmod@divisor,w,c
  2950  000A88  5C20               	subwf	___llmod@dividend,w,c
  2951  000A8A  5025               	movf	___llmod@divisor+1,w,c
  2952  000A8C  5821               	subwfb	___llmod@dividend+1,w,c
  2953  000A8E  5026               	movf	___llmod@divisor+2,w,c
  2954  000A90  5822               	subwfb	___llmod@dividend+2,w,c
  2955  000A92  5027               	movf	___llmod@divisor+3,w,c
  2956  000A94  5823               	subwfb	___llmod@dividend+3,w,c
  2957  000A96  A0D8               	btfss	status,0,c
  2958  000A98  D008               	goto	l637
  2959  000A9A  5024               	movf	___llmod@divisor,w,c
  2960  000A9C  5E20               	subwf	___llmod@dividend,f,c
  2961  000A9E  5025               	movf	___llmod@divisor+1,w,c
  2962  000AA0  5A21               	subwfb	___llmod@dividend+1,f,c
  2963  000AA2  5026               	movf	___llmod@divisor+2,w,c
  2964  000AA4  5A22               	subwfb	___llmod@dividend+2,f,c
  2965  000AA6  5027               	movf	___llmod@divisor+3,w,c
  2966  000AA8  5A23               	subwfb	___llmod@dividend+3,f,c
  2967  000AAA                     l637:
  2968  000AAA  FFFF               	dw	65535	; assembler added errata NOP
  2969  000AAC  90D8               	bcf	status,0,c
  2970  000AAE  3227               	rrcf	___llmod@divisor+3,f,c
  2971  000AB0  3226               	rrcf	___llmod@divisor+2,f,c
  2972  000AB2  3225               	rrcf	___llmod@divisor+1,f,c
  2973  000AB4  3224               	rrcf	___llmod@divisor,f,c
  2974  000AB6  2E28               	decfsz	___llmod@counter,f,c
  2975  000AB8  D7E5               	goto	u1230
  2976  000ABA                     l638:
  2977  000ABA  FFFF               	dw	65535	; assembler added errata NOP
  2978  000ABC  C020  F020         	movff	___llmod@dividend,?___llmod
  2979  000AC0  C021  F021         	movff	___llmod@dividend+1,?___llmod+1
  2980  000AC4  C022  F022         	movff	___llmod@dividend+2,?___llmod+2
  2981  000AC8  C023  F023         	movff	___llmod@dividend+3,?___llmod+3
  2982  000ACC  0012               	return		;funcret
  2983  000ACE  FFFF               	dw	65535	; errata NOP
  2984  000AD0                     __end_of___llmod:
  2985                           	opt stack 0
  2986                           tosu	equ	0xFFF
  2987                           tosh	equ	0xFFE
  2988                           tosl	equ	0xFFD
  2989                           pclath	equ	0xFFA
  2990                           tblptru	equ	0xFF8
  2991                           tblptrh	equ	0xFF7
  2992                           tblptrl	equ	0xFF6
  2993                           tablat	equ	0xFF5
  2994                           prodh	equ	0xFF4
  2995                           prodl	equ	0xFF3
  2996                           intcon	equ	0xFF2
  2997                           intcon2	equ	0xFF1
  2998                           postinc0	equ	0xFEE
  2999                           wreg	equ	0xFE8
  3000                           postdec1	equ	0xFE5
  3001                           fsr1h	equ	0xFE2
  3002                           fsr1l	equ	0xFE1
  3003                           indf2	equ	0xFDF
  3004                           postinc2	equ	0xFDE
  3005                           fsr2h	equ	0xFDA
  3006                           fsr2l	equ	0xFD9
  3007                           status	equ	0xFD8
  3008                           
  3009 ;; *************** function ___lldiv *****************
  3010 ;; Defined at:
  3011 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lldiv.c"
  3012 ;; Parameters:    Size  Location     Type
  3013 ;;  dividend        4   18[COMRAM] unsigned long 
  3014 ;;  divisor         4   22[COMRAM] unsigned long 
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;  quotient        4   26[COMRAM] unsigned long 
  3017 ;;  counter         1   30[COMRAM] unsigned char 
  3018 ;; Return value:  Size  Location     Type
  3019 ;;                  4   18[COMRAM] unsigned long 
  3020 ;; Registers used:
  3021 ;;		wreg, status,2, status,0
  3022 ;; Tracked objects:
  3023 ;;		On entry : 0/0
  3024 ;;		On exit  : 0/0
  3025 ;;		Unchanged: 0/0
  3026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3027 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3028 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3030 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3031 ;;Total ram usage:       13 bytes
  3032 ;; Hardware stack levels used:    1
  3033 ;; Hardware stack levels required when called:    1
  3034 ;; This function calls:
  3035 ;;		Nothing
  3036 ;; This function is called by:
  3037 ;;		_print_number_nospace
  3038 ;; This function uses a non-reentrant model
  3039 ;;
  3040                           
  3041                           	psect	text10
  3042  0009CC                     __ptext10:
  3043                           	opt stack 0
  3044  0009CC                     ___lldiv:
  3045                           	opt stack 0
  3046  0009CC  FFFF               	dw	65535	; assembler added errata NOP
  3047                           
  3048                           ;incstack = 0
  3049  0009CE  0E00               	movlw	0
  3050  0009D0  6E1B               	movwf	___lldiv@quotient,c
  3051  0009D2  0E00               	movlw	0
  3052  0009D4  6E1C               	movwf	___lldiv@quotient+1,c
  3053  0009D6  0E00               	movlw	0
  3054  0009D8  6E1D               	movwf	___lldiv@quotient+2,c
  3055  0009DA  0E00               	movlw	0
  3056  0009DC  6E1E               	movwf	___lldiv@quotient+3,c
  3057  0009DE  5017               	movf	___lldiv@divisor,w,c
  3058  0009E0  1018               	iorwf	___lldiv@divisor+1,w,c
  3059  0009E2  1019               	iorwf	___lldiv@divisor+2,w,c
  3060  0009E4  101A               	iorwf	___lldiv@divisor+3,w,c
  3061  0009E6  B4D8               	btfsc	status,2,c
  3062  0009E8  D02E               	goto	l628
  3063  0009EA  0E01               	movlw	1
  3064  0009EC  6E1F               	movwf	___lldiv@counter,c
  3065  0009EE  D007               	goto	l623
  3066  0009F0  FFFF               	dw	65535	; assembler added errata NOP
  3067  0009F2  90D8               	bcf	status,0,c
  3068  0009F4  3617               	rlcf	___lldiv@divisor,f,c
  3069  0009F6  3618               	rlcf	___lldiv@divisor+1,f,c
  3070  0009F8  3619               	rlcf	___lldiv@divisor+2,f,c
  3071  0009FA  361A               	rlcf	___lldiv@divisor+3,f,c
  3072  0009FC  2A1F               	incf	___lldiv@counter,f,c
  3073  0009FE                     l623:
  3074  0009FE  FFFF               	dw	65535	; assembler added errata NOP
  3075  000A00  AE1A               	btfss	___lldiv@divisor+3,7,c
  3076  000A02  D7F6               	goto	l624
  3077  000A04                     u1200:
  3078  000A04  FFFF               	dw	65535	; assembler added errata NOP
  3079  000A06  90D8               	bcf	status,0,c
  3080  000A08  361B               	rlcf	___lldiv@quotient,f,c
  3081  000A0A  361C               	rlcf	___lldiv@quotient+1,f,c
  3082  000A0C  361D               	rlcf	___lldiv@quotient+2,f,c
  3083  000A0E  361E               	rlcf	___lldiv@quotient+3,f,c
  3084  000A10  5017               	movf	___lldiv@divisor,w,c
  3085  000A12  5C13               	subwf	___lldiv@dividend,w,c
  3086  000A14  5018               	movf	___lldiv@divisor+1,w,c
  3087  000A16  5814               	subwfb	___lldiv@dividend+1,w,c
  3088  000A18  5019               	movf	___lldiv@divisor+2,w,c
  3089  000A1A  5815               	subwfb	___lldiv@dividend+2,w,c
  3090  000A1C  501A               	movf	___lldiv@divisor+3,w,c
  3091  000A1E  5816               	subwfb	___lldiv@dividend+3,w,c
  3092  000A20  A0D8               	btfss	status,0,c
  3093  000A22  D009               	goto	l627
  3094  000A24  5017               	movf	___lldiv@divisor,w,c
  3095  000A26  5E13               	subwf	___lldiv@dividend,f,c
  3096  000A28  5018               	movf	___lldiv@divisor+1,w,c
  3097  000A2A  5A14               	subwfb	___lldiv@dividend+1,f,c
  3098  000A2C  5019               	movf	___lldiv@divisor+2,w,c
  3099  000A2E  5A15               	subwfb	___lldiv@dividend+2,f,c
  3100  000A30  501A               	movf	___lldiv@divisor+3,w,c
  3101  000A32  5A16               	subwfb	___lldiv@dividend+3,f,c
  3102  000A34  801B               	bsf	___lldiv@quotient,0,c
  3103  000A36                     l627:
  3104  000A36  FFFF               	dw	65535	; assembler added errata NOP
  3105  000A38  90D8               	bcf	status,0,c
  3106  000A3A  321A               	rrcf	___lldiv@divisor+3,f,c
  3107  000A3C  3219               	rrcf	___lldiv@divisor+2,f,c
  3108  000A3E  3218               	rrcf	___lldiv@divisor+1,f,c
  3109  000A40  3217               	rrcf	___lldiv@divisor,f,c
  3110  000A42  2E1F               	decfsz	___lldiv@counter,f,c
  3111  000A44  D7DF               	goto	u1200
  3112  000A46                     l628:
  3113  000A46  FFFF               	dw	65535	; assembler added errata NOP
  3114  000A48  C01B  F013         	movff	___lldiv@quotient,?___lldiv
  3115  000A4C  C01C  F014         	movff	___lldiv@quotient+1,?___lldiv+1
  3116  000A50  C01D  F015         	movff	___lldiv@quotient+2,?___lldiv+2
  3117  000A54  C01E  F016         	movff	___lldiv@quotient+3,?___lldiv+3
  3118  000A58  0012               	return		;funcret
  3119  000A5A  FFFF               	dw	65535	; errata NOP
  3120  000A5C                     __end_of___lldiv:
  3121                           	opt stack 0
  3122                           tosu	equ	0xFFF
  3123                           tosh	equ	0xFFE
  3124                           tosl	equ	0xFFD
  3125                           pclath	equ	0xFFA
  3126                           tblptru	equ	0xFF8
  3127                           tblptrh	equ	0xFF7
  3128                           tblptrl	equ	0xFF6
  3129                           tablat	equ	0xFF5
  3130                           prodh	equ	0xFF4
  3131                           prodl	equ	0xFF3
  3132                           intcon	equ	0xFF2
  3133                           intcon2	equ	0xFF1
  3134                           postinc0	equ	0xFEE
  3135                           wreg	equ	0xFE8
  3136                           postdec1	equ	0xFE5
  3137                           fsr1h	equ	0xFE2
  3138                           fsr1l	equ	0xFE1
  3139                           indf2	equ	0xFDF
  3140                           postinc2	equ	0xFDE
  3141                           fsr2h	equ	0xFDA
  3142                           fsr2l	equ	0xFD9
  3143                           status	equ	0xFD8
  3144                           
  3145 ;; *************** function _draw_degrees *****************
  3146 ;; Defined at:
  3147 ;;		line 395 in file "thermo.c"
  3148 ;; Parameters:    Size  Location     Type
  3149 ;;		None
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;  index           2   31[COMRAM] int 
  3152 ;;  force           1   30[COMRAM] unsigned char 
  3153 ;;  temp            2   28[COMRAM] unsigned int 
  3154 ;; Return value:  Size  Location     Type
  3155 ;;                  1    wreg      void 
  3156 ;; Registers used:
  3157 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3158 ;; Tracked objects:
  3159 ;;		On entry : 0/0
  3160 ;;		On exit  : 0/0
  3161 ;;		Unchanged: 0/0
  3162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3164 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3165 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3166 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3167 ;;Total ram usage:        7 bytes
  3168 ;; Hardware stack levels used:    1
  3169 ;; Hardware stack levels required when called:    2
  3170 ;; This function calls:
  3171 ;;		___awdiv
  3172 ;;		___lbmod
  3173 ;;		_write_leds
  3174 ;; This function is called by:
  3175 ;;		_handle_test
  3176 ;;		_handle_thermo
  3177 ;;		_get_temp
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           	psect	text11
  3182  00032A                     __ptext11:
  3183                           	opt stack 0
  3184  00032A                     _draw_degrees:
  3185                           	opt stack 0
  3186  00032A  FFFF               	dw	65535	; assembler added errata NOP
  3187                           
  3188                           ;thermo.c: 397: uint16_t temp = degrees;
  3189                           
  3190                           ;incstack = 0
  3191  00032C  C04C  F01D         	movff	_degrees,draw_degrees@temp
  3192  000330  6A1E               	clrf	draw_degrees@temp+1,c
  3193                           
  3194                           ;thermo.c: 398: led_mask0 = 0;
  3195  000332  0E00               	movlw	0
  3196  000334  6E43               	movwf	_led_mask0,c
  3197                           
  3198                           ;thermo.c: 399: led_mask1 = 0;
  3199  000336  0E00               	movlw	0
  3200  000338  6E42               	movwf	_led_mask1,c
  3201                           
  3202                           ;thermo.c: 400: led_mask2 = 0;
  3203  00033A  0E00               	movlw	0
  3204  00033C  6E41               	movwf	_led_mask2,c
  3205                           
  3206                           ;thermo.c: 401: led_mask3 = 0;
  3207  00033E  0E00               	movlw	0
  3208  000340  6E40               	movwf	_led_mask3,c
  3209                           
  3210                           ;thermo.c: 403: if(invalid)
  3211  000342  504B               	movf	_invalid,w,c
  3212  000344  B4D8               	btfsc	status,2,c
  3213  000346  D01F               	goto	l190
  3214                           
  3215                           ;thermo.c: 404: {
  3216                           ;thermo.c: 405: led_mask0 |= invalid_mask[0]; led_mask1 |= invalid_mask[1]; led_mask2 |=
      +                           invalid_mask[2]; led_mask3 |= invalid_mask[3];
  3217  000348  0ED3               	movlw	low _invalid_mask
  3218  00034A  6EF6               	movwf	tblptrl,c
  3219  00034C                     	if	1	;There is more than 1 active tblptr byte
  3220  00034C  0EBF               	movlw	high _invalid_mask
  3221  00034E  6EF7               	movwf	tblptrh,c
  3222  000350                     	endif
  3223  000350                     	if	0	;There are less than 3 active tblptr bytes
  3224  000350                     	endif
  3225  000350  0008               	tblrd		*
  3226  000352  FFFF               	dw	65535	; errata NOP
  3227  000354  50F5               	movf	tablat,w,c
  3228  000356  1243               	iorwf	_led_mask0,f,c
  3229  000358  0ED4               	movlw	low (_invalid_mask+1)
  3230  00035A  6EF6               	movwf	tblptrl,c
  3231  00035C  0EBF               	movlw	high (_invalid_mask+1)
  3232  00035E  6EF7               	movwf	tblptrh,c
  3233  000360                     	if	0	;tblptru may be non-zero
  3234  000360                     	endif
  3235  000360                     	if	0	;tblptru may be non-zero
  3236  000360                     	endif
  3237  000360  0008               	tblrd		*
  3238  000362  FFFF               	dw	65535	; errata NOP
  3239  000364  50F5               	movf	tablat,w,c
  3240  000366  1242               	iorwf	_led_mask1,f,c
  3241  000368  0ED5               	movlw	low (_invalid_mask+2)
  3242  00036A  6EF6               	movwf	tblptrl,c
  3243  00036C  0EBF               	movlw	high (_invalid_mask+2)
  3244  00036E  6EF7               	movwf	tblptrh,c
  3245  000370                     	if	0	;tblptru may be non-zero
  3246  000370                     	endif
  3247  000370                     	if	0	;tblptru may be non-zero
  3248  000370                     	endif
  3249  000370  0008               	tblrd		*
  3250  000372  FFFF               	dw	65535	; errata NOP
  3251  000374  50F5               	movf	tablat,w,c
  3252  000376  1241               	iorwf	_led_mask2,f,c
  3253  000378  0ED6               	movlw	low (_invalid_mask+3)
  3254  00037A  6EF6               	movwf	tblptrl,c
  3255  00037C  0EBF               	movlw	high (_invalid_mask+3)
  3256  00037E  6EF7               	movwf	tblptrh,c
  3257  000380                     	if	0	;tblptru may be non-zero
  3258  000380                     	endif
  3259  000380                     	if	0	;tblptru may be non-zero
  3260  000380                     	endif
  3261  000380  0008               	tblrd		*
  3262  000382  FFFF               	dw	65535	; errata NOP
  3263  000384  D0E0               	goto	L3
  3264  000386                     l190:
  3265  000386  FFFF               	dw	65535	; assembler added errata NOP
  3266                           
  3267                           ;thermo.c: 407: else
  3268                           ;thermo.c: 408: {
  3269                           ;thermo.c: 410: uint8_t force = 0;
  3270  000388  0E00               	movlw	0
  3271  00038A  6E1F               	movwf	draw_degrees@force,c
  3272                           
  3273                           ;thermo.c: 411: if(degrees > 99)
  3274  00038C  0E63               	movlw	99
  3275  00038E  644C               	cpfsgt	_degrees,c
  3276  000390  D028               	goto	l192
  3277                           
  3278                           ;thermo.c: 412: {
  3279                           ;thermo.c: 413: degrees %= 100;
  3280  000392  0E64               	movlw	100
  3281  000394  6E13               	movwf	___lbmod@divisor,c
  3282  000396  504C               	movf	_degrees,w,c
  3283  000398  EC34  F006         	call	___lbmod
  3284  00039C  6E4C               	movwf	_degrees,c
  3285                           
  3286                           ;thermo.c: 414: force = 1;
  3287  00039E  0E01               	movlw	1
  3288  0003A0  6E1F               	movwf	draw_degrees@force,c
  3289                           
  3290                           ;thermo.c: 415: led_mask0 |= led_masks1[0][0]; led_mask1 |= led_masks1[0][1]; led_mask2 
      +                          |= led_masks1[0][2]; led_mask3 |= led_masks1[0][3];
  3291  0003A2  0ECF               	movlw	low _led_masks1
  3292  0003A4  6EF6               	movwf	tblptrl,c
  3293  0003A6                     	if	1	;There is more than 1 active tblptr byte
  3294  0003A6  0EBF               	movlw	high _led_masks1
  3295  0003A8  6EF7               	movwf	tblptrh,c
  3296  0003AA                     	endif
  3297  0003AA                     	if	0	;There are less than 3 active tblptr bytes
  3298  0003AA                     	endif
  3299  0003AA  0008               	tblrd		*
  3300  0003AC  FFFF               	dw	65535	; errata NOP
  3301  0003AE  50F5               	movf	tablat,w,c
  3302  0003B0  1243               	iorwf	_led_mask0,f,c
  3303  0003B2  0ED0               	movlw	low (_led_masks1+1)
  3304  0003B4  6EF6               	movwf	tblptrl,c
  3305  0003B6  0EBF               	movlw	high (_led_masks1+1)
  3306  0003B8  6EF7               	movwf	tblptrh,c
  3307  0003BA                     	if	0	;tblptru may be non-zero
  3308  0003BA                     	endif
  3309  0003BA                     	if	0	;tblptru may be non-zero
  3310  0003BA                     	endif
  3311  0003BA  0008               	tblrd		*
  3312  0003BC  FFFF               	dw	65535	; errata NOP
  3313  0003BE  50F5               	movf	tablat,w,c
  3314  0003C0  1242               	iorwf	_led_mask1,f,c
  3315  0003C2  0ED1               	movlw	low (_led_masks1+2)
  3316  0003C4  6EF6               	movwf	tblptrl,c
  3317  0003C6  0EBF               	movlw	high (_led_masks1+2)
  3318  0003C8  6EF7               	movwf	tblptrh,c
  3319  0003CA                     	if	0	;tblptru may be non-zero
  3320  0003CA                     	endif
  3321  0003CA                     	if	0	;tblptru may be non-zero
  3322  0003CA                     	endif
  3323  0003CA  0008               	tblrd		*
  3324  0003CC  FFFF               	dw	65535	; errata NOP
  3325  0003CE  50F5               	movf	tablat,w,c
  3326  0003D0  1241               	iorwf	_led_mask2,f,c
  3327  0003D2  0ED2               	movlw	low (_led_masks1+3)
  3328  0003D4  6EF6               	movwf	tblptrl,c
  3329  0003D6  0EBF               	movlw	high (_led_masks1+3)
  3330  0003D8  6EF7               	movwf	tblptrh,c
  3331  0003DA                     	if	0	;tblptru may be non-zero
  3332  0003DA                     	endif
  3333  0003DA                     	if	0	;tblptru may be non-zero
  3334  0003DA                     	endif
  3335  0003DA  0008               	tblrd		*
  3336  0003DC  FFFF               	dw	65535	; errata NOP
  3337  0003DE  50F5               	movf	tablat,w,c
  3338  0003E0  1240               	iorwf	_led_mask3,f,c
  3339  0003E2                     l192:
  3340  0003E2  FFFF               	dw	65535	; assembler added errata NOP
  3341                           
  3342                           ;thermo.c: 416: }
  3343                           ;thermo.c: 418: if(degrees > 9 || force)
  3344  0003E4  0E0A               	movlw	10
  3345  0003E6  604C               	cpfslt	_degrees,c
  3346  0003E8  D003               	goto	u1430
  3347  0003EA  501F               	movf	draw_degrees@force,w,c
  3348  0003EC  B4D8               	btfsc	status,2,c
  3349  0003EE  D070               	goto	l193
  3350  0003F0                     u1430:
  3351  0003F0  FFFF               	dw	65535	; assembler added errata NOP
  3352                           
  3353                           ;thermo.c: 419: {
  3354                           ;thermo.c: 420: int index = degrees / 10;
  3355  0003F2  C04C  F013         	movff	_degrees,___awdiv@dividend
  3356  0003F6  6A14               	clrf	___awdiv@dividend+1,c
  3357  0003F8  0E00               	movlw	0
  3358  0003FA  6E16               	movwf	___awdiv@divisor+1,c
  3359  0003FC  0E0A               	movlw	10
  3360  0003FE  6E15               	movwf	___awdiv@divisor,c
  3361  000400  EC52  F004         	call	___awdiv	;wreg free
  3362  000404  C013  F020         	movff	?___awdiv,draw_degrees@index
  3363  000408  C014  F021         	movff	?___awdiv+1,draw_degrees@index+1
  3364                           
  3365                           ;thermo.c: 421: led_mask0 |= led_masks2[index][0]; led_mask1 |= led_masks2[index][1]; le
      +                          d_mask2 |= led_masks2[index][2]; led_mask3 |= led_masks2[index][3];
  3366  00040C  C020  F01B         	movff	draw_degrees@index,??_draw_degrees
  3367  000410  C021  F01C         	movff	draw_degrees@index+1,??_draw_degrees+1
  3368  000414  90D8               	bcf	status,0,c
  3369  000416  361B               	rlcf	??_draw_degrees,f,c
  3370  000418  361C               	rlcf	??_draw_degrees+1,f,c
  3371  00041A  90D8               	bcf	status,0,c
  3372  00041C  361B               	rlcf	??_draw_degrees,f,c
  3373  00041E  361C               	rlcf	??_draw_degrees+1,f,c
  3374  000420  0E87               	movlw	low _led_masks2
  3375  000422  241B               	addwf	??_draw_degrees,w,c
  3376  000424  6EF6               	movwf	tblptrl,c
  3377  000426  0EBF               	movlw	high _led_masks2
  3378  000428  201C               	addwfc	??_draw_degrees+1,w,c
  3379  00042A  6EF7               	movwf	tblptrh,c
  3380  00042C                     	if	0	;There are less than 3 active tblptr bytes
  3381  00042C                     	endif
  3382  00042C  0008               	tblrd		*
  3383  00042E  FFFF               	dw	65535	; errata NOP
  3384  000430  50F5               	movf	tablat,w,c
  3385  000432  1243               	iorwf	_led_mask0,f,c
  3386  000434  C020  F01B         	movff	draw_degrees@index,??_draw_degrees
  3387  000438  C021  F01C         	movff	draw_degrees@index+1,??_draw_degrees+1
  3388  00043C  90D8               	bcf	status,0,c
  3389  00043E  361B               	rlcf	??_draw_degrees,f,c
  3390  000440  361C               	rlcf	??_draw_degrees+1,f,c
  3391  000442  90D8               	bcf	status,0,c
  3392  000444  361B               	rlcf	??_draw_degrees,f,c
  3393  000446  361C               	rlcf	??_draw_degrees+1,f,c
  3394  000448  0E01               	movlw	1
  3395  00044A  261B               	addwf	??_draw_degrees,f,c
  3396  00044C  0E00               	movlw	0
  3397  00044E  221C               	addwfc	??_draw_degrees+1,f,c
  3398  000450  0E87               	movlw	low _led_masks2
  3399  000452  241B               	addwf	??_draw_degrees,w,c
  3400  000454  6EF6               	movwf	tblptrl,c
  3401  000456  0EBF               	movlw	high _led_masks2
  3402  000458  201C               	addwfc	??_draw_degrees+1,w,c
  3403  00045A  6EF7               	movwf	tblptrh,c
  3404  00045C                     	if	0	;There are less than 3 active tblptr bytes
  3405  00045C                     	endif
  3406  00045C  0008               	tblrd		*
  3407  00045E  FFFF               	dw	65535	; errata NOP
  3408  000460  50F5               	movf	tablat,w,c
  3409  000462  1242               	iorwf	_led_mask1,f,c
  3410  000464  C020  F01B         	movff	draw_degrees@index,??_draw_degrees
  3411  000468  C021  F01C         	movff	draw_degrees@index+1,??_draw_degrees+1
  3412  00046C  90D8               	bcf	status,0,c
  3413  00046E  361B               	rlcf	??_draw_degrees,f,c
  3414  000470  361C               	rlcf	??_draw_degrees+1,f,c
  3415  000472  90D8               	bcf	status,0,c
  3416  000474  361B               	rlcf	??_draw_degrees,f,c
  3417  000476  361C               	rlcf	??_draw_degrees+1,f,c
  3418  000478  0E02               	movlw	2
  3419  00047A  261B               	addwf	??_draw_degrees,f,c
  3420  00047C  0E00               	movlw	0
  3421  00047E  221C               	addwfc	??_draw_degrees+1,f,c
  3422  000480  0E87               	movlw	low _led_masks2
  3423  000482  241B               	addwf	??_draw_degrees,w,c
  3424  000484  6EF6               	movwf	tblptrl,c
  3425  000486  0EBF               	movlw	high _led_masks2
  3426  000488  201C               	addwfc	??_draw_degrees+1,w,c
  3427  00048A  6EF7               	movwf	tblptrh,c
  3428  00048C                     	if	0	;There are less than 3 active tblptr bytes
  3429  00048C                     	endif
  3430  00048C  0008               	tblrd		*
  3431  00048E  FFFF               	dw	65535	; errata NOP
  3432  000490  50F5               	movf	tablat,w,c
  3433  000492  1241               	iorwf	_led_mask2,f,c
  3434  000494  C020  F01B         	movff	draw_degrees@index,??_draw_degrees
  3435  000498  C021  F01C         	movff	draw_degrees@index+1,??_draw_degrees+1
  3436  00049C  90D8               	bcf	status,0,c
  3437  00049E  361B               	rlcf	??_draw_degrees,f,c
  3438  0004A0  361C               	rlcf	??_draw_degrees+1,f,c
  3439  0004A2  90D8               	bcf	status,0,c
  3440  0004A4  361B               	rlcf	??_draw_degrees,f,c
  3441  0004A6  361C               	rlcf	??_draw_degrees+1,f,c
  3442  0004A8  0E03               	movlw	3
  3443  0004AA  261B               	addwf	??_draw_degrees,f,c
  3444  0004AC  0E00               	movlw	0
  3445  0004AE  221C               	addwfc	??_draw_degrees+1,f,c
  3446  0004B0  0E87               	movlw	low _led_masks2
  3447  0004B2  241B               	addwf	??_draw_degrees,w,c
  3448  0004B4  6EF6               	movwf	tblptrl,c
  3449  0004B6  0EBF               	movlw	high _led_masks2
  3450  0004B8  201C               	addwfc	??_draw_degrees+1,w,c
  3451  0004BA  6EF7               	movwf	tblptrh,c
  3452  0004BC                     	if	0	;There are less than 3 active tblptr bytes
  3453  0004BC                     	endif
  3454  0004BC  0008               	tblrd		*
  3455  0004BE  FFFF               	dw	65535	; errata NOP
  3456  0004C0  50F5               	movf	tablat,w,c
  3457  0004C2  1240               	iorwf	_led_mask3,f,c
  3458                           
  3459                           ;thermo.c: 422: degrees %= 10;
  3460  0004C4  0E0A               	movlw	10
  3461  0004C6  6E13               	movwf	___lbmod@divisor,c
  3462  0004C8  504C               	movf	_degrees,w,c
  3463  0004CA  EC34  F006         	call	___lbmod
  3464  0004CE  6E4C               	movwf	_degrees,c
  3465  0004D0                     l193:
  3466  0004D0  FFFF               	dw	65535	; assembler added errata NOP
  3467                           
  3468                           ;thermo.c: 423: }
  3469                           ;thermo.c: 425: led_mask0 |= led_masks3[degrees][0]; led_mask1 |= led_masks3[degrees][1]
      +                          ; led_mask2 |= led_masks3[degrees][2]; led_mask3 |= led_masks3[degrees][3];
  3470  0004D2  504C               	movf	_degrees,w,c
  3471  0004D4  0D04               	mullw	4
  3472  0004D6  0E5F               	movlw	low _led_masks3
  3473  0004D8  24F3               	addwf	prodl,w,c
  3474  0004DA  6EF6               	movwf	tblptrl,c
  3475  0004DC  0EBF               	movlw	high _led_masks3
  3476  0004DE  20F4               	addwfc	prodh,w,c
  3477  0004E0  6EF7               	movwf	tblptrh,c
  3478  0004E2                     	if	0	;There are less than 3 active tblptr bytes
  3479  0004E2                     	endif
  3480  0004E2  0008               	tblrd		*
  3481  0004E4  FFFF               	dw	65535	; errata NOP
  3482  0004E6  50F5               	movf	tablat,w,c
  3483  0004E8  1243               	iorwf	_led_mask0,f,c
  3484  0004EA  504C               	movf	_degrees,w,c
  3485  0004EC  0D04               	mullw	4
  3486  0004EE  0E01               	movlw	1
  3487  0004F0  26F3               	addwf	prodl,f,c
  3488  0004F2  0E00               	movlw	0
  3489  0004F4  22F4               	addwfc	prodh,f,c
  3490  0004F6  0E5F               	movlw	low _led_masks3
  3491  0004F8  24F3               	addwf	prodl,w,c
  3492  0004FA  6EF6               	movwf	tblptrl,c
  3493  0004FC  0EBF               	movlw	high _led_masks3
  3494  0004FE  20F4               	addwfc	prodh,w,c
  3495  000500  6EF7               	movwf	tblptrh,c
  3496  000502                     	if	0	;There are less than 3 active tblptr bytes
  3497  000502                     	endif
  3498  000502  0008               	tblrd		*
  3499  000504  FFFF               	dw	65535	; errata NOP
  3500  000506  50F5               	movf	tablat,w,c
  3501  000508  1242               	iorwf	_led_mask1,f,c
  3502  00050A  504C               	movf	_degrees,w,c
  3503  00050C  0D04               	mullw	4
  3504  00050E  0E02               	movlw	2
  3505  000510  26F3               	addwf	prodl,f,c
  3506  000512  0E00               	movlw	0
  3507  000514  22F4               	addwfc	prodh,f,c
  3508  000516  0E5F               	movlw	low _led_masks3
  3509  000518  24F3               	addwf	prodl,w,c
  3510  00051A  6EF6               	movwf	tblptrl,c
  3511  00051C  0EBF               	movlw	high _led_masks3
  3512  00051E  20F4               	addwfc	prodh,w,c
  3513  000520  6EF7               	movwf	tblptrh,c
  3514  000522                     	if	0	;There are less than 3 active tblptr bytes
  3515  000522                     	endif
  3516  000522  0008               	tblrd		*
  3517  000524  FFFF               	dw	65535	; errata NOP
  3518  000526  50F5               	movf	tablat,w,c
  3519  000528  1241               	iorwf	_led_mask2,f,c
  3520  00052A  504C               	movf	_degrees,w,c
  3521  00052C  0D04               	mullw	4
  3522  00052E  0E03               	movlw	3
  3523  000530  26F3               	addwf	prodl,f,c
  3524  000532  0E00               	movlw	0
  3525  000534  22F4               	addwfc	prodh,f,c
  3526  000536  0E5F               	movlw	low _led_masks3
  3527  000538  24F3               	addwf	prodl,w,c
  3528  00053A  6EF6               	movwf	tblptrl,c
  3529  00053C  0EBF               	movlw	high _led_masks3
  3530  00053E  20F4               	addwfc	prodh,w,c
  3531  000540  6EF7               	movwf	tblptrh,c
  3532  000542                     	if	0	;There are less than 3 active tblptr bytes
  3533  000542                     	endif
  3534  000542  0008               	tblrd		*
  3535  000544  FFFF               	dw	65535	; errata NOP
  3536  000546                     L3:
  3537  000546  FFFF               	dw	65535	; assembler added errata NOP
  3538  000548  50F5               	movf	tablat,w,c
  3539  00054A  1240               	iorwf	_led_mask3,f,c
  3540                           
  3541                           ;thermo.c: 426: }
  3542                           ;thermo.c: 428: write_leds();
  3543  00054C  EC5D  F006         	call	_write_leds	;wreg free
  3544                           
  3545                           ;thermo.c: 429: degrees = temp;
  3546  000550  C01D  F04C         	movff	draw_degrees@temp,_degrees
  3547  000554  0012               	return		;funcret
  3548  000556  FFFF               	dw	65535	; errata NOP
  3549  000558                     __end_of_draw_degrees:
  3550                           	opt stack 0
  3551                           tosu	equ	0xFFF
  3552                           tosh	equ	0xFFE
  3553                           tosl	equ	0xFFD
  3554                           pclath	equ	0xFFA
  3555                           tblptru	equ	0xFF8
  3556                           tblptrh	equ	0xFF7
  3557                           tblptrl	equ	0xFF6
  3558                           tablat	equ	0xFF5
  3559                           prodh	equ	0xFF4
  3560                           prodl	equ	0xFF3
  3561                           intcon	equ	0xFF2
  3562                           intcon2	equ	0xFF1
  3563                           postinc0	equ	0xFEE
  3564                           wreg	equ	0xFE8
  3565                           postdec1	equ	0xFE5
  3566                           fsr1h	equ	0xFE2
  3567                           fsr1l	equ	0xFE1
  3568                           indf2	equ	0xFDF
  3569                           postinc2	equ	0xFDE
  3570                           fsr2h	equ	0xFDA
  3571                           fsr2l	equ	0xFD9
  3572                           status	equ	0xFD8
  3573                           
  3574 ;; *************** function _write_leds *****************
  3575 ;; Defined at:
  3576 ;;		line 383 in file "thermo.c"
  3577 ;; Parameters:    Size  Location     Type
  3578 ;;		None
  3579 ;; Auto vars:     Size  Location     Type
  3580 ;;		None
  3581 ;; Return value:  Size  Location     Type
  3582 ;;                  1    wreg      void 
  3583 ;; Registers used:
  3584 ;;		None
  3585 ;; Tracked objects:
  3586 ;;		On entry : 0/0
  3587 ;;		On exit  : 0/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3594 ;;Total ram usage:        0 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; Hardware stack levels required when called:    1
  3597 ;; This function calls:
  3598 ;;		Nothing
  3599 ;; This function is called by:
  3600 ;;		_draw_degrees
  3601 ;;		_handle_test
  3602 ;; This function uses a non-reentrant model
  3603 ;;
  3604                           
  3605                           	psect	text12
  3606  000CBA                     __ptext12:
  3607                           	opt stack 0
  3608  000CBA                     _write_leds:
  3609                           	opt stack 0
  3610  000CBA  FFFF               	dw	65535	; assembler added errata NOP
  3611                           
  3612                           ;thermo.c: 385: LATA = led_mask0;
  3613                           
  3614                           ;incstack = 0
  3615  000CBC  C043  FF89         	movff	_led_mask0,3977	;volatile
  3616                           
  3617                           ;thermo.c: 386: LATC = led_mask1;
  3618  000CC0  C042  FF8B         	movff	_led_mask1,3979	;volatile
  3619                           
  3620                           ;thermo.c: 387: LATF = led_mask2;
  3621  000CC4  C041  FF8E         	movff	_led_mask2,3982	;volatile
  3622                           
  3623                           ;thermo.c: 388: LATG = led_mask3;
  3624  000CC8  C040  FF8F         	movff	_led_mask3,3983	;volatile
  3625  000CCC  0012               	return		;funcret
  3626  000CCE  FFFF               	dw	65535	; errata NOP
  3627  000CD0                     __end_of_write_leds:
  3628                           	opt stack 0
  3629                           tosu	equ	0xFFF
  3630                           tosh	equ	0xFFE
  3631                           tosl	equ	0xFFD
  3632                           pclath	equ	0xFFA
  3633                           tblptru	equ	0xFF8
  3634                           tblptrh	equ	0xFF7
  3635                           tblptrl	equ	0xFF6
  3636                           tablat	equ	0xFF5
  3637                           prodh	equ	0xFF4
  3638                           prodl	equ	0xFF3
  3639                           intcon	equ	0xFF2
  3640                           intcon2	equ	0xFF1
  3641                           postinc0	equ	0xFEE
  3642                           wreg	equ	0xFE8
  3643                           postdec1	equ	0xFE5
  3644                           fsr1h	equ	0xFE2
  3645                           fsr1l	equ	0xFE1
  3646                           indf2	equ	0xFDF
  3647                           postinc2	equ	0xFDE
  3648                           fsr2h	equ	0xFDA
  3649                           fsr2l	equ	0xFD9
  3650                           status	equ	0xFD8
  3651                           
  3652 ;; *************** function ___lbmod *****************
  3653 ;; Defined at:
  3654 ;;		line 4 in file "/opt/microchip/xc8/v1.45/sources/common/lbmod.c"
  3655 ;; Parameters:    Size  Location     Type
  3656 ;;  dividend        1    wreg     unsigned char 
  3657 ;;  divisor         1   18[COMRAM] unsigned char 
  3658 ;; Auto vars:     Size  Location     Type
  3659 ;;  dividend        1   19[COMRAM] unsigned char 
  3660 ;;  rem             1   21[COMRAM] unsigned char 
  3661 ;;  counter         1   20[COMRAM] unsigned char 
  3662 ;; Return value:  Size  Location     Type
  3663 ;;                  1    wreg      unsigned char 
  3664 ;; Registers used:
  3665 ;;		wreg, status,2, status,0
  3666 ;; Tracked objects:
  3667 ;;		On entry : 0/0
  3668 ;;		On exit  : 0/0
  3669 ;;		Unchanged: 0/0
  3670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3671 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3672 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3674 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3675 ;;Total ram usage:        4 bytes
  3676 ;; Hardware stack levels used:    1
  3677 ;; Hardware stack levels required when called:    1
  3678 ;; This function calls:
  3679 ;;		Nothing
  3680 ;; This function is called by:
  3681 ;;		_draw_degrees
  3682 ;; This function uses a non-reentrant model
  3683 ;;
  3684                           
  3685                           	psect	text13
  3686  000C68                     __ptext13:
  3687                           	opt stack 0
  3688  000C68                     ___lbmod:
  3689                           	opt stack 0
  3690  000C68  FFFF               	dw	65535	; assembler added errata NOP
  3691                           
  3692                           ;incstack = 0
  3693                           ;___lbmod@dividend stored from wreg
  3694  000C6A  6E14               	movwf	___lbmod@dividend,c
  3695  000C6C  0E08               	movlw	8
  3696  000C6E  6E15               	movwf	___lbmod@counter,c
  3697  000C70  0E00               	movlw	0
  3698  000C72  6E16               	movwf	___lbmod@rem,c
  3699  000C74  FFFF               	dw	65535	; assembler added errata NOP
  3700  000C76  90D8               	bcf	status,0,c
  3701  000C78  3414               	rlcf	___lbmod@dividend,w,c
  3702  000C7A  3416               	rlcf	___lbmod@rem,w,c
  3703  000C7C  6E16               	movwf	___lbmod@rem,c
  3704  000C7E  90D8               	bcf	status,0,c
  3705  000C80  3614               	rlcf	___lbmod@dividend,f,c
  3706  000C82  5013               	movf	___lbmod@divisor,w,c
  3707  000C84  5C16               	subwf	___lbmod@rem,w,c
  3708  000C86  A0D8               	btfss	status,0,c
  3709  000C88  D002               	goto	l612
  3710  000C8A  5013               	movf	___lbmod@divisor,w,c
  3711  000C8C  5E16               	subwf	___lbmod@rem,f,c
  3712  000C8E                     l612:
  3713  000C8E  FFFF               	dw	65535	; assembler added errata NOP
  3714  000C90  2E15               	decfsz	___lbmod@counter,f,c
  3715  000C92  D7F0               	goto	l611
  3716  000C94  5016               	movf	___lbmod@rem,w,c
  3717  000C96  0012               	return		;funcret
  3718  000C98  FFFF               	dw	65535	; errata NOP
  3719  000C9A                     __end_of___lbmod:
  3720                           	opt stack 0
  3721                           tosu	equ	0xFFF
  3722                           tosh	equ	0xFFE
  3723                           tosl	equ	0xFFD
  3724                           pclath	equ	0xFFA
  3725                           tblptru	equ	0xFF8
  3726                           tblptrh	equ	0xFF7
  3727                           tblptrl	equ	0xFF6
  3728                           tablat	equ	0xFF5
  3729                           prodh	equ	0xFF4
  3730                           prodl	equ	0xFF3
  3731                           intcon	equ	0xFF2
  3732                           intcon2	equ	0xFF1
  3733                           postinc0	equ	0xFEE
  3734                           wreg	equ	0xFE8
  3735                           postdec1	equ	0xFE5
  3736                           fsr1h	equ	0xFE2
  3737                           fsr1l	equ	0xFE1
  3738                           indf2	equ	0xFDF
  3739                           postinc2	equ	0xFDE
  3740                           fsr2h	equ	0xFDA
  3741                           fsr2l	equ	0xFD9
  3742                           status	equ	0xFD8
  3743                           
  3744 ;; *************** function ___awdiv *****************
  3745 ;; Defined at:
  3746 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/awdiv.c"
  3747 ;; Parameters:    Size  Location     Type
  3748 ;;  dividend        2   18[COMRAM] int 
  3749 ;;  divisor         2   20[COMRAM] int 
  3750 ;; Auto vars:     Size  Location     Type
  3751 ;;  quotient        2   24[COMRAM] int 
  3752 ;;  sign            1   23[COMRAM] unsigned char 
  3753 ;;  counter         1   22[COMRAM] unsigned char 
  3754 ;; Return value:  Size  Location     Type
  3755 ;;                  2   18[COMRAM] int 
  3756 ;; Registers used:
  3757 ;;		wreg, status,2, status,0
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3763 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3764 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3766 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3767 ;;Total ram usage:        8 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    1
  3770 ;; This function calls:
  3771 ;;		Nothing
  3772 ;; This function is called by:
  3773 ;;		_draw_degrees
  3774 ;;		_print_number2
  3775 ;; This function uses a non-reentrant model
  3776 ;;
  3777                           
  3778                           	psect	text14
  3779  0008A4                     __ptext14:
  3780                           	opt stack 0
  3781  0008A4                     ___awdiv:
  3782                           	opt stack 0
  3783  0008A4  FFFF               	dw	65535	; assembler added errata NOP
  3784                           
  3785                           ;incstack = 0
  3786  0008A6  0E00               	movlw	0
  3787  0008A8  6E18               	movwf	___awdiv@sign,c
  3788  0008AA  AE16               	btfss	___awdiv@divisor+1,7,c
  3789  0008AC  D006               	goto	l440
  3790  0008AE  6C15               	negf	___awdiv@divisor,c
  3791  0008B0  1E16               	comf	___awdiv@divisor+1,f,c
  3792  0008B2  B0D8               	btfsc	status,0,c
  3793  0008B4  2A16               	incf	___awdiv@divisor+1,f,c
  3794  0008B6  0E01               	movlw	1
  3795  0008B8  6E18               	movwf	___awdiv@sign,c
  3796  0008BA                     l440:
  3797  0008BA  FFFF               	dw	65535	; assembler added errata NOP
  3798  0008BC  AE14               	btfss	___awdiv@dividend+1,7,c
  3799  0008BE  D006               	goto	l441
  3800  0008C0  6C13               	negf	___awdiv@dividend,c
  3801  0008C2  1E14               	comf	___awdiv@dividend+1,f,c
  3802  0008C4  B0D8               	btfsc	status,0,c
  3803  0008C6  2A14               	incf	___awdiv@dividend+1,f,c
  3804  0008C8  0E01               	movlw	1
  3805  0008CA  1A18               	xorwf	___awdiv@sign,f,c
  3806  0008CC                     l441:
  3807  0008CC  FFFF               	dw	65535	; assembler added errata NOP
  3808  0008CE  0E00               	movlw	0
  3809  0008D0  6E1A               	movwf	___awdiv@quotient+1,c
  3810  0008D2  0E00               	movlw	0
  3811  0008D4  6E19               	movwf	___awdiv@quotient,c
  3812  0008D6  5015               	movf	___awdiv@divisor,w,c
  3813  0008D8  1016               	iorwf	___awdiv@divisor+1,w,c
  3814  0008DA  B4D8               	btfsc	status,2,c
  3815  0008DC  D020               	goto	l448
  3816  0008DE  0E01               	movlw	1
  3817  0008E0  6E17               	movwf	___awdiv@counter,c
  3818  0008E2  D005               	goto	l443
  3819  0008E4  FFFF               	dw	65535	; assembler added errata NOP
  3820  0008E6  90D8               	bcf	status,0,c
  3821  0008E8  3615               	rlcf	___awdiv@divisor,f,c
  3822  0008EA  3616               	rlcf	___awdiv@divisor+1,f,c
  3823  0008EC  2A17               	incf	___awdiv@counter,f,c
  3824  0008EE                     l443:
  3825  0008EE  FFFF               	dw	65535	; assembler added errata NOP
  3826  0008F0  AE16               	btfss	___awdiv@divisor+1,7,c
  3827  0008F2  D7F8               	goto	l444
  3828  0008F4                     u1350:
  3829  0008F4  FFFF               	dw	65535	; assembler added errata NOP
  3830  0008F6  90D8               	bcf	status,0,c
  3831  0008F8  3619               	rlcf	___awdiv@quotient,f,c
  3832  0008FA  361A               	rlcf	___awdiv@quotient+1,f,c
  3833  0008FC  5015               	movf	___awdiv@divisor,w,c
  3834  0008FE  5C13               	subwf	___awdiv@dividend,w,c
  3835  000900  5016               	movf	___awdiv@divisor+1,w,c
  3836  000902  5814               	subwfb	___awdiv@dividend+1,w,c
  3837  000904  A0D8               	btfss	status,0,c
  3838  000906  D005               	goto	l447
  3839  000908  5015               	movf	___awdiv@divisor,w,c
  3840  00090A  5E13               	subwf	___awdiv@dividend,f,c
  3841  00090C  5016               	movf	___awdiv@divisor+1,w,c
  3842  00090E  5A14               	subwfb	___awdiv@dividend+1,f,c
  3843  000910  8019               	bsf	___awdiv@quotient,0,c
  3844  000912                     l447:
  3845  000912  FFFF               	dw	65535	; assembler added errata NOP
  3846  000914  90D8               	bcf	status,0,c
  3847  000916  3216               	rrcf	___awdiv@divisor+1,f,c
  3848  000918  3215               	rrcf	___awdiv@divisor,f,c
  3849  00091A  2E17               	decfsz	___awdiv@counter,f,c
  3850  00091C  D7EB               	goto	u1350
  3851  00091E                     l448:
  3852  00091E  FFFF               	dw	65535	; assembler added errata NOP
  3853  000920  5018               	movf	___awdiv@sign,w,c
  3854  000922  B4D8               	btfsc	status,2,c
  3855  000924  D004               	goto	l449
  3856  000926  6C19               	negf	___awdiv@quotient,c
  3857  000928  1E1A               	comf	___awdiv@quotient+1,f,c
  3858  00092A  B0D8               	btfsc	status,0,c
  3859  00092C  2A1A               	incf	___awdiv@quotient+1,f,c
  3860  00092E                     l449:
  3861  00092E  FFFF               	dw	65535	; assembler added errata NOP
  3862  000930  C019  F013         	movff	___awdiv@quotient,?___awdiv
  3863  000934  C01A  F014         	movff	___awdiv@quotient+1,?___awdiv+1
  3864  000938  0012               	return		;funcret
  3865  00093A  FFFF               	dw	65535	; errata NOP
  3866  00093C                     __end_of___awdiv:
  3867                           	opt stack 0
  3868                           tosu	equ	0xFFF
  3869                           tosh	equ	0xFFE
  3870                           tosl	equ	0xFFD
  3871                           pclath	equ	0xFFA
  3872                           tblptru	equ	0xFF8
  3873                           tblptrh	equ	0xFF7
  3874                           tblptrl	equ	0xFF6
  3875                           tablat	equ	0xFF5
  3876                           prodh	equ	0xFF4
  3877                           prodl	equ	0xFF3
  3878                           intcon	equ	0xFF2
  3879                           intcon2	equ	0xFF1
  3880                           postinc0	equ	0xFEE
  3881                           wreg	equ	0xFE8
  3882                           postdec1	equ	0xFE5
  3883                           fsr1h	equ	0xFE2
  3884                           fsr1l	equ	0xFE1
  3885                           indf2	equ	0xFDF
  3886                           postinc2	equ	0xFDE
  3887                           fsr2h	equ	0xFDA
  3888                           fsr2l	equ	0xFD9
  3889                           status	equ	0xFD8
  3890                           
  3891 ;; *************** function _isr *****************
  3892 ;; Defined at:
  3893 ;;		line 742 in file "thermo.c"
  3894 ;; Parameters:    Size  Location     Type
  3895 ;;		None
  3896 ;; Auto vars:     Size  Location     Type
  3897 ;;		None
  3898 ;; Return value:  Size  Location     Type
  3899 ;;                  1    wreg      void 
  3900 ;; Registers used:
  3901 ;;		wreg, status,2
  3902 ;; Tracked objects:
  3903 ;;		On entry : 0/0
  3904 ;;		On exit  : 0/0
  3905 ;;		Unchanged: 0/0
  3906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3909 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3910 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3911 ;;Total ram usage:       18 bytes
  3912 ;; Hardware stack levels used:    1
  3913 ;; This function calls:
  3914 ;;		Nothing
  3915 ;; This function is called by:
  3916 ;;		Interrupt level 2
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           	psect	intcode
  3921  000008                     __pintcode:
  3922                           	opt stack 0
  3923  000008                     _isr:
  3924                           	opt stack 0
  3925  000008  FFFF               	dw	65535	; assembler added errata NOP
  3926                           
  3927                           ;incstack = 0
  3928  00000A  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3929  00000C  CFFA F001          	movff	pclath,??_isr
  3930  000010  CFFB F002          	movff	pclatu,??_isr+1
  3931  000014  CFE9 F003          	movff	fsr0l,??_isr+2
  3932  000018  CFEA F004          	movff	fsr0h,??_isr+3
  3933  00001C  CFE1 F005          	movff	fsr1l,??_isr+4
  3934  000020  CFE2 F006          	movff	fsr1h,??_isr+5
  3935  000024  CFD9 F007          	movff	fsr2l,??_isr+6
  3936  000028  CFDA F008          	movff	fsr2h,??_isr+7
  3937  00002C  CFF3 F009          	movff	prodl,??_isr+8
  3938  000030  CFF4 F00A          	movff	prodh,??_isr+9
  3939  000034  CFF6 F00B          	movff	tblptrl,??_isr+10
  3940  000038  CFF7 F00C          	movff	tblptrh,??_isr+11
  3941  00003C  CFF8 F00D          	movff	tblptru,??_isr+12
  3942  000040  CFF5 F00E          	movff	tablat,??_isr+13
  3943  000044  C04D  F00F         	movff	btemp,??_isr+14
  3944  000048  C04E  F010         	movff	btemp+1,??_isr+15
  3945  00004C  C04F  F011         	movff	btemp+2,??_isr+16
  3946  000050  C050  F012         	movff	btemp+3,??_isr+17
  3947  000054  D00A               	goto	L4
  3948  000056  FFFF               	dw	65535	; assembler added errata NOP
  3949                           
  3950                           ;thermo.c: 746: {
  3951                           ;thermo.c: 747: interrupt_done = 1;
  3952  000058  0E01               	movlw	1
  3953  00005A  6E3F               	movwf	_interrupt_done,c
  3954                           
  3955                           ;thermo.c: 751: if(PIR1bits.RCIF)
  3956  00005C  AA9E               	btfss	3998,5,c	;volatile
  3957  00005E  D008               	goto	i2l254
  3958                           
  3959                           ;thermo.c: 752: {
  3960                           ;thermo.c: 753: PIR1bits.RCIF = 0;
  3961  000060  9A9E               	bcf	3998,5,c	;volatile
  3962                           
  3963                           ;thermo.c: 754: serial_in = RCREG;
  3964  000062  CFAE F047          	movff	4014,_serial_in	;volatile
  3965                           
  3966                           ;thermo.c: 755: have_serial = 1;
  3967  000066  0E01               	movlw	1
  3968  000068  6E48               	movwf	_have_serial,c
  3969  00006A                     L4:
  3970  00006A  FFFF               	dw	65535	; assembler added errata NOP
  3971                           
  3972                           ;thermo.c: 756: interrupt_done = 0;
  3973  00006C  0E00               	movlw	0
  3974  00006E  6E3F               	movwf	_interrupt_done,c
  3975  000070                     i2l254:
  3976  000070  FFFF               	dw	65535	; assembler added errata NOP
  3977  000072  503F               	movf	_interrupt_done,w,c
  3978  000074  B4D8               	btfsc	status,2,c
  3979  000076  D7EF               	goto	i2l253
  3980  000078  C012  F050         	movff	??_isr+17,btemp+3
  3981  00007C  C011  F04F         	movff	??_isr+16,btemp+2
  3982  000080  C010  F04E         	movff	??_isr+15,btemp+1
  3983  000084  C00F  F04D         	movff	??_isr+14,btemp
  3984  000088  C00E  FFF5         	movff	??_isr+13,tablat
  3985  00008C  C00D  FFF8         	movff	??_isr+12,tblptru
  3986  000090  C00C  FFF7         	movff	??_isr+11,tblptrh
  3987  000094  C00B  FFF6         	movff	??_isr+10,tblptrl
  3988  000098  C00A  FFF4         	movff	??_isr+9,prodh
  3989  00009C  C009  FFF3         	movff	??_isr+8,prodl
  3990  0000A0  C008  FFDA         	movff	??_isr+7,fsr2h
  3991  0000A4  C007  FFD9         	movff	??_isr+6,fsr2l
  3992  0000A8  C006  FFE2         	movff	??_isr+5,fsr1h
  3993  0000AC  C005  FFE1         	movff	??_isr+4,fsr1l
  3994  0000B0  C004  FFEA         	movff	??_isr+3,fsr0h
  3995  0000B4  C003  FFE9         	movff	??_isr+2,fsr0l
  3996  0000B8  C002  FFFB         	movff	??_isr+1,pclatu
  3997  0000BC  C001  FFFA         	movff	??_isr,pclath
  3998  0000C0  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3999  0000C2  0011               	retfie		f
  4000  0000C4  FFFF               	dw	65535	; errata NOP
  4001  0000C6                     __end_of_isr:
  4002                           	opt stack 0
  4003                           tosu	equ	0xFFF
  4004                           tosh	equ	0xFFE
  4005                           tosl	equ	0xFFD
  4006                           pclatu	equ	0xFFB
  4007                           pclath	equ	0xFFA
  4008                           tblptru	equ	0xFF8
  4009                           tblptrh	equ	0xFF7
  4010                           tblptrl	equ	0xFF6
  4011                           tablat	equ	0xFF5
  4012                           prodh	equ	0xFF4
  4013                           prodl	equ	0xFF3
  4014                           intcon	equ	0xFF2
  4015                           intcon2	equ	0xFF1
  4016                           postinc0	equ	0xFEE
  4017                           fsr0h	equ	0xFEA
  4018                           fsr0l	equ	0xFE9
  4019                           wreg	equ	0xFE8
  4020                           postdec1	equ	0xFE5
  4021                           fsr1h	equ	0xFE2
  4022                           fsr1l	equ	0xFE1
  4023                           indf2	equ	0xFDF
  4024                           postinc2	equ	0xFDE
  4025                           fsr2h	equ	0xFDA
  4026                           fsr2l	equ	0xFD9
  4027                           status	equ	0xFD8
  4028                           tosu	equ	0xFFF
  4029                           tosh	equ	0xFFE
  4030                           tosl	equ	0xFFD
  4031                           pclatu	equ	0xFFB
  4032                           pclath	equ	0xFFA
  4033                           tblptru	equ	0xFF8
  4034                           tblptrh	equ	0xFF7
  4035                           tblptrl	equ	0xFF6
  4036                           tablat	equ	0xFF5
  4037                           prodh	equ	0xFF4
  4038                           prodl	equ	0xFF3
  4039                           intcon	equ	0xFF2
  4040                           intcon2	equ	0xFF1
  4041                           postinc0	equ	0xFEE
  4042                           fsr0h	equ	0xFEA
  4043                           fsr0l	equ	0xFE9
  4044                           wreg	equ	0xFE8
  4045                           postdec1	equ	0xFE5
  4046                           fsr1h	equ	0xFE2
  4047                           fsr1l	equ	0xFE1
  4048                           indf2	equ	0xFDF
  4049                           postinc2	equ	0xFDE
  4050                           fsr2h	equ	0xFDA
  4051                           fsr2l	equ	0xFD9
  4052                           status	equ	0xFD8
  4053                           
  4054                           	psect	rparam
  4055  0000                     tosu	equ	0xFFF
  4056                           tosh	equ	0xFFE
  4057                           tosl	equ	0xFFD
  4058                           pclatu	equ	0xFFB
  4059                           pclath	equ	0xFFA
  4060                           tblptru	equ	0xFF8
  4061                           tblptrh	equ	0xFF7
  4062                           tblptrl	equ	0xFF6
  4063                           tablat	equ	0xFF5
  4064                           prodh	equ	0xFF4
  4065                           prodl	equ	0xFF3
  4066                           intcon	equ	0xFF2
  4067                           intcon2	equ	0xFF1
  4068                           postinc0	equ	0xFEE
  4069                           fsr0h	equ	0xFEA
  4070                           fsr0l	equ	0xFE9
  4071                           wreg	equ	0xFE8
  4072                           postdec1	equ	0xFE5
  4073                           fsr1h	equ	0xFE2
  4074                           fsr1l	equ	0xFE1
  4075                           indf2	equ	0xFDF
  4076                           postinc2	equ	0xFDE
  4077                           fsr2h	equ	0xFDA
  4078                           fsr2l	equ	0xFD9
  4079                           status	equ	0xFD8
  4080                           
  4081                           	psect	temp
  4082  00004D                     btemp:
  4083                           	opt stack 0
  4084  00004D                     	ds	1
  4085  0000                     int$flags	set	btemp
  4086  0000                     wtemp6	set	btemp+1
  4087                           tosu	equ	0xFFF
  4088                           tosh	equ	0xFFE
  4089                           tosl	equ	0xFFD
  4090                           pclatu	equ	0xFFB
  4091                           pclath	equ	0xFFA
  4092                           tblptru	equ	0xFF8
  4093                           tblptrh	equ	0xFF7
  4094                           tblptrl	equ	0xFF6
  4095                           tablat	equ	0xFF5
  4096                           prodh	equ	0xFF4
  4097                           prodl	equ	0xFF3
  4098                           intcon	equ	0xFF2
  4099                           intcon2	equ	0xFF1
  4100                           postinc0	equ	0xFEE
  4101                           fsr0h	equ	0xFEA
  4102                           fsr0l	equ	0xFE9
  4103                           wreg	equ	0xFE8
  4104                           postdec1	equ	0xFE5
  4105                           fsr1h	equ	0xFE2
  4106                           fsr1l	equ	0xFE1
  4107                           indf2	equ	0xFDF
  4108                           postinc2	equ	0xFDE
  4109                           fsr2h	equ	0xFDA
  4110                           fsr2l	equ	0xFD9
  4111                           status	equ	0xFD8


Data Sizes:
    Strings     39
    Constant    300
    Data        121
    BSS         1056
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      76
    BANK0           160      9     117
    BANK1           256    181     196
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    handle_serial	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), get_key(), get_temp(), 

    print_text@s	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_4(CODE[2]), STR_3(CODE[26]), STR_2(CODE[3]), STR_1(CODE[10]), 


Critical Paths under _main in COMRAM

    _handle_thermo->_draw_degrees
    _handle_test->_draw_degrees
    _print_text->_print_byte
    _print_number->_print_number_nospace
    _print_number_nospace->___llmod
    ___llmod->___lldiv
    _draw_degrees->___awdiv

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_get_temp
    _get_temp->_print_number

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_handle_test

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8711
                                              7 BANK0      2     2      0
                   Absolute function *
                            _get_key *
                           _get_temp *
                        _handle_test
                      _handle_thermo
                         _print_text
 ---------------------------------------------------------------------------------
 (1) _handle_thermo                                        0     0      0    1415
                       _draw_degrees
 ---------------------------------------------------------------------------------
 (1) _handle_test                                        181   181      0    1588
                                              0 BANK1    181   181      0
                       _draw_degrees
                         _write_leds
 ---------------------------------------------------------------------------------
 (1) _get_temp                                             3     3      0    5193
                                              4 BANK0      3     3      0
                       _draw_degrees
                         _print_byte
                       _print_number
                         _print_text
 ---------------------------------------------------------------------------------
 (1) _print_text                                           2     0      2     447
                                             19 COMRAM     2     0      2
                         _print_byte
 ---------------------------------------------------------------------------------
 (2) _print_number                                         4     0      4    3173
                                              0 BANK0      4     0      4
                         _print_byte
               _print_number_nospace
 ---------------------------------------------------------------------------------
 (3) _print_number_nospace                                 4     0      4    3030
                                             40 COMRAM     4     0      4
                            ___lldiv
                            ___llmod
                         _print_byte
 ---------------------------------------------------------------------------------
 (2) _print_byte                                           1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     952
                                             31 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    1501
                                             18 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _draw_degrees                                         7     7      0    1415
                                             26 COMRAM     7     7      0
                            ___awdiv
                            ___lbmod
                         _write_leds
 ---------------------------------------------------------------------------------
 (3) _write_leds                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     412
                                             18 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     805
                                             18 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _get_key                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   Absolute function(Fake) *
   _get_key *
   _get_temp *
     _draw_degrees
       ___awdiv
       ___lbmod
       _write_leds
     _print_byte
     _print_number
       _print_byte
       _print_number_nospace
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _print_byte
     _print_text
       _print_byte
   _handle_test *
     _draw_degrees
       ___awdiv
       ___lbmod
       _write_leds
     _write_leds
   _handle_thermo *
     _draw_degrees
       ___awdiv
       ___lbmod
       _write_leds
   _print_text *
     _print_byte

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0     400      31       30.8%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     B5      C4       7       76.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      9      75       5       73.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      4C       1       80.9%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     185      20        0.0%
DATA                 0      0     585       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Aug 23 07:10:37 2020

                                                 ___awdiv@sign 0018  
                                                  __CFG_OSC$HS 000000  
                                                ?_draw_degrees 0001  
                                                          l130 0190  
                                                          l122 0C4C  
                                                          l210 05A0  
                                                          l131 01D0  
                                                          l123 0C34  
                                                          l132 0234  
                                                          l212 05BE  
                                                          l133 0296  
                                                          l118 0C2A  
                                                          l134 02F8  
                                                          l230 0824  
                                                          l214 05FA  
                                                          l207 06AC  
                                                          l223 0BF0  
                                                          l128 010C  
                                                          l232 0844  
                                                          l216 0610  
                                                          l208 057C  
                                                          l224 0BC4  
                                                          l129 014E  
                                                          l233 089E  
                                                          l209 06C8  
                                                          l225 0BCA  
                                                          l234 0864  
                                                          l242 0B8A  
                                                          l218 06A2  
                                                          l244 0B98  
                                                          l190 0386  
                                                          l239 0B70  
                                                          l263 076A  
                                                          l440 08BA  
                                                          l192 03E2  
                                                          l441 08CC  
                                                          l193 04D0  
                                                          l266 07A6  
                                                          l443 08EE  
                                                          l611 0C74  
                                                          l267 07AC  
                                                          l444 08E4  
                                                          l612 0C8E  
                                                          l447 0912  
                                                          l623 09FE  
                                                          l448 091E  
                                                          l624 09F0  
                                                          l449 092E  
                                                          l633 0A7E  
                                                          l634 0A70  
                                                          l627 0A36  
                                                          l628 0A46  
                                                          l637 0AAA  
                                                          l638 0ABA  
                                                          _isr 0008  
                                                          prod 000FF3  
                                                          tosl 000FFD  
                                                          wreg 000FE8  
                                                 __CFG_LVP$OFF 000000  
                                                         l2100 0608  
                                                         l2154 081A  
                                                         l2262 073C  
                                                         ?_isr 0001  
                                                         STR_1 BFF1  
                                                         STR_2 BFFB  
                                                         STR_3 BFD7  
                                                         STR_4 BFEF  
                                                         u1200 0A04  
                                                         u1300 0246  
                                                         u1230 0A84  
                                                         u1310 02A8  
                                                         u1250 00E0  
                                                         u1260 0122  
                                                         _LATA 000F89  
                                                         u1350 08F4  
                                                         u1430 03F0  
                                                         u1270 0164  
                                                         _LATC 000F8B  
                                                         u1280 01A4  
                                                         u1520 0568  
                                                         u1290 01E4  
                                                         _LATF 000F8E  
                                                         _LATG 000F8F  
                                                         u1540 05D0  
                                                         u1630 084A  
                                                         u1710 0750  
                                                         u1560 0622  
                                                         u1580 0BB2  
                                                         u1738 077C  
                                                         u1739 0794  
                                                         _main 06CE  
                                                         fsr0h 000FEA  
                                                         fsr1h 000FE2  
                                                         fsr2h 000FDA  
                                                         fsr0l 000FE9  
                                                         indf2 000FDF  
                                                         fsr1l 000FE1  
                                                         fsr2l 000FD9  
                                                         btemp 004D  
                                                         prodh 000FF4  
                                                         prodl 000FF3  
                                                         start 00C6  
                                                 ___param_bank 000000  
                                                        ??_isr 0001  
                                               ??_draw_degrees 001B  
                                                        ?_main 0001  
                                              __end_of___awdiv 093C  
                                              __end_of___lbmod 0C9A  
                                              __end_of___lldiv 0A5C  
                                              ___awdiv@divisor 0015  
                                                        _T1CON 000FCD  
                                              __end_of___llmod 0AD0  
                                                        i2l253 0056  
                                                        i2l254 0070  
                                              ___awdiv@counter 0017  
                                                        _RCREG 000FAE  
                                                        _RCSTA 000FAB  
                                                        _SPBRG 000FAF  
                                                        _TRISA 000F92  
                                                        _TRISC 000F94  
                                                        _TRISF 000F97  
                                                        _TRISG 000F98  
                                         handle_test@test_mask 0100  
                                                        _TXREG 000FAD  
                                                        _TXSTA 000FAC  
                                              __end_of_get_key 0B9E  
                                                        main@i 00D3  
                                                        pclath 000FFA  
                                                        tablat 000FF5  
                                                        status 000FD8  
                                                        wtemp6 004E  
                                              __initialization 093C  
                                                 __end_of_main 07E6  
                                __size_of_print_number_nospace 0260  
                                                       ??_main 002D  
                                                __activetblptr 000002  
                                                       _ADCON1 000FC1  
                                         __size_of_handle_test 0176  
                                             ___llmod@dividend 0020  
                                                       _CCPR2H 000FBC  
                                                       _CCPR2L 000FBB  
                                             ___awdiv@dividend 0013  
                                                       _SPBRGH 000F7F  
                                        handle_test@test_index 01C2  
                                        handle_test@test_table 01B5  
                                             __end_of_get_temp 08A4  
                                                    ??___awdiv 0017  
                                                    ??___lbmod 0014  
                                                    ??___lldiv 001B  
                                                    ??___llmod 0028  
                                                       clear_0 099C  
                                                       clear_1 09B8  
                                             ___awdiv@quotient 0019  
                                                    ??_get_key 0013  
                                                 __pdataCOMRAM 004B  
                                                 __mediumconst BEAA  
                                                       tblptrh 000FF7  
                                                       tblptrl 000FF6  
                                                       tblptru 000FF8  
                                              ___lbmod@divisor 0013  
                                                   __accesstop 0060  
                                      __end_of__initialization 09BE  
                                              ___lbmod@counter 0015  
                                         __end_of_draw_degrees 0558  
                                                ___rparam_used 000001  
                                               __pcstackCOMRAM 0001  
                                                 __pidataBANK0 0AD0  
                                                 __pidataBANK1 0CD0  
                                           __end_of_PACKET_KEY BFCF  
                                                   __pbssBANK1 01C0  
                                        __end_of_handle_thermo 0BF6  
                                                   __pnvCOMRAM 0049  
                                               get_temp@failed 00D1  
                                                      _CCP2CON 000FBA  
                                                      _BAUDCTL 000F7E  
                                                   _led_masks1 BFCF  
                                                   _led_masks2 BF87  
                                                   _led_masks3 BF5F  
                                                    ?_get_temp 0001  
                                                      __Hparam 0000  
                                                      __Lparam 0000  
                                                      ___awdiv 08A4  
                                                      ___lbmod 0C68  
                                                      ___lldiv 09CC  
                                                      ___llmod 0A5C  
                                                   _key_offset 0046  
                                            __end_of_hex_table BFBF  
                                                      __pcinit 093C  
                                                      _degrees 004C  
                                                      __ramtop 0D00  
                                                      __ptext0 06CE  
                                                      __ptext1 0B9E  
                                                      __ptext2 0558  
                                                      __ptext3 0B3C  
                                                      __ptext4 07E6  
                                                      __ptext5 0C30  
                                                      __ptext6 0C9A  
                                                      __ptext7 00CA  
                                                      __ptext8 0BF6  
                                                      __ptext9 0A5C  
                                                      _get_key 0B3C  
                                                 __size_of_isr 00BE  
                                                      _invalid 004B  
                                 __end_of_print_number_nospace 032A  
                                                      _time_hz 01C0  
                                        __size_of_draw_degrees 022E  
                                                   ??_get_temp 00D0  
                                         end_of_initialization 09BE  
                                                __Lmediumconst BEAA  
                                            handle_test@F13104 BEAB  
                                              ___lldiv@divisor 0017  
                                              ___lldiv@counter 001F  
                                         __end_of_invalid_mask BFD7  
                                                      postdec1 000FE5  
                                                      postinc0 000FEE  
                                                      postinc2 000FDE  
                                                   _temp_table 0060  
                                                    _PORTBbits 000F81  
                                                 _draw_degrees 032A  
                                                   _print_byte 0BF6  
                                                   _test_state 01C3  
                                                   _print_text 0C30  
                                                ??_handle_test 0022  
                                             ___lbmod@dividend 0014  
                                                    _TRISBbits 000F93  
                                                    _TRISDbits 000F95  
                                                ?_print_number 00CC  
                                                  ___lbmod@rem 0016  
                                    __end_ofhandle_test@F13104 BF5F  
                                                  print_byte@c 0013  
                                                  print_text@s 0014  
                                                __pidataCOMRAM 0CDB  
                                                   _write_leds 0CBA  
                                          start_initialization 093C  
                                               ??_print_number 002D  
                                            draw_degrees@force 001F  
                                            draw_degrees@index 0020  
                                                  __end_of_isr 00C6  
                                          __end_of_handle_test 06CE  
                                              ___llmod@divisor 0024  
                                              ___llmod@counter 0028  
                                         _print_number_nospace 00CA  
                                                  __pdataBANK0 0060  
                                                  __pdataBANK1 01B5  
                                    handle_test@test_mask_size 01B4  
                                                  ?_print_byte 0001  
                                                  ?_print_text 0014  
                                                  __pbssBIGRAM 01C4  
                                                  __pbssCOMRAM 002D  
                                                __pcstackBANK0 00CC  
                                                __pcstackBANK1 0100  
                                                    _adc_accum 0035  
                                                    _adc_count 0031  
                                                  _data_offset 0045  
                                            __size_of_get_temp 00BE  
                                        ?_print_number_nospace 0029  
                                                    __pintcode 0008  
                                                __pmediumconst BEAA  
                                                     ?___awdiv 0013  
                                                     ?___lbmod 0013  
                                                     ?___lldiv 0013  
                                                     ?___llmod 0020  
                                              _timeout_counter 0044  
                                                  ?_write_leds 0001  
                                                    _led_mask0 0043  
                                                    _led_mask1 0042  
                                                    _led_mask2 0041  
                                                    _led_mask3 0040  
                                                     ?_get_key 0001  
                                       __size_of_handle_thermo 0058  
                                                    _hex_table BFAF  
                                                  _handle_test 0558  
                                                 _invalid_mask BFD3  
                                               _uart_position1 003B  
                                               _uart_position2 0039  
                                                     _LATBbits 000F8A  
                                                     _LATDbits 000F8C  
                                                     _PIE1bits 000F9D  
                                                  _have_serial 0048  
                                          __size_of_print_byte 003A  
                                   print_number_nospace@number 0029  
                                          __size_of_print_text 0038  
                                                     _PIR1bits 000F9E  
                                                     _PIR2bits 000FA1  
                                                    _serial_in 0047  
                                         __end_of_print_number 0CBA  
                                                    _uart_size 003D  
                                                    get_temp@i 00D2  
                                                  _INTCON2bits 000FF1  
                                                    copy_data0 0950  
                                                    copy_data1 0970  
                                             draw_degrees@temp 001D  
                                                _handle_serial 0049  
                                          __size_of_write_leds 0016  
                                                _handle_thermo 0B9E  
                                                     __Hrparam 0000  
                                       ??_print_number_nospace 002D  
                                                     __Lrparam 0000  
                                             __size_of___awdiv 0098  
                                             __size_of___lbmod 0032  
                                             __size_of___lldiv 0090  
                                             __size_of___llmod 0074  
                                           __end_of_led_masks1 BFD3  
                                           __end_of_led_masks2 BFAF  
                                           __end_of_led_masks3 BF87  
                                             __size_of_get_key 0062  
                                                     __ptext10 09CC  
                                                     __ptext11 032A  
                                                     __ptext12 0CBA  
                                                     __ptext13 0C68  
                                                     __ptext14 08A4  
                                                     _get_temp 07E6  
                                               ?_handle_thermo 0001  
                                                __size_of_main 0118  
                                                   _PACKET_KEY BFBF  
                                                     int$flags 004D  
                                                 ??_print_byte 0013  
                                                 ??_print_text 0016  
                                                   _INTCONbits 000FF2  
                                                     intlevel2 0CDE  
                                           print_number@number 00CC  
                                             ___lldiv@dividend 0013  
                                        __size_of_print_number 0020  
                                           __end_of_print_byte 0C30  
                                                  _serial_data 002D  
                                           __end_of_print_text 0C68  
                                                 ??_write_leds 0013  
                                                  _uart_buffer 01C4  
                                             ___lldiv@quotient 001B  
                                               _interrupt_done 003F  
                                                 ?_handle_test 0001  
                                                 _print_number 0C9A  
                                              ??_handle_thermo 0022  
                                           __end_of_write_leds 0CD0  

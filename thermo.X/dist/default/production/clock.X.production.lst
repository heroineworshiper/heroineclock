

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Jun 22 21:49:44 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F6585
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    54                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    55  0000                     
    56                           ; Version 1.41
    57                           ; Generated 25/01/2017 GMT
    58                           ; 
    59                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC18F6585 Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     
    91                           	psect	idataCOMRAM
    92  001C94                     __pidataCOMRAM:
    93                           	opt stack 0
    94                           
    95                           ;initializer for _first_edge
    96  001C94  01                 	db	1
    97                           
    98                           ;initializer for _alarm_hours
    99  001C95  0C                 	db	12
   100                           
   101                           ;initializer for _not_set
   102  001C96  01                 	db	1
   103                           
   104                           ;initializer for _colon
   105  001C97  01                 	db	1
   106                           
   107                           ;initializer for _hours
   108  001C98  0C                 	db	12
   109                           
   110                           	psect	mediumconst
   111  00B95A                     __pmediumconst:
   112                           	opt stack 0
   113  00B95A  00                 	db	0
   114  00B95B                     _freqs:
   115                           	opt stack 0
   116  00B95B  4AA7               	dw	19111
   117  00B95D  4676               	dw	18038
   118  00B95F  4282               	dw	17026
   119  00B961  3EC6               	dw	16070
   120  00B963  3B40               	dw	15168
   121  00B965  37ED               	dw	14317
   122  00B967  34C9               	dw	13513
   123  00B969  31D3               	dw	12755
   124  00B96B  2F07               	dw	12039
   125  00B96D  2C63               	dw	11363
   126  00B96F  29E5               	dw	10725
   127  00B971  278B               	dw	10123
   128  00B973  2553               	dw	9555
   129  00B975  233B               	dw	9019
   130  00B977  2141               	dw	8513
   131  00B979  1F63               	dw	8035
   132  00B97B  1DA0               	dw	7584
   133  00B97D  1BF6               	dw	7158
   134  00B97F  1A64               	dw	6756
   135  00B981  18E9               	dw	6377
   136  00B983  1783               	dw	6019
   137  00B985  1631               	dw	5681
   138  00B987  14F2               	dw	5362
   139  00B989  13C5               	dw	5061
   140  00B98B  12A9               	dw	4777
   141  00B98D  119D               	dw	4509
   142  00B98F  10A0               	dw	4256
   143  00B991  0FB1               	dw	4017
   144  00B993  0ED0               	dw	3792
   145  00B995  0DFB               	dw	3579
   146  00B997  0D32               	dw	3378
   147  00B999  0C74               	dw	3188
   148  00B99B  0BC1               	dw	3009
   149  00B99D  0B18               	dw	2840
   150  00B99F  0A79               	dw	2681
   151  00B9A1  09E2               	dw	2530
   152  00B9A3  0954               	dw	2388
   153  00B9A5                     __end_of_freqs:
   154                           	opt stack 0
   155  00B9A5                     _hex_table:
   156                           	opt stack 0
   157  00B9A5  30                 	db	48
   158  00B9A6  31                 	db	49
   159  00B9A7  32                 	db	50
   160  00B9A8  33                 	db	51
   161  00B9A9  34                 	db	52
   162  00B9AA  35                 	db	53
   163  00B9AB  36                 	db	54
   164  00B9AC  37                 	db	55
   165  00B9AD  38                 	db	56
   166  00B9AE  39                 	db	57
   167  00B9AF  61                 	db	97
   168  00B9B0  62                 	db	98
   169  00B9B1  63                 	db	99
   170  00B9B2  64                 	db	100
   171  00B9B3  65                 	db	101
   172  00B9B4  66                 	db	102
   173  00B9B5                     __end_of_hex_table:
   174                           	opt stack 0
   175  00B9B5                     _number3_data:
   176                           	opt stack 0
   177  00B9B5  057C               	dw	1404
   178  00B9B7  02B9               	dw	697
   179  00B9B9  0073               	dw	115
   180  00B9BB  003A               	dw	58
   181  00B9BD  0072               	dw	114
   182  00B9BF  00EC               	dw	236
   183  00B9C1  0074               	dw	116
   184  00B9C3  0039               	dw	57
   185  00B9C5  0071               	dw	113
   186  00B9C7  00EC               	dw	236
   187  00B9C9  006F               	dw	111
   188  00B9CB  00EF               	dw	239
   189  00B9CD  0070               	dw	112
   190  00B9CF  00F0               	dw	240
   191  00B9D1  006F               	dw	111
   192  00B9D3  00EC               	dw	236
   193  00B9D5  0070               	dw	112
   194  00B9D7  0040               	dw	64
   195  00B9D9  006C               	dw	108
   196  00B9DB  00F2               	dw	242
   197  00B9DD  006C               	dw	108
   198  00B9DF  0041               	dw	65
   199  00B9E1  006C               	dw	108
   200  00B9E3  00F2               	dw	242
   201  00B9E5  006C               	dw	108
   202  00B9E7  0040               	dw	64
   203  00B9E9  006A               	dw	106
   204  00B9EB  0043               	dw	67
   205  00B9ED  0069               	dw	105
   206  00B9EF  0044               	dw	68
   207  00B9F1  0068               	dw	104
   208  00B9F3  0044               	dw	68
   209  00B9F5  0068               	dw	104
   210  00B9F7  00F5               	dw	245
   211  00B9F9  006B               	dw	107
   212  00B9FB  0042               	dw	66
   213  00B9FD  0068               	dw	104
   214  00B9FF  0045               	dw	69
   215  00BA01  006A               	dw	106
   216  00BA03  0042               	dw	66
   217  00BA05  0068               	dw	104
   218  00BA07  00F6               	dw	246
   219  00BA09  006C               	dw	108
   220  00BA0B  00F2               	dw	242
   221  00BA0D  0069               	dw	105
   222  00BA0F  0044               	dw	68
   223  00BA11  006A               	dw	106
   224  00BA13  0043               	dw	67
   225  00BA15  006B               	dw	107
   226  00BA17  0042               	dw	66
   227  00BA19  006B               	dw	107
   228  00BA1B  00F3               	dw	243
   229  00BA1D  0068               	dw	104
   230  00BA1F  00F6               	dw	246
   231  00BA21  0068               	dw	104
   232  00BA23  00F6               	dw	246
   233  00BA25  0069               	dw	105
   234  00BA27  0044               	dw	68
   235  00BA29  006A               	dw	106
   236  00BA2B  0043               	dw	67
   237  00BA2D  0068               	dw	104
   238  00BA2F  00F6               	dw	246
   239  00BA31  0068               	dw	104
   240  00BA33  00F6               	dw	246
   241  00BA35  0067               	dw	103
   242  00BA37  00F7               	dw	247
   243  00BA39  0067               	dw	103
   244  00BA3B  1835               	dw	6197
   245  00BA3D  056E               	dw	1390
   246  00BA3F  0147               	dw	327
   247  00BA41  0067               	dw	103
   248  00BA43                     __end_of_number3_data:
   249                           	opt stack 0
   250  00BA43                     _number2_data:
   251                           	opt stack 0
   252  00BA43  057A               	dw	1402
   253  00BA45  02BA               	dw	698
   254  00BA47  0077               	dw	119
   255  00BA49  0035               	dw	53
   256  00BA4B  0074               	dw	116
   257  00BA4D  00ED               	dw	237
   258  00BA4F  0070               	dw	112
   259  00BA51  003A               	dw	58
   260  00BA53  0073               	dw	115
   261  00BA55  00EE               	dw	238
   262  00BA57  0070               	dw	112
   263  00BA59  00EA               	dw	234
   264  00BA5B  006F               	dw	111
   265  00BA5D  00F2               	dw	242
   266  00BA5F  006D               	dw	109
   267  00BA61  00F0               	dw	240
   268  00BA63  0070               	dw	112
   269  00BA65  003D               	dw	61
   270  00BA67  0070               	dw	112
   271  00BA69  00EE               	dw	238
   272  00BA6B  006C               	dw	108
   273  00BA6D  0041               	dw	65
   274  00BA6F  006F               	dw	111
   275  00BA71  00EE               	dw	238
   276  00BA73  006D               	dw	109
   277  00BA75  0040               	dw	64
   278  00BA77  006C               	dw	108
   279  00BA79  0041               	dw	65
   280  00BA7B  006C               	dw	108
   281  00BA7D  0041               	dw	65
   282  00BA7F  006B               	dw	107
   283  00BA81  0041               	dw	65
   284  00BA83  006B               	dw	107
   285  00BA85  00F2               	dw	242
   286  00BA87  006B               	dw	107
   287  00BA89  0042               	dw	66
   288  00BA8B  0069               	dw	105
   289  00BA8D  00F4               	dw	244
   290  00BA8F  0069               	dw	105
   291  00BA91  00F5               	dw	245
   292  00BA93  006C               	dw	108
   293  00BA95  0041               	dw	65
   294  00BA97  006C               	dw	108
   295  00BA99  00F2               	dw	242
   296  00BA9B  006B               	dw	107
   297  00BA9D  0042               	dw	66
   298  00BA9F  006B               	dw	107
   299  00BAA1  0042               	dw	66
   300  00BAA3  006B               	dw	107
   301  00BAA5  0042               	dw	66
   302  00BAA7  006B               	dw	107
   303  00BAA9  00F3               	dw	243
   304  00BAAB  006B               	dw	107
   305  00BAAD  0042               	dw	66
   306  00BAAF  006A               	dw	106
   307  00BAB1  0043               	dw	67
   308  00BAB3  006A               	dw	106
   309  00BAB5  00F4               	dw	244
   310  00BAB7  006A               	dw	106
   311  00BAB9  0043               	dw	67
   312  00BABB  0068               	dw	104
   313  00BABD  00F6               	dw	246
   314  00BABF  006B               	dw	107
   315  00BAC1  00F3               	dw	243
   316  00BAC3  006B               	dw	107
   317  00BAC5  00F2               	dw	242
   318  00BAC7  0068               	dw	104
   319  00BAC9  1835               	dw	6197
   320  00BACB  056E               	dw	1390
   321  00BACD  0148               	dw	328
   322  00BACF  006B               	dw	107
   323  00BAD1                     __end_of_number2_data:
   324                           	opt stack 0
   325  00BAD1                     _number1_data:
   326                           	opt stack 0
   327  00BAD1  057C               	dw	1404
   328  00BAD3  02BB               	dw	699
   329  00BAD5  0070               	dw	112
   330  00BAD7  003D               	dw	61
   331  00BAD9  0070               	dw	112
   332  00BADB  00EE               	dw	238
   333  00BADD  0071               	dw	113
   334  00BADF  003B               	dw	59
   335  00BAE1  0071               	dw	113
   336  00BAE3  00ED               	dw	237
   337  00BAE5  006D               	dw	109
   338  00BAE7  00F1               	dw	241
   339  00BAE9  006C               	dw	108
   340  00BAEB  00F2               	dw	242
   341  00BAED  0072               	dw	114
   342  00BAEF  00EB               	dw	235
   343  00BAF1  006E               	dw	110
   344  00BAF3  003F               	dw	63
   345  00BAF5  006F               	dw	111
   346  00BAF7  00EE               	dw	238
   347  00BAF9  0070               	dw	112
   348  00BAFB  003E               	dw	62
   349  00BAFD  006D               	dw	109
   350  00BAFF  00F1               	dw	241
   351  00BB01  006D               	dw	109
   352  00BB03  0040               	dw	64
   353  00BB05  006C               	dw	108
   354  00BB07  0041               	dw	65
   355  00BB09  006C               	dw	108
   356  00BB0B  0041               	dw	65
   357  00BB0D  006B               	dw	107
   358  00BB0F  0042               	dw	66
   359  00BB11  006B               	dw	107
   360  00BB13  00F2               	dw	242
   361  00BB15  006B               	dw	107
   362  00BB17  00F3               	dw	243
   363  00BB19  006E               	dw	110
   364  00BB1B  003F               	dw	63
   365  00BB1D  006F               	dw	111
   366  00BB1F  00EE               	dw	238
   367  00BB21  006B               	dw	107
   368  00BB23  0042               	dw	66
   369  00BB25  006B               	dw	107
   370  00BB27  00F3               	dw	243
   371  00BB29  006B               	dw	107
   372  00BB2B  0042               	dw	66
   373  00BB2D  0069               	dw	105
   374  00BB2F  0044               	dw	68
   375  00BB31  006B               	dw	107
   376  00BB33  0042               	dw	66
   377  00BB35  006B               	dw	107
   378  00BB37  0042               	dw	66
   379  00BB39  006B               	dw	107
   380  00BB3B  00F3               	dw	243
   381  00BB3D  006B               	dw	107
   382  00BB3F  0042               	dw	66
   383  00BB41  0068               	dw	104
   384  00BB43  00F6               	dw	246
   385  00BB45  0069               	dw	105
   386  00BB47  0045               	dw	69
   387  00BB49  006B               	dw	107
   388  00BB4B  00F2               	dw	242
   389  00BB4D  006B               	dw	107
   390  00BB4F  00F2               	dw	242
   391  00BB51  0069               	dw	105
   392  00BB53  00F5               	dw	245
   393  00BB55  0068               	dw	104
   394  00BB57  1835               	dw	6197
   395  00BB59  056F               	dw	1391
   396  00BB5B  0146               	dw	326
   397  00BB5D  006A               	dw	106
   398  00BB5F                     __end_of_number1_data:
   399                           	opt stack 0
   400  00BB5F                     _prev_track_data:
   401                           	opt stack 0
   402  00BB5F  057C               	dw	1404
   403  00BB61  02BA               	dw	698
   404  00BB63  0073               	dw	115
   405  00BB65  003A               	dw	58
   406  00BB67  0070               	dw	112
   407  00BB69  00ED               	dw	237
   408  00BB6B  0076               	dw	118
   409  00BB6D  0037               	dw	55
   410  00BB6F  0073               	dw	115
   411  00BB71  00EB               	dw	235
   412  00BB73  0070               	dw	112
   413  00BB75  00F1               	dw	241
   414  00BB77  006F               	dw	111
   415  00BB79  00EC               	dw	236
   416  00BB7B  0073               	dw	115
   417  00BB7D  00EB               	dw	235
   418  00BB7F  0070               	dw	112
   419  00BB81  0040               	dw	64
   420  00BB83  006C               	dw	108
   421  00BB85  00F2               	dw	242
   422  00BB87  006F               	dw	111
   423  00BB89  003E               	dw	62
   424  00BB8B  006D               	dw	109
   425  00BB8D  00F1               	dw	241
   426  00BB8F  006F               	dw	111
   427  00BB91  003E               	dw	62
   428  00BB93  0070               	dw	112
   429  00BB95  003D               	dw	61
   430  00BB97  006D               	dw	109
   431  00BB99  0040               	dw	64
   432  00BB9B  006F               	dw	111
   433  00BB9D  003E               	dw	62
   434  00BB9F  0070               	dw	112
   435  00BBA1  00EE               	dw	238
   436  00BBA3  006C               	dw	108
   437  00BBA5  00F2               	dw	242
   438  00BBA7  006C               	dw	108
   439  00BBA9  00F2               	dw	242
   440  00BBAB  0069               	dw	105
   441  00BBAD  0044               	dw	68
   442  00BBAF  0069               	dw	105
   443  00BBB1  0045               	dw	69
   444  00BBB3  006A               	dw	106
   445  00BBB5  00F3               	dw	243
   446  00BBB7  006B               	dw	107
   447  00BBB9  0041               	dw	65
   448  00BBBB  0069               	dw	105
   449  00BBBD  00F5               	dw	245
   450  00BBBF  006B               	dw	107
   451  00BBC1  0042               	dw	66
   452  00BBC3  006B               	dw	107
   453  00BBC5  0042               	dw	66
   454  00BBC7  006B               	dw	107
   455  00BBC9  0042               	dw	66
   456  00BBCB  006A               	dw	106
   457  00BBCD  00F3               	dw	243
   458  00BBCF  006B               	dw	107
   459  00BBD1  00F3               	dw	243
   460  00BBD3  0069               	dw	105
   461  00BBD5  0044               	dw	68
   462  00BBD7  0068               	dw	104
   463  00BBD9  00F6               	dw	246
   464  00BBDB  0069               	dw	105
   465  00BBDD  0044               	dw	68
   466  00BBDF  0068               	dw	104
   467  00BBE1  00F6               	dw	246
   468  00BBE3  006A               	dw	106
   469  00BBE5  1832               	dw	6194
   470  00BBE7  056F               	dw	1391
   471  00BBE9  0147               	dw	327
   472  00BBEB  0067               	dw	103
   473  00BBED                     __end_of_prev_track_data:
   474                           	opt stack 0
   475  00BBED                     _next_track_data:
   476                           	opt stack 0
   477  00BBED  057C               	dw	1404
   478  00BBEF  02BA               	dw	698
   479  00BBF1  0075               	dw	117
   480  00BBF3  0039               	dw	57
   481  00BBF5  0073               	dw	115
   482  00BBF7  00EB               	dw	235
   483  00BBF9  0071               	dw	113
   484  00BBFB  003B               	dw	59
   485  00BBFD  0072               	dw	114
   486  00BBFF  00ED               	dw	237
   487  00BC01  0071               	dw	113
   488  00BC03  00EF               	dw	239
   489  00BC05  0070               	dw	112
   490  00BC07  00EB               	dw	235
   491  00BC09  0071               	dw	113
   492  00BC0B  00F0               	dw	240
   493  00BC0D  0070               	dw	112
   494  00BC0F  003C               	dw	60
   495  00BC11  006D               	dw	109
   496  00BC13  00F1               	dw	241
   497  00BC15  006F               	dw	111
   498  00BC17  003E               	dw	62
   499  00BC19  006E               	dw	110
   500  00BC1B  00F0               	dw	240
   501  00BC1D  006D               	dw	109
   502  00BC1F  0040               	dw	64
   503  00BC21  006C               	dw	108
   504  00BC23  0041               	dw	65
   505  00BC25  006C               	dw	108
   506  00BC27  0041               	dw	65
   507  00BC29  006D               	dw	109
   508  00BC2B  0040               	dw	64
   509  00BC2D  006C               	dw	108
   510  00BC2F  00F2               	dw	242
   511  00BC31  006C               	dw	108
   512  00BC33  0041               	dw	65
   513  00BC35  006D               	dw	109
   514  00BC37  00F0               	dw	240
   515  00BC39  006B               	dw	107
   516  00BC3B  0042               	dw	66
   517  00BC3D  006B               	dw	107
   518  00BC3F  0042               	dw	66
   519  00BC41  006B               	dw	107
   520  00BC43  00F2               	dw	242
   521  00BC45  0069               	dw	105
   522  00BC47  0043               	dw	67
   523  00BC49  006B               	dw	107
   524  00BC4B  00F3               	dw	243
   525  00BC4D  006A               	dw	106
   526  00BC4F  0044               	dw	68
   527  00BC51  0069               	dw	105
   528  00BC53  00F4               	dw	244
   529  00BC55  006B               	dw	107
   530  00BC57  0041               	dw	65
   531  00BC59  0069               	dw	105
   532  00BC5B  00F5               	dw	245
   533  00BC5D  006B               	dw	107
   534  00BC5F  00F2               	dw	242
   535  00BC61  0067               	dw	103
   536  00BC63  0046               	dw	70
   537  00BC65  0067               	dw	103
   538  00BC67  00F7               	dw	247
   539  00BC69  0068               	dw	104
   540  00BC6B  0045               	dw	69
   541  00BC6D  0069               	dw	105
   542  00BC6F  00F5               	dw	245
   543  00BC71  006B               	dw	107
   544  00BC73  1831               	dw	6193
   545  00BC75  0570               	dw	1392
   546  00BC77  0146               	dw	326
   547  00BC79  006A               	dw	106
   548  00BC7B                     __end_of_next_track_data:
   549                           	opt stack 0
   550  00BC7B                     _volume_dn_data:
   551                           	opt stack 0
   552  00BC7B  057E               	dw	1406
   553  00BC7D  02B6               	dw	694
   554  00BC7F  0076               	dw	118
   555  00BC81  003A               	dw	58
   556  00BC83  0071               	dw	113
   557  00BC85  00EC               	dw	236
   558  00BC87  0073               	dw	115
   559  00BC89  0039               	dw	57
   560  00BC8B  006E               	dw	110
   561  00BC8D  00F0               	dw	240
   562  00BC8F  0070               	dw	112
   563  00BC91  00EE               	dw	238
   564  00BC93  0070               	dw	112
   565  00BC95  00ED               	dw	237
   566  00BC97  006D               	dw	109
   567  00BC99  00F1               	dw	241
   568  00BC9B  006D               	dw	109
   569  00BC9D  0040               	dw	64
   570  00BC9F  006C               	dw	108
   571  00BCA1  00F2               	dw	242
   572  00BCA3  006E               	dw	110
   573  00BCA5  003F               	dw	63
   574  00BCA7  006F               	dw	111
   575  00BCA9  00EF               	dw	239
   576  00BCAB  006C               	dw	108
   577  00BCAD  0041               	dw	65
   578  00BCAF  006C               	dw	108
   579  00BCB1  0041               	dw	65
   580  00BCB3  006C               	dw	108
   581  00BCB5  0041               	dw	65
   582  00BCB7  006C               	dw	108
   583  00BCB9  0041               	dw	65
   584  00BCBB  006C               	dw	108
   585  00BCBD  00F2               	dw	242
   586  00BCBF  006F               	dw	111
   587  00BCC1  00EF               	dw	239
   588  00BCC3  006B               	dw	107
   589  00BCC5  00F3               	dw	243
   590  00BCC7  006C               	dw	108
   591  00BCC9  0041               	dw	65
   592  00BCCB  006B               	dw	107
   593  00BCCD  00F2               	dw	242
   594  00BCCF  006C               	dw	108
   595  00BCD1  00F1               	dw	241
   596  00BCD3  006B               	dw	107
   597  00BCD5  0042               	dw	66
   598  00BCD7  006B               	dw	107
   599  00BCD9  0042               	dw	66
   600  00BCDB  006B               	dw	107
   601  00BCDD  0042               	dw	66
   602  00BCDF  006B               	dw	107
   603  00BCE1  0042               	dw	66
   604  00BCE3  006B               	dw	107
   605  00BCE5  0042               	dw	66
   606  00BCE7  006B               	dw	107
   607  00BCE9  00F3               	dw	243
   608  00BCEB  006B               	dw	107
   609  00BCED  0042               	dw	66
   610  00BCEF  006B               	dw	107
   611  00BCF1  0042               	dw	66
   612  00BCF3  006B               	dw	107
   613  00BCF5  00F3               	dw	243
   614  00BCF7  0068               	dw	104
   615  00BCF9  00F6               	dw	246
   616  00BCFB  0068               	dw	104
   617  00BCFD  00F6               	dw	246
   618  00BCFF  006B               	dw	107
   619  00BD01  1831               	dw	6193
   620  00BD03  0572               	dw	1394
   621  00BD05  0143               	dw	323
   622  00BD07  0068               	dw	104
   623  00BD09                     __end_of_volume_dn_data:
   624                           	opt stack 0
   625  00BD09                     _volume_up_data:
   626                           	opt stack 0
   627  00BD09  057A               	dw	1402
   628  00BD0B  02BD               	dw	701
   629  00BD0D  0071               	dw	113
   630  00BD0F  003C               	dw	60
   631  00BD11  0072               	dw	114
   632  00BD13  00EC               	dw	236
   633  00BD15  0070               	dw	112
   634  00BD17  003D               	dw	61
   635  00BD19  006F               	dw	111
   636  00BD1B  00EF               	dw	239
   637  00BD1D  0070               	dw	112
   638  00BD1F  00ED               	dw	237
   639  00BD21  006E               	dw	110
   640  00BD23  00EF               	dw	239
   641  00BD25  0070               	dw	112
   642  00BD27  00EE               	dw	238
   643  00BD29  006F               	dw	111
   644  00BD2B  003D               	dw	61
   645  00BD2D  006F               	dw	111
   646  00BD2F  00EE               	dw	238
   647  00BD31  006C               	dw	108
   648  00BD33  0041               	dw	65
   649  00BD35  006B               	dw	107
   650  00BD37  00F2               	dw	242
   651  00BD39  006D               	dw	109
   652  00BD3B  0040               	dw	64
   653  00BD3D  006B               	dw	107
   654  00BD3F  0042               	dw	66
   655  00BD41  006C               	dw	108
   656  00BD43  0041               	dw	65
   657  00BD45  006C               	dw	108
   658  00BD47  0041               	dw	65
   659  00BD49  006B               	dw	107
   660  00BD4B  00F2               	dw	242
   661  00BD4D  0069               	dw	105
   662  00BD4F  0044               	dw	68
   663  00BD51  0069               	dw	105
   664  00BD53  00F5               	dw	245
   665  00BD55  006C               	dw	108
   666  00BD57  0041               	dw	65
   667  00BD59  006B               	dw	107
   668  00BD5B  00F2               	dw	242
   669  00BD5D  006B               	dw	107
   670  00BD5F  00F2               	dw	242
   671  00BD61  006B               	dw	107
   672  00BD63  0042               	dw	66
   673  00BD65  006A               	dw	106
   674  00BD67  0043               	dw	67
   675  00BD69  006B               	dw	107
   676  00BD6B  0042               	dw	66
   677  00BD6D  006B               	dw	107
   678  00BD6F  00F3               	dw	243
   679  00BD71  006B               	dw	107
   680  00BD73  0042               	dw	66
   681  00BD75  006B               	dw	107
   682  00BD77  00F3               	dw	243
   683  00BD79  006C               	dw	108
   684  00BD7B  0040               	dw	64
   685  00BD7D  006A               	dw	106
   686  00BD7F  0043               	dw	67
   687  00BD81  006B               	dw	107
   688  00BD83  00F2               	dw	242
   689  00BD85  006B               	dw	107
   690  00BD87  00F3               	dw	243
   691  00BD89  006B               	dw	107
   692  00BD8B  00F3               	dw	243
   693  00BD8D  0067               	dw	103
   694  00BD8F  1835               	dw	6197
   695  00BD91  056F               	dw	1391
   696  00BD93  0147               	dw	327
   697  00BD95  0069               	dw	105
   698  00BD97                     __end_of_volume_up_data:
   699                           	opt stack 0
   700  00BD97                     _power_data:
   701                           	opt stack 0
   702  00BD97  0573               	dw	1395
   703  00BD99  02C2               	dw	706
   704  00BD9B  006B               	dw	107
   705  00BD9D  0042               	dw	66
   706  00BD9F  006B               	dw	107
   707  00BDA1  00F3               	dw	243
   708  00BDA3  006B               	dw	107
   709  00BDA5  0042               	dw	66
   710  00BDA7  006B               	dw	107
   711  00BDA9  00F3               	dw	243
   712  00BDAB  006B               	dw	107
   713  00BDAD  00F3               	dw	243
   714  00BDAF  006B               	dw	107
   715  00BDB1  00F3               	dw	243
   716  00BDB3  006B               	dw	107
   717  00BDB5  00F3               	dw	243
   718  00BDB7  006B               	dw	107
   719  00BDB9  0042               	dw	66
   720  00BDBB  006B               	dw	107
   721  00BDBD  00F3               	dw	243
   722  00BDBF  006B               	dw	107
   723  00BDC1  0042               	dw	66
   724  00BDC3  006B               	dw	107
   725  00BDC5  00F6               	dw	246
   726  00BDC7  0068               	dw	104
   727  00BDC9  0045               	dw	69
   728  00BDCB  0068               	dw	104
   729  00BDCD  0045               	dw	69
   730  00BDCF  0068               	dw	104
   731  00BDD1  0045               	dw	69
   732  00BDD3  0068               	dw	104
   733  00BDD5  0046               	dw	70
   734  00BDD7  0068               	dw	104
   735  00BDD9  00F6               	dw	246
   736  00BDDB  0068               	dw	104
   737  00BDDD  00F6               	dw	246
   738  00BDDF  0067               	dw	103
   739  00BDE1  00F6               	dw	246
   740  00BDE3  0067               	dw	103
   741  00BDE5  00F6               	dw	246
   742  00BDE7  0067               	dw	103
   743  00BDE9  00F6               	dw	246
   744  00BDEB  0067               	dw	103
   745  00BDED  00F7               	dw	247
   746  00BDEF  0067               	dw	103
   747  00BDF1  0045               	dw	69
   748  00BDF3  0067               	dw	103
   749  00BDF5  0046               	dw	70
   750  00BDF7  0067               	dw	103
   751  00BDF9  0046               	dw	70
   752  00BDFB  0067               	dw	103
   753  00BDFD  0046               	dw	70
   754  00BDFF  0067               	dw	103
   755  00BE01  0045               	dw	69
   756  00BE03  0067               	dw	103
   757  00BE05  0046               	dw	70
   758  00BE07  0067               	dw	103
   759  00BE09  0046               	dw	70
   760  00BE0B  0067               	dw	103
   761  00BE0D  0046               	dw	70
   762  00BE0F  0067               	dw	103
   763  00BE11  00F7               	dw	247
   764  00BE13  0067               	dw	103
   765  00BE15  00F7               	dw	247
   766  00BE17  0067               	dw	103
   767  00BE19  00F7               	dw	247
   768  00BE1B  0067               	dw	103
   769  00BE1D  1837               	dw	6199
   770  00BE1F  056F               	dw	1391
   771  00BE21  0147               	dw	327
   772  00BE23  0067               	dw	103
   773  00BE25                     __end_of_power_data:
   774                           	opt stack 0
   775  00BE25                     _alarm_song:
   776                           	opt stack 0
   777  00BE25  00                 	db	0
   778  00BE26  00                 	db	0
   779  00BE27  0C                 	db	12
   780  00BE28  22                 	db	34
   781  00BE29  06                 	db	6
   782  00BE2A  01                 	db	1
   783  00BE2B  10                 	db	16
   784  00BE2C  22                 	db	34
   785  00BE2D  06                 	db	6
   786  00BE2E  02                 	db	2
   787  00BE2F  13                 	db	19
   788  00BE30  22                 	db	34
   789  00BE31  06                 	db	6
   790  00BE32  00                 	db	0
   791  00BE33  17                 	db	23
   792  00BE34  22                 	db	34
   793  00BE35  06                 	db	6
   794  00BE36  01                 	db	1
   795  00BE37  18                 	db	24
   796  00BE38  22                 	db	34
   797  00BE39  06                 	db	6
   798  00BE3A  01                 	db	1
   799  00BE3B  1C                 	db	28
   800  00BE3C  22                 	db	34
   801  00BE3D  06                 	db	6
   802  00BE3E  02                 	db	2
   803  00BE3F  1F                 	db	31
   804  00BE40  22                 	db	34
   805  00BE41  06                 	db	6
   806  00BE42  00                 	db	0
   807  00BE43  23                 	db	35
   808  00BE44  22                 	db	34
   809  00BE45  06                 	db	6
   810  00BE46  01                 	db	1
   811  00BE47  24                 	db	36
   812  00BE48  22                 	db	34
   813  00BE49  06                 	db	6
   814  00BE4A  00                 	db	0
   815  00BE4B  23                 	db	35
   816  00BE4C  22                 	db	34
   817  00BE4D  06                 	db	6
   818  00BE4E  02                 	db	2
   819  00BE4F  1F                 	db	31
   820  00BE50  22                 	db	34
   821  00BE51  06                 	db	6
   822  00BE52  01                 	db	1
   823  00BE53  1C                 	db	28
   824  00BE54  22                 	db	34
   825  00BE55  06                 	db	6
   826  00BE56  01                 	db	1
   827  00BE57  18                 	db	24
   828  00BE58  22                 	db	34
   829  00BE59  06                 	db	6
   830  00BE5A  00                 	db	0
   831  00BE5B  17                 	db	23
   832  00BE5C  22                 	db	34
   833  00BE5D  06                 	db	6
   834  00BE5E  02                 	db	2
   835  00BE5F  13                 	db	19
   836  00BE60  22                 	db	34
   837  00BE61  06                 	db	6
   838  00BE62  01                 	db	1
   839  00BE63  10                 	db	16
   840  00BE64  22                 	db	34
   841  00BE65  06                 	db	6
   842  00BE66  00                 	db	0
   843  00BE67  0C                 	db	12
   844  00BE68  22                 	db	34
   845  00BE69  60                 	db	96
   846  00BE6A  00                 	db	0
   847  00BE6B  00                 	db	0
   848  00BE6C  00                 	db	0
   849  00BE6D  FF                 	db	255
   850  00BE6E  FF                 	db	255
   851  00BE6F  FF                 	db	255
   852  00BE70  FF                 	db	255
   853  00BE71                     __end_of_alarm_song:
   854                           	opt stack 0
   855  00BE71                     _led_masks4:
   856                           	opt stack 0
   857  00BE71  00                 	db	0
   858  00BE72  A4                 	db	164
   859  00BE73  04                 	db	4
   860  00BE74  06                 	db	6
   861  00BE75  00                 	db	0
   862  00BE76  00                 	db	0
   863  00BE77  00                 	db	0
   864  00BE78  06                 	db	6
   865  00BE79  00                 	db	0
   866  00BE7A  64                 	db	100
   867  00BE7B  04                 	db	4
   868  00BE7C  02                 	db	2
   869  00BE7D  00                 	db	0
   870  00BE7E  44                 	db	68
   871  00BE7F  04                 	db	4
   872  00BE80  06                 	db	6
   873  00BE81  00                 	db	0
   874  00BE82  C0                 	db	192
   875  00BE83  00                 	db	0
   876  00BE84  06                 	db	6
   877  00BE85  00                 	db	0
   878  00BE86  C4                 	db	196
   879  00BE87  04                 	db	4
   880  00BE88  04                 	db	4
   881  00BE89  00                 	db	0
   882  00BE8A  E4                 	db	228
   883  00BE8B  04                 	db	4
   884  00BE8C  04                 	db	4
   885  00BE8D  00                 	db	0
   886  00BE8E  00                 	db	0
   887  00BE8F  04                 	db	4
   888  00BE90  06                 	db	6
   889  00BE91  00                 	db	0
   890  00BE92  E4                 	db	228
   891  00BE93  04                 	db	4
   892  00BE94  06                 	db	6
   893  00BE95  00                 	db	0
   894  00BE96  C4                 	db	196
   895  00BE97  04                 	db	4
   896  00BE98  06                 	db	6
   897  00BE99                     __end_of_led_masks4:
   898                           	opt stack 0
   899  00BE99                     _led_masks3:
   900                           	opt stack 0
   901  00BE99  00                 	db	0
   902  00BE9A  10                 	db	16
   903  00BE9B  4B                 	db	75
   904  00BE9C  01                 	db	1
   905  00BE9D  00                 	db	0
   906  00BE9E  00                 	db	0
   907  00BE9F  03                 	db	3
   908  00BEA0  00                 	db	0
   909  00BEA1  00                 	db	0
   910  00BEA2  10                 	db	16
   911  00BEA3  CA                 	db	202
   912  00BEA4  00                 	db	0
   913  00BEA5  00                 	db	0
   914  00BEA6  10                 	db	16
   915  00BEA7  8B                 	db	139
   916  00BEA8  00                 	db	0
   917  00BEA9  00                 	db	0
   918  00BEAA  00                 	db	0
   919  00BEAB  83                 	db	131
   920  00BEAC  01                 	db	1
   921  00BEAD  00                 	db	0
   922  00BEAE  10                 	db	16
   923  00BEAF  89                 	db	137
   924  00BEB0  01                 	db	1
   925  00BEB1  00                 	db	0
   926  00BEB2  10                 	db	16
   927  00BEB3  C9                 	db	201
   928  00BEB4  01                 	db	1
   929  00BEB5  00                 	db	0
   930  00BEB6  00                 	db	0
   931  00BEB7  0B                 	db	11
   932  00BEB8  00                 	db	0
   933  00BEB9  00                 	db	0
   934  00BEBA  10                 	db	16
   935  00BEBB  CB                 	db	203
   936  00BEBC  01                 	db	1
   937  00BEBD  00                 	db	0
   938  00BEBE  10                 	db	16
   939  00BEBF  8B                 	db	139
   940  00BEC0  01                 	db	1
   941  00BEC1                     __end_of_led_masks3:
   942                           	opt stack 0
   943  00BEC1                     _led_masks2:
   944                           	opt stack 0
   945  00BEC1  6A                 	db	106
   946  00BEC2  02                 	db	2
   947  00BEC3  10                 	db	16
   948  00BEC4  00                 	db	0
   949  00BEC5  20                 	db	32
   950  00BEC6  00                 	db	0
   951  00BEC7  10                 	db	16
   952  00BEC8  00                 	db	0
   953  00BEC9  0B                 	db	11
   954  00BECA  02                 	db	2
   955  00BECB  10                 	db	16
   956  00BECC  00                 	db	0
   957  00BECD  29                 	db	41
   958  00BECE  02                 	db	2
   959  00BECF  10                 	db	16
   960  00BED0  00                 	db	0
   961  00BED1  61                 	db	97
   962  00BED2  00                 	db	0
   963  00BED3  10                 	db	16
   964  00BED4  00                 	db	0
   965  00BED5  69                 	db	105
   966  00BED6  02                 	db	2
   967  00BED7  00                 	db	0
   968  00BED8  00                 	db	0
   969  00BED9  6B                 	db	107
   970  00BEDA  02                 	db	2
   971  00BEDB  00                 	db	0
   972  00BEDC  00                 	db	0
   973  00BEDD  28                 	db	40
   974  00BEDE  00                 	db	0
   975  00BEDF  10                 	db	16
   976  00BEE0  00                 	db	0
   977  00BEE1  6B                 	db	107
   978  00BEE2  02                 	db	2
   979  00BEE3  10                 	db	16
   980  00BEE4  00                 	db	0
   981  00BEE5  69                 	db	105
   982  00BEE6  02                 	db	2
   983  00BEE7  10                 	db	16
   984  00BEE8  00                 	db	0
   985  00BEE9                     __end_of_led_masks2:
   986                           	opt stack 0
   987  00BEE9                     _alarm_on_tone:
   988                           	opt stack 0
   989  00BEE9  00                 	db	0
   990  00BEEA  00                 	db	0
   991  00BEEB  24                 	db	36
   992  00BEEC  22                 	db	34
   993  00BEED  03                 	db	3
   994  00BEEE  01                 	db	1
   995  00BEEF  23                 	db	35
   996  00BEF0  22                 	db	34
   997  00BEF1  03                 	db	3
   998  00BEF2  02                 	db	2
   999  00BEF3  20                 	db	32
  1000  00BEF4  22                 	db	34
  1001  00BEF5  03                 	db	3
  1002  00BEF6  00                 	db	0
  1003  00BEF7  1F                 	db	31
  1004  00BEF8  22                 	db	34
  1005  00BEF9  03                 	db	3
  1006  00BEFA  01                 	db	1
  1007  00BEFB  1D                 	db	29
  1008  00BEFC  22                 	db	34
  1009  00BEFD  03                 	db	3
  1010  00BEFE  02                 	db	2
  1011  00BEFF  1B                 	db	27
  1012  00BF00  22                 	db	34
  1013  00BF01  03                 	db	3
  1014  00BF02  00                 	db	0
  1015  00BF03  1A                 	db	26
  1016  00BF04  22                 	db	34
  1017  00BF05  03                 	db	3
  1018  00BF06  01                 	db	1
  1019  00BF07  18                 	db	24
  1020  00BF08  22                 	db	34
  1021  00BF09  FF                 	db	255
  1022  00BF0A  FF                 	db	255
  1023  00BF0B  FF                 	db	255
  1024  00BF0C  FF                 	db	255
  1025  00BF0D                     __end_of_alarm_on_tone:
  1026                           	opt stack 0
  1027  00BF0D                     _alarm_off_tone:
  1028                           	opt stack 0
  1029  00BF0D  00                 	db	0
  1030  00BF0E  00                 	db	0
  1031  00BF0F  18                 	db	24
  1032  00BF10  22                 	db	34
  1033  00BF11  03                 	db	3
  1034  00BF12  01                 	db	1
  1035  00BF13  1A                 	db	26
  1036  00BF14  22                 	db	34
  1037  00BF15  03                 	db	3
  1038  00BF16  02                 	db	2
  1039  00BF17  1B                 	db	27
  1040  00BF18  22                 	db	34
  1041  00BF19  03                 	db	3
  1042  00BF1A  00                 	db	0
  1043  00BF1B  1D                 	db	29
  1044  00BF1C  22                 	db	34
  1045  00BF1D  03                 	db	3
  1046  00BF1E  01                 	db	1
  1047  00BF1F  1F                 	db	31
  1048  00BF20  22                 	db	34
  1049  00BF21  03                 	db	3
  1050  00BF22  02                 	db	2
  1051  00BF23  20                 	db	32
  1052  00BF24  22                 	db	34
  1053  00BF25  03                 	db	3
  1054  00BF26  00                 	db	0
  1055  00BF27  23                 	db	35
  1056  00BF28  22                 	db	34
  1057  00BF29  03                 	db	3
  1058  00BF2A  01                 	db	1
  1059  00BF2B  24                 	db	36
  1060  00BF2C  22                 	db	34
  1061  00BF2D  FF                 	db	255
  1062  00BF2E  FF                 	db	255
  1063  00BF2F  FF                 	db	255
  1064  00BF30  FF                 	db	255
  1065  00BF31                     __end_of_alarm_off_tone:
  1066                           	opt stack 0
  1067  00BF31                     _ir_codes:
  1068                           	opt stack 0
  1069  00BF31  97                 	db	low _power_data
  1070  00BF32  BD                 	db	high _power_data
  1071  00BF33  47                 	db	71
  1072  00BF34  00                 	db	0
  1073  00BF35  09                 	db	low _volume_up_data
  1074  00BF36  BD                 	db	high _volume_up_data
  1075  00BF37  47                 	db	71
  1076  00BF38  01                 	db	1
  1077  00BF39  7B                 	db	low _volume_dn_data
  1078  00BF3A  BC                 	db	high _volume_dn_data
  1079  00BF3B  47                 	db	71
  1080  00BF3C  02                 	db	2
  1081  00BF3D  ED                 	db	low _next_track_data
  1082  00BF3E  BB                 	db	high _next_track_data
  1083  00BF3F  47                 	db	71
  1084  00BF40  03                 	db	3
  1085  00BF41  5F                 	db	low _prev_track_data
  1086  00BF42  BB                 	db	high _prev_track_data
  1087  00BF43  47                 	db	71
  1088  00BF44  04                 	db	4
  1089  00BF45  D1                 	db	low _number1_data
  1090  00BF46  BA                 	db	high _number1_data
  1091  00BF47  47                 	db	71
  1092  00BF48  05                 	db	5
  1093  00BF49  43                 	db	low _number2_data
  1094  00BF4A  BA                 	db	high _number2_data
  1095  00BF4B  47                 	db	71
  1096  00BF4C  06                 	db	6
  1097  00BF4D  B5                 	db	low _number3_data
  1098  00BF4E  B9                 	db	high _number3_data
  1099  00BF4F  47                 	db	71
  1100  00BF50  07                 	db	7
  1101  00BF51                     __end_of_ir_codes:
  1102                           	opt stack 0
  1103  00BF51                     _set_time_tone2:
  1104                           	opt stack 0
  1105  00BF51  00                 	db	0
  1106  00BF52  00                 	db	0
  1107  00BF53  24                 	db	36
  1108  00BF54  22                 	db	34
  1109  00BF55  03                 	db	3
  1110  00BF56  01                 	db	1
  1111  00BF57  1F                 	db	31
  1112  00BF58  22                 	db	34
  1113  00BF59  03                 	db	3
  1114  00BF5A  02                 	db	2
  1115  00BF5B  1C                 	db	28
  1116  00BF5C  22                 	db	34
  1117  00BF5D  03                 	db	3
  1118  00BF5E  00                 	db	0
  1119  00BF5F  18                 	db	24
  1120  00BF60  22                 	db	34
  1121  00BF61  FF                 	db	255
  1122  00BF62  FF                 	db	255
  1123  00BF63  FF                 	db	255
  1124  00BF64  FF                 	db	255
  1125  00BF65                     __end_of_set_time_tone2:
  1126                           	opt stack 0
  1127  00BF65                     _set_time_tone1:
  1128                           	opt stack 0
  1129  00BF65  00                 	db	0
  1130  00BF66  00                 	db	0
  1131  00BF67  18                 	db	24
  1132  00BF68  22                 	db	34
  1133  00BF69  03                 	db	3
  1134  00BF6A  01                 	db	1
  1135  00BF6B  1C                 	db	28
  1136  00BF6C  22                 	db	34
  1137  00BF6D  03                 	db	3
  1138  00BF6E  02                 	db	2
  1139  00BF6F  1F                 	db	31
  1140  00BF70  22                 	db	34
  1141  00BF71  03                 	db	3
  1142  00BF72  00                 	db	0
  1143  00BF73  24                 	db	36
  1144  00BF74  22                 	db	34
  1145  00BF75  FF                 	db	255
  1146  00BF76  FF                 	db	255
  1147  00BF77  FF                 	db	255
  1148  00BF78  FF                 	db	255
  1149  00BF79                     __end_of_set_time_tone1:
  1150                           	opt stack 0
  1151  00BF79                     _set_alarm_tone2:
  1152                           	opt stack 0
  1153  00BF79  00                 	db	0
  1154  00BF7A  00                 	db	0
  1155  00BF7B  24                 	db	36
  1156  00BF7C  22                 	db	34
  1157  00BF7D  03                 	db	3
  1158  00BF7E  01                 	db	1
  1159  00BF7F  1E                 	db	30
  1160  00BF80  22                 	db	34
  1161  00BF81  03                 	db	3
  1162  00BF82  02                 	db	2
  1163  00BF83  1B                 	db	27
  1164  00BF84  22                 	db	34
  1165  00BF85  03                 	db	3
  1166  00BF86  00                 	db	0
  1167  00BF87  18                 	db	24
  1168  00BF88  22                 	db	34
  1169  00BF89  FF                 	db	255
  1170  00BF8A  FF                 	db	255
  1171  00BF8B  FF                 	db	255
  1172  00BF8C  FF                 	db	255
  1173  00BF8D                     __end_of_set_alarm_tone2:
  1174                           	opt stack 0
  1175  00BF8D                     _set_alarm_tone1:
  1176                           	opt stack 0
  1177  00BF8D  00                 	db	0
  1178  00BF8E  00                 	db	0
  1179  00BF8F  18                 	db	24
  1180  00BF90  22                 	db	34
  1181  00BF91  03                 	db	3
  1182  00BF92  01                 	db	1
  1183  00BF93  1B                 	db	27
  1184  00BF94  22                 	db	34
  1185  00BF95  03                 	db	3
  1186  00BF96  02                 	db	2
  1187  00BF97  1E                 	db	30
  1188  00BF98  22                 	db	34
  1189  00BF99  03                 	db	3
  1190  00BF9A  00                 	db	0
  1191  00BF9B  24                 	db	36
  1192  00BF9C  22                 	db	34
  1193  00BF9D  FF                 	db	255
  1194  00BF9E  FF                 	db	255
  1195  00BF9F  FF                 	db	255
  1196  00BFA0  FF                 	db	255
  1197  00BFA1                     __end_of_set_alarm_tone1:
  1198                           	opt stack 0
  1199  00BFA1                     _dn_tone:
  1200                           	opt stack 0
  1201  00BFA1  00                 	db	0
  1202  00BFA2  00                 	db	0
  1203  00BFA3  24                 	db	36
  1204  00BFA4  22                 	db	34
  1205  00BFA5  03                 	db	3
  1206  00BFA6  01                 	db	1
  1207  00BFA7  18                 	db	24
  1208  00BFA8  22                 	db	34
  1209  00BFA9  FF                 	db	255
  1210  00BFAA  FF                 	db	255
  1211  00BFAB  FF                 	db	255
  1212  00BFAC  FF                 	db	255
  1213  00BFAD                     __end_of_dn_tone:
  1214                           	opt stack 0
  1215  00BFAD                     _up_tone:
  1216                           	opt stack 0
  1217  00BFAD  00                 	db	0
  1218  00BFAE  00                 	db	0
  1219  00BFAF  18                 	db	24
  1220  00BFB0  22                 	db	34
  1221  00BFB1  03                 	db	3
  1222  00BFB2  01                 	db	1
  1223  00BFB3  24                 	db	36
  1224  00BFB4  22                 	db	34
  1225  00BFB5  FF                 	db	255
  1226  00BFB6  FF                 	db	255
  1227  00BFB7  FF                 	db	255
  1228  00BFB8  FF                 	db	255
  1229  00BFB9                     __end_of_up_tone:
  1230                           	opt stack 0
  1231  00BFB9                     _test_tone:
  1232                           	opt stack 0
  1233  00BFB9  00                 	db	0
  1234  00BFBA  00                 	db	0
  1235  00BFBB  21                 	db	33
  1236  00BFBC  22                 	db	34
  1237  00BFBD  00                 	db	0
  1238  00BFBE  01                 	db	1
  1239  00BFBF  24                 	db	36
  1240  00BFC0  22                 	db	34
  1241  00BFC1  FF                 	db	255
  1242  00BFC2  FF                 	db	255
  1243  00BFC3  FF                 	db	255
  1244  00BFC4  FF                 	db	255
  1245  00BFC5                     __end_of_test_tone:
  1246                           	opt stack 0
  1247  00BFC5                     STR_3:
  1248                           
  1249                           ; BSR set to: 0
  1250  00BFC5  57                 	db	87	;'W'
  1251  00BFC6  65                 	db	101	;'e'
  1252  00BFC7  6C                 	db	108	;'l'
  1253  00BFC8  63                 	db	99	;'c'
  1254  00BFC9  6F                 	db	111	;'o'
  1255  00BFCA  6D                 	db	109	;'m'
  1256  00BFCB  65                 	db	101	;'e'
  1257  00BFCC  20                 	db	32
  1258  00BFCD  74                 	db	116	;'t'
  1259  00BFCE  6F                 	db	111	;'o'
  1260  00BFCF  20                 	db	32
  1261  00BFD0  48                 	db	72	;'H'
  1262  00BFD1  65                 	db	101	;'e'
  1263  00BFD2  72                 	db	114	;'r'
  1264  00BFD3  6F                 	db	111	;'o'
  1265  00BFD4  69                 	db	105	;'i'
  1266  00BFD5  6E                 	db	110	;'n'
  1267  00BFD6  65                 	db	101	;'e'
  1268  00BFD7  63                 	db	99	;'c'
  1269  00BFD8  6C                 	db	108	;'l'
  1270  00BFD9  6F                 	db	111	;'o'
  1271  00BFDA  63                 	db	99	;'c'
  1272  00BFDB  6B                 	db	107	;'k'
  1273  00BFDC  20                 	db	32
  1274  00BFDD  32                 	db	50	;'2'
  1275  00BFDE  0A                 	db	10
  1276  00BFDF  00                 	db	0
  1277  00BFE0                     STR_5:
  1278                           
  1279                           ; BSR set to: 0
  1280  00BFE0  49                 	db	73	;'I'
  1281  00BFE1  52                 	db	82	;'R'
  1282  00BFE2  20                 	db	32
  1283  00BFE3  74                 	db	116	;'t'
  1284  00BFE4  69                 	db	105	;'i'
  1285  00BFE5  6D                 	db	109	;'m'
  1286  00BFE6  65                 	db	101	;'e'
  1287  00BFE7  64                 	db	100	;'d'
  1288  00BFE8  20                 	db	32
  1289  00BFE9  6F                 	db	111	;'o'
  1290  00BFEA  75                 	db	117	;'u'
  1291  00BFEB  74                 	db	116	;'t'
  1292  00BFEC  0A                 	db	10
  1293  00BFED  00                 	db	0
  1294  00BFEE                     STR_1:
  1295                           
  1296                           ; BSR set to: 0
  1297  00BFEE  49                 	db	73	;'I'
  1298  00BFEF  52                 	db	82	;'R'
  1299  00BFF0  20                 	db	32
  1300  00BFF1  63                 	db	99	;'c'
  1301  00BFF2  6F                 	db	111	;'o'
  1302  00BFF3  64                 	db	100	;'d'
  1303  00BFF4  65                 	db	101	;'e'
  1304  00BFF5  3A                 	db	58	;':'
  1305  00BFF6  20                 	db	32
  1306  00BFF7  00                 	db	0
  1307  00BFF8                     STR_2:
  1308                           
  1309                           ; BSR set to: 0
  1310  00BFF8  65                 	db	101	;'e'
  1311  00BFF9  72                 	db	114	;'r'
  1312  00BFFA  72                 	db	114	;'r'
  1313  00BFFB  6F                 	db	111	;'o'
  1314  00BFFC  72                 	db	114	;'r'
  1315  00BFFD  3D                 	db	61	;'='
  1316  00BFFE  00                 	db	0
  1317  0000                     
  1318                           ; #config settings
  1319  00BFFF  00                 	db	0	; dummy byte at the end
  1320  0000                     
  1321                           	psect	nvCOMRAM
  1322  00004B                     __pnvCOMRAM:
  1323                           	opt stack 0
  1324  00004B                     _led_mask0:
  1325                           	opt stack 0
  1326  00004B                     	ds	1
  1327                           
  1328                           	psect	nvBANK0
  1329  000095                     __pnvBANK0:
  1330                           	opt stack 0
  1331  000095                     _osc3_period:
  1332                           	opt stack 0
  1333  000095                     	ds	2
  1334  000097                     _osc2_period:
  1335                           	opt stack 0
  1336  000097                     	ds	2
  1337  000099                     _osc1_period:
  1338                           	opt stack 0
  1339  000099                     	ds	2
  1340  00009B                     _osc3_volume:
  1341                           	opt stack 0
  1342  00009B                     	ds	1
  1343  00009C                     _osc2_volume:
  1344                           	opt stack 0
  1345  00009C                     	ds	1
  1346  00009D                     _osc1_volume:
  1347                           	opt stack 0
  1348  00009D                     	ds	1
  1349  0000                     _TXREG	set	4013
  1350  0000                     _PIR2bits	set	4001
  1351  0000                     _TRISAbits	set	3986
  1352  0000                     _TRISE	set	3990
  1353  0000                     _TRISFbits	set	3991
  1354  0000                     _TRISGbits	set	3992
  1355  0000                     _TRISCbits	set	3988
  1356  0000                     _CCP1CON	set	4029
  1357  0000                     _PR2	set	4043
  1358  0000                     _T2CON	set	4042
  1359  0000                     _CCP2CON	set	4026
  1360  0000                     _CCPR2L	set	4027
  1361  0000                     _CCPR2H	set	4028
  1362  0000                     _T1CON	set	4045
  1363  0000                     _INTCONbits	set	4082
  1364  0000                     _T0CON	set	4053
  1365  0000                     _INTCON2bits	set	4081
  1366  0000                     _SPBRG	set	4015
  1367  0000                     _SPBRGH	set	3967
  1368  0000                     _BAUDCTL	set	3966
  1369  0000                     _RCSTA	set	4011
  1370  0000                     _TXSTA	set	4012
  1371  0000                     _LATDbits	set	3980
  1372  0000                     _TRISDbits	set	3989
  1373  0000                     _ADCON1	set	4033
  1374  0000                     _TMR0H	set	4055
  1375  0000                     _TMR0L	set	4054
  1376  0000                     _INTCON3bits	set	4080
  1377  0000                     _CCPR1L	set	4030
  1378  0000                     _PIR1bits	set	3998
  1379  0000                     _PIE1bits	set	3997
  1380  0000                     _LATGbits	set	3983
  1381  0000                     _LATFbits	set	3982
  1382  0000                     _LATEbits	set	3981
  1383  0000                     _LATCbits	set	3979
  1384  0000                     _LATAbits	set	3977
  1385                           
  1386                           	psect	cinit
  1387  00186C                     __pcinit:
  1388                           	opt stack 0
  1389  00186C                     start_initialization:
  1390                           	opt stack 0
  1391  00186C                     __initialization:
  1392                           	opt stack 0
  1393                           
  1394                           ; Initialize objects allocated to COMRAM (5 bytes)
  1395                           ; load TBLPTR registers with __pidataCOMRAM
  1396  00186C  0E94               	movlw	low __pidataCOMRAM
  1397  00186E  6EF6               	movwf	tblptrl,c
  1398  001870  0E1C               	movlw	high __pidataCOMRAM
  1399  001872  6EF7               	movwf	tblptrh,c
  1400  001874  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1401  001876  6EF8               	movwf	tblptru,c
  1402  001878  EE00  F046         	lfsr	0,__pdataCOMRAM
  1403  00187C  EE10 F005          	lfsr	1,5
  1404  001880                     copy_data0:
  1405  001880  0009               	tblrd		*+
  1406  001882  CFF5 FFEE          	movff	tablat,postinc0
  1407  001886  50E5               	movf	postdec1,w,c
  1408  001888  50E1               	movf	fsr1l,w,c
  1409  00188A  E1FA               	bnz	copy_data0
  1410                           
  1411                           ; Clear objects allocated to BIGRAM (1024 bytes)
  1412  00188C  EE00  F09E         	lfsr	0,__pbssBIGRAM
  1413  001890  EE14 F000          	lfsr	1,1024
  1414  001894                     clear_0:
  1415  001894  6AEE               	clrf	postinc0,c
  1416  001896  50E5               	movf	postdec1,w,c
  1417  001898  50E1               	movf	fsr1l,w,c
  1418  00189A  E1FC               	bnz	clear_0
  1419  00189C  50E2               	movf	fsr1h,w,c
  1420  00189E  E1FA               	bnz	clear_0
  1421                           
  1422                           ; Clear objects allocated to BANK0 (34 bytes)
  1423  0018A0  EE00  F060         	lfsr	0,__pbssBANK0
  1424  0018A4  0E22               	movlw	34
  1425  0018A6                     clear_1:
  1426  0018A6  6AEE               	clrf	postinc0,c
  1427  0018A8  06E8               	decf	wreg,f,c
  1428  0018AA  E1FD               	bnz	clear_1
  1429                           
  1430                           ; Clear objects allocated to COMRAM (24 bytes)
  1431  0018AC  EE00  F02E         	lfsr	0,__pbssCOMRAM
  1432  0018B0  0E18               	movlw	24
  1433  0018B2                     clear_2:
  1434  0018B2  6AEE               	clrf	postinc0,c
  1435  0018B4  06E8               	decf	wreg,f,c
  1436  0018B6  E1FD               	bnz	clear_2
  1437  0018B8                     end_of_initialization:
  1438                           	opt stack 0
  1439  0018B8                     __end_of__initialization:
  1440                           	opt stack 0
  1441  0018B8  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1442  0018BA  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1443  0018BC  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1444  0018BE  6EF8               	movwf	tblptru,c
  1445  0018C0  0100               	movlb	0
  1446  0018C2  EF69  F004         	goto	_main	;jump to C main() function
  1447                           tblptru	equ	0xFF8
  1448                           tblptrh	equ	0xFF7
  1449                           tblptrl	equ	0xFF6
  1450                           tablat	equ	0xFF5
  1451                           postinc0	equ	0xFEE
  1452                           wreg	equ	0xFE8
  1453                           postdec1	equ	0xFE5
  1454                           fsr1h	equ	0xFE2
  1455                           fsr1l	equ	0xFE1
  1456                           
  1457                           	psect	bssCOMRAM
  1458  00002E                     __pbssCOMRAM:
  1459                           	opt stack 0
  1460  00002E                     _song_ptr:
  1461                           	opt stack 0
  1462  00002E                     	ds	3
  1463  000031                     _got_ir_int:
  1464                           	opt stack 0
  1465  000031                     	ds	1
  1466  000032                     _ir_size:
  1467                           	opt stack 0
  1468  000032                     	ds	1
  1469  000033                     _led_mask3:
  1470                           	opt stack 0
  1471  000033                     	ds	1
  1472  000034                     _led_mask2:
  1473                           	opt stack 0
  1474  000034                     	ds	1
  1475  000035                     _led_mask1:
  1476                           	opt stack 0
  1477  000035                     	ds	1
  1478  000036                     _alarm_time:
  1479                           	opt stack 0
  1480  000036                     	ds	1
  1481  000037                     _alarm_sounding:
  1482                           	opt stack 0
  1483  000037                     	ds	1
  1484  000038                     _alarm_ampm:
  1485                           	opt stack 0
  1486  000038                     	ds	1
  1487  000039                     _alarm_minutes:
  1488                           	opt stack 0
  1489  000039                     	ds	1
  1490  00003A                     _repeat_counter:
  1491                           	opt stack 0
  1492  00003A                     	ds	1
  1493  00003B                     _repeating:
  1494                           	opt stack 0
  1495  00003B                     	ds	1
  1496  00003C                     _mode:
  1497                           	opt stack 0
  1498  00003C                     	ds	1
  1499  00003D                     _alarm:
  1500                           	opt stack 0
  1501  00003D                     	ds	1
  1502  00003E                     _ampm:
  1503                           	opt stack 0
  1504  00003E                     	ds	1
  1505  00003F                     _minutes:
  1506                           	opt stack 0
  1507  00003F                     	ds	1
  1508  000040                     _seconds:
  1509                           	opt stack 0
  1510  000040                     	ds	1
  1511  000041                     _time_hz:
  1512                           	opt stack 0
  1513  000041                     	ds	1
  1514  000042                     _display_flash:
  1515                           	opt stack 0
  1516  000042                     	ds	1
  1517  000043                     _song_delay:
  1518                           	opt stack 0
  1519  000043                     	ds	1
  1520  000044                     _song_counter:
  1521                           	opt stack 0
  1522  000044                     	ds	1
  1523  000045                     _next_duty:
  1524                           	opt stack 0
  1525  000045                     	ds	1
  1526                           tblptru	equ	0xFF8
  1527                           tblptrh	equ	0xFF7
  1528                           tblptrl	equ	0xFF6
  1529                           tablat	equ	0xFF5
  1530                           postinc0	equ	0xFEE
  1531                           wreg	equ	0xFE8
  1532                           postdec1	equ	0xFE5
  1533                           fsr1h	equ	0xFE2
  1534                           fsr1l	equ	0xFE1
  1535                           
  1536                           	psect	dataCOMRAM
  1537  000046                     __pdataCOMRAM:
  1538                           	opt stack 0
  1539  000046                     _first_edge:
  1540                           	opt stack 0
  1541  000046                     	ds	1
  1542  000047                     _alarm_hours:
  1543                           	opt stack 0
  1544  000047                     	ds	1
  1545  000048                     _not_set:
  1546                           	opt stack 0
  1547  000048                     	ds	1
  1548  000049                     _colon:
  1549                           	opt stack 0
  1550  000049                     	ds	1
  1551  00004A                     _hours:
  1552                           	opt stack 0
  1553  00004A                     	ds	1
  1554                           tblptru	equ	0xFF8
  1555                           tblptrh	equ	0xFF7
  1556                           tblptrl	equ	0xFF6
  1557                           tablat	equ	0xFF5
  1558                           postinc0	equ	0xFEE
  1559                           wreg	equ	0xFE8
  1560                           postdec1	equ	0xFE5
  1561                           fsr1h	equ	0xFE2
  1562                           fsr1l	equ	0xFE1
  1563                           
  1564                           	psect	bssBANK0
  1565  000060                     __pbssBANK0:
  1566                           	opt stack 0
  1567  000060                     _ir_code_failed:
  1568                           	opt stack 0
  1569  000060                     	ds	8
  1570  000068                     _ir_time2:
  1571                           	opt stack 0
  1572  000068                     	ds	2
  1573  00006A                     _ir_time:
  1574                           	opt stack 0
  1575  00006A                     	ds	2
  1576  00006C                     _crystal_time:
  1577                           	opt stack 0
  1578  00006C                     	ds	2
  1579  00006E                     _osc3_time:
  1580                           	opt stack 0
  1581  00006E                     	ds	2
  1582  000070                     _osc2_time:
  1583                           	opt stack 0
  1584  000070                     	ds	2
  1585  000072                     _osc1_time:
  1586                           	opt stack 0
  1587  000072                     	ds	2
  1588  000074                     _powerdown_count:
  1589                           	opt stack 0
  1590  000074                     	ds	2
  1591  000076                     _decay_count:
  1592                           	opt stack 0
  1593  000076                     	ds	2
  1594  000078                     _uart_position2:
  1595                           	opt stack 0
  1596  000078                     	ds	2
  1597  00007A                     _uart_position1:
  1598                           	opt stack 0
  1599  00007A                     	ds	2
  1600  00007C                     _uart_size:
  1601                           	opt stack 0
  1602  00007C                     	ds	2
  1603  00007E                     _interrupt_done:
  1604                           	opt stack 0
  1605  00007E                     	ds	1
  1606  00007F                     _ir_code:
  1607                           	opt stack 0
  1608  00007F                     	ds	1
  1609  000080                     _have_ir:
  1610                           	opt stack 0
  1611  000080                     	ds	1
  1612  000081                     _need_audio:
  1613                           	opt stack 0
  1614  000081                     	ds	1
  1615                           tblptru	equ	0xFF8
  1616                           tblptrh	equ	0xFF7
  1617                           tblptrl	equ	0xFF6
  1618                           tablat	equ	0xFF5
  1619                           postinc0	equ	0xFEE
  1620                           wreg	equ	0xFE8
  1621                           postdec1	equ	0xFE5
  1622                           fsr1h	equ	0xFE2
  1623                           fsr1l	equ	0xFE1
  1624                           
  1625                           	psect	bssBIGRAM
  1626  00009E                     __pbssBIGRAM:
  1627                           	opt stack 0
  1628  00009E                     _uart_buffer:
  1629                           	opt stack 0
  1630  00009E                     	ds	1024
  1631                           tblptru	equ	0xFF8
  1632                           tblptrh	equ	0xFF7
  1633                           tblptrl	equ	0xFF6
  1634                           tablat	equ	0xFF5
  1635                           postinc0	equ	0xFEE
  1636                           wreg	equ	0xFE8
  1637                           postdec1	equ	0xFE5
  1638                           fsr1h	equ	0xFE2
  1639                           fsr1l	equ	0xFE1
  1640                           
  1641                           	psect	cstackBANK0
  1642  000082                     __pcstackBANK0:
  1643                           	opt stack 0
  1644  000082                     handle_ir@failed:
  1645                           	opt stack 0
  1646                           
  1647                           ; 1 bytes @ 0x0
  1648  000082                     	ds	1
  1649  000083                     handle_ir@code_size:
  1650                           	opt stack 0
  1651                           
  1652                           ; 1 bytes @ 0x1
  1653  000083                     	ds	1
  1654  000084                     handle_ir@got_it:
  1655                           	opt stack 0
  1656                           
  1657                           ; 1 bytes @ 0x2
  1658  000084                     	ds	1
  1659  000085                     handle_ir@ir_error:
  1660                           	opt stack 0
  1661                           
  1662                           ; 2 bytes @ 0x3
  1663  000085                     	ds	2
  1664  000087                     handle_ir@data:
  1665                           	opt stack 0
  1666                           
  1667                           ; 2 bytes @ 0x5
  1668  000087                     	ds	2
  1669  000089                     handle_ir@error:
  1670                           	opt stack 0
  1671                           
  1672                           ; 2 bytes @ 0x7
  1673  000089                     	ds	2
  1674  00008B                     handle_ir@i:
  1675                           	opt stack 0
  1676                           
  1677                           ; 1 bytes @ 0x9
  1678  00008B                     	ds	1
  1679  00008C                     handle_ir@i_924:
  1680                           	opt stack 0
  1681                           
  1682                           ; 1 bytes @ 0xA
  1683  00008C                     	ds	1
  1684  00008D                     handle_ir@code:
  1685                           	opt stack 0
  1686                           
  1687                           ; 2 bytes @ 0xB
  1688  00008D                     	ds	2
  1689  00008F                     handle_ir@j:
  1690                           	opt stack 0
  1691                           
  1692                           ; 1 bytes @ 0xD
  1693  00008F                     	ds	1
  1694  000090                     main@test_time:
  1695                           	opt stack 0
  1696                           
  1697                           ; 2 bytes @ 0xE
  1698  000090                     	ds	2
  1699  000092                     main@i:
  1700                           	opt stack 0
  1701                           
  1702                           ; 2 bytes @ 0x10
  1703  000092                     	ds	2
  1704  000094                     main@i_1024:
  1705                           	opt stack 0
  1706                           
  1707                           ; 1 bytes @ 0x12
  1708  000094                     	ds	1
  1709                           tblptru	equ	0xFF8
  1710                           tblptrh	equ	0xFF7
  1711                           tblptrl	equ	0xFF6
  1712                           tablat	equ	0xFF5
  1713                           postinc0	equ	0xFEE
  1714                           wreg	equ	0xFE8
  1715                           postdec1	equ	0xFE5
  1716                           fsr1h	equ	0xFE2
  1717                           fsr1l	equ	0xFE1
  1718                           
  1719                           	psect	cstackCOMRAM
  1720  000001                     __pcstackCOMRAM:
  1721                           	opt stack 0
  1722  000001                     ??_handle_audio:
  1723  000001                     
  1724                           ; 1 bytes @ 0x0
  1725  000001                     	ds	2
  1726  000003                     handle_audio@amplitude:
  1727                           	opt stack 0
  1728                           
  1729                           ; 1 bytes @ 0x2
  1730  000003                     	ds	1
  1731  000004                     ??_isr:
  1732                           
  1733                           ; 1 bytes @ 0x3
  1734  000004                     	ds	16
  1735  000014                     ??_write_leds:
  1736  000014                     ?___awdiv:
  1737                           	opt stack 0
  1738  000014                     ?___lwdiv:
  1739                           	opt stack 0
  1740  000014                     print_byte@c:
  1741                           	opt stack 0
  1742  000014                     play_song@ptr:
  1743                           	opt stack 0
  1744  000014                     ___awdiv@dividend:
  1745                           	opt stack 0
  1746  000014                     ___lwdiv@dividend:
  1747                           	opt stack 0
  1748                           
  1749                           ; 2 bytes @ 0x13
  1750  000014                     	ds	1
  1751  000015                     print_text@s:
  1752                           	opt stack 0
  1753  000015                     _print_bin_nospace$803:
  1754                           	opt stack 0
  1755                           
  1756                           ; 2 bytes @ 0x14
  1757  000015                     	ds	1
  1758  000016                     ___awdiv@divisor:
  1759                           	opt stack 0
  1760  000016                     ___lwdiv@divisor:
  1761                           	opt stack 0
  1762                           
  1763                           ; 2 bytes @ 0x15
  1764  000016                     	ds	1
  1765  000017                     _print_bin_nospace$804:
  1766                           	opt stack 0
  1767                           
  1768                           ; 2 bytes @ 0x16
  1769  000017                     	ds	1
  1770  000018                     ___awdiv@counter:
  1771                           	opt stack 0
  1772  000018                     ___lwdiv@counter:
  1773                           	opt stack 0
  1774                           
  1775                           ; 1 bytes @ 0x17
  1776  000018                     	ds	1
  1777  000019                     ___awdiv@sign:
  1778                           	opt stack 0
  1779  000019                     _print_bin_nospace$805:
  1780                           	opt stack 0
  1781  000019                     ___lwdiv@quotient:
  1782                           	opt stack 0
  1783                           
  1784                           ; 2 bytes @ 0x18
  1785  000019                     	ds	1
  1786  00001A                     ___awdiv@quotient:
  1787                           	opt stack 0
  1788                           
  1789                           ; 2 bytes @ 0x19
  1790  00001A                     	ds	1
  1791  00001B                     ?___lwmod:
  1792                           	opt stack 0
  1793  00001B                     _print_bin_nospace$806:
  1794                           	opt stack 0
  1795  00001B                     ___lwmod@dividend:
  1796                           	opt stack 0
  1797                           
  1798                           ; 2 bytes @ 0x1A
  1799  00001B                     	ds	1
  1800  00001C                     ??_draw_time:
  1801  00001C                     ??_draw_alarm:
  1802  00001C                     ?___awmod:
  1803                           	opt stack 0
  1804  00001C                     ___awmod@dividend:
  1805                           	opt stack 0
  1806                           
  1807                           ; 2 bytes @ 0x1B
  1808  00001C                     	ds	1
  1809  00001D                     _print_bin_nospace$807:
  1810                           	opt stack 0
  1811  00001D                     ___lwmod@divisor:
  1812                           	opt stack 0
  1813                           
  1814                           ; 2 bytes @ 0x1C
  1815  00001D                     	ds	1
  1816  00001E                     draw_time@hours10:
  1817                           	opt stack 0
  1818  00001E                     draw_alarm@hours10:
  1819                           	opt stack 0
  1820  00001E                     ___awmod@divisor:
  1821                           	opt stack 0
  1822                           
  1823                           ; 2 bytes @ 0x1D
  1824  00001E                     	ds	1
  1825  00001F                     draw_time@minutes10:
  1826                           	opt stack 0
  1827  00001F                     draw_alarm@minutes10:
  1828                           	opt stack 0
  1829  00001F                     ___lwmod@counter:
  1830                           	opt stack 0
  1831  00001F                     _print_bin_nospace$808:
  1832                           	opt stack 0
  1833                           
  1834                           ; 2 bytes @ 0x1E
  1835  00001F                     	ds	1
  1836  000020                     ___awmod@counter:
  1837                           	opt stack 0
  1838  000020                     print_number_nospace@number:
  1839                           	opt stack 0
  1840  000020                     draw_time@ptr:
  1841                           	opt stack 0
  1842  000020                     draw_alarm@ptr:
  1843                           	opt stack 0
  1844                           
  1845                           ; 2 bytes @ 0x1F
  1846  000020                     	ds	1
  1847  000021                     ___awmod@sign:
  1848                           	opt stack 0
  1849  000021                     _print_bin_nospace$809:
  1850                           	opt stack 0
  1851                           
  1852                           ; 2 bytes @ 0x20
  1853  000021                     	ds	1
  1854  000022                     print_number2@number:
  1855                           	opt stack 0
  1856  000022                     print_number@number:
  1857                           	opt stack 0
  1858                           
  1859                           ; 2 bytes @ 0x21
  1860  000022                     	ds	1
  1861  000023                     _print_bin_nospace$810:
  1862                           	opt stack 0
  1863                           
  1864                           ; 2 bytes @ 0x22
  1865  000023                     	ds	1
  1866  000024                     
  1867                           ; 1 bytes @ 0x23
  1868  000024                     	ds	1
  1869  000025                     print_bin_nospace@number:
  1870                           	opt stack 0
  1871                           
  1872                           ; 1 bytes @ 0x24
  1873  000025                     	ds	1
  1874  000026                     ??_handle_ir:
  1875                           
  1876                           ; 1 bytes @ 0x25
  1877  000026                     	ds	6
  1878  00002C                     ??_main:
  1879                           
  1880                           ; 1 bytes @ 0x2B
  1881  00002C                     	ds	2
  1882                           tblptru	equ	0xFF8
  1883                           tblptrh	equ	0xFF7
  1884                           tblptrl	equ	0xFF6
  1885                           tablat	equ	0xFF5
  1886                           postinc0	equ	0xFEE
  1887                           wreg	equ	0xFE8
  1888                           postdec1	equ	0xFE5
  1889                           fsr1h	equ	0xFE2
  1890                           fsr1l	equ	0xFE1
  1891                           
  1892 ;;
  1893 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1894 ;;
  1895 ;; *************** function _main *****************
  1896 ;; Defined at:
  1897 ;;		line 1693 in file "clock.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;		None
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;  i               1   18[BANK0 ] unsigned char 
  1902 ;;  test_time       2   14[BANK0 ] unsigned int 
  1903 ;;  i               2   16[BANK0 ] unsigned int 
  1904 ;; Return value:  Size  Location     Type
  1905 ;;                  1    wreg      void 
  1906 ;; Registers used:
  1907 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1908 ;; Tracked objects:
  1909 ;;		On entry : 0/0
  1910 ;;		On exit  : 0/0
  1911 ;;		Unchanged: 0/0
  1912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1914 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1915 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1916 ;;      Totals:         2       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1917 ;;Total ram usage:        7 bytes
  1918 ;; Hardware stack levels required when called:    7
  1919 ;; This function calls:
  1920 ;;		_draw_time
  1921 ;;		_handle_ir
  1922 ;;		_handle_repeat
  1923 ;;		_handle_time
  1924 ;;		_print_text
  1925 ;;		_start_alarm
  1926 ;; This function is called by:
  1927 ;;		Startup code after reset
  1928 ;; This function uses a non-reentrant model
  1929 ;;
  1930                           
  1931                           	psect	text0
  1932  0008D2                     __ptext0:
  1933                           	opt stack 0
  1934  0008D2                     _main:
  1935                           	opt stack 0
  1936  0008D2  FFFF               	dw	65535	; assembler added errata NOP
  1937                           
  1938                           ;clock.c: 1696: ADCON1 = 0xff;
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;incstack = 0
  1942  0008D4  68C1               	setf	4033,c	;volatile
  1943                           
  1944                           ;clock.c: 1697: TRISDbits.TRISD7 = 0;
  1945  0008D6  9E95               	bcf	3989,7,c	;volatile
  1946                           
  1947                           ;clock.c: 1698: LATDbits.LATD7 = 1;
  1948  0008D8  8E8C               	bsf	3980,7,c	;volatile
  1949                           
  1950                           ;clock.c: 1701: TXSTA = 0x24;
  1951  0008DA  0E24               	movlw	36
  1952  0008DC  6EAC               	movwf	4012,c	;volatile
  1953                           
  1954                           ;clock.c: 1702: RCSTA = 0x80;
  1955  0008DE  0E80               	movlw	128
  1956  0008E0  6EAB               	movwf	4011,c	;volatile
  1957                           
  1958                           ;clock.c: 1703: BAUDCTL = 0x08;
  1959  0008E2  0E08               	movlw	8
  1960  0008E4  6E7E               	movwf	3966,c	;volatile
  1961                           
  1962                           ;clock.c: 1704: SPBRGH = 87 >> 8;
  1963  0008E6  0E00               	movlw	0
  1964  0008E8  6E7F               	movwf	3967,c	;volatile
  1965                           
  1966                           ;clock.c: 1705: SPBRG = 87 & 0xff;
  1967  0008EA  0E57               	movlw	87
  1968  0008EC  6EAF               	movwf	4015,c	;volatile
  1969                           
  1970                           ;clock.c: 1706: PIR1bits.RCIF = 0;
  1971  0008EE  9A9E               	bcf	3998,5,c	;volatile
  1972                           
  1973                           ;clock.c: 1707: PIE1bits.RCIE = 0;
  1974  0008F0  9A9D               	bcf	3997,5,c	;volatile
  1975                           
  1976                           ;clock.c: 1710: INTCON2bits.INTEDG3 = 0;
  1977  0008F2  96F1               	bcf	intcon2,3,c	;volatile
  1978                           
  1979                           ;clock.c: 1711: INTCON3bits.INT3IE = 1;
  1980  0008F4  8AF0               	bsf	intcon3,5,c	;volatile
  1981                           
  1982                           ;clock.c: 1712: INTCON3bits.INT3IF = 0;
  1983  0008F6  94F0               	bcf	intcon3,2,c	;volatile
  1984                           
  1985                           ;clock.c: 1713: ir_size = 0;
  1986  0008F8  0E00               	movlw	0
  1987  0008FA  6E32               	movwf	_ir_size,c
  1988                           
  1989                           ;clock.c: 1714: first_edge = 1;
  1990  0008FC  0E01               	movlw	1
  1991  0008FE  6E46               	movwf	_first_edge,c
  1992                           
  1993                           ;clock.c: 1718: T0CON = 0x85;
  1994  000900  0E85               	movlw	133
  1995  000902  6ED5               	movwf	4053,c	;volatile
  1996                           
  1997                           ;clock.c: 1719: INTCONbits.TMR0IF = 0;
  1998  000904  94F2               	bcf	intcon,2,c	;volatile
  1999                           
  2000                           ;clock.c: 1724: T1CON = 0xb1;
  2001  000906  0EB1               	movlw	177
  2002  000908  6ECD               	movwf	4045,c	;volatile
  2003                           
  2004                           ;clock.c: 1725: CCPR2H = (40000000 / 4 / 8 / 250 - 1) >> 8;
  2005  00090A  0E13               	movlw	19
  2006  00090C  6EBC               	movwf	4028,c	;volatile
  2007                           
  2008                           ;clock.c: 1726: CCPR2L = (40000000 / 4 / 8 / 250 - 1) & 0xff;
  2009  00090E  0E87               	movlw	135
  2010  000910  6EBB               	movwf	4027,c	;volatile
  2011                           
  2012                           ;clock.c: 1727: CCP2CON = 0x0b;
  2013  000912  0E0B               	movlw	11
  2014  000914  6EBA               	movwf	4026,c	;volatile
  2015                           
  2016                           ;clock.c: 1733: osc1_period = freqs[29];
  2017  000916  0E95               	movlw	low (_freqs+58)
  2018  000918  6EF6               	movwf	tblptrl,c
  2019  00091A  0EB9               	movlw	high (_freqs+58)
  2020  00091C  6EF7               	movwf	tblptrh,c
  2021  00091E                     	if	0	;tblptru may be non-zero
  2022  00091E                     	endif
  2023  00091E                     	if	0	;tblptru may be non-zero
  2024  00091E                     	endif
  2025  00091E  0009               	tblrd		*+
  2026  000920  FFFF               	dw	65535	; errata NOP
  2027  000922  CFF5 F099          	movff	tablat,_osc1_period
  2028  000926  000A               	tblrd		*-
  2029  000928  FFFF               	dw	65535	; errata NOP
  2030  00092A  CFF5 F09A          	movff	tablat,_osc1_period+1
  2031                           
  2032                           ;clock.c: 1734: osc2_period = freqs[33];
  2033  00092E  0E9D               	movlw	low (_freqs+66)
  2034  000930  6EF6               	movwf	tblptrl,c
  2035  000932  0EB9               	movlw	high (_freqs+66)
  2036  000934  6EF7               	movwf	tblptrh,c
  2037  000936                     	if	0	;tblptru may be non-zero
  2038  000936                     	endif
  2039  000936                     	if	0	;tblptru may be non-zero
  2040  000936                     	endif
  2041  000936  0009               	tblrd		*+
  2042  000938  FFFF               	dw	65535	; errata NOP
  2043  00093A  CFF5 F097          	movff	tablat,_osc2_period
  2044  00093E  000A               	tblrd		*-
  2045  000940  FFFF               	dw	65535	; errata NOP
  2046  000942  CFF5 F098          	movff	tablat,_osc2_period+1
  2047                           
  2048                           ;clock.c: 1735: osc3_period = freqs[36];
  2049  000946  0EA3               	movlw	low (_freqs+72)
  2050  000948  6EF6               	movwf	tblptrl,c
  2051  00094A  0EB9               	movlw	high (_freqs+72)
  2052  00094C  6EF7               	movwf	tblptrh,c
  2053  00094E                     	if	0	;tblptru may be non-zero
  2054  00094E                     	endif
  2055  00094E                     	if	0	;tblptru may be non-zero
  2056  00094E                     	endif
  2057  00094E  0009               	tblrd		*+
  2058  000950  FFFF               	dw	65535	; errata NOP
  2059  000952  CFF5 F095          	movff	tablat,_osc3_period
  2060  000956  000A               	tblrd		*-
  2061  000958  FFFF               	dw	65535	; errata NOP
  2062  00095A  CFF5 F096          	movff	tablat,_osc3_period+1
  2063                           
  2064                           ;clock.c: 1736: osc1_volume = (0x68 / 3);
  2065  00095E  0E22               	movlw	34
  2066  000960  0100               	movlb	0	; () banked
  2067  000962  6F9D               	movwf	_osc1_volume& (0+255),b
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;clock.c: 1737: osc2_volume = (0x68 / 3);
  2071  000964  0E22               	movlw	34
  2072  000966  0100               	movlb	0	; () banked
  2073  000968  6F9C               	movwf	_osc2_volume& (0+255),b
  2074                           
  2075                           ; BSR set to: 0
  2076                           ;clock.c: 1738: osc3_volume = (0x68 / 3);
  2077  00096A  0E22               	movlw	34
  2078  00096C  0100               	movlb	0	; () banked
  2079  00096E  6F9B               	movwf	_osc3_volume& (0+255),b
  2080                           
  2081                           ; BSR set to: 0
  2082                           ;clock.c: 1739: T2CON = 0x1c;
  2083  000970  0E1C               	movlw	28
  2084  000972  6ECA               	movwf	4042,c	;volatile
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;clock.c: 1740: PR2 = 0xff;
  2088  000974  68CB               	setf	4043,c	;volatile
  2089                           
  2090                           ; BSR set to: 0
  2091                           ;clock.c: 1741: CCP1CON = 0x0c;
  2092  000976  0E0C               	movlw	12
  2093  000978  6EBD               	movwf	4029,c	;volatile
  2094                           
  2095                           ; BSR set to: 0
  2096                           ;clock.c: 1742: CCPR1L = 0x00;
  2097  00097A  0E00               	movlw	0
  2098  00097C  6EBE               	movwf	4030,c	;volatile
  2099                           
  2100                           ; BSR set to: 0
  2101                           ;clock.c: 1743: TRISCbits.TRISC2 = 0;
  2102  00097E  9494               	bcf	3988,2,c	;volatile
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;clock.c: 1744: PIE1bits.TMR2IE = 1;
  2106  000980  829D               	bsf	3997,1,c	;volatile
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;clock.c: 1749: TRISGbits.TRISG0 = 0;
  2110  000982  9098               	bcf	3992,0,c	;volatile
  2111                           
  2112                           ; BSR set to: 0
  2113                           ;clock.c: 1750: TRISGbits.TRISG1 = 0;
  2114  000984  9298               	bcf	3992,1,c	;volatile
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;clock.c: 1751: TRISFbits.TRISF0 = 0;
  2118  000986  9097               	bcf	3991,0,c	;volatile
  2119                           
  2120                           ; BSR set to: 0
  2121                           ;clock.c: 1752: TRISFbits.TRISF1 = 0;
  2122  000988  9297               	bcf	3991,1,c	;volatile
  2123                           
  2124                           ; BSR set to: 0
  2125                           ;clock.c: 1753: TRISFbits.TRISF2 = 0;
  2126  00098A  9497               	bcf	3991,2,c	;volatile
  2127                           
  2128                           ; BSR set to: 0
  2129                           ;clock.c: 1754: TRISFbits.TRISF3 = 0;
  2130  00098C  9697               	bcf	3991,3,c	;volatile
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;clock.c: 1755: TRISFbits.TRISF4 = 0;
  2134  00098E  9897               	bcf	3991,4,c	;volatile
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;clock.c: 1756: TRISFbits.TRISF5 = 0;
  2138  000990  9A97               	bcf	3991,5,c	;volatile
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;clock.c: 1757: TRISFbits.TRISF6 = 0;
  2142  000992  9C97               	bcf	3991,6,c	;volatile
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;clock.c: 1758: TRISE = 0;
  2146  000994  0E00               	movlw	0
  2147  000996  6E96               	movwf	3990,c	;volatile
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;clock.c: 1759: TRISCbits.TRISC0 = 0;
  2151  000998  9094               	bcf	3988,0,c	;volatile
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;clock.c: 1760: TRISCbits.TRISC1 = 0;
  2155  00099A  9294               	bcf	3988,1,c	;volatile
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;clock.c: 1761: TRISCbits.TRISC3 = 0;
  2159  00099C  9694               	bcf	3988,3,c	;volatile
  2160                           
  2161                           ; BSR set to: 0
  2162                           ;clock.c: 1762: TRISCbits.TRISC4 = 0;
  2163  00099E  9894               	bcf	3988,4,c	;volatile
  2164                           
  2165                           ; BSR set to: 0
  2166                           ;clock.c: 1763: TRISCbits.TRISC5 = 0;
  2167  0009A0  9A94               	bcf	3988,5,c	;volatile
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;clock.c: 1764: TRISAbits.TRISA0 = 0;
  2171  0009A2  9092               	bcf	3986,0,c	;volatile
  2172                           
  2173                           ; BSR set to: 0
  2174                           ;clock.c: 1765: TRISAbits.TRISA1 = 0;
  2175  0009A4  9292               	bcf	3986,1,c	;volatile
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;clock.c: 1766: TRISAbits.TRISA2 = 0;
  2179  0009A6  9492               	bcf	3986,2,c	;volatile
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;clock.c: 1767: TRISAbits.TRISA3 = 0;
  2183  0009A8  9692               	bcf	3986,3,c	;volatile
  2184                           
  2185                           ; BSR set to: 0
  2186                           ;clock.c: 1768: TRISAbits.TRISA5 = 0;
  2187  0009AA  9A92               	bcf	3986,5,c	;volatile
  2188                           
  2189                           ; BSR set to: 0
  2190                           ;clock.c: 1770: led_mask0 = 0x1;
  2191  0009AC  0E01               	movlw	1
  2192  0009AE  6E4B               	movwf	_led_mask0,c
  2193                           
  2194                           ; BSR set to: 0
  2195                           ;clock.c: 1771: draw_time();
  2196  0009B0  ECB1  F006         	call	_draw_time	;wreg free
  2197                           
  2198                           ;clock.c: 1776: INTCONbits.PEIE = 1;
  2199  0009B4  8CF2               	bsf	intcon,6,c	;volatile
  2200                           
  2201                           ;clock.c: 1777: INTCONbits.GIE = 1;
  2202  0009B6  8EF2               	bsf	intcon,7,c	;volatile
  2203                           
  2204                           ;clock.c: 1780: uint16_t i;
  2205                           ;clock.c: 1781: for(i = 0; i < 32768; i++)
  2206  0009B8  0E00               	movlw	0
  2207  0009BA  0100               	movlb	0	; () banked
  2208  0009BC  6F93               	movwf	(main@i+1)& (0+255),b
  2209  0009BE  0E00               	movlw	0
  2210  0009C0  6F92               	movwf	main@i& (0+255),b
  2211  0009C2                     l4471:
  2212  0009C2  FFFF               	dw	65535	; assembler added errata NOP
  2213                           
  2214                           ; BSR set to: 0
  2215  0009C4  0E80               	movlw	128
  2216  0009C6  0100               	movlb	0	; () banked
  2217  0009C8  5D93               	subwf	(main@i+1)& (0+255),w,b
  2218  0009CA  B0D8               	btfsc	status,0,c
  2219  0009CC  D005               	goto	l4479
  2220                           
  2221                           ; BSR set to: 0
  2222                           
  2223                           ; BSR set to: 0
  2224  0009CE  0004               	clrwdt		;# 
  2225  0009D0  0100               	movlb	0	; () banked
  2226  0009D2  4B92               	infsnz	main@i& (0+255),f,b
  2227  0009D4  2B93               	incf	(main@i+1)& (0+255),f,b
  2228  0009D6  D7F5               	goto	l4471
  2229  0009D8                     l4479:
  2230  0009D8  FFFF               	dw	65535	; assembler added errata NOP
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;clock.c: 1784: }
  2234                           ;clock.c: 1787: print_text("Welcome to Heroineclock 2\n");
  2235  0009DA  0EC5               	movlw	low STR_3
  2236  0009DC  6E15               	movwf	print_text@s,c
  2237  0009DE  0EBF               	movlw	high STR_3
  2238  0009E0  6E16               	movwf	print_text@s+1,c
  2239  0009E2  EC52  F00D         	call	_print_text	;wreg free
  2240                           
  2241                           ;clock.c: 1803: print_text("\n");
  2242  0009E6  0EDE               	movlw	low (STR_3+25)
  2243  0009E8  6E15               	movwf	print_text@s,c
  2244  0009EA  0EBF               	movlw	high (STR_3+25)
  2245  0009EC  6E16               	movwf	print_text@s+1,c
  2246  0009EE  EC52  F00D         	call	_print_text	;wreg free
  2247  0009F2                     l528:
  2248  0009F2  FFFF               	dw	65535	; assembler added errata NOP
  2249  0009F4  0004               	clrwdt		;# 
  2250                           
  2251                           ;clock.c: 1815: uint16_t test_time = TMR0L;
  2252  0009F6  CFD6 F090          	movff	4054,main@test_time	;volatile
  2253  0009FA  0100               	movlb	0	; () banked
  2254  0009FC  6B91               	clrf	(main@test_time+1)& (0+255),b
  2255                           
  2256                           ; BSR set to: 0
  2257                           ;clock.c: 1816: test_time |= ((uint16_t)TMR0H) << 8;
  2258  0009FE  50D7               	movf	4055,w,c	;volatile
  2259  000A00  6E2D               	movwf	(??_main+1)& (0+255),c
  2260  000A02  6A2C               	clrf	??_main& (0+255),c
  2261  000A04  502C               	movf	??_main,w,c
  2262  000A06  0100               	movlb	0	; () banked
  2263  000A08  1390               	iorwf	main@test_time& (0+255),f,b
  2264  000A0A  502D               	movf	??_main+1,w,c
  2265  000A0C  0100               	movlb	0	; () banked
  2266  000A0E  1391               	iorwf	(main@test_time+1)& (0+255),f,b
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;clock.c: 1818: if(test_time > 16000 &&
  2270                           ;clock.c: 1819: !first_edge)
  2271  000A10  0E81               	movlw	129
  2272  000A12  0100               	movlb	0	; () banked
  2273  000A14  5D90               	subwf	main@test_time& (0+255),w,b
  2274  000A16  0E3E               	movlw	62
  2275  000A18  0100               	movlb	0	; () banked
  2276  000A1A  5991               	subwfb	(main@test_time+1)& (0+255),w,b
  2277  000A1C  A0D8               	btfss	status,0,c
  2278  000A1E  D030               	goto	l529
  2279                           
  2280                           ; BSR set to: 0
  2281  000A20  5046               	movf	_first_edge,w,c
  2282  000A22  A4D8               	btfss	status,2,c
  2283  000A24  D02D               	goto	l529
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;clock.c: 1820: {
  2287                           ;clock.c: 1821: print_text("IR timed out\n");
  2288  000A26  0EE0               	movlw	low STR_5
  2289  000A28  6E15               	movwf	print_text@s,c
  2290  000A2A  0EBF               	movlw	high STR_5
  2291  000A2C  6E16               	movwf	print_text@s+1,c
  2292  000A2E  EC52  F00D         	call	_print_text	;wreg free
  2293                           
  2294                           ;clock.c: 1824: INTCONbits.GIE = 0;
  2295  000A32  9EF2               	bcf	intcon,7,c	;volatile
  2296                           
  2297                           ;clock.c: 1825: INTCON2bits.INTEDG3 = 0;
  2298  000A34  96F1               	bcf	intcon2,3,c	;volatile
  2299                           
  2300                           ;clock.c: 1826: TMR0H = 0;
  2301  000A36  0E00               	movlw	0
  2302  000A38  6ED7               	movwf	4055,c	;volatile
  2303                           
  2304                           ;clock.c: 1827: TMR0L = 0;
  2305  000A3A  0E00               	movlw	0
  2306  000A3C  6ED6               	movwf	4054,c	;volatile
  2307                           
  2308                           ;clock.c: 1828: INTCONbits.GIE = 1;
  2309  000A3E  8EF2               	bsf	intcon,7,c	;volatile
  2310                           
  2311                           ;clock.c: 1830: uint8_t i;
  2312                           ;clock.c: 1831: ir_size = 0;
  2313  000A40  0E00               	movlw	0
  2314  000A42  6E32               	movwf	_ir_size,c
  2315                           
  2316                           ;clock.c: 1832: for(i = 0; i < (sizeof(ir_codes) / sizeof(ir_code_t)); i++)
  2317  000A44  0E00               	movlw	0
  2318  000A46  0100               	movlb	0	; () banked
  2319  000A48  6F94               	movwf	main@i_1024& (0+255),b
  2320  000A4A                     l4505:
  2321  000A4A  FFFF               	dw	65535	; assembler added errata NOP
  2322                           
  2323                           ; BSR set to: 0
  2324  000A4C  0E07               	movlw	7
  2325  000A4E  0100               	movlb	0	; () banked
  2326  000A50  6594               	cpfsgt	main@i_1024& (0+255),b
  2327  000A52  D001               	goto	l4509
  2328  000A54  D00F               	goto	l4515
  2329  000A56                     l4509:
  2330  000A56  FFFF               	dw	65535	; assembler added errata NOP
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;clock.c: 1833: {
  2334                           ;clock.c: 1834: ir_code_failed[i] = 0;
  2335  000A58  0100               	movlb	0	; () banked
  2336  000A5A  5194               	movf	main@i_1024& (0+255),w,b
  2337  000A5C  0D01               	mullw	1
  2338  000A5E  0E60               	movlw	low _ir_code_failed
  2339  000A60  24F3               	addwf	prodl,w,c
  2340  000A62  6ED9               	movwf	fsr2l,c
  2341  000A64  0E00               	movlw	high _ir_code_failed
  2342  000A66  20F4               	addwfc	prodh,w,c
  2343  000A68  6EDA               	movwf	fsr2h,c
  2344  000A6A  0E00               	movlw	0
  2345  000A6C  6EDF               	movwf	indf2,c
  2346                           
  2347                           ; BSR set to: 0
  2348  000A6E  0100               	movlb	0	; () banked
  2349  000A70  2B94               	incf	main@i_1024& (0+255),f,b
  2350  000A72  D7EB               	goto	l4505
  2351  000A74                     l4515:
  2352  000A74  FFFF               	dw	65535	; assembler added errata NOP
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;clock.c: 1835: }
  2356                           ;clock.c: 1836: first_edge = 1;
  2357  000A76  0E01               	movlw	1
  2358  000A78  6E46               	movwf	_first_edge,c
  2359                           
  2360                           ;clock.c: 1837: have_ir = 0;
  2361  000A7A  0E00               	movlw	0
  2362  000A7C  0100               	movlb	0	; () banked
  2363  000A7E  6F80               	movwf	_have_ir& (0+255),b
  2364  000A80                     l529:
  2365  000A80  FFFF               	dw	65535	; assembler added errata NOP
  2366                           
  2367                           ; BSR set to: 0
  2368                           ;clock.c: 1838: }
  2369                           ;clock.c: 1840: if(got_ir_int)
  2370  000A82  5031               	movf	_got_ir_int,w,c	;volatile
  2371  000A84  B4D8               	btfsc	status,2,c
  2372  000A86  D01F               	goto	l4529
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;clock.c: 1841: {
  2376                           ;clock.c: 1842: got_ir_int = 0;
  2377  000A88  0E00               	movlw	0
  2378  000A8A  6E31               	movwf	_got_ir_int,c	;volatile
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;clock.c: 1844: INTCON2bits.INTEDG3 = !INTCON2bits.INTEDG3;
  2382  000A8C  B6F1               	btfsc	intcon2,3,c	;volatile
  2383  000A8E  D003               	goto	u6220
  2384  000A90  6A2C               	clrf	??_main& (0+255),c
  2385  000A92  2A2C               	incf	??_main& (0+255),f,c
  2386  000A94  D002               	goto	u6238
  2387  000A96                     u6220:
  2388  000A96  FFFF               	dw	65535	; assembler added errata NOP
  2389  000A98  6A2C               	clrf	??_main& (0+255),c
  2390  000A9A                     u6238:
  2391  000A9A  FFFF               	dw	65535	; assembler added errata NOP
  2392  000A9C  462C               	rlncf	??_main,f,c
  2393  000A9E  462C               	rlncf	??_main,f,c
  2394  000AA0  462C               	rlncf	??_main,f,c
  2395  000AA2  50F1               	movf	intcon2,w,c	;volatile
  2396  000AA4  182C               	xorwf	??_main,w,c
  2397  000AA6  0BF7               	andlw	-9
  2398  000AA8  182C               	xorwf	??_main,w,c
  2399  000AAA  6EF1               	movwf	intcon2,c	;volatile
  2400                           
  2401                           ;clock.c: 1845: ir_time = ir_time2;
  2402  000AAC  C068  F06A         	movff	_ir_time2,_ir_time	;volatile
  2403  000AB0  C069  F06B         	movff	_ir_time2+1,_ir_time+1	;volatile
  2404                           
  2405                           ;clock.c: 1846: if(first_edge)
  2406  000AB4  5046               	movf	_first_edge,w,c
  2407  000AB6  B4D8               	btfsc	status,2,c
  2408  000AB8  D003               	goto	l4527
  2409                           
  2410                           ;clock.c: 1847: {
  2411                           ;clock.c: 1848: first_edge = 0;
  2412  000ABA  0E00               	movlw	0
  2413  000ABC  6E46               	movwf	_first_edge,c
  2414                           
  2415                           ;clock.c: 1849: }
  2416  000ABE  D003               	goto	l4529
  2417  000AC0                     l4527:
  2418  000AC0  FFFF               	dw	65535	; assembler added errata NOP
  2419                           
  2420                           ;clock.c: 1850: else
  2421                           ;clock.c: 1851: {
  2422                           ;clock.c: 1852: handle_ir();
  2423  000AC2  EC6F  F000         	call	_handle_ir	;wreg free
  2424  000AC6                     l4529:
  2425  000AC6  FFFF               	dw	65535	; assembler added errata NOP
  2426                           
  2427                           ;clock.c: 1853: }
  2428                           ;clock.c: 1854: }
  2429                           ;clock.c: 1861: if(PIR2bits.CCP2IF)
  2430  000AC8  A0A1               	btfss	4001,0,c	;volatile
  2431  000ACA  D031               	goto	l4559
  2432                           
  2433                           ;clock.c: 1862: {
  2434                           ;clock.c: 1863: PIR2bits.CCP2IF = 0;
  2435  000ACC  90A1               	bcf	4001,0,c	;volatile
  2436                           
  2437                           ;clock.c: 1866: crystal_time++;
  2438  000ACE  0100               	movlb	0	; () banked
  2439  000AD0  4B6C               	infsnz	_crystal_time& (0+255),f,b
  2440  000AD2  2B6D               	incf	(_crystal_time+1)& (0+255),f,b
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;clock.c: 1869: if(crystal_time == 19230)
  2444  000AD4  0E1E               	movlw	30
  2445  000AD6  0100               	movlb	0	; () banked
  2446  000AD8  196C               	xorwf	_crystal_time& (0+255),w,b
  2447  000ADA  E10C               	bnz	l4541
  2448  000ADC  0E4B               	movlw	75
  2449  000ADE  0100               	movlb	0	; () banked
  2450  000AE0  196D               	xorwf	(_crystal_time+1)& (0+255),w,b
  2451  000AE2  A4D8               	btfss	status,2,c
  2452  000AE4  D007               	goto	l4541
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;clock.c: 1870: {
  2456                           ;clock.c: 1871: crystal_time = 0;
  2457  000AE6  0E00               	movlw	0
  2458  000AE8  0100               	movlb	0	; () banked
  2459  000AEA  6F6D               	movwf	(_crystal_time+1)& (0+255),b
  2460  000AEC  0E00               	movlw	0
  2461  000AEE  6F6C               	movwf	_crystal_time& (0+255),b
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;clock.c: 1872: handle_time();
  2465  000AF0  EC5F  F00A         	call	_handle_time	;wreg free
  2466  000AF4                     l4541:
  2467  000AF4  FFFF               	dw	65535	; assembler added errata NOP
  2468                           
  2469                           ;clock.c: 1873: }
  2470                           ;clock.c: 1876: handle_time();
  2471  000AF6  EC5F  F00A         	call	_handle_time	;wreg free
  2472                           
  2473                           ;clock.c: 1877: if(repeating)
  2474  000AFA  503B               	movf	_repeating,w,c
  2475  000AFC  A4D8               	btfss	status,2,c
  2476                           
  2477                           ;clock.c: 1878: {
  2478                           ;clock.c: 1879: handle_repeat();
  2479  000AFE  ECD1  F00B         	call	_handle_repeat	;wreg free
  2480                           
  2481                           ;clock.c: 1880: }
  2482                           ;clock.c: 1883: if(alarm &&
  2483                           ;clock.c: 1884: !alarm_sounding &&
  2484                           ;clock.c: 1885: hours == alarm_hours &&
  2485                           ;clock.c: 1886: minutes == alarm_minutes &&
  2486                           ;clock.c: 1887: seconds == 0 &&
  2487                           ;clock.c: 1888: ampm == alarm_ampm)
  2488  000B02  503D               	movf	_alarm,w,c
  2489  000B04  B4D8               	btfsc	status,2,c
  2490  000B06  D013               	goto	l4559
  2491  000B08  5037               	movf	_alarm_sounding,w,c
  2492  000B0A  A4D8               	btfss	status,2,c
  2493  000B0C  D010               	goto	l4559
  2494  000B0E  5047               	movf	_alarm_hours,w,c
  2495  000B10  184A               	xorwf	_hours,w,c
  2496  000B12  A4D8               	btfss	status,2,c
  2497  000B14  D00C               	goto	l4559
  2498  000B16  5039               	movf	_alarm_minutes,w,c
  2499  000B18  183F               	xorwf	_minutes,w,c
  2500  000B1A  A4D8               	btfss	status,2,c
  2501  000B1C  D008               	goto	l4559
  2502  000B1E  5040               	movf	_seconds,w,c
  2503  000B20  A4D8               	btfss	status,2,c
  2504  000B22  D005               	goto	l4559
  2505  000B24  5038               	movf	_alarm_ampm,w,c
  2506  000B26  183E               	xorwf	_ampm,w,c
  2507  000B28  B4D8               	btfsc	status,2,c
  2508                           
  2509                           ;clock.c: 1889: {
  2510                           ;clock.c: 1890: start_alarm();
  2511  000B2A  EC36  F00E         	call	_start_alarm	;wreg free
  2512  000B2E                     l4559:
  2513  000B2E  FFFF               	dw	65535	; assembler added errata NOP
  2514                           
  2515                           ;clock.c: 1891: }
  2516                           ;clock.c: 1893: }
  2517                           ;clock.c: 1900: if(uart_size > 0 && PIR1bits.TXIF)
  2518  000B30  0100               	movlb	0	; () banked
  2519  000B32  517C               	movf	_uart_size& (0+255),w,b
  2520  000B34  0100               	movlb	0	; () banked
  2521  000B36  117D               	iorwf	(_uart_size+1)& (0+255),w,b
  2522  000B38  A4D8               	btfss	status,2,c
  2523                           
  2524                           ; BSR set to: 0
  2525  000B3A  A89E               	btfss	3998,4,c	;volatile
  2526  000B3C  D75A               	goto	l528
  2527                           
  2528                           ; BSR set to: 0
  2529                           ;clock.c: 1901: {
  2530                           ;clock.c: 1902: PIR1bits.TXIF = 0;
  2531  000B3E  989E               	bcf	3998,4,c	;volatile
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;clock.c: 1903: TXREG = uart_buffer[uart_position2++];
  2535  000B40  0E9E               	movlw	low _uart_buffer
  2536  000B42  0100               	movlb	0	; () banked
  2537  000B44  2578               	addwf	_uart_position2& (0+255),w,b
  2538  000B46  6ED9               	movwf	fsr2l,c
  2539  000B48  0E00               	movlw	high _uart_buffer
  2540  000B4A  0100               	movlb	0	; () banked
  2541  000B4C  2179               	addwfc	(_uart_position2+1)& (0+255),w,b
  2542  000B4E  6EDA               	movwf	fsr2h,c
  2543  000B50  50DF               	movf	indf2,w,c
  2544  000B52  6EAD               	movwf	4013,c	;volatile
  2545                           
  2546                           ; BSR set to: 0
  2547  000B54  0100               	movlb	0	; () banked
  2548  000B56  4B78               	infsnz	_uart_position2& (0+255),f,b
  2549  000B58  2B79               	incf	(_uart_position2+1)& (0+255),f,b
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;clock.c: 1904: uart_size--;
  2553  000B5A  0100               	movlb	0	; () banked
  2554  000B5C  077C               	decf	_uart_size& (0+255),f,b
  2555  000B5E  A0D8               	btfss	status,0,c
  2556  000B60  077D               	decf	(_uart_size+1)& (0+255),f,b
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;clock.c: 1905: if(uart_position2 >= 1024)
  2560  000B62  0E04               	movlw	4
  2561  000B64  0100               	movlb	0	; () banked
  2562  000B66  5D79               	subwf	(_uart_position2+1)& (0+255),w,b
  2563  000B68  A0D8               	btfss	status,0,c
  2564  000B6A  D743               	goto	l528
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;clock.c: 1906: {
  2568                           ;clock.c: 1907: uart_position2 = 0;
  2569  000B6C  0E00               	movlw	0
  2570  000B6E  0100               	movlb	0	; () banked
  2571  000B70  6F79               	movwf	(_uart_position2+1)& (0+255),b
  2572  000B72  0E00               	movlw	0
  2573  000B74  6F78               	movwf	_uart_position2& (0+255),b
  2574                           
  2575                           ; BSR set to: 0
  2576                           
  2577                           ; BSR set to: 0
  2578                           
  2579                           ; BSR set to: 0
  2580  000B76  D73D               	goto	l528
  2581  000B78                     __end_of_main:
  2582                           	opt stack 0
  2583                           tblptru	equ	0xFF8
  2584                           tblptrh	equ	0xFF7
  2585                           tblptrl	equ	0xFF6
  2586                           tablat	equ	0xFF5
  2587                           prodh	equ	0xFF4
  2588                           prodl	equ	0xFF3
  2589                           intcon	equ	0xFF2
  2590                           intcon2	equ	0xFF1
  2591                           intcon3	equ	0xFF0
  2592                           postinc0	equ	0xFEE
  2593                           wreg	equ	0xFE8
  2594                           postdec1	equ	0xFE5
  2595                           fsr1h	equ	0xFE2
  2596                           fsr1l	equ	0xFE1
  2597                           indf2	equ	0xFDF
  2598                           fsr2h	equ	0xFDA
  2599                           fsr2l	equ	0xFD9
  2600                           status	equ	0xFD8
  2601                           
  2602 ;; *************** function _start_alarm *****************
  2603 ;; Defined at:
  2604 ;;		line 1637 in file "clock.c"
  2605 ;; Parameters:    Size  Location     Type
  2606 ;;		None
  2607 ;; Auto vars:     Size  Location     Type
  2608 ;;		None
  2609 ;; Return value:  Size  Location     Type
  2610 ;;                  1    wreg      void 
  2611 ;; Registers used:
  2612 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2613 ;; Tracked objects:
  2614 ;;		On entry : 0/0
  2615 ;;		On exit  : 0/0
  2616 ;;		Unchanged: 0/0
  2617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2622 ;;Total ram usage:        0 bytes
  2623 ;; Hardware stack levels used:    1
  2624 ;; Hardware stack levels required when called:    4
  2625 ;; This function calls:
  2626 ;;		_play_song
  2627 ;; This function is called by:
  2628 ;;		_main
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           	psect	text1
  2633  001C6C                     __ptext1:
  2634                           	opt stack 0
  2635  001C6C                     _start_alarm:
  2636                           	opt stack 0
  2637  001C6C  FFFF               	dw	65535	; assembler added errata NOP
  2638                           
  2639                           ;clock.c: 1639: alarm_sounding = 1;
  2640                           
  2641                           ; BSR set to: 0
  2642                           ;incstack = 0
  2643  001C6E  0E01               	movlw	1
  2644  001C70  6E37               	movwf	_alarm_sounding,c
  2645                           
  2646                           ;clock.c: 1640: play_song(alarm_song);
  2647  001C72  0E25               	movlw	low _alarm_song
  2648  001C74  6E14               	movwf	play_song@ptr,c
  2649  001C76  0EBE               	movlw	high _alarm_song
  2650  001C78  6E15               	movwf	play_song@ptr+1,c
  2651  001C7A  EC63  F00C         	call	_play_song	;wreg free
  2652  001C7E  0012               	return		;funcret
  2653  001C80  FFFF               	dw	65535	; errata NOP
  2654  001C82                     __end_of_start_alarm:
  2655                           	opt stack 0
  2656                           tblptru	equ	0xFF8
  2657                           tblptrh	equ	0xFF7
  2658                           tblptrl	equ	0xFF6
  2659                           tablat	equ	0xFF5
  2660                           prodh	equ	0xFF4
  2661                           prodl	equ	0xFF3
  2662                           intcon	equ	0xFF2
  2663                           intcon2	equ	0xFF1
  2664                           intcon3	equ	0xFF0
  2665                           postinc0	equ	0xFEE
  2666                           wreg	equ	0xFE8
  2667                           postdec1	equ	0xFE5
  2668                           fsr1h	equ	0xFE2
  2669                           fsr1l	equ	0xFE1
  2670                           indf2	equ	0xFDF
  2671                           fsr2h	equ	0xFDA
  2672                           fsr2l	equ	0xFD9
  2673                           status	equ	0xFD8
  2674                           
  2675 ;; *************** function _handle_time *****************
  2676 ;; Defined at:
  2677 ;;		line 1565 in file "clock.c"
  2678 ;; Parameters:    Size  Location     Type
  2679 ;;		None
  2680 ;; Auto vars:     Size  Location     Type
  2681 ;;		None
  2682 ;; Return value:  Size  Location     Type
  2683 ;;                  1    wreg      void 
  2684 ;; Registers used:
  2685 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2686 ;; Tracked objects:
  2687 ;;		On entry : 0/0
  2688 ;;		On exit  : 0/0
  2689 ;;		Unchanged: 0/0
  2690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2695 ;;Total ram usage:        0 bytes
  2696 ;; Hardware stack levels used:    1
  2697 ;; Hardware stack levels required when called:    4
  2698 ;; This function calls:
  2699 ;;		_draw_time
  2700 ;;		_handle_song
  2701 ;;		_print_byte
  2702 ;;		_print_number2
  2703 ;; This function is called by:
  2704 ;;		_main
  2705 ;; This function uses a non-reentrant model
  2706 ;;
  2707                           
  2708                           	psect	text2
  2709  0014BE                     __ptext2:
  2710                           	opt stack 0
  2711  0014BE                     _handle_time:
  2712                           	opt stack 0
  2713  0014BE  FFFF               	dw	65535	; assembler added errata NOP
  2714                           
  2715                           ;clock.c: 1571: time_hz++;
  2716                           
  2717                           ;incstack = 0
  2718  0014C0  2A41               	incf	_time_hz,f,c
  2719                           
  2720                           ;clock.c: 1572: if(time_hz == 250)
  2721  0014C2  0EFA               	movlw	250
  2722  0014C4  1841               	xorwf	_time_hz,w,c
  2723  0014C6  A4D8               	btfss	status,2,c
  2724  0014C8  D03E               	goto	l4351
  2725                           
  2726                           ;clock.c: 1573: {
  2727                           ;clock.c: 1574: time_hz = 0;
  2728  0014CA  0E00               	movlw	0
  2729  0014CC  6E41               	movwf	_time_hz,c
  2730                           
  2731                           ;clock.c: 1575: seconds++;
  2732  0014CE  2A40               	incf	_seconds,f,c
  2733                           
  2734                           ;clock.c: 1576: if(seconds == 60)
  2735  0014D0  0E3C               	movlw	60
  2736  0014D2  1840               	xorwf	_seconds,w,c
  2737  0014D4  A4D8               	btfss	status,2,c
  2738  0014D6  D01E               	goto	l498
  2739                           
  2740                           ;clock.c: 1577: {
  2741                           ;clock.c: 1578: seconds = 0;
  2742  0014D8  0E00               	movlw	0
  2743  0014DA  6E40               	movwf	_seconds,c
  2744                           
  2745                           ;clock.c: 1579: minutes++;
  2746  0014DC  2A3F               	incf	_minutes,f,c
  2747                           
  2748                           ;clock.c: 1580: if(minutes == 60)
  2749  0014DE  0E3C               	movlw	60
  2750  0014E0  183F               	xorwf	_minutes,w,c
  2751  0014E2  A4D8               	btfss	status,2,c
  2752  0014E4  D017               	goto	l498
  2753                           
  2754                           ;clock.c: 1581: {
  2755                           ;clock.c: 1582: minutes = 0;
  2756  0014E6  0E00               	movlw	0
  2757  0014E8  6E3F               	movwf	_minutes,c
  2758                           
  2759                           ;clock.c: 1583: hours++;
  2760  0014EA  2A4A               	incf	_hours,f,c
  2761                           
  2762                           ;clock.c: 1584: if(hours == 12)
  2763  0014EC  0E0C               	movlw	12
  2764  0014EE  184A               	xorwf	_hours,w,c
  2765  0014F0  A4D8               	btfss	status,2,c
  2766  0014F2  D00A               	goto	l4331
  2767                           
  2768                           ;clock.c: 1585: {
  2769                           ;clock.c: 1586: ampm = !ampm;
  2770  0014F4  503E               	movf	_ampm,w,c
  2771  0014F6  A4D8               	btfss	status,2,c
  2772  0014F8  D002               	goto	u6040
  2773  0014FA  0E01               	movlw	1
  2774  0014FC  D002               	goto	u6050
  2775  0014FE                     u6040:
  2776  0014FE  FFFF               	dw	65535	; assembler added errata NOP
  2777  001500  0E00               	movlw	0
  2778  001502                     u6050:
  2779  001502  FFFF               	dw	65535	; assembler added errata NOP
  2780  001504  6E3E               	movwf	_ampm,c
  2781                           
  2782                           ;clock.c: 1587: }
  2783  001506  D006               	goto	l498
  2784  001508                     l4331:
  2785  001508  FFFF               	dw	65535	; assembler added errata NOP
  2786                           
  2787                           ;clock.c: 1588: else
  2788                           ;clock.c: 1589: if(hours >= 13)
  2789  00150A  0E0C               	movlw	12
  2790  00150C  644A               	cpfsgt	_hours,c
  2791  00150E  D002               	goto	l498
  2792                           
  2793                           ;clock.c: 1590: {
  2794                           ;clock.c: 1591: hours = 1;
  2795  001510  0E01               	movlw	1
  2796  001512  6E4A               	movwf	_hours,c
  2797  001514                     l498:
  2798  001514  FFFF               	dw	65535	; assembler added errata NOP
  2799                           
  2800                           ;clock.c: 1592: }
  2801                           ;clock.c: 1593: }
  2802                           ;clock.c: 1594: }
  2803                           ;clock.c: 1596: if(alarm_sounding)
  2804  001516  5037               	movf	_alarm_sounding,w,c
  2805  001518  A4D8               	btfss	status,2,c
  2806                           
  2807                           ;clock.c: 1597: {
  2808                           ;clock.c: 1598: alarm_time++;
  2809  00151A  2A36               	incf	_alarm_time,f,c
  2810                           
  2811                           ;clock.c: 1599: }
  2812                           ;clock.c: 1602: print_byte('>');
  2813  00151C  0E3E               	movlw	62
  2814  00151E  EC2E  F00D         	call	_print_byte
  2815                           
  2816                           ;clock.c: 1603: print_number2(hours);
  2817  001522  504A               	movf	_hours,w,c
  2818  001524  EC8F  F00C         	call	_print_number2
  2819                           
  2820                           ;clock.c: 1604: print_byte(':');
  2821  001528  0E3A               	movlw	58
  2822  00152A  EC2E  F00D         	call	_print_byte
  2823                           
  2824                           ;clock.c: 1605: print_number2(minutes);
  2825  00152E  503F               	movf	_minutes,w,c
  2826  001530  EC8F  F00C         	call	_print_number2
  2827                           
  2828                           ;clock.c: 1606: print_byte(':');
  2829  001534  0E3A               	movlw	58
  2830  001536  EC2E  F00D         	call	_print_byte
  2831                           
  2832                           ;clock.c: 1607: print_number2(seconds);
  2833  00153A  5040               	movf	_seconds,w,c
  2834  00153C  EC8F  F00C         	call	_print_number2
  2835                           
  2836                           ;clock.c: 1608: print_byte('\n');
  2837  001540  0E0A               	movlw	10
  2838  001542  EC2E  F00D         	call	_print_byte
  2839  001546                     l4351:
  2840  001546  FFFF               	dw	65535	; assembler added errata NOP
  2841                           
  2842                           ;clock.c: 1609: }
  2843                           ;clock.c: 1611: display_flash++;
  2844  001548  2A42               	incf	_display_flash,f,c
  2845                           
  2846                           ;clock.c: 1612: if(display_flash == 250 / 2)
  2847  00154A  0E7D               	movlw	125
  2848  00154C  1842               	xorwf	_display_flash,w,c
  2849  00154E  A4D8               	btfss	status,2,c
  2850  001550  D014               	goto	l4361
  2851                           
  2852                           ;clock.c: 1613: {
  2853                           ;clock.c: 1614: display_flash = 0;
  2854  001552  0E00               	movlw	0
  2855  001554  6E42               	movwf	_display_flash,c
  2856                           
  2857                           ;clock.c: 1615: colon = !colon;
  2858  001556  5049               	movf	_colon,w,c
  2859  001558  A4D8               	btfss	status,2,c
  2860  00155A  D002               	goto	u6090
  2861  00155C  0E01               	movlw	1
  2862  00155E  D002               	goto	u6100
  2863  001560                     u6090:
  2864  001560  FFFF               	dw	65535	; assembler added errata NOP
  2865  001562  0E00               	movlw	0
  2866  001564                     u6100:
  2867  001564  FFFF               	dw	65535	; assembler added errata NOP
  2868  001566  6E49               	movwf	_colon,c
  2869                           
  2870                           ;clock.c: 1616: if(mode == 0 || mode == 1)
  2871  001568  503C               	movf	_mode,w,c
  2872  00156A  B4D8               	btfsc	status,2,c
  2873  00156C  D003               	goto	l4359
  2874  00156E  043C               	decf	_mode,w,c
  2875  001570  A4D8               	btfss	status,2,c
  2876  001572  D003               	bra	l4361
  2877  001574                     l4359:
  2878  001574  FFFF               	dw	65535	; assembler added errata NOP
  2879                           
  2880                           ;clock.c: 1617: {
  2881                           ;clock.c: 1618: draw_time();
  2882  001576  ECB1  F006         	call	_draw_time	;wreg free
  2883  00157A                     l4361:
  2884  00157A  FFFF               	dw	65535	; assembler added errata NOP
  2885                           
  2886                           ;clock.c: 1619: }
  2887                           ;clock.c: 1620: }
  2888                           ;clock.c: 1624: if(song_ptr)
  2889  00157C  502E               	movf	_song_ptr,w,c
  2890  00157E  102F               	iorwf	_song_ptr+1,w,c
  2891  001580  1030               	iorwf	_song_ptr+2,w,c
  2892  001582  B4D8               	btfsc	status,2,c
  2893  001584  D009               	goto	l510
  2894                           
  2895                           ;clock.c: 1625: {
  2896                           ;clock.c: 1626: song_counter++;
  2897  001586  2A44               	incf	_song_counter,f,c
  2898                           
  2899                           ;clock.c: 1627: if(song_counter >= 10)
  2900  001588  0E09               	movlw	9
  2901  00158A  6444               	cpfsgt	_song_counter,c
  2902  00158C  D005               	goto	l510
  2903                           
  2904                           ;clock.c: 1628: {
  2905                           ;clock.c: 1629: song_counter = 0;
  2906  00158E  0E00               	movlw	0
  2907  001590  6E44               	movwf	_song_counter,c
  2908                           
  2909                           ;clock.c: 1630: song_delay++;
  2910  001592  2A43               	incf	_song_delay,f,c
  2911                           
  2912                           ;clock.c: 1631: handle_song();
  2913  001594  ECBC  F005         	call	_handle_song	;wreg free
  2914  001598                     l510:
  2915  001598  FFFF               	dw	65535	; assembler added errata NOP
  2916  00159A  0012               	return		;funcret
  2917  00159C  FFFF               	dw	65535	; errata NOP
  2918  00159E                     __end_of_handle_time:
  2919                           	opt stack 0
  2920                           tblptru	equ	0xFF8
  2921                           tblptrh	equ	0xFF7
  2922                           tblptrl	equ	0xFF6
  2923                           tablat	equ	0xFF5
  2924                           prodh	equ	0xFF4
  2925                           prodl	equ	0xFF3
  2926                           intcon	equ	0xFF2
  2927                           intcon2	equ	0xFF1
  2928                           intcon3	equ	0xFF0
  2929                           postinc0	equ	0xFEE
  2930                           wreg	equ	0xFE8
  2931                           postdec1	equ	0xFE5
  2932                           fsr1h	equ	0xFE2
  2933                           fsr1l	equ	0xFE1
  2934                           indf2	equ	0xFDF
  2935                           fsr2h	equ	0xFDA
  2936                           fsr2l	equ	0xFD9
  2937                           status	equ	0xFD8
  2938                           
  2939 ;; *************** function _print_number2 *****************
  2940 ;; Defined at:
  2941 ;;		line 617 in file "clock.c"
  2942 ;; Parameters:    Size  Location     Type
  2943 ;;  number          1    wreg     unsigned char 
  2944 ;; Auto vars:     Size  Location     Type
  2945 ;;  number          1   33[COMRAM] unsigned char 
  2946 ;; Return value:  Size  Location     Type
  2947 ;;                  1    wreg      void 
  2948 ;; Registers used:
  2949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2950 ;; Tracked objects:
  2951 ;;		On entry : 0/0
  2952 ;;		On exit  : 0/0
  2953 ;;		Unchanged: 0/0
  2954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2956 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2958 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2959 ;;Total ram usage:        1 bytes
  2960 ;; Hardware stack levels used:    1
  2961 ;; Hardware stack levels required when called:    3
  2962 ;; This function calls:
  2963 ;;		___awdiv
  2964 ;;		___awmod
  2965 ;;		_print_byte
  2966 ;; This function is called by:
  2967 ;;		_handle_time
  2968 ;; This function uses a non-reentrant model
  2969 ;;
  2970                           
  2971                           	psect	text3
  2972  00191E                     __ptext3:
  2973                           	opt stack 0
  2974  00191E                     _print_number2:
  2975                           	opt stack 0
  2976  00191E  FFFF               	dw	65535	; assembler added errata NOP
  2977                           
  2978                           ;incstack = 0
  2979                           ;print_number2@number stored from wreg
  2980  001920  6E22               	movwf	print_number2@number,c
  2981                           
  2982                           ;clock.c: 619: print_byte('0' + ((number / 10) % 10));
  2983  001922  0E00               	movlw	0
  2984  001924  6E17               	movwf	___awdiv@divisor+1,c
  2985  001926  0E0A               	movlw	10
  2986  001928  6E16               	movwf	___awdiv@divisor,c
  2987  00192A  C022  F014         	movff	print_number2@number,___awdiv@dividend
  2988  00192E  6A15               	clrf	___awdiv@dividend+1,c
  2989  001930  ECCF  F00A         	call	___awdiv	;wreg free
  2990  001934  C014  F01C         	movff	?___awdiv,___awmod@dividend
  2991  001938  C015  F01D         	movff	?___awdiv+1,___awmod@dividend+1
  2992  00193C  0E00               	movlw	0
  2993  00193E  6E1F               	movwf	___awmod@divisor+1,c
  2994  001940  0E0A               	movlw	10
  2995  001942  6E1E               	movwf	___awmod@divisor,c
  2996  001944  EC1B  F00B         	call	___awmod	;wreg free
  2997  001948  501C               	movf	?___awmod,w,c
  2998  00194A  0F30               	addlw	48
  2999  00194C  EC2E  F00D         	call	_print_byte
  3000                           
  3001                           ;clock.c: 620: print_byte('0' + (number % 10));
  3002  001950  C022  F01C         	movff	print_number2@number,___awmod@dividend
  3003  001954  6A1D               	clrf	___awmod@dividend+1,c
  3004  001956  0E00               	movlw	0
  3005  001958  6E1F               	movwf	___awmod@divisor+1,c
  3006  00195A  0E0A               	movlw	10
  3007  00195C  6E1E               	movwf	___awmod@divisor,c
  3008  00195E  EC1B  F00B         	call	___awmod	;wreg free
  3009  001962  501C               	movf	?___awmod,w,c
  3010  001964  0F30               	addlw	48
  3011  001966  EC2E  F00D         	call	_print_byte
  3012  00196A  0012               	return		;funcret
  3013  00196C  FFFF               	dw	65535	; errata NOP
  3014  00196E                     __end_of_print_number2:
  3015                           	opt stack 0
  3016                           tblptru	equ	0xFF8
  3017                           tblptrh	equ	0xFF7
  3018                           tblptrl	equ	0xFF6
  3019                           tablat	equ	0xFF5
  3020                           prodh	equ	0xFF4
  3021                           prodl	equ	0xFF3
  3022                           intcon	equ	0xFF2
  3023                           intcon2	equ	0xFF1
  3024                           intcon3	equ	0xFF0
  3025                           postinc0	equ	0xFEE
  3026                           wreg	equ	0xFE8
  3027                           postdec1	equ	0xFE5
  3028                           fsr1h	equ	0xFE2
  3029                           fsr1l	equ	0xFE1
  3030                           indf2	equ	0xFDF
  3031                           fsr2h	equ	0xFDA
  3032                           fsr2l	equ	0xFD9
  3033                           status	equ	0xFD8
  3034                           
  3035 ;; *************** function ___awmod *****************
  3036 ;; Defined at:
  3037 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awmod.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;  dividend        2   27[COMRAM] int 
  3040 ;;  divisor         2   29[COMRAM] int 
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;  sign            1   32[COMRAM] unsigned char 
  3043 ;;  counter         1   31[COMRAM] unsigned char 
  3044 ;; Return value:  Size  Location     Type
  3045 ;;                  2   27[COMRAM] int 
  3046 ;; Registers used:
  3047 ;;		wreg, status,2, status,0
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3053 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3054 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3056 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3057 ;;Total ram usage:        6 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; Hardware stack levels required when called:    2
  3060 ;; This function calls:
  3061 ;;		Nothing
  3062 ;; This function is called by:
  3063 ;;		_print_number2
  3064 ;; This function uses a non-reentrant model
  3065 ;;
  3066                           
  3067                           	psect	text4
  3068  001636                     __ptext4:
  3069                           	opt stack 0
  3070  001636                     ___awmod:
  3071                           	opt stack 0
  3072  001636  FFFF               	dw	65535	; assembler added errata NOP
  3073                           
  3074                           ;incstack = 0
  3075  001638  0E00               	movlw	0
  3076  00163A  6E21               	movwf	___awmod@sign,c
  3077  00163C  AE1D               	btfss	___awmod@dividend+1,7,c
  3078  00163E  D006               	goto	l3937
  3079  001640  6C1C               	negf	___awmod@dividend,c
  3080  001642  1E1D               	comf	___awmod@dividend+1,f,c
  3081  001644  B0D8               	btfsc	status,0,c
  3082  001646  2A1D               	incf	___awmod@dividend+1,f,c
  3083  001648  0E01               	movlw	1
  3084  00164A  6E21               	movwf	___awmod@sign,c
  3085  00164C                     l3937:
  3086  00164C  FFFF               	dw	65535	; assembler added errata NOP
  3087  00164E  AE1F               	btfss	___awmod@divisor+1,7,c
  3088  001650  D004               	goto	l3941
  3089  001652  6C1E               	negf	___awmod@divisor,c
  3090  001654  1E1F               	comf	___awmod@divisor+1,f,c
  3091  001656  B0D8               	btfsc	status,0,c
  3092  001658  2A1F               	incf	___awmod@divisor+1,f,c
  3093  00165A                     l3941:
  3094  00165A  FFFF               	dw	65535	; assembler added errata NOP
  3095  00165C  501E               	movf	___awmod@divisor,w,c
  3096  00165E  101F               	iorwf	___awmod@divisor+1,w,c
  3097  001660  B4D8               	btfsc	status,2,c
  3098  001662  D01C               	goto	l3957
  3099  001664  0E01               	movlw	1
  3100  001666  6E20               	movwf	___awmod@counter,c
  3101  001668  D005               	goto	l3947
  3102  00166A                     l3945:
  3103  00166A  FFFF               	dw	65535	; assembler added errata NOP
  3104  00166C  90D8               	bcf	status,0,c
  3105  00166E  361E               	rlcf	___awmod@divisor,f,c
  3106  001670  361F               	rlcf	___awmod@divisor+1,f,c
  3107  001672  2A20               	incf	___awmod@counter,f,c
  3108  001674                     l3947:
  3109  001674  FFFF               	dw	65535	; assembler added errata NOP
  3110  001676  AE1F               	btfss	___awmod@divisor+1,7,c
  3111  001678  D7F8               	goto	l3945
  3112  00167A                     l3949:
  3113  00167A  FFFF               	dw	65535	; assembler added errata NOP
  3114  00167C  501E               	movf	___awmod@divisor,w,c
  3115  00167E  5C1C               	subwf	___awmod@dividend,w,c
  3116  001680  501F               	movf	___awmod@divisor+1,w,c
  3117  001682  581D               	subwfb	___awmod@dividend+1,w,c
  3118  001684  A0D8               	btfss	status,0,c
  3119  001686  D004               	goto	l3953
  3120  001688  501E               	movf	___awmod@divisor,w,c
  3121  00168A  5E1C               	subwf	___awmod@dividend,f,c
  3122  00168C  501F               	movf	___awmod@divisor+1,w,c
  3123  00168E  5A1D               	subwfb	___awmod@dividend+1,f,c
  3124  001690                     l3953:
  3125  001690  FFFF               	dw	65535	; assembler added errata NOP
  3126  001692  90D8               	bcf	status,0,c
  3127  001694  321F               	rrcf	___awmod@divisor+1,f,c
  3128  001696  321E               	rrcf	___awmod@divisor,f,c
  3129  001698  2E20               	decfsz	___awmod@counter,f,c
  3130  00169A  D7EF               	goto	l3949
  3131  00169C                     l3957:
  3132  00169C  FFFF               	dw	65535	; assembler added errata NOP
  3133  00169E  5021               	movf	___awmod@sign,w,c
  3134  0016A0  B4D8               	btfsc	status,2,c
  3135  0016A2  D004               	goto	l3961
  3136  0016A4  6C1C               	negf	___awmod@dividend,c
  3137  0016A6  1E1D               	comf	___awmod@dividend+1,f,c
  3138  0016A8  B0D8               	btfsc	status,0,c
  3139  0016AA  2A1D               	incf	___awmod@dividend+1,f,c
  3140  0016AC                     l3961:
  3141  0016AC  FFFF               	dw	65535	; assembler added errata NOP
  3142  0016AE  C01C  F01C         	movff	___awmod@dividend,?___awmod
  3143  0016B2  C01D  F01D         	movff	___awmod@dividend+1,?___awmod+1
  3144  0016B6  0012               	return		;funcret
  3145  0016B8  FFFF               	dw	65535	; errata NOP
  3146  0016BA                     __end_of___awmod:
  3147                           	opt stack 0
  3148                           tblptru	equ	0xFF8
  3149                           tblptrh	equ	0xFF7
  3150                           tblptrl	equ	0xFF6
  3151                           tablat	equ	0xFF5
  3152                           prodh	equ	0xFF4
  3153                           prodl	equ	0xFF3
  3154                           intcon	equ	0xFF2
  3155                           intcon2	equ	0xFF1
  3156                           intcon3	equ	0xFF0
  3157                           postinc0	equ	0xFEE
  3158                           wreg	equ	0xFE8
  3159                           postdec1	equ	0xFE5
  3160                           fsr1h	equ	0xFE2
  3161                           fsr1l	equ	0xFE1
  3162                           indf2	equ	0xFDF
  3163                           fsr2h	equ	0xFDA
  3164                           fsr2l	equ	0xFD9
  3165                           status	equ	0xFD8
  3166                           
  3167 ;; *************** function _handle_repeat *****************
  3168 ;; Defined at:
  3169 ;;		line 1157 in file "clock.c"
  3170 ;; Parameters:    Size  Location     Type
  3171 ;;		None
  3172 ;; Auto vars:     Size  Location     Type
  3173 ;;		None
  3174 ;; Return value:  Size  Location     Type
  3175 ;;                  1    wreg      void 
  3176 ;; Registers used:
  3177 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3178 ;; Tracked objects:
  3179 ;;		On entry : 0/0
  3180 ;;		On exit  : 0/0
  3181 ;;		Unchanged: 0/0
  3182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3186 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3187 ;;Total ram usage:        0 bytes
  3188 ;; Hardware stack levels used:    1
  3189 ;; Hardware stack levels required when called:    6
  3190 ;; This function calls:
  3191 ;;		_do_hour_down
  3192 ;;		_do_hour_up
  3193 ;;		_do_minute_down
  3194 ;;		_do_minute_up
  3195 ;; This function is called by:
  3196 ;;		_main
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200                           	psect	text5
  3201  0017A2                     __ptext5:
  3202                           	opt stack 0
  3203  0017A2                     _handle_repeat:
  3204                           	opt stack 0
  3205  0017A2  FFFF               	dw	65535	; assembler added errata NOP
  3206                           
  3207                           ;clock.c: 1159: if(!have_ir)
  3208                           
  3209                           ;incstack = 0
  3210  0017A4  0100               	movlb	0	; () banked
  3211  0017A6  5180               	movf	_have_ir& (0+255),w,b
  3212  0017A8  0100               	movlb	0	; () banked
  3213  0017AA  A4D8               	btfss	status,2,c
  3214  0017AC  D005               	goto	l4101
  3215                           
  3216                           ; BSR set to: 0
  3217                           ;clock.c: 1160: {
  3218                           ;clock.c: 1161: repeating = 0;
  3219  0017AE  0E00               	movlw	0
  3220  0017B0  6E3B               	movwf	_repeating,c
  3221                           
  3222                           ;clock.c: 1162: repeat_counter = 0;
  3223  0017B2  0E00               	movlw	0
  3224  0017B4  6E3A               	movwf	_repeat_counter,c
  3225                           
  3226                           ;clock.c: 1163: }
  3227  0017B6  D027               	goto	l421
  3228  0017B8                     l4101:
  3229  0017B8  FFFF               	dw	65535	; assembler added errata NOP
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;clock.c: 1164: else
  3233                           ;clock.c: 1165: {
  3234                           ;clock.c: 1166: repeat_counter--;
  3235  0017BA  063A               	decf	_repeat_counter,f,c
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;clock.c: 1167: if(repeat_counter == 0)
  3239  0017BC  503A               	movf	_repeat_counter,w,c
  3240  0017BE  A4D8               	btfss	status,2,c
  3241  0017C0  D022               	goto	l421
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;clock.c: 1168: {
  3245                           ;clock.c: 1169: repeat_counter = 250 / 4;
  3246  0017C2  0E3E               	movlw	62
  3247  0017C4  6E3A               	movwf	_repeat_counter,c
  3248                           
  3249                           ;clock.c: 1170: switch(ir_code)
  3250  0017C6  D010               	goto	l4117
  3251  0017C8                     l4107:
  3252  0017C8  FFFF               	dw	65535	; assembler added errata NOP
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;clock.c: 1173: do_hour_up();
  3256  0017CA  EC5D  F00B         	call	_do_hour_up	;wreg free
  3257                           
  3258                           ;clock.c: 1174: break;
  3259  0017CE  D01B               	goto	l421
  3260  0017D0                     l4109:
  3261  0017D0  FFFF               	dw	65535	; assembler added errata NOP
  3262                           
  3263                           ;clock.c: 1177: do_hour_down();
  3264  0017D2  EC97  F00B         	call	_do_hour_down	;wreg free
  3265                           
  3266                           ;clock.c: 1178: break;
  3267  0017D6  D017               	goto	l421
  3268  0017D8                     l4111:
  3269  0017D8  FFFF               	dw	65535	; assembler added errata NOP
  3270                           
  3271                           ;clock.c: 1182: do_minute_up();
  3272  0017DA  ECF1  F00D         	call	_do_minute_up	;wreg free
  3273                           
  3274                           ;clock.c: 1183: break;
  3275  0017DE  D013               	goto	l421
  3276  0017E0                     l4113:
  3277  0017E0  FFFF               	dw	65535	; assembler added errata NOP
  3278                           
  3279                           ;clock.c: 1186: do_minute_down();
  3280  0017E2  EC01  F00E         	call	_do_minute_down	;wreg free
  3281                           
  3282                           ;clock.c: 1188: }
  3283                           
  3284                           ;clock.c: 1187: break;
  3285  0017E6  D00F               	goto	l421
  3286  0017E8                     l4117:
  3287  0017E8  FFFF               	dw	65535	; assembler added errata NOP
  3288  0017EA  0100               	movlb	0	; () banked
  3289  0017EC  517F               	movf	_ir_code& (0+255),w,b
  3290                           
  3291                           ; Switch size 1, requested type "space"
  3292                           ; Number of cases is 4, Range of values is 1 to 4
  3293                           ; switch strategies available:
  3294                           ; Name         Instructions Cycles
  3295                           ; simple_byte           13     7 (average)
  3296                           ;	Chosen strategy is simple_byte
  3297  0017EE  0A01               	xorlw	1	; case 1
  3298  0017F0  B4D8               	btfsc	status,2,c
  3299  0017F2  D7EA               	goto	l4107
  3300  0017F4  0A03               	xorlw	3	; case 2
  3301  0017F6  B4D8               	btfsc	status,2,c
  3302  0017F8  D7EB               	goto	l4109
  3303  0017FA  0A01               	xorlw	1	; case 3
  3304  0017FC  B4D8               	btfsc	status,2,c
  3305  0017FE  D7EC               	goto	l4111
  3306  001800  0A07               	xorlw	7	; case 4
  3307  001802  B4D8               	btfsc	status,2,c
  3308  001804  D7ED               	goto	l4113
  3309  001806                     l421:
  3310  001806  FFFF               	dw	65535	; assembler added errata NOP
  3311  001808  0012               	return		;funcret
  3312  00180A  FFFF               	dw	65535	; errata NOP
  3313  00180C                     __end_of_handle_repeat:
  3314                           	opt stack 0
  3315                           tblptru	equ	0xFF8
  3316                           tblptrh	equ	0xFF7
  3317                           tblptrl	equ	0xFF6
  3318                           tablat	equ	0xFF5
  3319                           prodh	equ	0xFF4
  3320                           prodl	equ	0xFF3
  3321                           intcon	equ	0xFF2
  3322                           intcon2	equ	0xFF1
  3323                           intcon3	equ	0xFF0
  3324                           postinc0	equ	0xFEE
  3325                           wreg	equ	0xFE8
  3326                           postdec1	equ	0xFE5
  3327                           fsr1h	equ	0xFE2
  3328                           fsr1l	equ	0xFE1
  3329                           indf2	equ	0xFDF
  3330                           fsr2h	equ	0xFDA
  3331                           fsr2l	equ	0xFD9
  3332                           status	equ	0xFD8
  3333                           
  3334 ;; *************** function _handle_ir *****************
  3335 ;; Defined at:
  3336 ;;		line 1193 in file "clock.c"
  3337 ;; Parameters:    Size  Location     Type
  3338 ;;		None
  3339 ;; Auto vars:     Size  Location     Type
  3340 ;;  code            2   11[BANK0 ] PTR const struct .
  3341 ;;		 -> ir_codes(32), 
  3342 ;;  error           2    7[BANK0 ] int 
  3343 ;;  data            2    5[BANK0 ] PTR const int 
  3344 ;;		 -> number3_data(142), number2_data(142), number1_data(142), prev_track_data(142), 
  3345 ;;		 -> next_track_data(142), volume_dn_data(142), volume_up_data(142), power_data(142), 
  3346 ;;  code_size       1    1[BANK0 ] const unsigned char 
  3347 ;;  failed          1    0[BANK0 ] unsigned char 
  3348 ;;  i               1   10[BANK0 ] unsigned char 
  3349 ;;  ir_error        2    3[BANK0 ] unsigned int 
  3350 ;;  j               1   13[BANK0 ] unsigned char 
  3351 ;;  i               1    9[BANK0 ] unsigned char 
  3352 ;;  got_it          1    2[BANK0 ] unsigned char 
  3353 ;; Return value:  Size  Location     Type
  3354 ;;                  1    wreg      void 
  3355 ;; Registers used:
  3356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3357 ;; Tracked objects:
  3358 ;;		On entry : 0/0
  3359 ;;		On exit  : 0/0
  3360 ;;		Unchanged: 0/0
  3361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3363 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3364 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3365 ;;      Totals:         6      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3366 ;;Total ram usage:       20 bytes
  3367 ;; Hardware stack levels used:    1
  3368 ;; Hardware stack levels required when called:    6
  3369 ;; This function calls:
  3370 ;;		_do_hour_down
  3371 ;;		_do_hour_up
  3372 ;;		_do_minute_down
  3373 ;;		_do_minute_up
  3374 ;;		_draw_alarm
  3375 ;;		_draw_test
  3376 ;;		_draw_time
  3377 ;;		_play_song
  3378 ;;		_print_byte
  3379 ;;		_print_number
  3380 ;;		_print_text
  3381 ;; This function is called by:
  3382 ;;		_main
  3383 ;; This function uses a non-reentrant model
  3384 ;;
  3385                           
  3386                           	psect	text6
  3387  0000DE                     __ptext6:
  3388                           	opt stack 0
  3389  0000DE                     _handle_ir:
  3390                           	opt stack 0
  3391  0000DE  FFFF               	dw	65535	; assembler added errata NOP
  3392                           
  3393                           ;clock.c: 1200: uint16_t ir_error = 0;
  3394                           
  3395                           ;incstack = 0
  3396  0000E0  0E00               	movlw	0
  3397  0000E2  0100               	movlb	0	; () banked
  3398  0000E4  6F86               	movwf	(handle_ir@ir_error+1)& (0+255),b
  3399  0000E6  0E00               	movlw	0
  3400  0000E8  6F85               	movwf	handle_ir@ir_error& (0+255),b
  3401                           
  3402                           ;clock.c: 1203: uint8_t i, j;
  3403                           ;clock.c: 1205: uint8_t got_it = 0;
  3404  0000EA  0E00               	movlw	0
  3405  0000EC  0100               	movlb	0	; () banked
  3406  0000EE  6F84               	movwf	handle_ir@got_it& (0+255),b
  3407                           
  3408                           ;clock.c: 1206: for(j = 0; j < sizeof(ir_codes) / sizeof(ir_code_t); j++)
  3409  0000F0  0E00               	movlw	0
  3410  0000F2  0100               	movlb	0	; () banked
  3411  0000F4  6F8F               	movwf	handle_ir@j& (0+255),b
  3412  0000F6                     l4121:
  3413  0000F6  FFFF               	dw	65535	; assembler added errata NOP
  3414                           
  3415                           ; BSR set to: 0
  3416  0000F8  0E07               	movlw	7
  3417  0000FA  0100               	movlb	0	; () banked
  3418  0000FC  658F               	cpfsgt	handle_ir@j& (0+255),b
  3419  0000FE  D001               	goto	l4125
  3420  000100  D249               	goto	l4293
  3421  000102                     l4125:
  3422  000102  FFFF               	dw	65535	; assembler added errata NOP
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;clock.c: 1208: {
  3426                           ;clock.c: 1210: if(!ir_code_failed[j])
  3427  000104  0100               	movlb	0	; () banked
  3428  000106  518F               	movf	handle_ir@j& (0+255),w,b
  3429  000108  0D01               	mullw	1
  3430  00010A  0E60               	movlw	low _ir_code_failed
  3431  00010C  24F3               	addwf	prodl,w,c
  3432  00010E  6ED9               	movwf	fsr2l,c
  3433  000110  0E00               	movlw	high _ir_code_failed
  3434  000112  20F4               	addwfc	prodh,w,c
  3435  000114  6EDA               	movwf	fsr2h,c
  3436  000116  50DF               	movf	indf2,w,c
  3437  000118  A4D8               	btfss	status,2,c
  3438  00011A  D238               	goto	l4289
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;clock.c: 1211: {
  3442                           ;clock.c: 1212: const ir_code_t *code = &ir_codes[j];
  3443  00011C  0100               	movlb	0	; () banked
  3444  00011E  518F               	movf	handle_ir@j& (0+255),w,b
  3445  000120  0D04               	mullw	4
  3446  000122  0E31               	movlw	low _ir_codes
  3447  000124  24F3               	addwf	prodl,w,c
  3448  000126  0100               	movlb	0	; () banked
  3449  000128  6F8D               	movwf	handle_ir@code& (0+255),b
  3450  00012A  0EBF               	movlw	high _ir_codes
  3451  00012C  20F4               	addwfc	prodh,w,c
  3452  00012E  0100               	movlb	0	; () banked
  3453  000130  6F8E               	movwf	(handle_ir@code+1)& (0+255),b
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;clock.c: 1213: const int16_t *data = code->data;
  3457  000132  C08D  FFF6         	movff	handle_ir@code,tblptrl
  3458  000136  C08E  FFF7         	movff	handle_ir@code+1,tblptrh
  3459  00013A                     	if	0	;tblptru may be non-zero
  3460  00013A                     	endif
  3461  00013A                     	if	0	;tblptru may be non-zero
  3462  00013A                     	endif
  3463  00013A  0009               	tblrd		*+
  3464  00013C  FFFF               	dw	65535	; errata NOP
  3465  00013E  CFF5 F087          	movff	tablat,handle_ir@data
  3466  000142  000A               	tblrd		*-
  3467  000144  FFFF               	dw	65535	; errata NOP
  3468  000146  CFF5 F088          	movff	tablat,handle_ir@data+1
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;clock.c: 1214: const uint8_t code_size = code->size;
  3472  00014A  0E02               	movlw	2
  3473  00014C  0100               	movlb	0	; () banked
  3474  00014E  258D               	addwf	handle_ir@code& (0+255),w,b
  3475  000150  6E26               	movwf	??_handle_ir& (0+255),c
  3476  000152  0E00               	movlw	0
  3477  000154  0100               	movlb	0	; () banked
  3478  000156  218E               	addwfc	(handle_ir@code+1)& (0+255),w,b
  3479  000158  6E27               	movwf	(??_handle_ir+1)& (0+255),c
  3480  00015A  C026  FFF6         	movff	??_handle_ir,tblptrl
  3481  00015E  C027  FFF7         	movff	??_handle_ir+1,tblptrh
  3482  000162                     	if	0	;tblptru may be non-zero
  3483  000162                     	endif
  3484  000162                     	if	0	;tblptru may be non-zero
  3485  000162                     	endif
  3486  000162  0008               	tblrd		*
  3487  000164  FFFF               	dw	65535	; errata NOP
  3488  000166  CFF5 F083          	movff	tablat,handle_ir@code_size
  3489                           
  3490                           ; BSR set to: 0
  3491                           ;clock.c: 1215: uint8_t failed = 0;
  3492  00016A  0E00               	movlw	0
  3493  00016C  0100               	movlb	0	; () banked
  3494  00016E  6F82               	movwf	handle_ir@failed& (0+255),b
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;clock.c: 1216: ir_error = 0;
  3498  000170  0E00               	movlw	0
  3499  000172  0100               	movlb	0	; () banked
  3500  000174  6F86               	movwf	(handle_ir@ir_error+1)& (0+255),b
  3501  000176  0E00               	movlw	0
  3502  000178  6F85               	movwf	handle_ir@ir_error& (0+255),b
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;clock.c: 1219: int16_t error = ((data[ir_size] - ir_time) < 0 ? (-(data[ir_size] - ir_t
      +                          ime)) : (data[ir_size] - ir_time));
  3506  00017A  5032               	movf	_ir_size,w,c
  3507  00017C  0D02               	mullw	2
  3508  00017E  C087  F026         	movff	handle_ir@data,??_handle_ir
  3509  000182  C088  F027         	movff	handle_ir@data+1,??_handle_ir+1
  3510  000186  50F3               	movf	prodl,w,c
  3511  000188  2626               	addwf	??_handle_ir,f,c
  3512  00018A  50F4               	movf	prodh,w,c
  3513  00018C  2227               	addwfc	??_handle_ir+1,f,c
  3514  00018E  C026  FFF6         	movff	??_handle_ir,tblptrl
  3515  000192  C027  FFF7         	movff	??_handle_ir+1,tblptrh
  3516  000196                     	if	0	;tblptru may be non-zero
  3517  000196                     	endif
  3518  000196                     	if	0	;tblptru may be non-zero
  3519  000196                     	endif
  3520  000196  0009               	tblrd		*+
  3521  000198  FFFF               	dw	65535	; errata NOP
  3522  00019A  CFF5 F028          	movff	tablat,??_handle_ir+2
  3523  00019E  0009               	tblrd		*+
  3524  0001A0  FFFF               	dw	65535	; errata NOP
  3525  0001A2  CFF5 F029          	movff	tablat,??_handle_ir+3
  3526  0001A6  C06A  F02A         	movff	_ir_time,??_handle_ir+4
  3527  0001AA  C06B  F02B         	movff	_ir_time+1,??_handle_ir+5
  3528  0001AE  1E2A               	comf	??_handle_ir+4,f,c
  3529  0001B0  1E2B               	comf	??_handle_ir+5,f,c
  3530  0001B2  4A2A               	infsnz	??_handle_ir+4,f,c
  3531  0001B4  2A2B               	incf	??_handle_ir+5,f,c
  3532  0001B6  5028               	movf	??_handle_ir+2,w,c
  3533  0001B8  262A               	addwf	??_handle_ir+4,f,c
  3534  0001BA  5029               	movf	??_handle_ir+3,w,c
  3535  0001BC  222B               	addwfc	??_handle_ir+5,f,c
  3536  0001BE  BE2B               	btfsc	??_handle_ir+5,7,c
  3537  0001C0  D027               	goto	l4141
  3538                           
  3539                           ; BSR set to: 0
  3540  0001C2  5032               	movf	_ir_size,w,c
  3541  0001C4  0D02               	mullw	2
  3542  0001C6  C087  F026         	movff	handle_ir@data,??_handle_ir
  3543  0001CA  C088  F027         	movff	handle_ir@data+1,??_handle_ir+1
  3544  0001CE  50F3               	movf	prodl,w,c
  3545  0001D0  2626               	addwf	??_handle_ir,f,c
  3546  0001D2  50F4               	movf	prodh,w,c
  3547  0001D4  2227               	addwfc	??_handle_ir+1,f,c
  3548  0001D6  C026  FFF6         	movff	??_handle_ir,tblptrl
  3549  0001DA  C027  FFF7         	movff	??_handle_ir+1,tblptrh
  3550  0001DE                     	if	0	;tblptru may be non-zero
  3551  0001DE                     	endif
  3552  0001DE                     	if	0	;tblptru may be non-zero
  3553  0001DE                     	endif
  3554  0001DE  0009               	tblrd		*+
  3555  0001E0  FFFF               	dw	65535	; errata NOP
  3556  0001E2  CFF5 F028          	movff	tablat,??_handle_ir+2
  3557  0001E6  0009               	tblrd		*+
  3558  0001E8  FFFF               	dw	65535	; errata NOP
  3559  0001EA  CFF5 F029          	movff	tablat,??_handle_ir+3
  3560  0001EE  C06A  F02A         	movff	_ir_time,??_handle_ir+4
  3561  0001F2  C06B  F02B         	movff	_ir_time+1,??_handle_ir+5
  3562  0001F6  1E2A               	comf	??_handle_ir+4,f,c
  3563  0001F8  1E2B               	comf	??_handle_ir+5,f,c
  3564  0001FA  4A2A               	infsnz	??_handle_ir+4,f,c
  3565  0001FC  2A2B               	incf	??_handle_ir+5,f,c
  3566  0001FE  5028               	movf	??_handle_ir+2,w,c
  3567  000200  242A               	addwf	??_handle_ir+4,w,c
  3568  000202  0100               	movlb	0	; () banked
  3569  000204  6F89               	movwf	handle_ir@error& (0+255),b
  3570  000206  5029               	movf	??_handle_ir+3,w,c
  3571  000208  202B               	addwfc	??_handle_ir+5,w,c
  3572  00020A  0100               	movlb	0	; () banked
  3573  00020C  6F8A               	movwf	(handle_ir@error+1)& (0+255),b
  3574  00020E  D02B               	goto	l4143
  3575  000210                     l4141:
  3576  000210  FFFF               	dw	65535	; assembler added errata NOP
  3577                           
  3578                           ; BSR set to: 0
  3579  000212  5032               	movf	_ir_size,w,c
  3580  000214  0D02               	mullw	2
  3581  000216  C087  F026         	movff	handle_ir@data,??_handle_ir
  3582  00021A  C088  F027         	movff	handle_ir@data+1,??_handle_ir+1
  3583  00021E  50F3               	movf	prodl,w,c
  3584  000220  2626               	addwf	??_handle_ir,f,c
  3585  000222  50F4               	movf	prodh,w,c
  3586  000224  2227               	addwfc	??_handle_ir+1,f,c
  3587  000226  C026  FFF6         	movff	??_handle_ir,tblptrl
  3588  00022A  C027  FFF7         	movff	??_handle_ir+1,tblptrh
  3589  00022E                     	if	0	;tblptru may be non-zero
  3590  00022E                     	endif
  3591  00022E                     	if	0	;tblptru may be non-zero
  3592  00022E                     	endif
  3593  00022E  0009               	tblrd		*+
  3594  000230  FFFF               	dw	65535	; errata NOP
  3595  000232  CFF5 F028          	movff	tablat,??_handle_ir+2
  3596  000236  0009               	tblrd		*+
  3597  000238  FFFF               	dw	65535	; errata NOP
  3598  00023A  CFF5 F029          	movff	tablat,??_handle_ir+3
  3599  00023E  C06A  F02A         	movff	_ir_time,??_handle_ir+4
  3600  000242  C06B  F02B         	movff	_ir_time+1,??_handle_ir+5
  3601  000246  1E2A               	comf	??_handle_ir+4,f,c
  3602  000248  1E2B               	comf	??_handle_ir+5,f,c
  3603  00024A  4A2A               	infsnz	??_handle_ir+4,f,c
  3604  00024C  2A2B               	incf	??_handle_ir+5,f,c
  3605  00024E  5028               	movf	??_handle_ir+2,w,c
  3606  000250  262A               	addwf	??_handle_ir+4,f,c
  3607  000252  5029               	movf	??_handle_ir+3,w,c
  3608  000254  222B               	addwfc	??_handle_ir+5,f,c
  3609  000256  1E2A               	comf	??_handle_ir+4,f,c
  3610  000258  1E2B               	comf	??_handle_ir+5,f,c
  3611  00025A  4A2A               	infsnz	??_handle_ir+4,f,c
  3612  00025C  2A2B               	incf	??_handle_ir+5,f,c
  3613  00025E  C02A  F089         	movff	??_handle_ir+4,handle_ir@error
  3614  000262  C02B  F08A         	movff	??_handle_ir+5,handle_ir@error+1
  3615  000266                     l4143:
  3616  000266  FFFF               	dw	65535	; assembler added errata NOP
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;clock.c: 1220: if(error > ir_error)
  3620  000268  0100               	movlb	0	; () banked
  3621  00026A  5189               	movf	handle_ir@error& (0+255),w,b
  3622  00026C  0100               	movlb	0	; () banked
  3623  00026E  5D85               	subwf	handle_ir@ir_error& (0+255),w,b
  3624  000270  0100               	movlb	0	; () banked
  3625  000272  518A               	movf	(handle_ir@error+1)& (0+255),w,b
  3626  000274  0100               	movlb	0	; () banked
  3627  000276  5986               	subwfb	(handle_ir@ir_error+1)& (0+255),w,b
  3628  000278  B0D8               	btfsc	status,0,c
  3629  00027A  D004               	goto	l4147
  3630                           
  3631                           ; BSR set to: 0
  3632                           ;clock.c: 1221: {
  3633                           ;clock.c: 1222: ir_error = error;
  3634  00027C  C089  F085         	movff	handle_ir@error,handle_ir@ir_error
  3635  000280  C08A  F086         	movff	handle_ir@error+1,handle_ir@ir_error+1
  3636  000284                     l4147:
  3637  000284  FFFF               	dw	65535	; assembler added errata NOP
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;clock.c: 1223: }
  3641                           ;clock.c: 1226: if(error > 16)
  3642  000286  0100               	movlb	0	; () banked
  3643  000288  BF8A               	btfsc	(handle_ir@error+1)& (0+255),7,b
  3644  00028A  D014               	goto	l4151
  3645  00028C  0100               	movlb	0	; () banked
  3646  00028E  518A               	movf	(handle_ir@error+1)& (0+255),w,b
  3647  000290  E105               	bnz	u5790
  3648  000292  0E11               	movlw	17
  3649  000294  0100               	movlb	0	; () banked
  3650  000296  5D89               	subwf	handle_ir@error& (0+255),w,b
  3651  000298  A0D8               	btfss	status,0,c
  3652  00029A  D00C               	goto	l4151
  3653  00029C                     u5790:
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;clock.c: 1227: {
  3657                           ;clock.c: 1240: ir_code_failed[j] = 1;
  3658  00029C  0100               	movlb	0	; () banked
  3659  00029E  518F               	movf	handle_ir@j& (0+255),w,b
  3660  0002A0  0D01               	mullw	1
  3661  0002A2  0E60               	movlw	low _ir_code_failed
  3662  0002A4  24F3               	addwf	prodl,w,c
  3663  0002A6  6ED9               	movwf	fsr2l,c
  3664  0002A8  0E00               	movlw	high _ir_code_failed
  3665  0002AA  20F4               	addwfc	prodh,w,c
  3666  0002AC  6EDA               	movwf	fsr2h,c
  3667  0002AE  0E01               	movlw	1
  3668  0002B0  6EDF               	movwf	indf2,c
  3669                           
  3670                           ;clock.c: 1241: }
  3671  0002B2  D16C               	goto	l4289
  3672  0002B4                     l4151:
  3673  0002B4  FFFF               	dw	65535	; assembler added errata NOP
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;clock.c: 1242: else
  3677                           ;clock.c: 1244: {
  3678                           ;clock.c: 1245: ir_size++;
  3679  0002B6  2A32               	incf	_ir_size,f,c
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;clock.c: 1248: if(ir_size >= code_size)
  3683  0002B8  0100               	movlb	0	; () banked
  3684  0002BA  5183               	movf	handle_ir@code_size& (0+255),w,b
  3685  0002BC  5C32               	subwf	_ir_size,w,c
  3686  0002BE  A0D8               	btfss	status,0,c
  3687  0002C0  D160               	goto	l434
  3688                           
  3689                           ; BSR set to: 0
  3690                           ;clock.c: 1249: {
  3691                           ;clock.c: 1251: ir_size = 0;
  3692  0002C2  0E00               	movlw	0
  3693  0002C4  6E32               	movwf	_ir_size,c
  3694                           
  3695                           ;clock.c: 1252: for(i = 0; i < (sizeof(ir_codes) / sizeof(ir_code_t)); i++)
  3696  0002C6  0E00               	movlw	0
  3697  0002C8  0100               	movlb	0	; () banked
  3698  0002CA  6F8B               	movwf	handle_ir@i& (0+255),b
  3699  0002CC                     l4157:
  3700  0002CC  FFFF               	dw	65535	; assembler added errata NOP
  3701                           
  3702                           ; BSR set to: 0
  3703  0002CE  0E07               	movlw	7
  3704  0002D0  0100               	movlb	0	; () banked
  3705  0002D2  658B               	cpfsgt	handle_ir@i& (0+255),b
  3706  0002D4  D001               	goto	l4161
  3707  0002D6  D00F               	goto	l4167
  3708  0002D8                     l4161:
  3709  0002D8  FFFF               	dw	65535	; assembler added errata NOP
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;clock.c: 1253: {
  3713                           ;clock.c: 1254: ir_code_failed[i] = 0;
  3714  0002DA  0100               	movlb	0	; () banked
  3715  0002DC  518B               	movf	handle_ir@i& (0+255),w,b
  3716  0002DE  0D01               	mullw	1
  3717  0002E0  0E60               	movlw	low _ir_code_failed
  3718  0002E2  24F3               	addwf	prodl,w,c
  3719  0002E4  6ED9               	movwf	fsr2l,c
  3720  0002E6  0E00               	movlw	high _ir_code_failed
  3721  0002E8  20F4               	addwfc	prodh,w,c
  3722  0002EA  6EDA               	movwf	fsr2h,c
  3723  0002EC  0E00               	movlw	0
  3724  0002EE  6EDF               	movwf	indf2,c
  3725                           
  3726                           ; BSR set to: 0
  3727  0002F0  0100               	movlb	0	; () banked
  3728  0002F2  2B8B               	incf	handle_ir@i& (0+255),f,b
  3729  0002F4  D7EB               	goto	l4157
  3730  0002F6                     l4167:
  3731  0002F6  FFFF               	dw	65535	; assembler added errata NOP
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;clock.c: 1255: }
  3735                           ;clock.c: 1257: have_ir = 1;
  3736  0002F8  0E01               	movlw	1
  3737  0002FA  0100               	movlb	0	; () banked
  3738  0002FC  6F80               	movwf	_have_ir& (0+255),b
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;clock.c: 1258: ir_code = code->value;
  3742  0002FE  0E03               	movlw	3
  3743  000300  0100               	movlb	0	; () banked
  3744  000302  258D               	addwf	handle_ir@code& (0+255),w,b
  3745  000304  6E26               	movwf	??_handle_ir& (0+255),c
  3746  000306  0E00               	movlw	0
  3747  000308  0100               	movlb	0	; () banked
  3748  00030A  218E               	addwfc	(handle_ir@code+1)& (0+255),w,b
  3749  00030C  6E27               	movwf	(??_handle_ir+1)& (0+255),c
  3750  00030E  C026  FFF6         	movff	??_handle_ir,tblptrl
  3751  000312  C027  FFF7         	movff	??_handle_ir+1,tblptrh
  3752  000316                     	if	0	;tblptru may be non-zero
  3753  000316                     	endif
  3754  000316                     	if	0	;tblptru may be non-zero
  3755  000316                     	endif
  3756  000316  0008               	tblrd		*
  3757  000318  FFFF               	dw	65535	; errata NOP
  3758  00031A  CFF5 F07F          	movff	tablat,_ir_code
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;clock.c: 1259: print_text("IR code: ");
  3762  00031E  0EEE               	movlw	low STR_1
  3763  000320  6E15               	movwf	print_text@s,c
  3764  000322  0EBF               	movlw	high STR_1
  3765  000324  6E16               	movwf	print_text@s+1,c
  3766  000326  EC52  F00D         	call	_print_text	;wreg free
  3767                           
  3768                           ;clock.c: 1260: print_number(code->value);
  3769  00032A  0E03               	movlw	3
  3770  00032C  0100               	movlb	0	; () banked
  3771  00032E  258D               	addwf	handle_ir@code& (0+255),w,b
  3772  000330  6E26               	movwf	??_handle_ir& (0+255),c
  3773  000332  0E00               	movlw	0
  3774  000334  0100               	movlb	0	; () banked
  3775  000336  218E               	addwfc	(handle_ir@code+1)& (0+255),w,b
  3776  000338  6E27               	movwf	(??_handle_ir+1)& (0+255),c
  3777  00033A  C026  FFF6         	movff	??_handle_ir,tblptrl
  3778  00033E  C027  FFF7         	movff	??_handle_ir+1,tblptrh
  3779  000342                     	if	0	;tblptru may be non-zero
  3780  000342                     	endif
  3781  000342                     	if	0	;tblptru may be non-zero
  3782  000342                     	endif
  3783  000342  0008               	tblrd		*
  3784  000344  FFFF               	dw	65535	; errata NOP
  3785  000346  50F5               	movf	tablat,w,c
  3786  000348  6E22               	movwf	print_number@number,c
  3787  00034A  6A23               	clrf	print_number@number+1,c
  3788  00034C  EC1E  F00E         	call	_print_number	;wreg free
  3789                           
  3790                           ;clock.c: 1261: print_text("error=");
  3791  000350  0EF8               	movlw	low STR_2
  3792  000352  6E15               	movwf	print_text@s,c
  3793  000354  0EBF               	movlw	high STR_2
  3794  000356  6E16               	movwf	print_text@s+1,c
  3795  000358  EC52  F00D         	call	_print_text	;wreg free
  3796                           
  3797                           ;clock.c: 1262: print_number(ir_error);
  3798  00035C  C085  F022         	movff	handle_ir@ir_error,print_number@number
  3799  000360  C086  F023         	movff	handle_ir@ir_error+1,print_number@number+1
  3800  000364  EC1E  F00E         	call	_print_number	;wreg free
  3801                           
  3802                           ;clock.c: 1263: print_byte('\n');
  3803  000368  0E0A               	movlw	10
  3804  00036A  EC2E  F00D         	call	_print_byte
  3805                           
  3806                           ;clock.c: 1266: switch(code->value)
  3807  00036E  D0D9               	goto	l4283
  3808  000370                     l4181:
  3809  000370  FFFF               	dw	65535	; assembler added errata NOP
  3810                           
  3811                           ;clock.c: 1269: alarm = !alarm;
  3812  000372  503D               	movf	_alarm,w,c
  3813  000374  A4D8               	btfss	status,2,c
  3814  000376  D002               	goto	u5830
  3815  000378  0E01               	movlw	1
  3816  00037A  D002               	goto	u5840
  3817  00037C                     u5830:
  3818  00037C  FFFF               	dw	65535	; assembler added errata NOP
  3819  00037E  0E00               	movlw	0
  3820  000380                     u5840:
  3821  000380  FFFF               	dw	65535	; assembler added errata NOP
  3822  000382  6E3D               	movwf	_alarm,c
  3823                           
  3824                           ;clock.c: 1270: if(mode == 0 ||
  3825                           ;clock.c: 1271: mode == 1)
  3826  000384  503C               	movf	_mode,w,c
  3827  000386  B4D8               	btfsc	status,2,c
  3828  000388  D003               	goto	l4185
  3829  00038A  043C               	decf	_mode,w,c
  3830  00038C  A4D8               	btfss	status,2,c
  3831  00038E  D004               	goto	l4187
  3832  000390                     l4185:
  3833  000390  FFFF               	dw	65535	; assembler added errata NOP
  3834                           
  3835                           ;clock.c: 1272: {
  3836                           ;clock.c: 1273: draw_time();
  3837  000392  ECB1  F006         	call	_draw_time	;wreg free
  3838                           
  3839                           ;clock.c: 1274: }
  3840  000396  D006               	goto	l4191
  3841  000398                     l4187:
  3842  000398  FFFF               	dw	65535	; assembler added errata NOP
  3843                           
  3844                           ;clock.c: 1275: else
  3845                           ;clock.c: 1276: if(mode == 2)
  3846  00039A  0E02               	movlw	2
  3847  00039C  183C               	xorwf	_mode,w,c
  3848  00039E  B4D8               	btfsc	status,2,c
  3849                           
  3850                           ;clock.c: 1277: {
  3851                           ;clock.c: 1278: draw_alarm();
  3852  0003A0  EC82  F008         	call	_draw_alarm	;wreg free
  3853  0003A4                     l4191:
  3854  0003A4  FFFF               	dw	65535	; assembler added errata NOP
  3855                           
  3856                           ;clock.c: 1279: }
  3857                           ;clock.c: 1282: if(alarm_sounding)
  3858  0003A6  5037               	movf	_alarm_sounding,w,c
  3859  0003A8  B4D8               	btfsc	status,2,c
  3860  0003AA  D00B               	goto	l4199
  3861                           
  3862                           ;clock.c: 1283: {
  3863                           ;clock.c: 1285: play_song(alarm_off_tone);
  3864  0003AC  0E0D               	movlw	low _alarm_off_tone
  3865  0003AE  6E14               	movwf	play_song@ptr,c
  3866  0003B0  0EBF               	movlw	high _alarm_off_tone
  3867  0003B2  6E15               	movwf	play_song@ptr+1,c
  3868  0003B4  EC63  F00C         	call	_play_song	;wreg free
  3869                           
  3870                           ;clock.c: 1286: alarm_sounding = 0;
  3871  0003B8  0E00               	movlw	0
  3872  0003BA  6E37               	movwf	_alarm_sounding,c
  3873                           
  3874                           ;clock.c: 1287: alarm_time = 0;
  3875  0003BC  0E00               	movlw	0
  3876  0003BE  6E36               	movwf	_alarm_time,c
  3877                           
  3878                           ;clock.c: 1288: }
  3879  0003C0  D0D8               	goto	l4285
  3880  0003C2                     l4199:
  3881  0003C2  FFFF               	dw	65535	; assembler added errata NOP
  3882                           
  3883                           ;clock.c: 1289: else
  3884                           ;clock.c: 1290: {
  3885                           ;clock.c: 1291: if(alarm)
  3886  0003C4  503D               	movf	_alarm,w,c
  3887  0003C6  B4D8               	btfsc	status,2,c
  3888  0003C8  D007               	goto	l4203
  3889                           
  3890                           ;clock.c: 1292: {
  3891                           ;clock.c: 1293: play_song(alarm_on_tone);
  3892  0003CA  0EE9               	movlw	low _alarm_on_tone
  3893  0003CC  6E14               	movwf	play_song@ptr,c
  3894  0003CE  0EBE               	movlw	high _alarm_on_tone
  3895  0003D0  6E15               	movwf	play_song@ptr+1,c
  3896  0003D2  EC63  F00C         	call	_play_song	;wreg free
  3897                           
  3898                           ;clock.c: 1294: }
  3899  0003D6  D0CD               	goto	l4285
  3900  0003D8                     l4203:
  3901  0003D8  FFFF               	dw	65535	; assembler added errata NOP
  3902                           
  3903                           ;clock.c: 1295: else
  3904                           ;clock.c: 1296: {
  3905                           ;clock.c: 1297: play_song(alarm_off_tone);
  3906  0003DA  0E0D               	movlw	low _alarm_off_tone
  3907  0003DC  6E14               	movwf	play_song@ptr,c
  3908  0003DE  0EBF               	movlw	high _alarm_off_tone
  3909  0003E0  6E15               	movwf	play_song@ptr+1,c
  3910  0003E2  EC63  F00C         	call	_play_song	;wreg free
  3911                           
  3912                           ;clock.c: 1298: }
  3913                           ;clock.c: 1299: }
  3914                           ;clock.c: 1300: break;
  3915  0003E6  D0C5               	goto	l4285
  3916  0003E8                     l4205:
  3917  0003E8  FFFF               	dw	65535	; assembler added errata NOP
  3918                           
  3919                           ;clock.c: 1304: if(mode == 2)
  3920  0003EA  0E02               	movlw	2
  3921  0003EC  183C               	xorwf	_mode,w,c
  3922  0003EE  A4D8               	btfss	status,2,c
  3923  0003F0  D00B               	goto	l4213
  3924                           
  3925                           ;clock.c: 1305: {
  3926                           ;clock.c: 1306: mode = 0;
  3927  0003F2  0E00               	movlw	0
  3928  0003F4  6E3C               	movwf	_mode,c
  3929                           
  3930                           ;clock.c: 1307: play_song(set_alarm_tone2);
  3931  0003F6  0E79               	movlw	low _set_alarm_tone2
  3932  0003F8  6E14               	movwf	play_song@ptr,c
  3933  0003FA  0EBF               	movlw	high _set_alarm_tone2
  3934  0003FC  6E15               	movwf	play_song@ptr+1,c
  3935  0003FE  EC63  F00C         	call	_play_song	;wreg free
  3936                           
  3937                           ;clock.c: 1308: draw_time();
  3938  000402  ECB1  F006         	call	_draw_time	;wreg free
  3939                           
  3940                           ;clock.c: 1309: }
  3941  000406  D0B5               	goto	l4285
  3942  000408                     l4213:
  3943  000408  FFFF               	dw	65535	; assembler added errata NOP
  3944                           
  3945                           ;clock.c: 1310: else
  3946                           ;clock.c: 1311: {
  3947                           ;clock.c: 1312: mode = 2;
  3948  00040A  0E02               	movlw	2
  3949  00040C  6E3C               	movwf	_mode,c
  3950                           
  3951                           ;clock.c: 1313: play_song(set_alarm_tone1);
  3952  00040E  0E8D               	movlw	low _set_alarm_tone1
  3953  000410  6E14               	movwf	play_song@ptr,c
  3954  000412  0EBF               	movlw	high _set_alarm_tone1
  3955  000414  6E15               	movwf	play_song@ptr+1,c
  3956  000416  EC63  F00C         	call	_play_song	;wreg free
  3957                           
  3958                           ;clock.c: 1314: draw_alarm();
  3959  00041A  EC82  F008         	call	_draw_alarm	;wreg free
  3960                           
  3961                           ;clock.c: 1315: }
  3962                           ;clock.c: 1316: break;
  3963  00041E  D0A9               	goto	l4285
  3964  000420                     l4219:
  3965  000420  FFFF               	dw	65535	; assembler added errata NOP
  3966                           
  3967                           ;clock.c: 1320: if(mode == 1)
  3968  000422  043C               	decf	_mode,w,c
  3969  000424  A4D8               	btfss	status,2,c
  3970  000426  D00B               	goto	l4227
  3971                           
  3972                           ;clock.c: 1321: {
  3973                           ;clock.c: 1322: mode = 0;
  3974  000428  0E00               	movlw	0
  3975  00042A  6E3C               	movwf	_mode,c
  3976                           
  3977                           ;clock.c: 1323: play_song(set_time_tone2);
  3978  00042C  0E51               	movlw	low _set_time_tone2
  3979  00042E  6E14               	movwf	play_song@ptr,c
  3980  000430  0EBF               	movlw	high _set_time_tone2
  3981  000432  6E15               	movwf	play_song@ptr+1,c
  3982  000434  EC63  F00C         	call	_play_song	;wreg free
  3983                           
  3984                           ;clock.c: 1324: draw_time();
  3985  000438  ECB1  F006         	call	_draw_time	;wreg free
  3986                           
  3987                           ;clock.c: 1325: }
  3988  00043C  D09A               	goto	l4285
  3989  00043E                     l4227:
  3990  00043E  FFFF               	dw	65535	; assembler added errata NOP
  3991                           
  3992                           ;clock.c: 1326: else
  3993                           ;clock.c: 1327: {
  3994                           ;clock.c: 1328: mode = 1;
  3995  000440  0E01               	movlw	1
  3996  000442  6E3C               	movwf	_mode,c
  3997                           
  3998                           ;clock.c: 1329: play_song(set_time_tone1);
  3999  000444  0E65               	movlw	low _set_time_tone1
  4000  000446  6E14               	movwf	play_song@ptr,c
  4001  000448  0EBF               	movlw	high _set_time_tone1
  4002  00044A  6E15               	movwf	play_song@ptr+1,c
  4003  00044C  EC63  F00C         	call	_play_song	;wreg free
  4004                           
  4005                           ;clock.c: 1330: draw_time();
  4006  000450  ECB1  F006         	call	_draw_time	;wreg free
  4007                           
  4008                           ;clock.c: 1331: }
  4009                           ;clock.c: 1332: break;
  4010  000454  D08E               	goto	l4285
  4011  000456                     l4233:
  4012  000456  FFFF               	dw	65535	; assembler added errata NOP
  4013                           
  4014                           ;clock.c: 1336: play_song(test_tone);
  4015  000458  0EB9               	movlw	low _test_tone
  4016  00045A  6E14               	movwf	play_song@ptr,c
  4017  00045C  0EBF               	movlw	high _test_tone
  4018  00045E  6E15               	movwf	play_song@ptr+1,c
  4019  000460  EC63  F00C         	call	_play_song	;wreg free
  4020                           
  4021                           ;clock.c: 1337: if(mode == 3)
  4022  000464  0E03               	movlw	3
  4023  000466  183C               	xorwf	_mode,w,c
  4024  000468  A4D8               	btfss	status,2,c
  4025  00046A  D005               	goto	l4241
  4026                           
  4027                           ;clock.c: 1338: {
  4028                           ;clock.c: 1339: mode = 0;
  4029  00046C  0E00               	movlw	0
  4030  00046E  6E3C               	movwf	_mode,c
  4031                           
  4032                           ;clock.c: 1340: draw_time();
  4033  000470  ECB1  F006         	call	_draw_time	;wreg free
  4034                           
  4035                           ;clock.c: 1341: }
  4036  000474  D07E               	goto	l4285
  4037  000476                     l4241:
  4038  000476  FFFF               	dw	65535	; assembler added errata NOP
  4039                           
  4040                           ;clock.c: 1342: else
  4041                           ;clock.c: 1343: {
  4042                           ;clock.c: 1344: mode = 3;
  4043  000478  0E03               	movlw	3
  4044  00047A  6E3C               	movwf	_mode,c
  4045                           
  4046                           ;clock.c: 1345: draw_test();
  4047  00047C  EC41  F00E         	call	_draw_test	;wreg free
  4048                           
  4049                           ;clock.c: 1346: }
  4050                           ;clock.c: 1347: break;
  4051  000480  D078               	goto	l4285
  4052  000482                     l4245:
  4053  000482  FFFF               	dw	65535	; assembler added errata NOP
  4054                           
  4055                           ;clock.c: 1351: do_hour_up();
  4056  000484  EC5D  F00B         	call	_do_hour_up	;wreg free
  4057                           
  4058                           ;clock.c: 1352: repeat_counter = 250 / 2;
  4059  000488  0E7D               	movlw	125
  4060  00048A  6E3A               	movwf	_repeat_counter,c
  4061                           
  4062                           ;clock.c: 1353: repeating = 1;
  4063  00048C  0E01               	movlw	1
  4064  00048E  6E3B               	movwf	_repeating,c
  4065                           
  4066                           ;clock.c: 1354: play_song(up_tone);
  4067  000490  0EAD               	movlw	low _up_tone
  4068  000492  6E14               	movwf	play_song@ptr,c
  4069  000494  0EBF               	movlw	high _up_tone
  4070  000496  6E15               	movwf	play_song@ptr+1,c
  4071  000498  EC63  F00C         	call	_play_song	;wreg free
  4072                           
  4073                           ;clock.c: 1355: break;
  4074  00049C  D06A               	goto	l4285
  4075  00049E                     l4253:
  4076  00049E  FFFF               	dw	65535	; assembler added errata NOP
  4077                           
  4078                           ;clock.c: 1358: do_hour_down();
  4079  0004A0  EC97  F00B         	call	_do_hour_down	;wreg free
  4080                           
  4081                           ;clock.c: 1359: repeat_counter = 250 / 2;
  4082  0004A4  0E7D               	movlw	125
  4083  0004A6  6E3A               	movwf	_repeat_counter,c
  4084                           
  4085                           ;clock.c: 1360: repeating = 1;
  4086  0004A8  0E01               	movlw	1
  4087  0004AA  6E3B               	movwf	_repeating,c
  4088                           
  4089                           ;clock.c: 1361: play_song(dn_tone);
  4090  0004AC  0EA1               	movlw	low _dn_tone
  4091  0004AE  6E14               	movwf	play_song@ptr,c
  4092  0004B0  0EBF               	movlw	high _dn_tone
  4093  0004B2  6E15               	movwf	play_song@ptr+1,c
  4094  0004B4  EC63  F00C         	call	_play_song	;wreg free
  4095                           
  4096                           ;clock.c: 1362: break;
  4097  0004B8  D05C               	goto	l4285
  4098  0004BA                     l4261:
  4099  0004BA  FFFF               	dw	65535	; assembler added errata NOP
  4100                           
  4101                           ;clock.c: 1366: if(mode == 3)
  4102  0004BC  0E03               	movlw	3
  4103  0004BE  183C               	xorwf	_mode,w,c
  4104  0004C0  A4D8               	btfss	status,2,c
  4105  0004C2  D007               	goto	l4265
  4106                           
  4107                           ;clock.c: 1367: {
  4108                           ;clock.c: 1368: play_song(alarm_song);
  4109  0004C4  0E25               	movlw	low _alarm_song
  4110  0004C6  6E14               	movwf	play_song@ptr,c
  4111  0004C8  0EBE               	movlw	high _alarm_song
  4112  0004CA  6E15               	movwf	play_song@ptr+1,c
  4113  0004CC  EC63  F00C         	call	_play_song	;wreg free
  4114                           
  4115                           ;clock.c: 1369: }
  4116  0004D0  D050               	goto	l4285
  4117  0004D2                     l4265:
  4118  0004D2  FFFF               	dw	65535	; assembler added errata NOP
  4119                           
  4120                           ;clock.c: 1370: else
  4121                           ;clock.c: 1371: {
  4122                           ;clock.c: 1372: do_minute_up();
  4123  0004D4  ECF1  F00D         	call	_do_minute_up	;wreg free
  4124                           
  4125                           ;clock.c: 1373: repeat_counter = 250 / 2;
  4126  0004D8  0E7D               	movlw	125
  4127  0004DA  6E3A               	movwf	_repeat_counter,c
  4128                           
  4129                           ;clock.c: 1374: repeating = 1;
  4130  0004DC  0E01               	movlw	1
  4131  0004DE  6E3B               	movwf	_repeating,c
  4132                           
  4133                           ;clock.c: 1375: play_song(up_tone);
  4134  0004E0  0EAD               	movlw	low _up_tone
  4135  0004E2  6E14               	movwf	play_song@ptr,c
  4136  0004E4  0EBF               	movlw	high _up_tone
  4137  0004E6  6E15               	movwf	play_song@ptr+1,c
  4138  0004E8  EC63  F00C         	call	_play_song	;wreg free
  4139                           
  4140                           ;clock.c: 1376: }
  4141                           ;clock.c: 1377: break;
  4142  0004EC  D042               	goto	l4285
  4143  0004EE                     l4271:
  4144  0004EE  FFFF               	dw	65535	; assembler added errata NOP
  4145                           
  4146                           ;clock.c: 1380: if(mode == 3)
  4147  0004F0  0E03               	movlw	3
  4148  0004F2  183C               	xorwf	_mode,w,c
  4149  0004F4  A4D8               	btfss	status,2,c
  4150  0004F6  D007               	goto	l4275
  4151                           
  4152                           ;clock.c: 1381: {
  4153                           ;clock.c: 1382: play_song(alarm_song);
  4154  0004F8  0E25               	movlw	low _alarm_song
  4155  0004FA  6E14               	movwf	play_song@ptr,c
  4156  0004FC  0EBE               	movlw	high _alarm_song
  4157  0004FE  6E15               	movwf	play_song@ptr+1,c
  4158  000500  EC63  F00C         	call	_play_song	;wreg free
  4159                           
  4160                           ;clock.c: 1383: }
  4161  000504  D036               	goto	l4285
  4162  000506                     l4275:
  4163  000506  FFFF               	dw	65535	; assembler added errata NOP
  4164                           
  4165                           ;clock.c: 1384: else
  4166                           ;clock.c: 1385: {
  4167                           ;clock.c: 1386: do_minute_down();
  4168  000508  EC01  F00E         	call	_do_minute_down	;wreg free
  4169                           
  4170                           ;clock.c: 1387: repeat_counter = 250 / 2;
  4171  00050C  0E7D               	movlw	125
  4172  00050E  6E3A               	movwf	_repeat_counter,c
  4173                           
  4174                           ;clock.c: 1388: repeating = 1;
  4175  000510  0E01               	movlw	1
  4176  000512  6E3B               	movwf	_repeating,c
  4177                           
  4178                           ;clock.c: 1389: play_song(dn_tone);
  4179  000514  0EA1               	movlw	low _dn_tone
  4180  000516  6E14               	movwf	play_song@ptr,c
  4181  000518  0EBF               	movlw	high _dn_tone
  4182  00051A  6E15               	movwf	play_song@ptr+1,c
  4183  00051C  EC63  F00C         	call	_play_song	;wreg free
  4184                           
  4185                           ;clock.c: 1392: }
  4186                           
  4187                           ;clock.c: 1390: }
  4188                           ;clock.c: 1391: break;
  4189  000520  D028               	goto	l4285
  4190  000522                     l4283:
  4191  000522  FFFF               	dw	65535	; assembler added errata NOP
  4192  000524  0E03               	movlw	3
  4193  000526  0100               	movlb	0	; () banked
  4194  000528  258D               	addwf	handle_ir@code& (0+255),w,b
  4195  00052A  6E26               	movwf	??_handle_ir& (0+255),c
  4196  00052C  0E00               	movlw	0
  4197  00052E  0100               	movlb	0	; () banked
  4198  000530  218E               	addwfc	(handle_ir@code+1)& (0+255),w,b
  4199  000532  6E27               	movwf	(??_handle_ir+1)& (0+255),c
  4200  000534  C026  FFF6         	movff	??_handle_ir,tblptrl
  4201  000538  C027  FFF7         	movff	??_handle_ir+1,tblptrh
  4202  00053C                     	if	0	;tblptru may be non-zero
  4203  00053C                     	endif
  4204  00053C                     	if	0	;tblptru may be non-zero
  4205  00053C                     	endif
  4206  00053C  0008               	tblrd		*
  4207  00053E  FFFF               	dw	65535	; errata NOP
  4208  000540  50F5               	movf	tablat,w,c
  4209                           
  4210                           ; Switch size 1, requested type "space"
  4211                           ; Number of cases is 8, Range of values is 0 to 7
  4212                           ; switch strategies available:
  4213                           ; Name         Instructions Cycles
  4214                           ; simple_byte           25    13 (average)
  4215                           ;	Chosen strategy is simple_byte
  4216  000542  0A00               	xorlw	0	; case 0
  4217  000544  B4D8               	btfsc	status,2,c
  4218  000546  D714               	goto	l4181
  4219  000548  0A01               	xorlw	1	; case 1
  4220  00054A  B4D8               	btfsc	status,2,c
  4221  00054C  D79A               	goto	l4245
  4222  00054E  0A03               	xorlw	3	; case 2
  4223  000550  B4D8               	btfsc	status,2,c
  4224  000552  D7A5               	goto	l4253
  4225  000554  0A01               	xorlw	1	; case 3
  4226  000556  B4D8               	btfsc	status,2,c
  4227  000558  D7B0               	goto	l4261
  4228  00055A  0A07               	xorlw	7	; case 4
  4229  00055C  B4D8               	btfsc	status,2,c
  4230  00055E  D7C7               	goto	l4271
  4231  000560  0A01               	xorlw	1	; case 5
  4232  000562  B4D8               	btfsc	status,2,c
  4233  000564  D741               	goto	l4205
  4234  000566  0A03               	xorlw	3	; case 6
  4235  000568  B4D8               	btfsc	status,2,c
  4236  00056A  D75A               	goto	l4219
  4237  00056C  0A01               	xorlw	1	; case 7
  4238  00056E  B4D8               	btfsc	status,2,c
  4239  000570  D772               	goto	l4233
  4240  000572                     l4285:
  4241  000572  FFFF               	dw	65535	; assembler added errata NOP
  4242                           
  4243                           ;clock.c: 1395: if(alarm_sounding)
  4244  000574  5037               	movf	_alarm_sounding,w,c
  4245  000576  B4D8               	btfsc	status,2,c
  4246  000578  D004               	goto	l434
  4247                           
  4248                           ;clock.c: 1396: {
  4249                           ;clock.c: 1397: alarm_sounding = 0;
  4250  00057A  0E00               	movlw	0
  4251  00057C  6E37               	movwf	_alarm_sounding,c
  4252                           
  4253                           ;clock.c: 1398: alarm_time = 0;
  4254  00057E  0E00               	movlw	0
  4255  000580  6E36               	movwf	_alarm_time,c
  4256  000582                     l434:
  4257  000582  FFFF               	dw	65535	; assembler added errata NOP
  4258                           
  4259                           ;clock.c: 1399: }
  4260                           ;clock.c: 1400: }
  4261                           ;clock.c: 1403: got_it = 1;
  4262  000584  0E01               	movlw	1
  4263  000586  0100               	movlb	0	; () banked
  4264  000588  6F84               	movwf	handle_ir@got_it& (0+255),b
  4265                           
  4266                           ;clock.c: 1404: break;
  4267  00058A  D004               	goto	l4293
  4268  00058C                     l4289:
  4269  00058C  FFFF               	dw	65535	; assembler added errata NOP
  4270                           
  4271                           ; BSR set to: 0
  4272  00058E  0100               	movlb	0	; () banked
  4273  000590  2B8F               	incf	handle_ir@j& (0+255),f,b
  4274  000592  D5B1               	goto	l4121
  4275  000594                     l4293:
  4276  000594  FFFF               	dw	65535	; assembler added errata NOP
  4277                           
  4278                           ; BSR set to: 0
  4279                           ;clock.c: 1405: }
  4280                           ;clock.c: 1406: }
  4281                           ;clock.c: 1407: }
  4282                           ;clock.c: 1410: if(!got_it)
  4283  000596  0100               	movlb	0	; () banked
  4284  000598  5184               	movf	handle_ir@got_it& (0+255),w,b
  4285  00059A  0100               	movlb	0	; () banked
  4286  00059C  A4D8               	btfss	status,2,c
  4287  00059E  D01A               	goto	l470
  4288                           
  4289                           ; BSR set to: 0
  4290                           ;clock.c: 1411: {
  4291                           ;clock.c: 1413: uint8_t i;
  4292                           ;clock.c: 1414: ir_size = 0;
  4293  0005A0  0E00               	movlw	0
  4294  0005A2  6E32               	movwf	_ir_size,c
  4295                           
  4296                           ;clock.c: 1415: for(i = 0; i < (sizeof(ir_codes) / sizeof(ir_code_t)); i++)
  4297  0005A4  0E00               	movlw	0
  4298  0005A6  0100               	movlb	0	; () banked
  4299  0005A8  6F8C               	movwf	handle_ir@i_924& (0+255),b
  4300  0005AA                     l4297:
  4301  0005AA  FFFF               	dw	65535	; assembler added errata NOP
  4302                           
  4303                           ; BSR set to: 0
  4304  0005AC  0E07               	movlw	7
  4305  0005AE  0100               	movlb	0	; () banked
  4306  0005B0  658C               	cpfsgt	handle_ir@i_924& (0+255),b
  4307  0005B2  D001               	goto	l4301
  4308  0005B4  D00F               	goto	l470
  4309  0005B6                     l4301:
  4310  0005B6  FFFF               	dw	65535	; assembler added errata NOP
  4311                           
  4312                           ; BSR set to: 0
  4313                           ;clock.c: 1416: {
  4314                           ;clock.c: 1417: ir_code_failed[i] = 0;
  4315  0005B8  0100               	movlb	0	; () banked
  4316  0005BA  518C               	movf	handle_ir@i_924& (0+255),w,b
  4317  0005BC  0D01               	mullw	1
  4318  0005BE  0E60               	movlw	low _ir_code_failed
  4319  0005C0  24F3               	addwf	prodl,w,c
  4320  0005C2  6ED9               	movwf	fsr2l,c
  4321  0005C4  0E00               	movlw	high _ir_code_failed
  4322  0005C6  20F4               	addwfc	prodh,w,c
  4323  0005C8  6EDA               	movwf	fsr2h,c
  4324  0005CA  0E00               	movlw	0
  4325  0005CC  6EDF               	movwf	indf2,c
  4326                           
  4327                           ; BSR set to: 0
  4328  0005CE  0100               	movlb	0	; () banked
  4329  0005D0  2B8C               	incf	handle_ir@i_924& (0+255),f,b
  4330  0005D2  D7EB               	goto	l4297
  4331  0005D4                     l470:
  4332  0005D4  FFFF               	dw	65535	; assembler added errata NOP
  4333                           
  4334                           ; BSR set to: 0
  4335  0005D6  0012               	return		;funcret
  4336  0005D8  FFFF               	dw	65535	; errata NOP
  4337  0005DA                     __end_of_handle_ir:
  4338                           	opt stack 0
  4339                           tblptru	equ	0xFF8
  4340                           tblptrh	equ	0xFF7
  4341                           tblptrl	equ	0xFF6
  4342                           tablat	equ	0xFF5
  4343                           prodh	equ	0xFF4
  4344                           prodl	equ	0xFF3
  4345                           intcon	equ	0xFF2
  4346                           intcon2	equ	0xFF1
  4347                           intcon3	equ	0xFF0
  4348                           postinc0	equ	0xFEE
  4349                           wreg	equ	0xFE8
  4350                           postdec1	equ	0xFE5
  4351                           fsr1h	equ	0xFE2
  4352                           fsr1l	equ	0xFE1
  4353                           indf2	equ	0xFDF
  4354                           fsr2h	equ	0xFDA
  4355                           fsr2l	equ	0xFD9
  4356                           status	equ	0xFD8
  4357                           
  4358 ;; *************** function _print_text *****************
  4359 ;; Defined at:
  4360 ;;		line 598 in file "clock.c"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;  s               2   20[COMRAM] PTR const unsigned char 
  4363 ;;		 -> STR_5(14), STR_4(2), STR_3(27), STR_2(7), 
  4364 ;;		 -> STR_1(10), 
  4365 ;; Auto vars:     Size  Location     Type
  4366 ;;		None
  4367 ;; Return value:  Size  Location     Type
  4368 ;;                  1    wreg      void 
  4369 ;; Registers used:
  4370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4371 ;; Tracked objects:
  4372 ;;		On entry : 0/0
  4373 ;;		On exit  : 0/0
  4374 ;;		Unchanged: 0/0
  4375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4376 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4379 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4380 ;;Total ram usage:        2 bytes
  4381 ;; Hardware stack levels used:    1
  4382 ;; Hardware stack levels required when called:    3
  4383 ;; This function calls:
  4384 ;;		_print_byte
  4385 ;; This function is called by:
  4386 ;;		_handle_ir
  4387 ;;		_main
  4388 ;; This function uses a non-reentrant model
  4389 ;;
  4390                           
  4391                           	psect	text7
  4392  001AA4                     __ptext7:
  4393                           	opt stack 0
  4394  001AA4                     _print_text:
  4395                           	opt stack 0
  4396  001AA4  FFFF               	dw	65535	; assembler added errata NOP
  4397                           
  4398                           ;clock.c: 600: while(*s != 0)
  4399                           
  4400                           ; BSR set to: 0
  4401                           ;incstack = 0
  4402  001AA6  D00C               	goto	l3971
  4403  001AA8                     l3967:
  4404  001AA8  FFFF               	dw	65535	; assembler added errata NOP
  4405                           
  4406                           ;clock.c: 601: {
  4407                           ;clock.c: 602: print_byte(*s);
  4408  001AAA  C015  FFF6         	movff	print_text@s,tblptrl
  4409  001AAE  C016  FFF7         	movff	print_text@s+1,tblptrh
  4410  001AB2                     	if	0	;tblptru may be non-zero
  4411  001AB2                     	endif
  4412  001AB2                     	if	0	;tblptru may be non-zero
  4413  001AB2                     	endif
  4414  001AB2  0008               	tblrd		*
  4415  001AB4  FFFF               	dw	65535	; errata NOP
  4416  001AB6  50F5               	movf	tablat,w,c
  4417  001AB8  EC2E  F00D         	call	_print_byte
  4418                           
  4419                           ;clock.c: 603: s++;
  4420  001ABC  4A15               	infsnz	print_text@s,f,c
  4421  001ABE  2A16               	incf	print_text@s+1,f,c
  4422  001AC0                     l3971:
  4423  001AC0  FFFF               	dw	65535	; assembler added errata NOP
  4424  001AC2  C015  FFF6         	movff	print_text@s,tblptrl
  4425  001AC6  C016  FFF7         	movff	print_text@s+1,tblptrh
  4426  001ACA                     	if	0	;tblptru may be non-zero
  4427  001ACA                     	endif
  4428  001ACA                     	if	0	;tblptru may be non-zero
  4429  001ACA                     	endif
  4430  001ACA  0008               	tblrd		*
  4431  001ACC  FFFF               	dw	65535	; errata NOP
  4432  001ACE  50F5               	movf	tablat,w,c
  4433  001AD0  0900               	iorlw	0
  4434  001AD2  B4D8               	btfsc	status,2,c
  4435  001AD4  0012               	return		;funcret
  4436  001AD6  FFFF               	dw	65535	; assembler added errata NOP
  4437  001AD8  D7E7               	goto	l3967
  4438  001ADA  FFFF               	dw	65535	; errata NOP
  4439  001ADC                     __end_of_print_text:
  4440                           	opt stack 0
  4441                           tblptru	equ	0xFF8
  4442                           tblptrh	equ	0xFF7
  4443                           tblptrl	equ	0xFF6
  4444                           tablat	equ	0xFF5
  4445                           prodh	equ	0xFF4
  4446                           prodl	equ	0xFF3
  4447                           intcon	equ	0xFF2
  4448                           intcon2	equ	0xFF1
  4449                           intcon3	equ	0xFF0
  4450                           postinc0	equ	0xFEE
  4451                           wreg	equ	0xFE8
  4452                           postdec1	equ	0xFE5
  4453                           fsr1h	equ	0xFE2
  4454                           fsr1l	equ	0xFE1
  4455                           indf2	equ	0xFDF
  4456                           fsr2h	equ	0xFDA
  4457                           fsr2l	equ	0xFD9
  4458                           status	equ	0xFD8
  4459                           
  4460 ;; *************** function _print_number *****************
  4461 ;; Defined at:
  4462 ;;		line 623 in file "clock.c"
  4463 ;; Parameters:    Size  Location     Type
  4464 ;;  number          2   33[COMRAM] unsigned int 
  4465 ;; Auto vars:     Size  Location     Type
  4466 ;;		None
  4467 ;; Return value:  Size  Location     Type
  4468 ;;                  1    wreg      void 
  4469 ;; Registers used:
  4470 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4471 ;; Tracked objects:
  4472 ;;		On entry : 0/0
  4473 ;;		On exit  : 0/0
  4474 ;;		Unchanged: 0/0
  4475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4476 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4479 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4480 ;;Total ram usage:        2 bytes
  4481 ;; Hardware stack levels used:    1
  4482 ;; Hardware stack levels required when called:    4
  4483 ;; This function calls:
  4484 ;;		_print_byte
  4485 ;;		_print_number_nospace
  4486 ;; This function is called by:
  4487 ;;		_handle_ir
  4488 ;; This function uses a non-reentrant model
  4489 ;;
  4490                           
  4491                           	psect	text8
  4492  001C3C                     __ptext8:
  4493                           	opt stack 0
  4494  001C3C                     _print_number:
  4495                           	opt stack 0
  4496  001C3C  FFFF               	dw	65535	; assembler added errata NOP
  4497                           
  4498                           ;clock.c: 625: print_number_nospace(number);
  4499                           
  4500                           ;incstack = 0
  4501  001C3E  C022  F020         	movff	print_number@number,print_number_nospace@number
  4502  001C42  C023  F021         	movff	print_number@number+1,print_number_nospace@number+1
  4503  001C46  EC60  F009         	call	_print_number_nospace	;wreg free
  4504                           
  4505                           ;clock.c: 626: print_byte(' ');
  4506  001C4A  0E20               	movlw	32
  4507  001C4C  EC2E  F00D         	call	_print_byte
  4508  001C50  0012               	return		;funcret
  4509  001C52  FFFF               	dw	65535	; errata NOP
  4510  001C54                     __end_of_print_number:
  4511                           	opt stack 0
  4512                           tblptru	equ	0xFF8
  4513                           tblptrh	equ	0xFF7
  4514                           tblptrl	equ	0xFF6
  4515                           tablat	equ	0xFF5
  4516                           prodh	equ	0xFF4
  4517                           prodl	equ	0xFF3
  4518                           intcon	equ	0xFF2
  4519                           intcon2	equ	0xFF1
  4520                           intcon3	equ	0xFF0
  4521                           postinc0	equ	0xFEE
  4522                           wreg	equ	0xFE8
  4523                           postdec1	equ	0xFE5
  4524                           fsr1h	equ	0xFE2
  4525                           fsr1l	equ	0xFE1
  4526                           indf2	equ	0xFDF
  4527                           fsr2h	equ	0xFDA
  4528                           fsr2l	equ	0xFD9
  4529                           status	equ	0xFD8
  4530                           
  4531 ;; *************** function _print_number_nospace *****************
  4532 ;; Defined at:
  4533 ;;		line 608 in file "clock.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;  number          2   31[COMRAM] unsigned int 
  4536 ;; Auto vars:     Size  Location     Type
  4537 ;;		None
  4538 ;; Return value:  Size  Location     Type
  4539 ;;                  1    wreg      void 
  4540 ;; Registers used:
  4541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4542 ;; Tracked objects:
  4543 ;;		On entry : 0/0
  4544 ;;		On exit  : 0/0
  4545 ;;		Unchanged: 0/0
  4546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4547 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4550 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4551 ;;Total ram usage:        2 bytes
  4552 ;; Hardware stack levels used:    1
  4553 ;; Hardware stack levels required when called:    3
  4554 ;; This function calls:
  4555 ;;		___lwdiv
  4556 ;;		___lwmod
  4557 ;;		_print_byte
  4558 ;; This function is called by:
  4559 ;;		_print_number
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           	psect	text9
  4564  0012C0                     __ptext9:
  4565                           	opt stack 0
  4566  0012C0                     _print_number_nospace:
  4567                           	opt stack 0
  4568  0012C0  FFFF               	dw	65535	; assembler added errata NOP
  4569                           
  4570                           ;clock.c: 610: if(number >= 10000) print_byte('0' + (number / 10000));
  4571                           
  4572                           ;incstack = 0
  4573  0012C2  0E10               	movlw	16
  4574  0012C4  5C20               	subwf	print_number_nospace@number,w,c
  4575  0012C6  0E27               	movlw	39
  4576  0012C8  5821               	subwfb	print_number_nospace@number+1,w,c
  4577  0012CA  A0D8               	btfss	status,0,c
  4578  0012CC  D00E               	goto	l3785
  4579  0012CE  C020  F014         	movff	print_number_nospace@number,___lwdiv@dividend
  4580  0012D2  C021  F015         	movff	print_number_nospace@number+1,___lwdiv@dividend+1
  4581  0012D6  0E27               	movlw	39
  4582  0012D8  6E17               	movwf	___lwdiv@divisor+1,c
  4583  0012DA  0E10               	movlw	16
  4584  0012DC  6E16               	movwf	___lwdiv@divisor,c
  4585  0012DE  EC06  F00C         	call	___lwdiv	;wreg free
  4586  0012E2  5014               	movf	?___lwdiv,w,c
  4587  0012E4  0F30               	addlw	48
  4588  0012E6  EC2E  F00D         	call	_print_byte
  4589  0012EA                     l3785:
  4590  0012EA  FFFF               	dw	65535	; assembler added errata NOP
  4591                           
  4592                           ;clock.c: 611: if(number >= 1000) print_byte('0' + ((number / 1000) % 10));
  4593  0012EC  0EE8               	movlw	232
  4594  0012EE  5C20               	subwf	print_number_nospace@number,w,c
  4595  0012F0  0E03               	movlw	3
  4596  0012F2  5821               	subwfb	print_number_nospace@number+1,w,c
  4597  0012F4  A0D8               	btfss	status,0,c
  4598  0012F6  D018               	goto	l3789
  4599  0012F8  0E03               	movlw	3
  4600  0012FA  6E17               	movwf	___lwdiv@divisor+1,c
  4601  0012FC  0EE8               	movlw	232
  4602  0012FE  6E16               	movwf	___lwdiv@divisor,c
  4603  001300  C020  F014         	movff	print_number_nospace@number,___lwdiv@dividend
  4604  001304  C021  F015         	movff	print_number_nospace@number+1,___lwdiv@dividend+1
  4605  001308  EC06  F00C         	call	___lwdiv	;wreg free
  4606  00130C  C014  F01B         	movff	?___lwdiv,___lwmod@dividend
  4607  001310  C015  F01C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4608  001314  0E00               	movlw	0
  4609  001316  6E1E               	movwf	___lwmod@divisor+1,c
  4610  001318  0E0A               	movlw	10
  4611  00131A  6E1D               	movwf	___lwmod@divisor,c
  4612  00131C  ECB7  F00C         	call	___lwmod	;wreg free
  4613  001320  501B               	movf	?___lwmod,w,c
  4614  001322  0F30               	addlw	48
  4615  001324  EC2E  F00D         	call	_print_byte
  4616  001328                     l3789:
  4617  001328  FFFF               	dw	65535	; assembler added errata NOP
  4618                           
  4619                           ;clock.c: 612: if(number >= 100) print_byte('0' + ((number / 100) % 10));
  4620  00132A  5021               	movf	print_number_nospace@number+1,w,c
  4621  00132C  E104               	bnz	u5180
  4622  00132E  0E64               	movlw	100
  4623  001330  5C20               	subwf	print_number_nospace@number,w,c
  4624  001332  A0D8               	btfss	status,0,c
  4625  001334  D018               	goto	l3793
  4626  001336                     u5180:
  4627  001336  0E00               	movlw	0
  4628  001338  6E17               	movwf	___lwdiv@divisor+1,c
  4629  00133A  0E64               	movlw	100
  4630  00133C  6E16               	movwf	___lwdiv@divisor,c
  4631  00133E  C020  F014         	movff	print_number_nospace@number,___lwdiv@dividend
  4632  001342  C021  F015         	movff	print_number_nospace@number+1,___lwdiv@dividend+1
  4633  001346  EC06  F00C         	call	___lwdiv	;wreg free
  4634  00134A  C014  F01B         	movff	?___lwdiv,___lwmod@dividend
  4635  00134E  C015  F01C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4636  001352  0E00               	movlw	0
  4637  001354  6E1E               	movwf	___lwmod@divisor+1,c
  4638  001356  0E0A               	movlw	10
  4639  001358  6E1D               	movwf	___lwmod@divisor,c
  4640  00135A  ECB7  F00C         	call	___lwmod	;wreg free
  4641  00135E  501B               	movf	?___lwmod,w,c
  4642  001360  0F30               	addlw	48
  4643  001362  EC2E  F00D         	call	_print_byte
  4644  001366                     l3793:
  4645  001366  FFFF               	dw	65535	; assembler added errata NOP
  4646                           
  4647                           ;clock.c: 613: if(number >= 10) print_byte('0' + ((number / 10) % 10));
  4648  001368  5021               	movf	print_number_nospace@number+1,w,c
  4649  00136A  E104               	bnz	u5190
  4650  00136C  0E0A               	movlw	10
  4651  00136E  5C20               	subwf	print_number_nospace@number,w,c
  4652  001370  A0D8               	btfss	status,0,c
  4653  001372  D018               	goto	l235
  4654  001374                     u5190:
  4655  001374  0E00               	movlw	0
  4656  001376  6E17               	movwf	___lwdiv@divisor+1,c
  4657  001378  0E0A               	movlw	10
  4658  00137A  6E16               	movwf	___lwdiv@divisor,c
  4659  00137C  C020  F014         	movff	print_number_nospace@number,___lwdiv@dividend
  4660  001380  C021  F015         	movff	print_number_nospace@number+1,___lwdiv@dividend+1
  4661  001384  EC06  F00C         	call	___lwdiv	;wreg free
  4662  001388  C014  F01B         	movff	?___lwdiv,___lwmod@dividend
  4663  00138C  C015  F01C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4664  001390  0E00               	movlw	0
  4665  001392  6E1E               	movwf	___lwmod@divisor+1,c
  4666  001394  0E0A               	movlw	10
  4667  001396  6E1D               	movwf	___lwmod@divisor,c
  4668  001398  ECB7  F00C         	call	___lwmod	;wreg free
  4669  00139C  501B               	movf	?___lwmod,w,c
  4670  00139E  0F30               	addlw	48
  4671  0013A0  EC2E  F00D         	call	_print_byte
  4672  0013A4                     l235:
  4673  0013A4  FFFF               	dw	65535	; assembler added errata NOP
  4674                           
  4675                           ;clock.c: 614: print_byte('0' + (number % 10));
  4676  0013A6  C020  F01B         	movff	print_number_nospace@number,___lwmod@dividend
  4677  0013AA  C021  F01C         	movff	print_number_nospace@number+1,___lwmod@dividend+1
  4678  0013AE  0E00               	movlw	0
  4679  0013B0  6E1E               	movwf	___lwmod@divisor+1,c
  4680  0013B2  0E0A               	movlw	10
  4681  0013B4  6E1D               	movwf	___lwmod@divisor,c
  4682  0013B6  ECB7  F00C         	call	___lwmod	;wreg free
  4683  0013BA  501B               	movf	?___lwmod,w,c
  4684  0013BC  0F30               	addlw	48
  4685  0013BE  EC2E  F00D         	call	_print_byte
  4686  0013C2  0012               	return		;funcret
  4687  0013C4  FFFF               	dw	65535	; errata NOP
  4688  0013C6                     __end_of_print_number_nospace:
  4689                           	opt stack 0
  4690                           tblptru	equ	0xFF8
  4691                           tblptrh	equ	0xFF7
  4692                           tblptrl	equ	0xFF6
  4693                           tablat	equ	0xFF5
  4694                           prodh	equ	0xFF4
  4695                           prodl	equ	0xFF3
  4696                           intcon	equ	0xFF2
  4697                           intcon2	equ	0xFF1
  4698                           intcon3	equ	0xFF0
  4699                           postinc0	equ	0xFEE
  4700                           wreg	equ	0xFE8
  4701                           postdec1	equ	0xFE5
  4702                           fsr1h	equ	0xFE2
  4703                           fsr1l	equ	0xFE1
  4704                           indf2	equ	0xFDF
  4705                           fsr2h	equ	0xFDA
  4706                           fsr2l	equ	0xFD9
  4707                           status	equ	0xFD8
  4708                           
  4709 ;; *************** function ___lwmod *****************
  4710 ;; Defined at:
  4711 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;  dividend        2   26[COMRAM] unsigned int 
  4714 ;;  divisor         2   28[COMRAM] unsigned int 
  4715 ;; Auto vars:     Size  Location     Type
  4716 ;;  counter         1   30[COMRAM] unsigned char 
  4717 ;; Return value:  Size  Location     Type
  4718 ;;                  2   26[COMRAM] unsigned int 
  4719 ;; Registers used:
  4720 ;;		wreg, status,2, status,0
  4721 ;; Tracked objects:
  4722 ;;		On entry : 0/0
  4723 ;;		On exit  : 0/0
  4724 ;;		Unchanged: 0/0
  4725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4726 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4727 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4729 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4730 ;;Total ram usage:        5 bytes
  4731 ;; Hardware stack levels used:    1
  4732 ;; Hardware stack levels required when called:    2
  4733 ;; This function calls:
  4734 ;;		Nothing
  4735 ;; This function is called by:
  4736 ;;		_print_number_nospace
  4737 ;; This function uses a non-reentrant model
  4738 ;;
  4739                           
  4740                           	psect	text10
  4741  00196E                     __ptext10:
  4742                           	opt stack 0
  4743  00196E                     ___lwmod:
  4744                           	opt stack 0
  4745  00196E  FFFF               	dw	65535	; assembler added errata NOP
  4746                           
  4747                           ;incstack = 0
  4748  001970  501D               	movf	___lwmod@divisor,w,c
  4749  001972  101E               	iorwf	___lwmod@divisor+1,w,c
  4750  001974  B4D8               	btfsc	status,2,c
  4751  001976  D01C               	goto	l956
  4752  001978  0E01               	movlw	1
  4753  00197A  6E1F               	movwf	___lwmod@counter,c
  4754  00197C  D005               	goto	l3771
  4755  00197E                     l3769:
  4756  00197E  FFFF               	dw	65535	; assembler added errata NOP
  4757  001980  90D8               	bcf	status,0,c
  4758  001982  361D               	rlcf	___lwmod@divisor,f,c
  4759  001984  361E               	rlcf	___lwmod@divisor+1,f,c
  4760  001986  2A1F               	incf	___lwmod@counter,f,c
  4761  001988                     l3771:
  4762  001988  FFFF               	dw	65535	; assembler added errata NOP
  4763  00198A  AE1E               	btfss	___lwmod@divisor+1,7,c
  4764  00198C  D7F8               	goto	l3769
  4765  00198E                     l3773:
  4766  00198E  FFFF               	dw	65535	; assembler added errata NOP
  4767  001990  501D               	movf	___lwmod@divisor,w,c
  4768  001992  5C1B               	subwf	___lwmod@dividend,w,c
  4769  001994  501E               	movf	___lwmod@divisor+1,w,c
  4770  001996  581C               	subwfb	___lwmod@dividend+1,w,c
  4771  001998  A0D8               	btfss	status,0,c
  4772  00199A  D004               	goto	l3777
  4773  00199C  501D               	movf	___lwmod@divisor,w,c
  4774  00199E  5E1B               	subwf	___lwmod@dividend,f,c
  4775  0019A0  501E               	movf	___lwmod@divisor+1,w,c
  4776  0019A2  5A1C               	subwfb	___lwmod@dividend+1,f,c
  4777  0019A4                     l3777:
  4778  0019A4  FFFF               	dw	65535	; assembler added errata NOP
  4779  0019A6  90D8               	bcf	status,0,c
  4780  0019A8  321E               	rrcf	___lwmod@divisor+1,f,c
  4781  0019AA  321D               	rrcf	___lwmod@divisor,f,c
  4782  0019AC  2E1F               	decfsz	___lwmod@counter,f,c
  4783  0019AE  D7EF               	goto	l3773
  4784  0019B0                     l956:
  4785  0019B0  FFFF               	dw	65535	; assembler added errata NOP
  4786  0019B2  C01B  F01B         	movff	___lwmod@dividend,?___lwmod
  4787  0019B6  C01C  F01C         	movff	___lwmod@dividend+1,?___lwmod+1
  4788  0019BA  0012               	return		;funcret
  4789  0019BC  FFFF               	dw	65535	; errata NOP
  4790  0019BE                     __end_of___lwmod:
  4791                           	opt stack 0
  4792                           tblptru	equ	0xFF8
  4793                           tblptrh	equ	0xFF7
  4794                           tblptrl	equ	0xFF6
  4795                           tablat	equ	0xFF5
  4796                           prodh	equ	0xFF4
  4797                           prodl	equ	0xFF3
  4798                           intcon	equ	0xFF2
  4799                           intcon2	equ	0xFF1
  4800                           intcon3	equ	0xFF0
  4801                           postinc0	equ	0xFEE
  4802                           wreg	equ	0xFE8
  4803                           postdec1	equ	0xFE5
  4804                           fsr1h	equ	0xFE2
  4805                           fsr1l	equ	0xFE1
  4806                           indf2	equ	0xFDF
  4807                           fsr2h	equ	0xFDA
  4808                           fsr2l	equ	0xFD9
  4809                           status	equ	0xFD8
  4810                           
  4811 ;; *************** function ___lwdiv *****************
  4812 ;; Defined at:
  4813 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;  dividend        2   19[COMRAM] unsigned int 
  4816 ;;  divisor         2   21[COMRAM] unsigned int 
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;  quotient        2   24[COMRAM] unsigned int 
  4819 ;;  counter         1   23[COMRAM] unsigned char 
  4820 ;; Return value:  Size  Location     Type
  4821 ;;                  2   19[COMRAM] unsigned int 
  4822 ;; Registers used:
  4823 ;;		wreg, status,2, status,0
  4824 ;; Tracked objects:
  4825 ;;		On entry : 0/0
  4826 ;;		On exit  : 0/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4829 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4830 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4832 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4833 ;;Total ram usage:        7 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; Hardware stack levels required when called:    2
  4836 ;; This function calls:
  4837 ;;		Nothing
  4838 ;; This function is called by:
  4839 ;;		_print_number_nospace
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           	psect	text11
  4844  00180C                     __ptext11:
  4845                           	opt stack 0
  4846  00180C                     ___lwdiv:
  4847                           	opt stack 0
  4848  00180C  FFFF               	dw	65535	; assembler added errata NOP
  4849                           
  4850                           ;incstack = 0
  4851  00180E  0E00               	movlw	0
  4852  001810  6E1A               	movwf	___lwdiv@quotient+1,c
  4853  001812  0E00               	movlw	0
  4854  001814  6E19               	movwf	___lwdiv@quotient,c
  4855  001816  5016               	movf	___lwdiv@divisor,w,c
  4856  001818  1017               	iorwf	___lwdiv@divisor+1,w,c
  4857  00181A  B4D8               	btfsc	status,2,c
  4858  00181C  D020               	goto	l946
  4859  00181E  0E01               	movlw	1
  4860  001820  6E18               	movwf	___lwdiv@counter,c
  4861  001822  D005               	goto	l3751
  4862  001824                     l3749:
  4863  001824  FFFF               	dw	65535	; assembler added errata NOP
  4864  001826  90D8               	bcf	status,0,c
  4865  001828  3616               	rlcf	___lwdiv@divisor,f,c
  4866  00182A  3617               	rlcf	___lwdiv@divisor+1,f,c
  4867  00182C  2A18               	incf	___lwdiv@counter,f,c
  4868  00182E                     l3751:
  4869  00182E  FFFF               	dw	65535	; assembler added errata NOP
  4870  001830  AE17               	btfss	___lwdiv@divisor+1,7,c
  4871  001832  D7F8               	goto	l3749
  4872  001834                     l3753:
  4873  001834  FFFF               	dw	65535	; assembler added errata NOP
  4874  001836  90D8               	bcf	status,0,c
  4875  001838  3619               	rlcf	___lwdiv@quotient,f,c
  4876  00183A  361A               	rlcf	___lwdiv@quotient+1,f,c
  4877  00183C  5016               	movf	___lwdiv@divisor,w,c
  4878  00183E  5C14               	subwf	___lwdiv@dividend,w,c
  4879  001840  5017               	movf	___lwdiv@divisor+1,w,c
  4880  001842  5815               	subwfb	___lwdiv@dividend+1,w,c
  4881  001844  A0D8               	btfss	status,0,c
  4882  001846  D005               	goto	l3761
  4883  001848  5016               	movf	___lwdiv@divisor,w,c
  4884  00184A  5E14               	subwf	___lwdiv@dividend,f,c
  4885  00184C  5017               	movf	___lwdiv@divisor+1,w,c
  4886  00184E  5A15               	subwfb	___lwdiv@dividend+1,f,c
  4887  001850  8019               	bsf	___lwdiv@quotient,0,c
  4888  001852                     l3761:
  4889  001852  FFFF               	dw	65535	; assembler added errata NOP
  4890  001854  90D8               	bcf	status,0,c
  4891  001856  3217               	rrcf	___lwdiv@divisor+1,f,c
  4892  001858  3216               	rrcf	___lwdiv@divisor,f,c
  4893  00185A  2E18               	decfsz	___lwdiv@counter,f,c
  4894  00185C  D7EB               	goto	l3753
  4895  00185E                     l946:
  4896  00185E  FFFF               	dw	65535	; assembler added errata NOP
  4897  001860  C019  F014         	movff	___lwdiv@quotient,?___lwdiv
  4898  001864  C01A  F015         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4899  001868  0012               	return		;funcret
  4900  00186A  FFFF               	dw	65535	; errata NOP
  4901  00186C                     __end_of___lwdiv:
  4902                           	opt stack 0
  4903                           tblptru	equ	0xFF8
  4904                           tblptrh	equ	0xFF7
  4905                           tblptrl	equ	0xFF6
  4906                           tablat	equ	0xFF5
  4907                           prodh	equ	0xFF4
  4908                           prodl	equ	0xFF3
  4909                           intcon	equ	0xFF2
  4910                           intcon2	equ	0xFF1
  4911                           intcon3	equ	0xFF0
  4912                           postinc0	equ	0xFEE
  4913                           wreg	equ	0xFE8
  4914                           postdec1	equ	0xFE5
  4915                           fsr1h	equ	0xFE2
  4916                           fsr1l	equ	0xFE1
  4917                           indf2	equ	0xFDF
  4918                           fsr2h	equ	0xFDA
  4919                           fsr2l	equ	0xFD9
  4920                           status	equ	0xFD8
  4921                           
  4922 ;; *************** function _play_song *****************
  4923 ;; Defined at:
  4924 ;;		line 795 in file "clock.c"
  4925 ;; Parameters:    Size  Location     Type
  4926 ;;  ptr             2   19[COMRAM] PTR const struct .
  4927 ;;		 -> alarm_song(76), dn_tone(12), up_tone(12), set_time_tone2(20), 
  4928 ;;		 -> set_time_tone1(20), set_alarm_tone2(20), set_alarm_tone1(20), alarm_on_tone(36), 
  4929 ;;		 -> alarm_off_tone(36), test_tone(12), 
  4930 ;; Auto vars:     Size  Location     Type
  4931 ;;		None
  4932 ;; Return value:  Size  Location     Type
  4933 ;;                  1    wreg      void 
  4934 ;; Registers used:
  4935 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4936 ;; Tracked objects:
  4937 ;;		On entry : 0/0
  4938 ;;		On exit  : 0/0
  4939 ;;		Unchanged: 0/0
  4940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4941 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4944 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4945 ;;Total ram usage:        2 bytes
  4946 ;; Hardware stack levels used:    1
  4947 ;; Hardware stack levels required when called:    3
  4948 ;; This function calls:
  4949 ;;		_handle_song
  4950 ;; This function is called by:
  4951 ;;		_handle_ir
  4952 ;;		_start_alarm
  4953 ;; This function uses a non-reentrant model
  4954 ;;
  4955                           
  4956                           	psect	text12
  4957  0018C6                     __ptext12:
  4958                           	opt stack 0
  4959  0018C6                     _play_song:
  4960                           	opt stack 0
  4961  0018C6  FFFF               	dw	65535	; assembler added errata NOP
  4962                           
  4963                           ;clock.c: 797: PIE1bits.TMR2IE = 0;
  4964                           
  4965                           ;incstack = 0
  4966  0018C8  929D               	bcf	3997,1,c	;volatile
  4967                           
  4968                           ;clock.c: 798: osc1_period = 0;
  4969  0018CA  0E00               	movlw	0
  4970  0018CC  0100               	movlb	0	; () banked
  4971  0018CE  6F9A               	movwf	(_osc1_period+1)& (0+255),b
  4972  0018D0  0E00               	movlw	0
  4973  0018D2  6F99               	movwf	_osc1_period& (0+255),b
  4974                           
  4975                           ;clock.c: 799: osc1_volume = 0;
  4976  0018D4  0E00               	movlw	0
  4977  0018D6  0100               	movlb	0	; () banked
  4978  0018D8  6F9D               	movwf	_osc1_volume& (0+255),b
  4979                           
  4980                           ;clock.c: 800: osc2_period = 0;
  4981  0018DA  0E00               	movlw	0
  4982  0018DC  0100               	movlb	0	; () banked
  4983  0018DE  6F98               	movwf	(_osc2_period+1)& (0+255),b
  4984  0018E0  0E00               	movlw	0
  4985  0018E2  6F97               	movwf	_osc2_period& (0+255),b
  4986                           
  4987                           ;clock.c: 801: osc2_volume = 0;
  4988  0018E4  0E00               	movlw	0
  4989  0018E6  0100               	movlb	0	; () banked
  4990  0018E8  6F9C               	movwf	_osc2_volume& (0+255),b
  4991                           
  4992                           ;clock.c: 802: osc3_period = 0;
  4993  0018EA  0E00               	movlw	0
  4994  0018EC  0100               	movlb	0	; () banked
  4995  0018EE  6F96               	movwf	(_osc3_period+1)& (0+255),b
  4996  0018F0  0E00               	movlw	0
  4997  0018F2  6F95               	movwf	_osc3_period& (0+255),b
  4998                           
  4999                           ;clock.c: 803: osc3_volume = 0;
  5000  0018F4  0E00               	movlw	0
  5001  0018F6  0100               	movlb	0	; () banked
  5002  0018F8  6F9B               	movwf	_osc3_volume& (0+255),b
  5003                           
  5004                           ; BSR set to: 0
  5005                           ;clock.c: 804: PIE1bits.TMR2IE = 1;
  5006  0018FA  829D               	bsf	3997,1,c	;volatile
  5007                           
  5008                           ; BSR set to: 0
  5009                           ;clock.c: 806: song_ptr = ptr;
  5010  0018FC  C014  F02E         	movff	play_song@ptr,_song_ptr
  5011  001900  C015  F02F         	movff	play_song@ptr+1,_song_ptr+1
  5012  001904  502E               	movf	_song_ptr,w,c
  5013  001906  102F               	iorwf	_song_ptr+1,w,c
  5014  001908  A4D8               	btfss	status,2,c
  5015  00190A  0E00               	movlw	low (__mediumconst shr (0+16))
  5016  00190C  6E30               	movwf	_song_ptr+2,c
  5017                           
  5018                           ; BSR set to: 0
  5019                           ;clock.c: 807: song_counter = 0;
  5020  00190E  0E00               	movlw	0
  5021  001910  6E44               	movwf	_song_counter,c
  5022                           
  5023                           ; BSR set to: 0
  5024                           ;clock.c: 808: song_delay = 0;
  5025  001912  0E00               	movlw	0
  5026  001914  6E43               	movwf	_song_delay,c
  5027                           
  5028                           ; BSR set to: 0
  5029                           ;clock.c: 809: handle_song();
  5030  001916  ECBC  F005         	call	_handle_song	;wreg free
  5031  00191A  0012               	return		;funcret
  5032  00191C  FFFF               	dw	65535	; errata NOP
  5033  00191E                     __end_of_play_song:
  5034                           	opt stack 0
  5035                           tblptru	equ	0xFF8
  5036                           tblptrh	equ	0xFF7
  5037                           tblptrl	equ	0xFF6
  5038                           tablat	equ	0xFF5
  5039                           prodh	equ	0xFF4
  5040                           prodl	equ	0xFF3
  5041                           intcon	equ	0xFF2
  5042                           intcon2	equ	0xFF1
  5043                           intcon3	equ	0xFF0
  5044                           postinc0	equ	0xFEE
  5045                           wreg	equ	0xFE8
  5046                           postdec1	equ	0xFE5
  5047                           fsr1h	equ	0xFE2
  5048                           fsr1l	equ	0xFE1
  5049                           indf2	equ	0xFDF
  5050                           fsr2h	equ	0xFDA
  5051                           fsr2l	equ	0xFD9
  5052                           status	equ	0xFD8
  5053                           
  5054 ;; *************** function _handle_song *****************
  5055 ;; Defined at:
  5056 ;;		line 731 in file "clock.c"
  5057 ;; Parameters:    Size  Location     Type
  5058 ;;		None
  5059 ;; Auto vars:     Size  Location     Type
  5060 ;;		None
  5061 ;; Return value:  Size  Location     Type
  5062 ;;                  1    wreg      void 
  5063 ;; Registers used:
  5064 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5065 ;; Tracked objects:
  5066 ;;		On entry : 0/0
  5067 ;;		On exit  : 0/0
  5068 ;;		Unchanged: 0/0
  5069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5074 ;;Total ram usage:        0 bytes
  5075 ;; Hardware stack levels used:    1
  5076 ;; Hardware stack levels required when called:    2
  5077 ;; This function calls:
  5078 ;;		Nothing
  5079 ;; This function is called by:
  5080 ;;		_play_song
  5081 ;;		_handle_time
  5082 ;; This function uses a non-reentrant model
  5083 ;;
  5084                           
  5085                           	psect	text13
  5086  000B78                     __ptext13:
  5087                           	opt stack 0
  5088  000B78                     _handle_song:
  5089                           	opt stack 0
  5090  000B78  FFFF               	dw	65535	; assembler added errata NOP
  5091  000B7A  FFFF               	dw	65535	; assembler added errata NOP
  5092                           
  5093                           ;clock.c: 734: {
  5094                           ;clock.c: 735: if(song_delay >= song_ptr->delay)
  5095  000B7C  C02E  FFF6         	movff	_song_ptr,tblptrl
  5096  000B80  C02F  FFF7         	movff	_song_ptr+1,tblptrh
  5097  000B84  C030  FFF8         	movff	_song_ptr+2,tblptru
  5098  000B88  0009               	tblrd		*+
  5099  000B8A  FFFF               	dw	65535	; errata NOP
  5100  000B8C  50F5               	movf	tablat,w,c
  5101  000B8E  5C43               	subwf	_song_delay,w,c
  5102  000B90  A0D8               	btfss	status,0,c
  5103  000B92  D0D2               	goto	l292
  5104                           
  5105                           ;clock.c: 736: {
  5106                           ;clock.c: 737: PIE1bits.TMR2IE = 0;
  5107  000B94  929D               	bcf	3997,1,c	;volatile
  5108                           
  5109                           ;clock.c: 738: switch(song_ptr->osc)
  5110  000B96  D07E               	goto	l3817
  5111  000B98                     l3803:
  5112  000B98  FFFF               	dw	65535	; assembler added errata NOP
  5113                           
  5114                           ;clock.c: 741: osc1_period = freqs[song_ptr->freq];
  5115  000B9A  0E02               	movlw	2
  5116  000B9C  242E               	addwf	_song_ptr,w,c
  5117  000B9E  6EF6               	movwf	tblptrl,c
  5118  000BA0  0E00               	movlw	0
  5119  000BA2  202F               	addwfc	_song_ptr+1,w,c
  5120  000BA4  6EF7               	movwf	tblptrh,c
  5121  000BA6  0E00               	movlw	0
  5122  000BA8  2030               	addwfc	_song_ptr+2,w,c
  5123  000BAA  6EF8               	movwf	tblptru,c
  5124  000BAC  0008               	tblrd		*
  5125  000BAE  FFFF               	dw	65535	; errata NOP
  5126  000BB0  50F5               	movf	tablat,w,c
  5127  000BB2  0D02               	mullw	2
  5128  000BB4  0E5B               	movlw	low _freqs
  5129  000BB6  24F3               	addwf	prodl,w,c
  5130  000BB8  6EF6               	movwf	tblptrl,c
  5131  000BBA  0EB9               	movlw	high _freqs
  5132  000BBC  20F4               	addwfc	prodh,w,c
  5133  000BBE  6EF7               	movwf	tblptrh,c
  5134  000BC0                     	if	0	;There are less than 3 active tblptr bytes
  5135  000BC0                     	endif
  5136  000BC0  0009               	tblrd		*+
  5137  000BC2  FFFF               	dw	65535	; errata NOP
  5138  000BC4  CFF5 F099          	movff	tablat,_osc1_period
  5139  000BC8  000A               	tblrd		*-
  5140  000BCA  FFFF               	dw	65535	; errata NOP
  5141  000BCC  CFF5 F09A          	movff	tablat,_osc1_period+1
  5142                           
  5143                           ;clock.c: 742: osc1_volume = song_ptr->volume;
  5144  000BD0  0E03               	movlw	3
  5145  000BD2  242E               	addwf	_song_ptr,w,c
  5146  000BD4  6EF6               	movwf	tblptrl,c
  5147  000BD6  0E00               	movlw	0
  5148  000BD8  202F               	addwfc	_song_ptr+1,w,c
  5149  000BDA  6EF7               	movwf	tblptrh,c
  5150  000BDC  0E00               	movlw	0
  5151  000BDE  2030               	addwfc	_song_ptr+2,w,c
  5152  000BE0  6EF8               	movwf	tblptru,c
  5153  000BE2  0008               	tblrd		*
  5154  000BE4  FFFF               	dw	65535	; errata NOP
  5155  000BE6  CFF5 F09D          	movff	tablat,_osc1_volume
  5156                           
  5157                           ;clock.c: 743: break;
  5158  000BEA  D06A               	goto	l295
  5159  000BEC                     l3807:
  5160  000BEC  FFFF               	dw	65535	; assembler added errata NOP
  5161                           
  5162                           ;clock.c: 745: osc2_period = freqs[song_ptr->freq];
  5163  000BEE  0E02               	movlw	2
  5164  000BF0  242E               	addwf	_song_ptr,w,c
  5165  000BF2  6EF6               	movwf	tblptrl,c
  5166  000BF4  0E00               	movlw	0
  5167  000BF6  202F               	addwfc	_song_ptr+1,w,c
  5168  000BF8  6EF7               	movwf	tblptrh,c
  5169  000BFA  0E00               	movlw	0
  5170  000BFC  2030               	addwfc	_song_ptr+2,w,c
  5171  000BFE  6EF8               	movwf	tblptru,c
  5172  000C00  0008               	tblrd		*
  5173  000C02  FFFF               	dw	65535	; errata NOP
  5174  000C04  50F5               	movf	tablat,w,c
  5175  000C06  0D02               	mullw	2
  5176  000C08  0E5B               	movlw	low _freqs
  5177  000C0A  24F3               	addwf	prodl,w,c
  5178  000C0C  6EF6               	movwf	tblptrl,c
  5179  000C0E  0EB9               	movlw	high _freqs
  5180  000C10  20F4               	addwfc	prodh,w,c
  5181  000C12  6EF7               	movwf	tblptrh,c
  5182  000C14                     	if	0	;There are less than 3 active tblptr bytes
  5183  000C14                     	endif
  5184  000C14  0009               	tblrd		*+
  5185  000C16  FFFF               	dw	65535	; errata NOP
  5186  000C18  CFF5 F097          	movff	tablat,_osc2_period
  5187  000C1C  000A               	tblrd		*-
  5188  000C1E  FFFF               	dw	65535	; errata NOP
  5189  000C20  CFF5 F098          	movff	tablat,_osc2_period+1
  5190                           
  5191                           ;clock.c: 746: osc2_volume = song_ptr->volume;
  5192  000C24  0E03               	movlw	3
  5193  000C26  242E               	addwf	_song_ptr,w,c
  5194  000C28  6EF6               	movwf	tblptrl,c
  5195  000C2A  0E00               	movlw	0
  5196  000C2C  202F               	addwfc	_song_ptr+1,w,c
  5197  000C2E  6EF7               	movwf	tblptrh,c
  5198  000C30  0E00               	movlw	0
  5199  000C32  2030               	addwfc	_song_ptr+2,w,c
  5200  000C34  6EF8               	movwf	tblptru,c
  5201  000C36  0008               	tblrd		*
  5202  000C38  FFFF               	dw	65535	; errata NOP
  5203  000C3A  CFF5 F09C          	movff	tablat,_osc2_volume
  5204                           
  5205                           ;clock.c: 747: break;
  5206  000C3E  D040               	goto	l295
  5207  000C40                     l3811:
  5208  000C40  FFFF               	dw	65535	; assembler added errata NOP
  5209                           
  5210                           ;clock.c: 749: osc3_period = freqs[song_ptr->freq];
  5211  000C42  0E02               	movlw	2
  5212  000C44  242E               	addwf	_song_ptr,w,c
  5213  000C46  6EF6               	movwf	tblptrl,c
  5214  000C48  0E00               	movlw	0
  5215  000C4A  202F               	addwfc	_song_ptr+1,w,c
  5216  000C4C  6EF7               	movwf	tblptrh,c
  5217  000C4E  0E00               	movlw	0
  5218  000C50  2030               	addwfc	_song_ptr+2,w,c
  5219  000C52  6EF8               	movwf	tblptru,c
  5220  000C54  0008               	tblrd		*
  5221  000C56  FFFF               	dw	65535	; errata NOP
  5222  000C58  50F5               	movf	tablat,w,c
  5223  000C5A  0D02               	mullw	2
  5224  000C5C  0E5B               	movlw	low _freqs
  5225  000C5E  24F3               	addwf	prodl,w,c
  5226  000C60  6EF6               	movwf	tblptrl,c
  5227  000C62  0EB9               	movlw	high _freqs
  5228  000C64  20F4               	addwfc	prodh,w,c
  5229  000C66  6EF7               	movwf	tblptrh,c
  5230  000C68                     	if	0	;There are less than 3 active tblptr bytes
  5231  000C68                     	endif
  5232  000C68  0009               	tblrd		*+
  5233  000C6A  FFFF               	dw	65535	; errata NOP
  5234  000C6C  CFF5 F095          	movff	tablat,_osc3_period
  5235  000C70  000A               	tblrd		*-
  5236  000C72  FFFF               	dw	65535	; errata NOP
  5237  000C74  CFF5 F096          	movff	tablat,_osc3_period+1
  5238                           
  5239                           ;clock.c: 750: osc3_volume = song_ptr->volume;
  5240  000C78  0E03               	movlw	3
  5241  000C7A  242E               	addwf	_song_ptr,w,c
  5242  000C7C  6EF6               	movwf	tblptrl,c
  5243  000C7E  0E00               	movlw	0
  5244  000C80  202F               	addwfc	_song_ptr+1,w,c
  5245  000C82  6EF7               	movwf	tblptrh,c
  5246  000C84  0E00               	movlw	0
  5247  000C86  2030               	addwfc	_song_ptr+2,w,c
  5248  000C88  6EF8               	movwf	tblptru,c
  5249  000C8A  0008               	tblrd		*
  5250  000C8C  FFFF               	dw	65535	; errata NOP
  5251  000C8E  CFF5 F09B          	movff	tablat,_osc3_volume
  5252                           
  5253                           ;clock.c: 752: }
  5254                           
  5255                           ;clock.c: 751: break;
  5256  000C92  D016               	goto	l295
  5257  000C94                     l3817:
  5258  000C94  FFFF               	dw	65535	; assembler added errata NOP
  5259  000C96  0E01               	movlw	1
  5260  000C98  242E               	addwf	_song_ptr,w,c
  5261  000C9A  6EF6               	movwf	tblptrl,c
  5262  000C9C  0E00               	movlw	0
  5263  000C9E  202F               	addwfc	_song_ptr+1,w,c
  5264  000CA0  6EF7               	movwf	tblptrh,c
  5265  000CA2  0E00               	movlw	0
  5266  000CA4  2030               	addwfc	_song_ptr+2,w,c
  5267  000CA6  6EF8               	movwf	tblptru,c
  5268  000CA8  0008               	tblrd		*
  5269  000CAA  FFFF               	dw	65535	; errata NOP
  5270  000CAC  50F5               	movf	tablat,w,c
  5271                           
  5272                           ; Switch size 1, requested type "space"
  5273                           ; Number of cases is 3, Range of values is 0 to 2
  5274                           ; switch strategies available:
  5275                           ; Name         Instructions Cycles
  5276                           ; simple_byte           10     6 (average)
  5277                           ;	Chosen strategy is simple_byte
  5278  000CAE  0A00               	xorlw	0	; case 0
  5279  000CB0  B4D8               	btfsc	status,2,c
  5280  000CB2  D772               	goto	l3803
  5281  000CB4  0A01               	xorlw	1	; case 1
  5282  000CB6  B4D8               	btfsc	status,2,c
  5283  000CB8  D799               	goto	l3807
  5284  000CBA  0A03               	xorlw	3	; case 2
  5285  000CBC  B4D8               	btfsc	status,2,c
  5286  000CBE  D7C0               	goto	l3811
  5287  000CC0                     l295:
  5288  000CC0  FFFF               	dw	65535	; assembler added errata NOP
  5289                           
  5290                           ;clock.c: 753: PIE1bits.TMR2IE = 1;
  5291  000CC2  829D               	bsf	3997,1,c	;volatile
  5292                           
  5293                           ;clock.c: 756: song_ptr++;
  5294  000CC4  0E04               	movlw	4
  5295  000CC6  262E               	addwf	_song_ptr,f,c
  5296  000CC8  0E00               	movlw	0
  5297  000CCA  222F               	addwfc	_song_ptr+1,f,c
  5298  000CCC  0E00               	movlw	0
  5299  000CCE  2230               	addwfc	_song_ptr+2,f,c
  5300                           
  5301                           ;clock.c: 757: song_delay = 0;
  5302  000CD0  0E00               	movlw	0
  5303  000CD2  6E43               	movwf	_song_delay,c
  5304                           
  5305                           ;clock.c: 759: if(song_ptr->osc == 0xff)
  5306  000CD4  0E01               	movlw	1
  5307  000CD6  242E               	addwf	_song_ptr,w,c
  5308  000CD8  6EF6               	movwf	tblptrl,c
  5309  000CDA  0E00               	movlw	0
  5310  000CDC  202F               	addwfc	_song_ptr+1,w,c
  5311  000CDE  6EF7               	movwf	tblptrh,c
  5312  000CE0  0E00               	movlw	0
  5313  000CE2  2030               	addwfc	_song_ptr+2,w,c
  5314  000CE4  6EF8               	movwf	tblptru,c
  5315  000CE6  0008               	tblrd		*
  5316  000CE8  FFFF               	dw	65535	; errata NOP
  5317  000CEA  50F5               	movf	tablat,w,c
  5318  000CEC  0AFF               	xorlw	255
  5319  000CEE  A4D8               	btfss	status,2,c
  5320  000CF0  D023               	goto	l292
  5321                           
  5322                           ;clock.c: 760: {
  5323                           ;clock.c: 761: if(alarm_sounding)
  5324  000CF2  5037               	movf	_alarm_sounding,w,c
  5325  000CF4  B4D8               	btfsc	status,2,c
  5326  000CF6  D018               	goto	l3837
  5327                           
  5328                           ;clock.c: 762: {
  5329                           ;clock.c: 764: if(alarm_time > (4 * 60))
  5330  000CF8  0EF0               	movlw	240
  5331  000CFA  6436               	cpfsgt	_alarm_time,c
  5332  000CFC  D00B               	goto	l3835
  5333                           
  5334                           ;clock.c: 765: {
  5335                           ;clock.c: 766: song_ptr = 0;
  5336  000CFE  0E00               	movlw	0
  5337  000D00  6E2E               	movwf	_song_ptr,c
  5338  000D02  0E00               	movlw	0
  5339  000D04  6E2F               	movwf	_song_ptr+1,c
  5340  000D06  0E00               	movlw	0
  5341  000D08  6E30               	movwf	_song_ptr+2,c
  5342                           
  5343                           ;clock.c: 767: alarm_sounding = 0;
  5344  000D0A  0E00               	movlw	0
  5345  000D0C  6E37               	movwf	_alarm_sounding,c
  5346                           
  5347                           ;clock.c: 768: alarm_time = 0;
  5348  000D0E  0E00               	movlw	0
  5349  000D10  6E36               	movwf	_alarm_time,c
  5350                           
  5351                           ;clock.c: 769: }
  5352  000D12  D012               	goto	l292
  5353  000D14                     l3835:
  5354  000D14  FFFF               	dw	65535	; assembler added errata NOP
  5355                           
  5356                           ;clock.c: 770: else
  5357                           ;clock.c: 771: {
  5358                           ;clock.c: 772: song_ptr = alarm_song;
  5359  000D16  0E25               	movlw	low _alarm_song
  5360  000D18  6E2E               	movwf	_song_ptr,c
  5361  000D1A  0EBE               	movlw	high _alarm_song
  5362  000D1C  6E2F               	movwf	_song_ptr+1,c
  5363  000D1E  502E               	movf	_song_ptr,w,c
  5364  000D20  102F               	iorwf	_song_ptr+1,w,c
  5365  000D22  A4D8               	btfss	status,2,c
  5366  000D24  0E00               	movlw	low (__mediumconst shr (0+16))
  5367  000D26  D006               	goto	L1
  5368  000D28                     l3837:
  5369  000D28  FFFF               	dw	65535	; assembler added errata NOP
  5370                           
  5371                           ;clock.c: 775: else
  5372                           ;clock.c: 776: {
  5373                           ;clock.c: 777: song_ptr = 0;
  5374  000D2A  0E00               	movlw	0
  5375  000D2C  6E2E               	movwf	_song_ptr,c
  5376  000D2E  0E00               	movlw	0
  5377  000D30  6E2F               	movwf	_song_ptr+1,c
  5378  000D32  0E00               	movlw	0
  5379  000D34                     L1:
  5380  000D34  FFFF               	dw	65535	; assembler added errata NOP
  5381  000D36  6E30               	movwf	_song_ptr+2,c
  5382  000D38                     l292:
  5383  000D38  FFFF               	dw	65535	; assembler added errata NOP
  5384                           
  5385                           ;clock.c: 778: }
  5386                           ;clock.c: 779: }
  5387                           ;clock.c: 780: }
  5388                           ;clock.c: 781: } while(song_ptr && song_ptr->delay == 0);
  5389  000D3A  502E               	movf	_song_ptr,w,c
  5390  000D3C  102F               	iorwf	_song_ptr+1,w,c
  5391  000D3E  1030               	iorwf	_song_ptr+2,w,c
  5392  000D40  B4D8               	btfsc	status,2,c
  5393  000D42  D00C               	goto	l306
  5394  000D44  C02E  FFF6         	movff	_song_ptr,tblptrl
  5395  000D48  C02F  FFF7         	movff	_song_ptr+1,tblptrh
  5396  000D4C  C030  FFF8         	movff	_song_ptr+2,tblptru
  5397  000D50  0008               	tblrd		*
  5398  000D52  FFFF               	dw	65535	; errata NOP
  5399  000D54  50F5               	movf	tablat,w,c
  5400  000D56  0900               	iorlw	0
  5401  000D58  B4D8               	btfsc	status,2,c
  5402  000D5A  D70F               	goto	l3799
  5403  000D5C                     l306:
  5404  000D5C  FFFF               	dw	65535	; assembler added errata NOP
  5405  000D5E  0012               	return		;funcret
  5406  000D60  FFFF               	dw	65535	; errata NOP
  5407  000D62                     __end_of_handle_song:
  5408                           	opt stack 0
  5409                           tblptru	equ	0xFF8
  5410                           tblptrh	equ	0xFF7
  5411                           tblptrl	equ	0xFF6
  5412                           tablat	equ	0xFF5
  5413                           prodh	equ	0xFF4
  5414                           prodl	equ	0xFF3
  5415                           intcon	equ	0xFF2
  5416                           intcon2	equ	0xFF1
  5417                           intcon3	equ	0xFF0
  5418                           postinc0	equ	0xFEE
  5419                           wreg	equ	0xFE8
  5420                           postdec1	equ	0xFE5
  5421                           fsr1h	equ	0xFE2
  5422                           fsr1l	equ	0xFE1
  5423                           indf2	equ	0xFDF
  5424                           fsr2h	equ	0xFDA
  5425                           fsr2l	equ	0xFD9
  5426                           status	equ	0xFD8
  5427                           
  5428 ;; *************** function _draw_test *****************
  5429 ;; Defined at:
  5430 ;;		line 925 in file "clock.c"
  5431 ;; Parameters:    Size  Location     Type
  5432 ;;		None
  5433 ;; Auto vars:     Size  Location     Type
  5434 ;;		None
  5435 ;; Return value:  Size  Location     Type
  5436 ;;                  1    wreg      void 
  5437 ;; Registers used:
  5438 ;;		wreg, status,2, status,0, cstack
  5439 ;; Tracked objects:
  5440 ;;		On entry : 0/0
  5441 ;;		On exit  : 0/0
  5442 ;;		Unchanged: 0/0
  5443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5448 ;;Total ram usage:        0 bytes
  5449 ;; Hardware stack levels used:    1
  5450 ;; Hardware stack levels required when called:    3
  5451 ;; This function calls:
  5452 ;;		_write_leds
  5453 ;; This function is called by:
  5454 ;;		_handle_ir
  5455 ;; This function uses a non-reentrant model
  5456 ;;
  5457                           
  5458                           	psect	text14
  5459  001C82                     __ptext14:
  5460                           	opt stack 0
  5461  001C82                     _draw_test:
  5462                           	opt stack 0
  5463  001C82  FFFF               	dw	65535	; assembler added errata NOP
  5464                           
  5465                           ;clock.c: 927: led_mask3 = 0xff;
  5466                           
  5467                           ;incstack = 0
  5468  001C84  6833               	setf	_led_mask3,c
  5469                           
  5470                           ;clock.c: 928: led_mask2 = 0xff;
  5471  001C86  6834               	setf	_led_mask2,c
  5472                           
  5473                           ;clock.c: 929: led_mask1 = 0xff;
  5474  001C88  6835               	setf	_led_mask1,c
  5475                           
  5476                           ;clock.c: 930: led_mask0 = 0xff;
  5477  001C8A  684B               	setf	_led_mask0,c
  5478                           
  5479                           ;clock.c: 931: write_leds();
  5480  001C8C  ECED  F002         	call	_write_leds	;wreg free
  5481  001C90  0012               	return		;funcret
  5482  001C92  FFFF               	dw	65535	; errata NOP
  5483  001C94                     __end_of_draw_test:
  5484                           	opt stack 0
  5485                           tblptru	equ	0xFF8
  5486                           tblptrh	equ	0xFF7
  5487                           tblptrl	equ	0xFF6
  5488                           tablat	equ	0xFF5
  5489                           prodh	equ	0xFF4
  5490                           prodl	equ	0xFF3
  5491                           intcon	equ	0xFF2
  5492                           intcon2	equ	0xFF1
  5493                           intcon3	equ	0xFF0
  5494                           postinc0	equ	0xFEE
  5495                           wreg	equ	0xFE8
  5496                           postdec1	equ	0xFE5
  5497                           fsr1h	equ	0xFE2
  5498                           fsr1l	equ	0xFE1
  5499                           indf2	equ	0xFDF
  5500                           fsr2h	equ	0xFDA
  5501                           fsr2l	equ	0xFD9
  5502                           status	equ	0xFD8
  5503                           
  5504 ;; *************** function _do_minute_up *****************
  5505 ;; Defined at:
  5506 ;;		line 1131 in file "clock.c"
  5507 ;; Parameters:    Size  Location     Type
  5508 ;;		None
  5509 ;; Auto vars:     Size  Location     Type
  5510 ;;		None
  5511 ;; Return value:  Size  Location     Type
  5512 ;;                  1    wreg      void 
  5513 ;; Registers used:
  5514 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5515 ;; Tracked objects:
  5516 ;;		On entry : 0/0
  5517 ;;		On exit  : 0/0
  5518 ;;		Unchanged: 0/0
  5519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5524 ;;Total ram usage:        0 bytes
  5525 ;; Hardware stack levels used:    1
  5526 ;; Hardware stack levels required when called:    5
  5527 ;; This function calls:
  5528 ;;		_increment_alarm_minutes
  5529 ;;		_increment_time_minutes
  5530 ;; This function is called by:
  5531 ;;		_handle_repeat
  5532 ;;		_handle_ir
  5533 ;; This function uses a non-reentrant model
  5534 ;;
  5535                           
  5536                           	psect	text15
  5537  001BE2                     __ptext15:
  5538                           	opt stack 0
  5539  001BE2                     _do_minute_up:
  5540                           	opt stack 0
  5541  001BE2  FFFF               	dw	65535	; assembler added errata NOP
  5542                           
  5543                           ;clock.c: 1133: if(mode == 1)
  5544                           
  5545                           ;incstack = 0
  5546  001BE4  043C               	decf	_mode,w,c
  5547  001BE6  A4D8               	btfss	status,2,c
  5548  001BE8  D003               	goto	l4085
  5549                           
  5550                           ;clock.c: 1134: {
  5551                           ;clock.c: 1135: increment_time_minutes();
  5552  001BEA  ECA4  F00D         	call	_increment_time_minutes	;wreg free
  5553                           
  5554                           ;clock.c: 1136: }
  5555  001BEE  D006               	goto	l403
  5556  001BF0                     l4085:
  5557  001BF0  FFFF               	dw	65535	; assembler added errata NOP
  5558                           
  5559                           ;clock.c: 1137: else
  5560                           ;clock.c: 1138: if(mode == 2)
  5561  001BF2  0E02               	movlw	2
  5562  001BF4  183C               	xorwf	_mode,w,c
  5563  001BF6  B4D8               	btfsc	status,2,c
  5564                           
  5565                           ;clock.c: 1139: {
  5566                           ;clock.c: 1140: increment_alarm_minutes();
  5567  001BF8  EC11  F00E         	call	_increment_alarm_minutes	;wreg free
  5568  001BFC                     l403:
  5569  001BFC  FFFF               	dw	65535	; assembler added errata NOP
  5570  001BFE  0012               	return		;funcret
  5571  001C00  FFFF               	dw	65535	; errata NOP
  5572  001C02                     __end_of_do_minute_up:
  5573                           	opt stack 0
  5574                           tblptru	equ	0xFF8
  5575                           tblptrh	equ	0xFF7
  5576                           tblptrl	equ	0xFF6
  5577                           tablat	equ	0xFF5
  5578                           prodh	equ	0xFF4
  5579                           prodl	equ	0xFF3
  5580                           intcon	equ	0xFF2
  5581                           intcon2	equ	0xFF1
  5582                           intcon3	equ	0xFF0
  5583                           postinc0	equ	0xFEE
  5584                           wreg	equ	0xFE8
  5585                           postdec1	equ	0xFE5
  5586                           fsr1h	equ	0xFE2
  5587                           fsr1l	equ	0xFE1
  5588                           indf2	equ	0xFDF
  5589                           fsr2h	equ	0xFDA
  5590                           fsr2l	equ	0xFD9
  5591                           status	equ	0xFD8
  5592                           
  5593 ;; *************** function _increment_time_minutes *****************
  5594 ;; Defined at:
  5595 ;;		line 935 in file "clock.c"
  5596 ;; Parameters:    Size  Location     Type
  5597 ;;		None
  5598 ;; Auto vars:     Size  Location     Type
  5599 ;;		None
  5600 ;; Return value:  Size  Location     Type
  5601 ;;                  1    wreg      void 
  5602 ;; Registers used:
  5603 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5604 ;; Tracked objects:
  5605 ;;		On entry : 0/0
  5606 ;;		On exit  : 0/0
  5607 ;;		Unchanged: 0/0
  5608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5612 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5613 ;;Total ram usage:        0 bytes
  5614 ;; Hardware stack levels used:    1
  5615 ;; Hardware stack levels required when called:    4
  5616 ;; This function calls:
  5617 ;;		_draw_time
  5618 ;; This function is called by:
  5619 ;;		_do_minute_up
  5620 ;; This function uses a non-reentrant model
  5621 ;;
  5622                           
  5623                           	psect	text16
  5624  001B48                     __ptext16:
  5625                           	opt stack 0
  5626  001B48                     _increment_time_minutes:
  5627                           	opt stack 0
  5628  001B48  FFFF               	dw	65535	; assembler added errata NOP
  5629                           
  5630                           ;clock.c: 937: crystal_time = 0;
  5631                           
  5632                           ;incstack = 0
  5633  001B4A  0E00               	movlw	0
  5634  001B4C  0100               	movlb	0	; () banked
  5635  001B4E  6F6D               	movwf	(_crystal_time+1)& (0+255),b
  5636  001B50  0E00               	movlw	0
  5637  001B52  6F6C               	movwf	_crystal_time& (0+255),b
  5638                           
  5639                           ;clock.c: 938: display_flash = 0;
  5640  001B54  0E00               	movlw	0
  5641  001B56  6E42               	movwf	_display_flash,c
  5642                           
  5643                           ;clock.c: 939: time_hz = 0;
  5644  001B58  0E00               	movlw	0
  5645  001B5A  6E41               	movwf	_time_hz,c
  5646                           
  5647                           ;clock.c: 940: seconds = 0;
  5648  001B5C  0E00               	movlw	0
  5649  001B5E  6E40               	movwf	_seconds,c
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;clock.c: 941: minutes++;
  5653  001B60  2A3F               	incf	_minutes,f,c
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;clock.c: 942: if(minutes == 60)
  5657  001B62  0E3C               	movlw	60
  5658  001B64  183F               	xorwf	_minutes,w,c
  5659  001B66  A4D8               	btfss	status,2,c
  5660  001B68  D002               	goto	l336
  5661                           
  5662                           ; BSR set to: 0
  5663                           ;clock.c: 943: {
  5664                           ;clock.c: 944: minutes = 0;
  5665  001B6A  0E00               	movlw	0
  5666  001B6C  6E3F               	movwf	_minutes,c
  5667  001B6E                     l336:
  5668  001B6E  FFFF               	dw	65535	; assembler added errata NOP
  5669                           
  5670                           ; BSR set to: 0
  5671                           ;clock.c: 945: }
  5672                           ;clock.c: 946: not_set = 0;
  5673  001B70  0E00               	movlw	0
  5674  001B72  6E48               	movwf	_not_set,c
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;clock.c: 947: draw_time();
  5678  001B74  ECB1  F006         	call	_draw_time	;wreg free
  5679  001B78  0012               	return		;funcret
  5680  001B7A  FFFF               	dw	65535	; errata NOP
  5681  001B7C                     __end_of_increment_time_minutes:
  5682                           	opt stack 0
  5683                           tblptru	equ	0xFF8
  5684                           tblptrh	equ	0xFF7
  5685                           tblptrl	equ	0xFF6
  5686                           tablat	equ	0xFF5
  5687                           prodh	equ	0xFF4
  5688                           prodl	equ	0xFF3
  5689                           intcon	equ	0xFF2
  5690                           intcon2	equ	0xFF1
  5691                           intcon3	equ	0xFF0
  5692                           postinc0	equ	0xFEE
  5693                           wreg	equ	0xFE8
  5694                           postdec1	equ	0xFE5
  5695                           fsr1h	equ	0xFE2
  5696                           fsr1l	equ	0xFE1
  5697                           indf2	equ	0xFDF
  5698                           fsr2h	equ	0xFDA
  5699                           fsr2l	equ	0xFD9
  5700                           status	equ	0xFD8
  5701                           
  5702 ;; *************** function _increment_alarm_minutes *****************
  5703 ;; Defined at:
  5704 ;;		line 950 in file "clock.c"
  5705 ;; Parameters:    Size  Location     Type
  5706 ;;		None
  5707 ;; Auto vars:     Size  Location     Type
  5708 ;;		None
  5709 ;; Return value:  Size  Location     Type
  5710 ;;                  1    wreg      void 
  5711 ;; Registers used:
  5712 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5713 ;; Tracked objects:
  5714 ;;		On entry : 0/0
  5715 ;;		On exit  : 0/0
  5716 ;;		Unchanged: 0/0
  5717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5722 ;;Total ram usage:        0 bytes
  5723 ;; Hardware stack levels used:    1
  5724 ;; Hardware stack levels required when called:    4
  5725 ;; This function calls:
  5726 ;;		_draw_alarm
  5727 ;; This function is called by:
  5728 ;;		_do_minute_up
  5729 ;; This function uses a non-reentrant model
  5730 ;;
  5731                           
  5732                           	psect	text17
  5733  001C22                     __ptext17:
  5734                           	opt stack 0
  5735  001C22                     _increment_alarm_minutes:
  5736                           	opt stack 0
  5737  001C22  FFFF               	dw	65535	; assembler added errata NOP
  5738                           
  5739                           ;clock.c: 952: alarm_minutes++;
  5740                           
  5741                           ;incstack = 0
  5742  001C24  2A39               	incf	_alarm_minutes,f,c
  5743                           
  5744                           ;clock.c: 953: if(alarm_minutes == 60)
  5745  001C26  0E3C               	movlw	60
  5746  001C28  1839               	xorwf	_alarm_minutes,w,c
  5747  001C2A  A4D8               	btfss	status,2,c
  5748  001C2C  D002               	goto	l3857
  5749                           
  5750                           ;clock.c: 954: {
  5751                           ;clock.c: 955: alarm_minutes = 0;
  5752  001C2E  0E00               	movlw	0
  5753  001C30  6E39               	movwf	_alarm_minutes,c
  5754  001C32                     l3857:
  5755  001C32  FFFF               	dw	65535	; assembler added errata NOP
  5756                           
  5757                           ;clock.c: 956: }
  5758                           ;clock.c: 957: draw_alarm();
  5759  001C34  EC82  F008         	call	_draw_alarm	;wreg free
  5760  001C38  0012               	return		;funcret
  5761  001C3A  FFFF               	dw	65535	; errata NOP
  5762  001C3C                     __end_of_increment_alarm_minutes:
  5763                           	opt stack 0
  5764                           tblptru	equ	0xFF8
  5765                           tblptrh	equ	0xFF7
  5766                           tblptrl	equ	0xFF6
  5767                           tablat	equ	0xFF5
  5768                           prodh	equ	0xFF4
  5769                           prodl	equ	0xFF3
  5770                           intcon	equ	0xFF2
  5771                           intcon2	equ	0xFF1
  5772                           intcon3	equ	0xFF0
  5773                           postinc0	equ	0xFEE
  5774                           wreg	equ	0xFE8
  5775                           postdec1	equ	0xFE5
  5776                           fsr1h	equ	0xFE2
  5777                           fsr1l	equ	0xFE1
  5778                           indf2	equ	0xFDF
  5779                           fsr2h	equ	0xFDA
  5780                           fsr2l	equ	0xFD9
  5781                           status	equ	0xFD8
  5782                           
  5783 ;; *************** function _do_minute_down *****************
  5784 ;; Defined at:
  5785 ;;		line 1144 in file "clock.c"
  5786 ;; Parameters:    Size  Location     Type
  5787 ;;		None
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;		None
  5790 ;; Return value:  Size  Location     Type
  5791 ;;                  1    wreg      void 
  5792 ;; Registers used:
  5793 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5794 ;; Tracked objects:
  5795 ;;		On entry : 0/0
  5796 ;;		On exit  : 0/0
  5797 ;;		Unchanged: 0/0
  5798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5803 ;;Total ram usage:        0 bytes
  5804 ;; Hardware stack levels used:    1
  5805 ;; Hardware stack levels required when called:    5
  5806 ;; This function calls:
  5807 ;;		_decrement_alarm_minutes
  5808 ;;		_decrement_time_minutes
  5809 ;; This function is called by:
  5810 ;;		_handle_repeat
  5811 ;;		_handle_ir
  5812 ;; This function uses a non-reentrant model
  5813 ;;
  5814                           
  5815                           	psect	text18
  5816  001C02                     __ptext18:
  5817                           	opt stack 0
  5818  001C02                     _do_minute_down:
  5819                           	opt stack 0
  5820  001C02  FFFF               	dw	65535	; assembler added errata NOP
  5821                           
  5822                           ;clock.c: 1146: if(mode == 1)
  5823                           
  5824                           ;incstack = 0
  5825  001C04  043C               	decf	_mode,w,c
  5826  001C06  A4D8               	btfss	status,2,c
  5827  001C08  D003               	goto	l4093
  5828                           
  5829                           ;clock.c: 1147: {
  5830                           ;clock.c: 1148: decrement_time_minutes();
  5831  001C0A  ECD8  F00D         	call	_decrement_time_minutes	;wreg free
  5832                           
  5833                           ;clock.c: 1149: }
  5834  001C0E  D006               	goto	l409
  5835  001C10                     l4093:
  5836  001C10  FFFF               	dw	65535	; assembler added errata NOP
  5837                           
  5838                           ;clock.c: 1150: else
  5839                           ;clock.c: 1151: if(mode == 2)
  5840  001C12  0E02               	movlw	2
  5841  001C14  183C               	xorwf	_mode,w,c
  5842  001C16  B4D8               	btfsc	status,2,c
  5843                           
  5844                           ;clock.c: 1152: {
  5845                           ;clock.c: 1153: decrement_alarm_minutes();
  5846  001C18  EC2A  F00E         	call	_decrement_alarm_minutes	;wreg free
  5847  001C1C                     l409:
  5848  001C1C  FFFF               	dw	65535	; assembler added errata NOP
  5849  001C1E  0012               	return		;funcret
  5850  001C20  FFFF               	dw	65535	; errata NOP
  5851  001C22                     __end_of_do_minute_down:
  5852                           	opt stack 0
  5853                           tblptru	equ	0xFF8
  5854                           tblptrh	equ	0xFF7
  5855                           tblptrl	equ	0xFF6
  5856                           tablat	equ	0xFF5
  5857                           prodh	equ	0xFF4
  5858                           prodl	equ	0xFF3
  5859                           intcon	equ	0xFF2
  5860                           intcon2	equ	0xFF1
  5861                           intcon3	equ	0xFF0
  5862                           postinc0	equ	0xFEE
  5863                           wreg	equ	0xFE8
  5864                           postdec1	equ	0xFE5
  5865                           fsr1h	equ	0xFE2
  5866                           fsr1l	equ	0xFE1
  5867                           indf2	equ	0xFDF
  5868                           fsr2h	equ	0xFDA
  5869                           fsr2l	equ	0xFD9
  5870                           status	equ	0xFD8
  5871                           
  5872 ;; *************** function _decrement_time_minutes *****************
  5873 ;; Defined at:
  5874 ;;		line 960 in file "clock.c"
  5875 ;; Parameters:    Size  Location     Type
  5876 ;;		None
  5877 ;; Auto vars:     Size  Location     Type
  5878 ;;		None
  5879 ;; Return value:  Size  Location     Type
  5880 ;;                  1    wreg      void 
  5881 ;; Registers used:
  5882 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5883 ;; Tracked objects:
  5884 ;;		On entry : 0/0
  5885 ;;		On exit  : 0/0
  5886 ;;		Unchanged: 0/0
  5887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5892 ;;Total ram usage:        0 bytes
  5893 ;; Hardware stack levels used:    1
  5894 ;; Hardware stack levels required when called:    4
  5895 ;; This function calls:
  5896 ;;		_draw_time
  5897 ;; This function is called by:
  5898 ;;		_do_minute_down
  5899 ;; This function uses a non-reentrant model
  5900 ;;
  5901                           
  5902                           	psect	text19
  5903  001BB0                     __ptext19:
  5904                           	opt stack 0
  5905  001BB0                     _decrement_time_minutes:
  5906                           	opt stack 0
  5907  001BB0  FFFF               	dw	65535	; assembler added errata NOP
  5908                           
  5909                           ;clock.c: 962: crystal_time = 0;
  5910                           
  5911                           ;incstack = 0
  5912  001BB2  0E00               	movlw	0
  5913  001BB4  0100               	movlb	0	; () banked
  5914  001BB6  6F6D               	movwf	(_crystal_time+1)& (0+255),b
  5915  001BB8  0E00               	movlw	0
  5916  001BBA  6F6C               	movwf	_crystal_time& (0+255),b
  5917                           
  5918                           ;clock.c: 963: display_flash = 0;
  5919  001BBC  0E00               	movlw	0
  5920  001BBE  6E42               	movwf	_display_flash,c
  5921                           
  5922                           ;clock.c: 964: time_hz = 0;
  5923  001BC0  0E00               	movlw	0
  5924  001BC2  6E41               	movwf	_time_hz,c
  5925                           
  5926                           ;clock.c: 965: seconds = 0;
  5927  001BC4  0E00               	movlw	0
  5928  001BC6  6E40               	movwf	_seconds,c
  5929                           
  5930                           ; BSR set to: 0
  5931                           ;clock.c: 966: minutes--;
  5932  001BC8  063F               	decf	_minutes,f,c
  5933                           
  5934                           ; BSR set to: 0
  5935                           ;clock.c: 967: if(minutes == 0xff)
  5936  001BCA  283F               	incf	_minutes,w,c
  5937  001BCC  A4D8               	btfss	status,2,c
  5938  001BCE  D002               	goto	l344
  5939                           
  5940                           ; BSR set to: 0
  5941                           ;clock.c: 968: {
  5942                           ;clock.c: 969: minutes = 59;
  5943  001BD0  0E3B               	movlw	59
  5944  001BD2  6E3F               	movwf	_minutes,c
  5945  001BD4                     l344:
  5946  001BD4  FFFF               	dw	65535	; assembler added errata NOP
  5947                           
  5948                           ; BSR set to: 0
  5949                           ;clock.c: 970: }
  5950                           ;clock.c: 971: not_set = 0;
  5951  001BD6  0E00               	movlw	0
  5952  001BD8  6E48               	movwf	_not_set,c
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;clock.c: 973: draw_time();
  5956  001BDA  ECB1  F006         	call	_draw_time	;wreg free
  5957  001BDE  0012               	return		;funcret
  5958  001BE0  FFFF               	dw	65535	; errata NOP
  5959  001BE2                     __end_of_decrement_time_minutes:
  5960                           	opt stack 0
  5961                           tblptru	equ	0xFF8
  5962                           tblptrh	equ	0xFF7
  5963                           tblptrl	equ	0xFF6
  5964                           tablat	equ	0xFF5
  5965                           prodh	equ	0xFF4
  5966                           prodl	equ	0xFF3
  5967                           intcon	equ	0xFF2
  5968                           intcon2	equ	0xFF1
  5969                           intcon3	equ	0xFF0
  5970                           postinc0	equ	0xFEE
  5971                           wreg	equ	0xFE8
  5972                           postdec1	equ	0xFE5
  5973                           fsr1h	equ	0xFE2
  5974                           fsr1l	equ	0xFE1
  5975                           indf2	equ	0xFDF
  5976                           fsr2h	equ	0xFDA
  5977                           fsr2l	equ	0xFD9
  5978                           status	equ	0xFD8
  5979                           
  5980 ;; *************** function _decrement_alarm_minutes *****************
  5981 ;; Defined at:
  5982 ;;		line 976 in file "clock.c"
  5983 ;; Parameters:    Size  Location     Type
  5984 ;;		None
  5985 ;; Auto vars:     Size  Location     Type
  5986 ;;		None
  5987 ;; Return value:  Size  Location     Type
  5988 ;;                  1    wreg      void 
  5989 ;; Registers used:
  5990 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5991 ;; Tracked objects:
  5992 ;;		On entry : 0/0
  5993 ;;		On exit  : 0/0
  5994 ;;		Unchanged: 0/0
  5995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6000 ;;Total ram usage:        0 bytes
  6001 ;; Hardware stack levels used:    1
  6002 ;; Hardware stack levels required when called:    4
  6003 ;; This function calls:
  6004 ;;		_draw_alarm
  6005 ;; This function is called by:
  6006 ;;		_do_minute_down
  6007 ;; This function uses a non-reentrant model
  6008 ;;
  6009                           
  6010                           	psect	text20
  6011  001C54                     __ptext20:
  6012                           	opt stack 0
  6013  001C54                     _decrement_alarm_minutes:
  6014                           	opt stack 0
  6015  001C54  FFFF               	dw	65535	; assembler added errata NOP
  6016                           
  6017                           ;clock.c: 978: alarm_minutes--;
  6018                           
  6019                           ;incstack = 0
  6020  001C56  0639               	decf	_alarm_minutes,f,c
  6021                           
  6022                           ;clock.c: 979: if(alarm_minutes == 0xff)
  6023  001C58  2839               	incf	_alarm_minutes,w,c
  6024  001C5A  A4D8               	btfss	status,2,c
  6025  001C5C  D002               	goto	l3875
  6026                           
  6027                           ;clock.c: 980: {
  6028                           ;clock.c: 981: alarm_minutes = 59;
  6029  001C5E  0E3B               	movlw	59
  6030  001C60  6E39               	movwf	_alarm_minutes,c
  6031  001C62                     l3875:
  6032  001C62  FFFF               	dw	65535	; assembler added errata NOP
  6033                           
  6034                           ;clock.c: 982: }
  6035                           ;clock.c: 983: draw_alarm();
  6036  001C64  EC82  F008         	call	_draw_alarm	;wreg free
  6037  001C68  0012               	return		;funcret
  6038  001C6A  FFFF               	dw	65535	; errata NOP
  6039  001C6C                     __end_of_decrement_alarm_minutes:
  6040                           	opt stack 0
  6041                           tblptru	equ	0xFF8
  6042                           tblptrh	equ	0xFF7
  6043                           tblptrl	equ	0xFF6
  6044                           tablat	equ	0xFF5
  6045                           prodh	equ	0xFF4
  6046                           prodl	equ	0xFF3
  6047                           intcon	equ	0xFF2
  6048                           intcon2	equ	0xFF1
  6049                           intcon3	equ	0xFF0
  6050                           postinc0	equ	0xFEE
  6051                           wreg	equ	0xFE8
  6052                           postdec1	equ	0xFE5
  6053                           fsr1h	equ	0xFE2
  6054                           fsr1l	equ	0xFE1
  6055                           indf2	equ	0xFDF
  6056                           fsr2h	equ	0xFDA
  6057                           fsr2l	equ	0xFD9
  6058                           status	equ	0xFD8
  6059                           
  6060 ;; *************** function _do_hour_up *****************
  6061 ;; Defined at:
  6062 ;;		line 1053 in file "clock.c"
  6063 ;; Parameters:    Size  Location     Type
  6064 ;;		None
  6065 ;; Auto vars:     Size  Location     Type
  6066 ;;		None
  6067 ;; Return value:  Size  Location     Type
  6068 ;;                  1    wreg      void 
  6069 ;; Registers used:
  6070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6071 ;; Tracked objects:
  6072 ;;		On entry : 0/0
  6073 ;;		On exit  : 0/0
  6074 ;;		Unchanged: 0/0
  6075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6080 ;;Total ram usage:        0 bytes
  6081 ;; Hardware stack levels used:    1
  6082 ;; Hardware stack levels required when called:    5
  6083 ;; This function calls:
  6084 ;;		_dump_leds
  6085 ;;		_increment_alarm_hours
  6086 ;;		_increment_time_hours
  6087 ;;		_write_leds
  6088 ;; This function is called by:
  6089 ;;		_handle_repeat
  6090 ;;		_handle_ir
  6091 ;; This function uses a non-reentrant model
  6092 ;;
  6093                           
  6094                           	psect	text21
  6095  0016BA                     __ptext21:
  6096                           	opt stack 0
  6097  0016BA                     _do_hour_up:
  6098                           	opt stack 0
  6099  0016BA  FFFF               	dw	65535	; assembler added errata NOP
  6100                           
  6101                           ;clock.c: 1055: if(mode == 3)
  6102                           
  6103                           ;incstack = 0
  6104  0016BC  0E03               	movlw	3
  6105  0016BE  183C               	xorwf	_mode,w,c
  6106  0016C0  A4D8               	btfss	status,2,c
  6107  0016C2  D025               	goto	l4031
  6108                           
  6109                           ;clock.c: 1056: {
  6110                           ;clock.c: 1057: if(led_mask0 == 0xff)
  6111  0016C4  284B               	incf	_led_mask0,w,c
  6112  0016C6  A4D8               	btfss	status,2,c
  6113  0016C8  D00B               	goto	l4003
  6114                           
  6115                           ;clock.c: 1058: {
  6116                           ;clock.c: 1059: led_mask0 = 0x01;
  6117  0016CA  0E01               	movlw	1
  6118  0016CC  6E4B               	movwf	_led_mask0,c
  6119                           
  6120                           ;clock.c: 1060: led_mask1 = 0x00;
  6121  0016CE  0E00               	movlw	0
  6122  0016D0  6E35               	movwf	_led_mask1,c
  6123                           
  6124                           ;clock.c: 1061: led_mask2 = 0x00;
  6125  0016D2  0E00               	movlw	0
  6126  0016D4  6E34               	movwf	_led_mask2,c
  6127                           
  6128                           ;clock.c: 1062: led_mask3 = 0x00;
  6129  0016D6  0E00               	movlw	0
  6130  0016D8  6E33               	movwf	_led_mask3,c
  6131                           
  6132                           ;clock.c: 1063: write_leds();
  6133  0016DA  ECED  F002         	call	_write_leds	;wreg free
  6134                           
  6135                           ;clock.c: 1064: }
  6136  0016DE  D013               	goto	l4029
  6137  0016E0                     l4003:
  6138  0016E0  FFFF               	dw	65535	; assembler added errata NOP
  6139                           
  6140                           ;clock.c: 1065: else
  6141                           ;clock.c: 1066: {
  6142                           ;clock.c: 1067: led_mask3 <<= 1;
  6143  0016E2  90D8               	bcf	status,0,c
  6144  0016E4  3633               	rlcf	_led_mask3,f,c
  6145                           
  6146                           ;clock.c: 1068: if((led_mask2 & 0x80)) led_mask3 |= 0x1;
  6147  0016E6  BE34               	btfsc	_led_mask2,7,c
  6148  0016E8  8033               	bsf	_led_mask3,0,c
  6149                           
  6150                           ;clock.c: 1069: led_mask2 <<= 1;
  6151  0016EA  90D8               	bcf	status,0,c
  6152  0016EC  3634               	rlcf	_led_mask2,f,c
  6153                           
  6154                           ;clock.c: 1070: if((led_mask1 & 0x80)) led_mask2 |= 0x1;
  6155  0016EE  BE35               	btfsc	_led_mask1,7,c
  6156  0016F0  8034               	bsf	_led_mask2,0,c
  6157                           
  6158                           ;clock.c: 1071: led_mask1 <<= 1;
  6159  0016F2  90D8               	bcf	status,0,c
  6160  0016F4  3635               	rlcf	_led_mask1,f,c
  6161                           
  6162                           ;clock.c: 1072: if((led_mask0 & 0x80)) led_mask1 |= 0x1;
  6163  0016F6  BE4B               	btfsc	_led_mask0,7,c
  6164  0016F8  8035               	bsf	_led_mask1,0,c
  6165                           
  6166                           ;clock.c: 1073: led_mask0 <<= 1;
  6167  0016FA  90D8               	bcf	status,0,c
  6168  0016FC  364B               	rlcf	_led_mask0,f,c
  6169                           
  6170                           ;clock.c: 1074: if((led_mask3 & 0x08)) led_mask0 |= 0x1;
  6171  0016FE  B633               	btfsc	_led_mask3,3,c
  6172  001700  804B               	bsf	_led_mask0,0,c
  6173                           
  6174                           ;clock.c: 1075: write_leds();
  6175  001702  ECED  F002         	call	_write_leds	;wreg free
  6176  001706                     l4029:
  6177  001706  FFFF               	dw	65535	; assembler added errata NOP
  6178                           
  6179                           ;clock.c: 1076: }
  6180                           ;clock.c: 1077: dump_leds();
  6181  001708  EC89  F00D         	call	_dump_leds	;wreg free
  6182                           
  6183                           ;clock.c: 1078: }
  6184  00170C  D00D               	goto	l383
  6185  00170E                     l4031:
  6186  00170E  FFFF               	dw	65535	; assembler added errata NOP
  6187                           
  6188                           ;clock.c: 1079: else
  6189                           ;clock.c: 1080: if(mode == 1)
  6190  001710  043C               	decf	_mode,w,c
  6191  001712  A4D8               	btfss	status,2,c
  6192  001714  D003               	goto	l4035
  6193                           
  6194                           ;clock.c: 1081: {
  6195                           ;clock.c: 1082: increment_time_hours();
  6196  001716  ECDF  F00C         	call	_increment_time_hours	;wreg free
  6197                           
  6198                           ;clock.c: 1083: }
  6199  00171A  D006               	goto	l383
  6200  00171C                     l4035:
  6201  00171C  FFFF               	dw	65535	; assembler added errata NOP
  6202                           
  6203                           ;clock.c: 1084: else
  6204                           ;clock.c: 1085: if(mode == 2)
  6205  00171E  0E02               	movlw	2
  6206  001720  183C               	xorwf	_mode,w,c
  6207  001722  B4D8               	btfsc	status,2,c
  6208                           
  6209                           ;clock.c: 1086: {
  6210                           ;clock.c: 1087: increment_alarm_hours();
  6211  001724  EC6E  F00D         	call	_increment_alarm_hours	;wreg free
  6212  001728                     l383:
  6213  001728  FFFF               	dw	65535	; assembler added errata NOP
  6214  00172A  0012               	return		;funcret
  6215  00172C  FFFF               	dw	65535	; errata NOP
  6216  00172E                     __end_of_do_hour_up:
  6217                           	opt stack 0
  6218                           tblptru	equ	0xFF8
  6219                           tblptrh	equ	0xFF7
  6220                           tblptrl	equ	0xFF6
  6221                           tablat	equ	0xFF5
  6222                           prodh	equ	0xFF4
  6223                           prodl	equ	0xFF3
  6224                           intcon	equ	0xFF2
  6225                           intcon2	equ	0xFF1
  6226                           intcon3	equ	0xFF0
  6227                           postinc0	equ	0xFEE
  6228                           wreg	equ	0xFE8
  6229                           postdec1	equ	0xFE5
  6230                           fsr1h	equ	0xFE2
  6231                           fsr1l	equ	0xFE1
  6232                           indf2	equ	0xFDF
  6233                           fsr2h	equ	0xFDA
  6234                           fsr2l	equ	0xFD9
  6235                           status	equ	0xFD8
  6236                           
  6237 ;; *************** function _increment_time_hours *****************
  6238 ;; Defined at:
  6239 ;;		line 986 in file "clock.c"
  6240 ;; Parameters:    Size  Location     Type
  6241 ;;		None
  6242 ;; Auto vars:     Size  Location     Type
  6243 ;;		None
  6244 ;; Return value:  Size  Location     Type
  6245 ;;                  1    wreg      void 
  6246 ;; Registers used:
  6247 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6248 ;; Tracked objects:
  6249 ;;		On entry : 0/0
  6250 ;;		On exit  : 0/0
  6251 ;;		Unchanged: 0/0
  6252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6257 ;;Total ram usage:        0 bytes
  6258 ;; Hardware stack levels used:    1
  6259 ;; Hardware stack levels required when called:    4
  6260 ;; This function calls:
  6261 ;;		_draw_time
  6262 ;; This function is called by:
  6263 ;;		_do_hour_up
  6264 ;; This function uses a non-reentrant model
  6265 ;;
  6266                           
  6267                           	psect	text22
  6268  0019BE                     __ptext22:
  6269                           	opt stack 0
  6270  0019BE                     _increment_time_hours:
  6271                           	opt stack 0
  6272  0019BE  FFFF               	dw	65535	; assembler added errata NOP
  6273                           
  6274                           ;clock.c: 988: crystal_time = 0;
  6275                           
  6276                           ;incstack = 0
  6277  0019C0  0E00               	movlw	0
  6278  0019C2  0100               	movlb	0	; () banked
  6279  0019C4  6F6D               	movwf	(_crystal_time+1)& (0+255),b
  6280  0019C6  0E00               	movlw	0
  6281  0019C8  6F6C               	movwf	_crystal_time& (0+255),b
  6282                           
  6283                           ;clock.c: 989: display_flash = 0;
  6284  0019CA  0E00               	movlw	0
  6285  0019CC  6E42               	movwf	_display_flash,c
  6286                           
  6287                           ;clock.c: 990: time_hz = 0;
  6288  0019CE  0E00               	movlw	0
  6289  0019D0  6E41               	movwf	_time_hz,c
  6290                           
  6291                           ;clock.c: 991: seconds = 0;
  6292  0019D2  0E00               	movlw	0
  6293  0019D4  6E40               	movwf	_seconds,c
  6294                           
  6295                           ; BSR set to: 0
  6296                           ;clock.c: 992: hours++;
  6297  0019D6  2A4A               	incf	_hours,f,c
  6298                           
  6299                           ; BSR set to: 0
  6300                           ;clock.c: 993: if(hours == 12)
  6301  0019D8  0E0C               	movlw	12
  6302  0019DA  184A               	xorwf	_hours,w,c
  6303  0019DC  A4D8               	btfss	status,2,c
  6304  0019DE  D009               	goto	l3885
  6305                           
  6306                           ; BSR set to: 0
  6307                           ;clock.c: 994: {
  6308                           ;clock.c: 995: ampm = !ampm;
  6309  0019E0  503E               	movf	_ampm,w,c
  6310  0019E2  A4D8               	btfss	status,2,c
  6311  0019E4  D002               	goto	u5310
  6312  0019E6  0E01               	movlw	1
  6313  0019E8  D002               	goto	u5320
  6314  0019EA                     u5310:
  6315  0019EA  FFFF               	dw	65535	; assembler added errata NOP
  6316  0019EC  0E00               	movlw	0
  6317  0019EE                     u5320:
  6318  0019EE  FFFF               	dw	65535	; assembler added errata NOP
  6319  0019F0  6E3E               	movwf	_ampm,c
  6320  0019F2                     l3885:
  6321  0019F2  FFFF               	dw	65535	; assembler added errata NOP
  6322                           
  6323                           ; BSR set to: 0
  6324                           ;clock.c: 996: }
  6325                           ;clock.c: 997: if(hours == 13)
  6326  0019F4  0E0D               	movlw	13
  6327  0019F6  184A               	xorwf	_hours,w,c
  6328  0019F8  A4D8               	btfss	status,2,c
  6329  0019FA  D002               	goto	l353
  6330                           
  6331                           ; BSR set to: 0
  6332                           ;clock.c: 998: {
  6333                           ;clock.c: 999: hours = 1;
  6334  0019FC  0E01               	movlw	1
  6335  0019FE  6E4A               	movwf	_hours,c
  6336  001A00                     l353:
  6337  001A00  FFFF               	dw	65535	; assembler added errata NOP
  6338                           
  6339                           ; BSR set to: 0
  6340                           ;clock.c: 1000: }
  6341                           ;clock.c: 1001: not_set = 0;
  6342  001A02  0E00               	movlw	0
  6343  001A04  6E48               	movwf	_not_set,c
  6344                           
  6345                           ; BSR set to: 0
  6346                           ;clock.c: 1002: draw_time();
  6347  001A06  ECB1  F006         	call	_draw_time	;wreg free
  6348  001A0A  0012               	return		;funcret
  6349  001A0C  FFFF               	dw	65535	; errata NOP
  6350  001A0E                     __end_of_increment_time_hours:
  6351                           	opt stack 0
  6352                           tblptru	equ	0xFF8
  6353                           tblptrh	equ	0xFF7
  6354                           tblptrl	equ	0xFF6
  6355                           tablat	equ	0xFF5
  6356                           prodh	equ	0xFF4
  6357                           prodl	equ	0xFF3
  6358                           intcon	equ	0xFF2
  6359                           intcon2	equ	0xFF1
  6360                           intcon3	equ	0xFF0
  6361                           postinc0	equ	0xFEE
  6362                           wreg	equ	0xFE8
  6363                           postdec1	equ	0xFE5
  6364                           fsr1h	equ	0xFE2
  6365                           fsr1l	equ	0xFE1
  6366                           indf2	equ	0xFDF
  6367                           fsr2h	equ	0xFDA
  6368                           fsr2l	equ	0xFD9
  6369                           status	equ	0xFD8
  6370                           
  6371 ;; *************** function _increment_alarm_hours *****************
  6372 ;; Defined at:
  6373 ;;		line 1005 in file "clock.c"
  6374 ;; Parameters:    Size  Location     Type
  6375 ;;		None
  6376 ;; Auto vars:     Size  Location     Type
  6377 ;;		None
  6378 ;; Return value:  Size  Location     Type
  6379 ;;                  1    wreg      void 
  6380 ;; Registers used:
  6381 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6382 ;; Tracked objects:
  6383 ;;		On entry : 0/0
  6384 ;;		On exit  : 0/0
  6385 ;;		Unchanged: 0/0
  6386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6391 ;;Total ram usage:        0 bytes
  6392 ;; Hardware stack levels used:    1
  6393 ;; Hardware stack levels required when called:    4
  6394 ;; This function calls:
  6395 ;;		_draw_alarm
  6396 ;; This function is called by:
  6397 ;;		_do_hour_up
  6398 ;; This function uses a non-reentrant model
  6399 ;;
  6400                           
  6401                           	psect	text23
  6402  001ADC                     __ptext23:
  6403                           	opt stack 0
  6404  001ADC                     _increment_alarm_hours:
  6405                           	opt stack 0
  6406  001ADC  FFFF               	dw	65535	; assembler added errata NOP
  6407                           
  6408                           ;clock.c: 1007: alarm_hours++;
  6409                           
  6410                           ;incstack = 0
  6411  001ADE  2A47               	incf	_alarm_hours,f,c
  6412                           
  6413                           ;clock.c: 1008: if(alarm_hours == 12)
  6414  001AE0  0E0C               	movlw	12
  6415  001AE2  1847               	xorwf	_alarm_hours,w,c
  6416  001AE4  A4D8               	btfss	status,2,c
  6417  001AE6  D009               	goto	l3897
  6418                           
  6419                           ;clock.c: 1009: {
  6420                           ;clock.c: 1010: alarm_ampm = !alarm_ampm;
  6421  001AE8  5038               	movf	_alarm_ampm,w,c
  6422  001AEA  A4D8               	btfss	status,2,c
  6423  001AEC  D002               	goto	u5350
  6424  001AEE  0E01               	movlw	1
  6425  001AF0  D002               	goto	u5360
  6426  001AF2                     u5350:
  6427  001AF2  FFFF               	dw	65535	; assembler added errata NOP
  6428  001AF4  0E00               	movlw	0
  6429  001AF6                     u5360:
  6430  001AF6  FFFF               	dw	65535	; assembler added errata NOP
  6431  001AF8  6E38               	movwf	_alarm_ampm,c
  6432  001AFA                     l3897:
  6433  001AFA  FFFF               	dw	65535	; assembler added errata NOP
  6434                           
  6435                           ;clock.c: 1011: }
  6436                           ;clock.c: 1012: if(alarm_hours == 13)
  6437  001AFC  0E0D               	movlw	13
  6438  001AFE  1847               	xorwf	_alarm_hours,w,c
  6439  001B00  A4D8               	btfss	status,2,c
  6440  001B02  D002               	goto	l3901
  6441                           
  6442                           ;clock.c: 1013: {
  6443                           ;clock.c: 1014: alarm_hours = 1;
  6444  001B04  0E01               	movlw	1
  6445  001B06  6E47               	movwf	_alarm_hours,c
  6446  001B08                     l3901:
  6447  001B08  FFFF               	dw	65535	; assembler added errata NOP
  6448                           
  6449                           ;clock.c: 1015: }
  6450                           ;clock.c: 1017: draw_alarm();
  6451  001B0A  EC82  F008         	call	_draw_alarm	;wreg free
  6452  001B0E  0012               	return		;funcret
  6453  001B10  FFFF               	dw	65535	; errata NOP
  6454  001B12                     __end_of_increment_alarm_hours:
  6455                           	opt stack 0
  6456                           tblptru	equ	0xFF8
  6457                           tblptrh	equ	0xFF7
  6458                           tblptrl	equ	0xFF6
  6459                           tablat	equ	0xFF5
  6460                           prodh	equ	0xFF4
  6461                           prodl	equ	0xFF3
  6462                           intcon	equ	0xFF2
  6463                           intcon2	equ	0xFF1
  6464                           intcon3	equ	0xFF0
  6465                           postinc0	equ	0xFEE
  6466                           wreg	equ	0xFE8
  6467                           postdec1	equ	0xFE5
  6468                           fsr1h	equ	0xFE2
  6469                           fsr1l	equ	0xFE1
  6470                           indf2	equ	0xFDF
  6471                           fsr2h	equ	0xFDA
  6472                           fsr2l	equ	0xFD9
  6473                           status	equ	0xFD8
  6474                           
  6475 ;; *************** function _do_hour_down *****************
  6476 ;; Defined at:
  6477 ;;		line 1092 in file "clock.c"
  6478 ;; Parameters:    Size  Location     Type
  6479 ;;		None
  6480 ;; Auto vars:     Size  Location     Type
  6481 ;;		None
  6482 ;; Return value:  Size  Location     Type
  6483 ;;                  1    wreg      void 
  6484 ;; Registers used:
  6485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6486 ;; Tracked objects:
  6487 ;;		On entry : 0/0
  6488 ;;		On exit  : 0/0
  6489 ;;		Unchanged: 0/0
  6490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6495 ;;Total ram usage:        0 bytes
  6496 ;; Hardware stack levels used:    1
  6497 ;; Hardware stack levels required when called:    5
  6498 ;; This function calls:
  6499 ;;		_decrement_alarm_hours
  6500 ;;		_decrement_time_hours
  6501 ;;		_dump_leds
  6502 ;;		_write_leds
  6503 ;; This function is called by:
  6504 ;;		_handle_repeat
  6505 ;;		_handle_ir
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           	psect	text24
  6510  00172E                     __ptext24:
  6511                           	opt stack 0
  6512  00172E                     _do_hour_down:
  6513                           	opt stack 0
  6514  00172E  FFFF               	dw	65535	; assembler added errata NOP
  6515                           
  6516                           ;clock.c: 1094: if(mode == 3)
  6517                           
  6518                           ;incstack = 0
  6519  001730  0E03               	movlw	3
  6520  001732  183C               	xorwf	_mode,w,c
  6521  001734  A4D8               	btfss	status,2,c
  6522  001736  D025               	goto	l4073
  6523                           
  6524                           ;clock.c: 1095: {
  6525                           ;clock.c: 1096: if(led_mask0 == 0xff)
  6526  001738  284B               	incf	_led_mask0,w,c
  6527  00173A  A4D8               	btfss	status,2,c
  6528  00173C  D00B               	goto	l387
  6529                           
  6530                           ;clock.c: 1097: {
  6531                           ;clock.c: 1098: led_mask0 = 0x01;
  6532  00173E  0E01               	movlw	1
  6533  001740  6E4B               	movwf	_led_mask0,c
  6534                           
  6535                           ;clock.c: 1099: led_mask1 = 0x00;
  6536  001742  0E00               	movlw	0
  6537  001744  6E35               	movwf	_led_mask1,c
  6538                           
  6539                           ;clock.c: 1100: led_mask2 = 0x00;
  6540  001746  0E00               	movlw	0
  6541  001748  6E34               	movwf	_led_mask2,c
  6542                           
  6543                           ;clock.c: 1101: led_mask3 = 0x00;
  6544  00174A  0E00               	movlw	0
  6545  00174C  6E33               	movwf	_led_mask3,c
  6546                           
  6547                           ;clock.c: 1102: write_leds();
  6548  00174E  ECED  F002         	call	_write_leds	;wreg free
  6549                           
  6550                           ;clock.c: 1103: }
  6551  001752  D013               	goto	l4071
  6552  001754                     l387:
  6553  001754  FFFF               	dw	65535	; assembler added errata NOP
  6554                           
  6555                           ;clock.c: 1104: else
  6556                           ;clock.c: 1105: {
  6557                           ;clock.c: 1106: if((led_mask0 & 0x01)) led_mask3 |= 0x08;
  6558  001756  B04B               	btfsc	_led_mask0,0,c
  6559  001758  8633               	bsf	_led_mask3,3,c
  6560                           
  6561                           ;clock.c: 1107: led_mask0 >>= 1;
  6562  00175A  90D8               	bcf	status,0,c
  6563  00175C  324B               	rrcf	_led_mask0,f,c
  6564                           
  6565                           ;clock.c: 1108: if((led_mask1 & 0x01)) led_mask0 |= 0x80;
  6566  00175E  B035               	btfsc	_led_mask1,0,c
  6567  001760  8E4B               	bsf	_led_mask0,7,c
  6568                           
  6569                           ;clock.c: 1109: led_mask1 >>= 1;
  6570  001762  90D8               	bcf	status,0,c
  6571  001764  3235               	rrcf	_led_mask1,f,c
  6572                           
  6573                           ;clock.c: 1110: if((led_mask2 & 0x01)) led_mask1 |= 0x80;
  6574  001766  B034               	btfsc	_led_mask2,0,c
  6575  001768  8E35               	bsf	_led_mask1,7,c
  6576                           
  6577                           ;clock.c: 1111: led_mask2 >>= 1;
  6578  00176A  90D8               	bcf	status,0,c
  6579  00176C  3234               	rrcf	_led_mask2,f,c
  6580                           
  6581                           ;clock.c: 1112: if((led_mask3 & 0x01)) led_mask2 |= 0x80;
  6582  00176E  B033               	btfsc	_led_mask3,0,c
  6583  001770  8E34               	bsf	_led_mask2,7,c
  6584                           
  6585                           ;clock.c: 1113: led_mask3 >>= 1;
  6586  001772  90D8               	bcf	status,0,c
  6587  001774  3233               	rrcf	_led_mask3,f,c
  6588                           
  6589                           ;clock.c: 1114: write_leds();
  6590  001776  ECED  F002         	call	_write_leds	;wreg free
  6591  00177A                     l4071:
  6592  00177A  FFFF               	dw	65535	; assembler added errata NOP
  6593                           
  6594                           ;clock.c: 1115: }
  6595                           ;clock.c: 1116: dump_leds();
  6596  00177C  EC89  F00D         	call	_dump_leds	;wreg free
  6597                           
  6598                           ;clock.c: 1117: }
  6599  001780  D00D               	goto	l397
  6600  001782                     l4073:
  6601  001782  FFFF               	dw	65535	; assembler added errata NOP
  6602                           
  6603                           ;clock.c: 1118: else
  6604                           ;clock.c: 1119: if(mode == 1)
  6605  001784  043C               	decf	_mode,w,c
  6606  001786  A4D8               	btfss	status,2,c
  6607  001788  D003               	goto	l4077
  6608                           
  6609                           ;clock.c: 1120: {
  6610                           ;clock.c: 1121: decrement_time_hours();
  6611  00178A  EC07  F00D         	call	_decrement_time_hours	;wreg free
  6612                           
  6613                           ;clock.c: 1122: }
  6614  00178E  D006               	goto	l397
  6615  001790                     l4077:
  6616  001790  FFFF               	dw	65535	; assembler added errata NOP
  6617                           
  6618                           ;clock.c: 1123: else
  6619                           ;clock.c: 1124: if(mode == 2)
  6620  001792  0E02               	movlw	2
  6621  001794  183C               	xorwf	_mode,w,c
  6622  001796  B4D8               	btfsc	status,2,c
  6623                           
  6624                           ;clock.c: 1125: {
  6625                           ;clock.c: 1126: decrement_alarm_hours();
  6626  001798  ECBE  F00D         	call	_decrement_alarm_hours	;wreg free
  6627  00179C                     l397:
  6628  00179C  FFFF               	dw	65535	; assembler added errata NOP
  6629  00179E  0012               	return		;funcret
  6630  0017A0  FFFF               	dw	65535	; errata NOP
  6631  0017A2                     __end_of_do_hour_down:
  6632                           	opt stack 0
  6633                           tblptru	equ	0xFF8
  6634                           tblptrh	equ	0xFF7
  6635                           tblptrl	equ	0xFF6
  6636                           tablat	equ	0xFF5
  6637                           prodh	equ	0xFF4
  6638                           prodl	equ	0xFF3
  6639                           intcon	equ	0xFF2
  6640                           intcon2	equ	0xFF1
  6641                           intcon3	equ	0xFF0
  6642                           postinc0	equ	0xFEE
  6643                           wreg	equ	0xFE8
  6644                           postdec1	equ	0xFE5
  6645                           fsr1h	equ	0xFE2
  6646                           fsr1l	equ	0xFE1
  6647                           indf2	equ	0xFDF
  6648                           fsr2h	equ	0xFDA
  6649                           fsr2l	equ	0xFD9
  6650                           status	equ	0xFD8
  6651                           
  6652 ;; *************** function _dump_leds *****************
  6653 ;; Defined at:
  6654 ;;		line 682 in file "clock.c"
  6655 ;; Parameters:    Size  Location     Type
  6656 ;;		None
  6657 ;; Auto vars:     Size  Location     Type
  6658 ;;		None
  6659 ;; Return value:  Size  Location     Type
  6660 ;;                  1    wreg      void 
  6661 ;; Registers used:
  6662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6663 ;; Tracked objects:
  6664 ;;		On entry : 0/0
  6665 ;;		On exit  : 0/0
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6672 ;;Total ram usage:        0 bytes
  6673 ;; Hardware stack levels used:    1
  6674 ;; Hardware stack levels required when called:    4
  6675 ;; This function calls:
  6676 ;;		_print_bin_nospace
  6677 ;;		_print_byte
  6678 ;; This function is called by:
  6679 ;;		_do_hour_up
  6680 ;;		_do_hour_down
  6681 ;; This function uses a non-reentrant model
  6682 ;;
  6683                           
  6684                           	psect	text25
  6685  001B12                     __ptext25:
  6686                           	opt stack 0
  6687  001B12                     _dump_leds:
  6688                           	opt stack 0
  6689  001B12  FFFF               	dw	65535	; assembler added errata NOP
  6690                           
  6691                           ;clock.c: 684: print_bin_nospace(led_mask0);
  6692                           
  6693                           ;incstack = 0
  6694  001B14  504B               	movf	_led_mask0,w,c
  6695  001B16  ECE3  F009         	call	_print_bin_nospace
  6696                           
  6697                           ;clock.c: 685: print_byte(' ');
  6698  001B1A  0E20               	movlw	32
  6699  001B1C  EC2E  F00D         	call	_print_byte
  6700                           
  6701                           ;clock.c: 686: print_bin_nospace(led_mask1);
  6702  001B20  5035               	movf	_led_mask1,w,c
  6703  001B22  ECE3  F009         	call	_print_bin_nospace
  6704                           
  6705                           ;clock.c: 687: print_byte(' ');
  6706  001B26  0E20               	movlw	32
  6707  001B28  EC2E  F00D         	call	_print_byte
  6708                           
  6709                           ;clock.c: 688: print_bin_nospace(led_mask2);
  6710  001B2C  5034               	movf	_led_mask2,w,c
  6711  001B2E  ECE3  F009         	call	_print_bin_nospace
  6712                           
  6713                           ;clock.c: 689: print_byte(' ');
  6714  001B32  0E20               	movlw	32
  6715  001B34  EC2E  F00D         	call	_print_byte
  6716                           
  6717                           ;clock.c: 690: print_bin_nospace(led_mask3);
  6718  001B38  5033               	movf	_led_mask3,w,c
  6719  001B3A  ECE3  F009         	call	_print_bin_nospace
  6720                           
  6721                           ;clock.c: 691: print_byte('\n');
  6722  001B3E  0E0A               	movlw	10
  6723  001B40  EC2E  F00D         	call	_print_byte
  6724  001B44  0012               	return		;funcret
  6725  001B46  FFFF               	dw	65535	; errata NOP
  6726  001B48                     __end_of_dump_leds:
  6727                           	opt stack 0
  6728                           tblptru	equ	0xFF8
  6729                           tblptrh	equ	0xFF7
  6730                           tblptrl	equ	0xFF6
  6731                           tablat	equ	0xFF5
  6732                           prodh	equ	0xFF4
  6733                           prodl	equ	0xFF3
  6734                           intcon	equ	0xFF2
  6735                           intcon2	equ	0xFF1
  6736                           intcon3	equ	0xFF0
  6737                           postinc0	equ	0xFEE
  6738                           wreg	equ	0xFE8
  6739                           postdec1	equ	0xFE5
  6740                           fsr1h	equ	0xFE2
  6741                           fsr1l	equ	0xFE1
  6742                           indf2	equ	0xFDF
  6743                           fsr2h	equ	0xFDA
  6744                           fsr2l	equ	0xFD9
  6745                           status	equ	0xFD8
  6746                           
  6747 ;; *************** function _print_bin_nospace *****************
  6748 ;; Defined at:
  6749 ;;		line 643 in file "clock.c"
  6750 ;; Parameters:    Size  Location     Type
  6751 ;;  number          1    wreg     unsigned char 
  6752 ;; Auto vars:     Size  Location     Type
  6753 ;;  number          1   36[COMRAM] unsigned char 
  6754 ;; Return value:  Size  Location     Type
  6755 ;;                  1    wreg      void 
  6756 ;; Registers used:
  6757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6758 ;; Tracked objects:
  6759 ;;		On entry : 0/0
  6760 ;;		On exit  : 0/0
  6761 ;;		Unchanged: 0/0
  6762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6764 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6766 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6767 ;;Total ram usage:       17 bytes
  6768 ;; Hardware stack levels used:    1
  6769 ;; Hardware stack levels required when called:    3
  6770 ;; This function calls:
  6771 ;;		_print_byte
  6772 ;; This function is called by:
  6773 ;;		_dump_leds
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           	psect	text26
  6778  0013C6                     __ptext26:
  6779                           	opt stack 0
  6780  0013C6                     _print_bin_nospace:
  6781                           	opt stack 0
  6782  0013C6  FFFF               	dw	65535	; assembler added errata NOP
  6783                           
  6784                           ;incstack = 0
  6785                           ;print_bin_nospace@number stored from wreg
  6786  0013C8  6E25               	movwf	print_bin_nospace@number,c
  6787                           
  6788                           ;clock.c: 645: print_byte((number & 0x80) ? '1' : '0');
  6789  0013CA  BE25               	btfsc	print_bin_nospace@number,7,c
  6790  0013CC  D004               	goto	l3563
  6791  0013CE  0E00               	movlw	0
  6792  0013D0  6E16               	movwf	_print_bin_nospace$803+1,c
  6793  0013D2  0E30               	movlw	48
  6794  0013D4  D004               	goto	L2
  6795  0013D6                     l3563:
  6796  0013D6  FFFF               	dw	65535	; assembler added errata NOP
  6797  0013D8  0E00               	movlw	0
  6798  0013DA  6E16               	movwf	_print_bin_nospace$803+1,c
  6799  0013DC  0E31               	movlw	49
  6800  0013DE                     L2:
  6801  0013DE  FFFF               	dw	65535	; assembler added errata NOP
  6802  0013E0  6E15               	movwf	_print_bin_nospace$803,c
  6803  0013E2  5015               	movf	_print_bin_nospace$803,w,c
  6804  0013E4  EC2E  F00D         	call	_print_byte
  6805                           
  6806                           ;clock.c: 646: print_byte((number & 0x40) ? '1' : '0');
  6807  0013E8  BC25               	btfsc	print_bin_nospace@number,6,c
  6808  0013EA  D004               	goto	l3571
  6809  0013EC  0E00               	movlw	0
  6810  0013EE  6E18               	movwf	_print_bin_nospace$804+1,c
  6811  0013F0  0E30               	movlw	48
  6812  0013F2  D004               	goto	L3
  6813  0013F4                     l3571:
  6814  0013F4  FFFF               	dw	65535	; assembler added errata NOP
  6815  0013F6  0E00               	movlw	0
  6816  0013F8  6E18               	movwf	_print_bin_nospace$804+1,c
  6817  0013FA  0E31               	movlw	49
  6818  0013FC                     L3:
  6819  0013FC  FFFF               	dw	65535	; assembler added errata NOP
  6820  0013FE  6E17               	movwf	_print_bin_nospace$804,c
  6821  001400  5017               	movf	_print_bin_nospace$804,w,c
  6822  001402  EC2E  F00D         	call	_print_byte
  6823                           
  6824                           ;clock.c: 647: print_byte((number & 0x20) ? '1' : '0');
  6825  001406  BA25               	btfsc	print_bin_nospace@number,5,c
  6826  001408  D004               	goto	l3579
  6827  00140A  0E00               	movlw	0
  6828  00140C  6E1A               	movwf	_print_bin_nospace$805+1,c
  6829  00140E  0E30               	movlw	48
  6830  001410  D004               	goto	L4
  6831  001412                     l3579:
  6832  001412  FFFF               	dw	65535	; assembler added errata NOP
  6833  001414  0E00               	movlw	0
  6834  001416  6E1A               	movwf	_print_bin_nospace$805+1,c
  6835  001418  0E31               	movlw	49
  6836  00141A                     L4:
  6837  00141A  FFFF               	dw	65535	; assembler added errata NOP
  6838  00141C  6E19               	movwf	_print_bin_nospace$805,c
  6839  00141E  5019               	movf	_print_bin_nospace$805,w,c
  6840  001420  EC2E  F00D         	call	_print_byte
  6841                           
  6842                           ;clock.c: 648: print_byte((number & 0x10) ? '1' : '0');
  6843  001424  B825               	btfsc	print_bin_nospace@number,4,c
  6844  001426  D004               	goto	l3587
  6845  001428  0E00               	movlw	0
  6846  00142A  6E1C               	movwf	_print_bin_nospace$806+1,c
  6847  00142C  0E30               	movlw	48
  6848  00142E  D004               	goto	L5
  6849  001430                     l3587:
  6850  001430  FFFF               	dw	65535	; assembler added errata NOP
  6851  001432  0E00               	movlw	0
  6852  001434  6E1C               	movwf	_print_bin_nospace$806+1,c
  6853  001436  0E31               	movlw	49
  6854  001438                     L5:
  6855  001438  FFFF               	dw	65535	; assembler added errata NOP
  6856  00143A  6E1B               	movwf	_print_bin_nospace$806,c
  6857  00143C  501B               	movf	_print_bin_nospace$806,w,c
  6858  00143E  EC2E  F00D         	call	_print_byte
  6859                           
  6860                           ;clock.c: 649: print_byte((number & 0x8) ? '1' : '0');
  6861  001442  B625               	btfsc	print_bin_nospace@number,3,c
  6862  001444  D004               	goto	l3595
  6863  001446  0E00               	movlw	0
  6864  001448  6E1E               	movwf	_print_bin_nospace$807+1,c
  6865  00144A  0E30               	movlw	48
  6866  00144C  D004               	goto	L6
  6867  00144E                     l3595:
  6868  00144E  FFFF               	dw	65535	; assembler added errata NOP
  6869  001450  0E00               	movlw	0
  6870  001452  6E1E               	movwf	_print_bin_nospace$807+1,c
  6871  001454  0E31               	movlw	49
  6872  001456                     L6:
  6873  001456  FFFF               	dw	65535	; assembler added errata NOP
  6874  001458  6E1D               	movwf	_print_bin_nospace$807,c
  6875  00145A  501D               	movf	_print_bin_nospace$807,w,c
  6876  00145C  EC2E  F00D         	call	_print_byte
  6877                           
  6878                           ;clock.c: 650: print_byte((number & 0x4) ? '1' : '0');
  6879  001460  B425               	btfsc	print_bin_nospace@number,2,c
  6880  001462  D004               	goto	l3603
  6881  001464  0E00               	movlw	0
  6882  001466  6E20               	movwf	_print_bin_nospace$808+1,c
  6883  001468  0E30               	movlw	48
  6884  00146A  D004               	goto	L7
  6885  00146C                     l3603:
  6886  00146C  FFFF               	dw	65535	; assembler added errata NOP
  6887  00146E  0E00               	movlw	0
  6888  001470  6E20               	movwf	_print_bin_nospace$808+1,c
  6889  001472  0E31               	movlw	49
  6890  001474                     L7:
  6891  001474  FFFF               	dw	65535	; assembler added errata NOP
  6892  001476  6E1F               	movwf	_print_bin_nospace$808,c
  6893  001478  501F               	movf	_print_bin_nospace$808,w,c
  6894  00147A  EC2E  F00D         	call	_print_byte
  6895                           
  6896                           ;clock.c: 651: print_byte((number & 0x2) ? '1' : '0');
  6897  00147E  B225               	btfsc	print_bin_nospace@number,1,c
  6898  001480  D004               	goto	l3611
  6899  001482  0E00               	movlw	0
  6900  001484  6E22               	movwf	_print_bin_nospace$809+1,c
  6901  001486  0E30               	movlw	48
  6902  001488  D004               	goto	L8
  6903  00148A                     l3611:
  6904  00148A  FFFF               	dw	65535	; assembler added errata NOP
  6905  00148C  0E00               	movlw	0
  6906  00148E  6E22               	movwf	_print_bin_nospace$809+1,c
  6907  001490  0E31               	movlw	49
  6908  001492                     L8:
  6909  001492  FFFF               	dw	65535	; assembler added errata NOP
  6910  001494  6E21               	movwf	_print_bin_nospace$809,c
  6911  001496  5021               	movf	_print_bin_nospace$809,w,c
  6912  001498  EC2E  F00D         	call	_print_byte
  6913                           
  6914                           ;clock.c: 652: print_byte((number & 0x1) ? '1' : '0');
  6915  00149C  B025               	btfsc	print_bin_nospace@number,0,c
  6916  00149E  D004               	goto	l3619
  6917  0014A0  0E00               	movlw	0
  6918  0014A2  6E24               	movwf	_print_bin_nospace$810+1,c
  6919  0014A4  0E30               	movlw	48
  6920  0014A6  D004               	goto	L9
  6921  0014A8                     l3619:
  6922  0014A8  FFFF               	dw	65535	; assembler added errata NOP
  6923  0014AA  0E00               	movlw	0
  6924  0014AC  6E24               	movwf	_print_bin_nospace$810+1,c
  6925  0014AE  0E31               	movlw	49
  6926  0014B0                     L9:
  6927  0014B0  FFFF               	dw	65535	; assembler added errata NOP
  6928  0014B2  6E23               	movwf	_print_bin_nospace$810,c
  6929  0014B4  5023               	movf	_print_bin_nospace$810,w,c
  6930  0014B6  EC2E  F00D         	call	_print_byte
  6931  0014BA  0012               	return		;funcret
  6932  0014BC  FFFF               	dw	65535	; errata NOP
  6933  0014BE                     __end_of_print_bin_nospace:
  6934                           	opt stack 0
  6935                           tblptru	equ	0xFF8
  6936                           tblptrh	equ	0xFF7
  6937                           tblptrl	equ	0xFF6
  6938                           tablat	equ	0xFF5
  6939                           prodh	equ	0xFF4
  6940                           prodl	equ	0xFF3
  6941                           intcon	equ	0xFF2
  6942                           intcon2	equ	0xFF1
  6943                           intcon3	equ	0xFF0
  6944                           postinc0	equ	0xFEE
  6945                           wreg	equ	0xFE8
  6946                           postdec1	equ	0xFE5
  6947                           fsr1h	equ	0xFE2
  6948                           fsr1l	equ	0xFE1
  6949                           indf2	equ	0xFDF
  6950                           fsr2h	equ	0xFDA
  6951                           fsr2l	equ	0xFD9
  6952                           status	equ	0xFD8
  6953                           
  6954 ;; *************** function _print_byte *****************
  6955 ;; Defined at:
  6956 ;;		line 585 in file "clock.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;  c               1    wreg     unsigned char 
  6959 ;; Auto vars:     Size  Location     Type
  6960 ;;  c               1   19[COMRAM] unsigned char 
  6961 ;; Return value:  Size  Location     Type
  6962 ;;                  1    wreg      void 
  6963 ;; Registers used:
  6964 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6965 ;; Tracked objects:
  6966 ;;		On entry : 0/0
  6967 ;;		On exit  : 0/0
  6968 ;;		Unchanged: 0/0
  6969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6971 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6973 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6974 ;;Total ram usage:        1 bytes
  6975 ;; Hardware stack levels used:    1
  6976 ;; Hardware stack levels required when called:    2
  6977 ;; This function calls:
  6978 ;;		Nothing
  6979 ;; This function is called by:
  6980 ;;		_print_text
  6981 ;;		_print_number_nospace
  6982 ;;		_print_number2
  6983 ;;		_print_number
  6984 ;;		_print_bin_nospace
  6985 ;;		_dump_leds
  6986 ;;		_handle_ir
  6987 ;;		_handle_time
  6988 ;;		_print_hex2
  6989 ;; This function uses a non-reentrant model
  6990 ;;
  6991                           
  6992                           	psect	text27
  6993  001A5C                     __ptext27:
  6994                           	opt stack 0
  6995  001A5C                     _print_byte:
  6996                           	opt stack 0
  6997  001A5C  FFFF               	dw	65535	; assembler added errata NOP
  6998                           
  6999                           ;incstack = 0
  7000                           ;print_byte@c stored from wreg
  7001  001A5E  6E14               	movwf	print_byte@c,c
  7002                           
  7003                           ;clock.c: 587: if(uart_size < 1024)
  7004  001A60  0E04               	movlw	4
  7005  001A62  0100               	movlb	0	; () banked
  7006  001A64  5D7D               	subwf	(_uart_size+1)& (0+255),w,b
  7007  001A66  B0D8               	btfsc	status,0,c
  7008  001A68  D01A               	goto	l223
  7009                           
  7010                           ; BSR set to: 0
  7011                           ;clock.c: 588: {
  7012                           ;clock.c: 589: uart_buffer[uart_position1++] = c;
  7013  001A6A  0E9E               	movlw	low _uart_buffer
  7014  001A6C  0100               	movlb	0	; () banked
  7015  001A6E  257A               	addwf	_uart_position1& (0+255),w,b
  7016  001A70  6ED9               	movwf	fsr2l,c
  7017  001A72  0E00               	movlw	high _uart_buffer
  7018  001A74  0100               	movlb	0	; () banked
  7019  001A76  217B               	addwfc	(_uart_position1+1)& (0+255),w,b
  7020  001A78  6EDA               	movwf	fsr2h,c
  7021  001A7A  C014  FFDF         	movff	print_byte@c,indf2
  7022                           
  7023                           ; BSR set to: 0
  7024  001A7E  0100               	movlb	0	; () banked
  7025  001A80  4B7A               	infsnz	_uart_position1& (0+255),f,b
  7026  001A82  2B7B               	incf	(_uart_position1+1)& (0+255),f,b
  7027                           
  7028                           ; BSR set to: 0
  7029                           ;clock.c: 590: uart_size++;
  7030  001A84  0100               	movlb	0	; () banked
  7031  001A86  4B7C               	infsnz	_uart_size& (0+255),f,b
  7032  001A88  2B7D               	incf	(_uart_size+1)& (0+255),f,b
  7033                           
  7034                           ; BSR set to: 0
  7035                           ;clock.c: 591: if(uart_position1 >= 1024)
  7036  001A8A  0E04               	movlw	4
  7037  001A8C  0100               	movlb	0	; () banked
  7038  001A8E  5D7B               	subwf	(_uart_position1+1)& (0+255),w,b
  7039  001A90  A0D8               	btfss	status,0,c
  7040  001A92  D005               	goto	l223
  7041                           
  7042                           ; BSR set to: 0
  7043                           ;clock.c: 592: {
  7044                           ;clock.c: 593: uart_position1 = 0;
  7045  001A94  0E00               	movlw	0
  7046  001A96  0100               	movlb	0	; () banked
  7047  001A98  6F7B               	movwf	(_uart_position1+1)& (0+255),b
  7048  001A9A  0E00               	movlw	0
  7049  001A9C  6F7A               	movwf	_uart_position1& (0+255),b
  7050  001A9E                     l223:
  7051  001A9E  FFFF               	dw	65535	; assembler added errata NOP
  7052                           
  7053                           ; BSR set to: 0
  7054  001AA0  0012               	return		;funcret
  7055  001AA2  FFFF               	dw	65535	; errata NOP
  7056  001AA4                     __end_of_print_byte:
  7057                           	opt stack 0
  7058                           tblptru	equ	0xFF8
  7059                           tblptrh	equ	0xFF7
  7060                           tblptrl	equ	0xFF6
  7061                           tablat	equ	0xFF5
  7062                           prodh	equ	0xFF4
  7063                           prodl	equ	0xFF3
  7064                           intcon	equ	0xFF2
  7065                           intcon2	equ	0xFF1
  7066                           intcon3	equ	0xFF0
  7067                           postinc0	equ	0xFEE
  7068                           wreg	equ	0xFE8
  7069                           postdec1	equ	0xFE5
  7070                           fsr1h	equ	0xFE2
  7071                           fsr1l	equ	0xFE1
  7072                           indf2	equ	0xFDF
  7073                           fsr2h	equ	0xFDA
  7074                           fsr2l	equ	0xFD9
  7075                           status	equ	0xFD8
  7076                           
  7077 ;; *************** function _decrement_time_hours *****************
  7078 ;; Defined at:
  7079 ;;		line 1020 in file "clock.c"
  7080 ;; Parameters:    Size  Location     Type
  7081 ;;		None
  7082 ;; Auto vars:     Size  Location     Type
  7083 ;;		None
  7084 ;; Return value:  Size  Location     Type
  7085 ;;                  1    wreg      void 
  7086 ;; Registers used:
  7087 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7088 ;; Tracked objects:
  7089 ;;		On entry : 0/0
  7090 ;;		On exit  : 0/0
  7091 ;;		Unchanged: 0/0
  7092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7097 ;;Total ram usage:        0 bytes
  7098 ;; Hardware stack levels used:    1
  7099 ;; Hardware stack levels required when called:    4
  7100 ;; This function calls:
  7101 ;;		_draw_time
  7102 ;; This function is called by:
  7103 ;;		_do_hour_down
  7104 ;; This function uses a non-reentrant model
  7105 ;;
  7106                           
  7107                           	psect	text28
  7108  001A0E                     __ptext28:
  7109                           	opt stack 0
  7110  001A0E                     _decrement_time_hours:
  7111                           	opt stack 0
  7112  001A0E  FFFF               	dw	65535	; assembler added errata NOP
  7113                           
  7114                           ;clock.c: 1022: crystal_time = 0;
  7115                           
  7116                           ; BSR set to: 0
  7117                           ;incstack = 0
  7118  001A10  0E00               	movlw	0
  7119  001A12  0100               	movlb	0	; () banked
  7120  001A14  6F6D               	movwf	(_crystal_time+1)& (0+255),b
  7121  001A16  0E00               	movlw	0
  7122  001A18  6F6C               	movwf	_crystal_time& (0+255),b
  7123                           
  7124                           ;clock.c: 1023: display_flash = 0;
  7125  001A1A  0E00               	movlw	0
  7126  001A1C  6E42               	movwf	_display_flash,c
  7127                           
  7128                           ;clock.c: 1024: time_hz = 0;
  7129  001A1E  0E00               	movlw	0
  7130  001A20  6E41               	movwf	_time_hz,c
  7131                           
  7132                           ;clock.c: 1025: seconds = 0;
  7133  001A22  0E00               	movlw	0
  7134  001A24  6E40               	movwf	_seconds,c
  7135                           
  7136                           ; BSR set to: 0
  7137                           ;clock.c: 1026: hours--;
  7138  001A26  064A               	decf	_hours,f,c
  7139                           
  7140                           ; BSR set to: 0
  7141                           ;clock.c: 1027: if(hours == 0)
  7142  001A28  504A               	movf	_hours,w,c
  7143  001A2A  A4D8               	btfss	status,2,c
  7144  001A2C  D002               	goto	l3911
  7145                           
  7146                           ; BSR set to: 0
  7147                           ;clock.c: 1028: {
  7148                           ;clock.c: 1029: hours = 12;
  7149  001A2E  0E0C               	movlw	12
  7150  001A30  6E4A               	movwf	_hours,c
  7151  001A32                     l3911:
  7152  001A32  FFFF               	dw	65535	; assembler added errata NOP
  7153                           
  7154                           ; BSR set to: 0
  7155                           ;clock.c: 1030: }
  7156                           ;clock.c: 1031: if(hours == 11)
  7157  001A34  0E0B               	movlw	11
  7158  001A36  184A               	xorwf	_hours,w,c
  7159  001A38  A4D8               	btfss	status,2,c
  7160  001A3A  D009               	goto	l363
  7161                           
  7162                           ; BSR set to: 0
  7163                           ;clock.c: 1032: {
  7164                           ;clock.c: 1033: ampm = !ampm;
  7165  001A3C  503E               	movf	_ampm,w,c
  7166  001A3E  A4D8               	btfss	status,2,c
  7167  001A40  D002               	goto	u5400
  7168  001A42  0E01               	movlw	1
  7169  001A44  D002               	goto	u5410
  7170  001A46                     u5400:
  7171  001A46  FFFF               	dw	65535	; assembler added errata NOP
  7172  001A48  0E00               	movlw	0
  7173  001A4A                     u5410:
  7174  001A4A  FFFF               	dw	65535	; assembler added errata NOP
  7175  001A4C  6E3E               	movwf	_ampm,c
  7176  001A4E                     l363:
  7177  001A4E  FFFF               	dw	65535	; assembler added errata NOP
  7178                           
  7179                           ; BSR set to: 0
  7180                           ;clock.c: 1034: }
  7181                           ;clock.c: 1035: not_set = 0;
  7182  001A50  0E00               	movlw	0
  7183  001A52  6E48               	movwf	_not_set,c
  7184                           
  7185                           ; BSR set to: 0
  7186                           ;clock.c: 1036: draw_time();
  7187  001A54  ECB1  F006         	call	_draw_time	;wreg free
  7188  001A58  0012               	return		;funcret
  7189  001A5A  FFFF               	dw	65535	; errata NOP
  7190  001A5C                     __end_of_decrement_time_hours:
  7191                           	opt stack 0
  7192                           tblptru	equ	0xFF8
  7193                           tblptrh	equ	0xFF7
  7194                           tblptrl	equ	0xFF6
  7195                           tablat	equ	0xFF5
  7196                           prodh	equ	0xFF4
  7197                           prodl	equ	0xFF3
  7198                           intcon	equ	0xFF2
  7199                           intcon2	equ	0xFF1
  7200                           intcon3	equ	0xFF0
  7201                           postinc0	equ	0xFEE
  7202                           wreg	equ	0xFE8
  7203                           postdec1	equ	0xFE5
  7204                           fsr1h	equ	0xFE2
  7205                           fsr1l	equ	0xFE1
  7206                           indf2	equ	0xFDF
  7207                           fsr2h	equ	0xFDA
  7208                           fsr2l	equ	0xFD9
  7209                           status	equ	0xFD8
  7210                           
  7211 ;; *************** function _draw_time *****************
  7212 ;; Defined at:
  7213 ;;		line 813 in file "clock.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;		None
  7216 ;; Auto vars:     Size  Location     Type
  7217 ;;  ptr             2   31[COMRAM] PTR const unsigned char 
  7218 ;;		 -> led_masks4(40), led_masks3(40), led_masks2(40), 
  7219 ;;  minutes10       1   30[COMRAM] unsigned char 
  7220 ;;  hours10         1   29[COMRAM] unsigned char 
  7221 ;; Return value:  Size  Location     Type
  7222 ;;                  1    wreg      void 
  7223 ;; Registers used:
  7224 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7231 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7232 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7233 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7234 ;;Total ram usage:        6 bytes
  7235 ;; Hardware stack levels used:    1
  7236 ;; Hardware stack levels required when called:    3
  7237 ;; This function calls:
  7238 ;;		___awdiv
  7239 ;;		_write_leds
  7240 ;; This function is called by:
  7241 ;;		_increment_time_minutes
  7242 ;;		_decrement_time_minutes
  7243 ;;		_increment_time_hours
  7244 ;;		_decrement_time_hours
  7245 ;;		_handle_ir
  7246 ;;		_handle_time
  7247 ;;		_main
  7248 ;; This function uses a non-reentrant model
  7249 ;;
  7250                           
  7251                           	psect	text29
  7252  000D62                     __ptext29:
  7253                           	opt stack 0
  7254  000D62                     _draw_time:
  7255                           	opt stack 0
  7256  000D62  FFFF               	dw	65535	; assembler added errata NOP
  7257                           
  7258                           ;clock.c: 816: led_mask0 = 0;
  7259                           
  7260                           ;incstack = 0
  7261  000D64  0E00               	movlw	0
  7262  000D66  6E4B               	movwf	_led_mask0,c
  7263                           
  7264                           ;clock.c: 817: led_mask1 = 0;
  7265  000D68  0E00               	movlw	0
  7266  000D6A  6E35               	movwf	_led_mask1,c
  7267                           
  7268                           ;clock.c: 818: led_mask2 = 0;
  7269  000D6C  0E00               	movlw	0
  7270  000D6E  6E34               	movwf	_led_mask2,c
  7271                           
  7272                           ;clock.c: 819: led_mask3 = 0;
  7273  000D70  0E00               	movlw	0
  7274  000D72  6E33               	movwf	_led_mask3,c
  7275                           
  7276                           ;clock.c: 822: if(!not_set || colon || mode == 1)
  7277  000D74  5048               	movf	_not_set,w,c
  7278  000D76  B4D8               	btfsc	status,2,c
  7279  000D78  D006               	goto	l317
  7280  000D7A  5049               	movf	_colon,w,c
  7281  000D7C  A4D8               	btfss	status,2,c
  7282  000D7E  D003               	goto	l317
  7283  000D80  043C               	decf	_mode,w,c
  7284  000D82  A4D8               	btfss	status,2,c
  7285  000D84  D0DA               	goto	l3683
  7286  000D86                     l317:
  7287  000D86  FFFF               	dw	65535	; assembler added errata NOP
  7288                           
  7289                           ;clock.c: 823: {
  7290                           ;clock.c: 824: uint8_t hours10 = hours;
  7291  000D88  C04A  F01E         	movff	_hours,draw_time@hours10
  7292                           
  7293                           ;clock.c: 825: if(hours > 9)
  7294  000D8C  0E09               	movlw	9
  7295  000D8E  644A               	cpfsgt	_hours,c
  7296  000D90  D004               	goto	l3635
  7297                           
  7298                           ;clock.c: 826: {
  7299                           ;clock.c: 827: hours10 -= 10;
  7300  000D92  0E0A               	movlw	10
  7301  000D94  5E1E               	subwf	draw_time@hours10,f,c
  7302                           
  7303                           ;clock.c: 828: led_mask0 = 0b00010100;
  7304  000D96  0E14               	movlw	20
  7305  000D98  6E4B               	movwf	_led_mask0,c
  7306  000D9A                     l3635:
  7307  000D9A  FFFF               	dw	65535	; assembler added errata NOP
  7308                           
  7309                           ;clock.c: 829: }
  7310                           ;clock.c: 831: const uint8_t *ptr = &led_masks2[hours10];
  7311  000D9C  501E               	movf	draw_time@hours10,w,c
  7312  000D9E  0D04               	mullw	4
  7313  000DA0  0EC1               	movlw	low _led_masks2
  7314  000DA2  24F3               	addwf	prodl,w,c
  7315  000DA4  6E20               	movwf	draw_time@ptr,c
  7316  000DA6  0EBE               	movlw	high _led_masks2
  7317  000DA8  20F4               	addwfc	prodh,w,c
  7318  000DAA  6E21               	movwf	draw_time@ptr+1,c
  7319                           
  7320                           ;clock.c: 832: led_mask0 |= ptr[0];
  7321  000DAC  C020  FFF6         	movff	draw_time@ptr,tblptrl
  7322  000DB0  C021  FFF7         	movff	draw_time@ptr+1,tblptrh
  7323  000DB4                     	if	0	;tblptru may be non-zero
  7324  000DB4                     	endif
  7325  000DB4                     	if	0	;tblptru may be non-zero
  7326  000DB4                     	endif
  7327  000DB4  0008               	tblrd		*
  7328  000DB6  FFFF               	dw	65535	; errata NOP
  7329  000DB8  50F5               	movf	tablat,w,c
  7330  000DBA  124B               	iorwf	_led_mask0,f,c
  7331                           
  7332                           ;clock.c: 833: led_mask1 |= ptr[1];
  7333  000DBC  0E01               	movlw	1
  7334  000DBE  2420               	addwf	draw_time@ptr,w,c
  7335  000DC0  6E1C               	movwf	??_draw_time& (0+255),c
  7336  000DC2  0E00               	movlw	0
  7337  000DC4  2021               	addwfc	draw_time@ptr+1,w,c
  7338  000DC6  6E1D               	movwf	(??_draw_time+1)& (0+255),c
  7339  000DC8  C01C  FFF6         	movff	??_draw_time,tblptrl
  7340  000DCC  C01D  FFF7         	movff	??_draw_time+1,tblptrh
  7341  000DD0                     	if	0	;tblptru may be non-zero
  7342  000DD0                     	endif
  7343  000DD0                     	if	0	;tblptru may be non-zero
  7344  000DD0                     	endif
  7345  000DD0  0008               	tblrd		*
  7346  000DD2  FFFF               	dw	65535	; errata NOP
  7347  000DD4  50F5               	movf	tablat,w,c
  7348  000DD6  1235               	iorwf	_led_mask1,f,c
  7349                           
  7350                           ;clock.c: 834: led_mask2 |= ptr[2];
  7351  000DD8  0E02               	movlw	2
  7352  000DDA  2420               	addwf	draw_time@ptr,w,c
  7353  000DDC  6E1C               	movwf	??_draw_time& (0+255),c
  7354  000DDE  0E00               	movlw	0
  7355  000DE0  2021               	addwfc	draw_time@ptr+1,w,c
  7356  000DE2  6E1D               	movwf	(??_draw_time+1)& (0+255),c
  7357  000DE4  C01C  FFF6         	movff	??_draw_time,tblptrl
  7358  000DE8  C01D  FFF7         	movff	??_draw_time+1,tblptrh
  7359  000DEC                     	if	0	;tblptru may be non-zero
  7360  000DEC                     	endif
  7361  000DEC                     	if	0	;tblptru may be non-zero
  7362  000DEC                     	endif
  7363  000DEC  0008               	tblrd		*
  7364  000DEE  FFFF               	dw	65535	; errata NOP
  7365  000DF0  50F5               	movf	tablat,w,c
  7366  000DF2  1234               	iorwf	_led_mask2,f,c
  7367                           
  7368                           ;clock.c: 835: led_mask3 |= ptr[3];
  7369  000DF4  0E03               	movlw	3
  7370  000DF6  2420               	addwf	draw_time@ptr,w,c
  7371  000DF8  6E1C               	movwf	??_draw_time& (0+255),c
  7372  000DFA  0E00               	movlw	0
  7373  000DFC  2021               	addwfc	draw_time@ptr+1,w,c
  7374  000DFE  6E1D               	movwf	(??_draw_time+1)& (0+255),c
  7375  000E00  C01C  FFF6         	movff	??_draw_time,tblptrl
  7376  000E04  C01D  FFF7         	movff	??_draw_time+1,tblptrh
  7377  000E08                     	if	0	;tblptru may be non-zero
  7378  000E08                     	endif
  7379  000E08                     	if	0	;tblptru may be non-zero
  7380  000E08                     	endif
  7381  000E08  0008               	tblrd		*
  7382  000E0A  FFFF               	dw	65535	; errata NOP
  7383  000E0C  50F5               	movf	tablat,w,c
  7384  000E0E  1233               	iorwf	_led_mask3,f,c
  7385                           
  7386                           ;clock.c: 837: uint8_t minutes10 = minutes / 10;
  7387  000E10  C03F  F014         	movff	_minutes,___awdiv@dividend
  7388  000E14  6A15               	clrf	___awdiv@dividend+1,c
  7389  000E16  0E00               	movlw	0
  7390  000E18  6E17               	movwf	___awdiv@divisor+1,c
  7391  000E1A  0E0A               	movlw	10
  7392  000E1C  6E16               	movwf	___awdiv@divisor,c
  7393  000E1E  ECCF  F00A         	call	___awdiv	;wreg free
  7394  000E22  5014               	movf	?___awdiv,w,c
  7395  000E24  6E1F               	movwf	draw_time@minutes10,c
  7396                           
  7397                           ;clock.c: 838: ptr = &led_masks3[minutes10];
  7398  000E26  501F               	movf	draw_time@minutes10,w,c
  7399  000E28  0D04               	mullw	4
  7400  000E2A  0E99               	movlw	low _led_masks3
  7401  000E2C  24F3               	addwf	prodl,w,c
  7402  000E2E  6E20               	movwf	draw_time@ptr,c
  7403  000E30  0EBE               	movlw	high _led_masks3
  7404  000E32  20F4               	addwfc	prodh,w,c
  7405  000E34  6E21               	movwf	draw_time@ptr+1,c
  7406                           
  7407                           ;clock.c: 839: led_mask0 |= ptr[0];
  7408  000E36  C020  FFF6         	movff	draw_time@ptr,tblptrl
  7409  000E3A  C021  FFF7         	movff	draw_time@ptr+1,tblptrh
  7410  000E3E                     	if	0	;tblptru may be non-zero
  7411  000E3E                     	endif
  7412  000E3E                     	if	0	;tblptru may be non-zero
  7413  000E3E                     	endif
  7414  000E3E  0008               	tblrd		*
  7415  000E40  FFFF               	dw	65535	; errata NOP
  7416  000E42  50F5               	movf	tablat,w,c
  7417  000E44  124B               	iorwf	_led_mask0,f,c
  7418                           
  7419                           ;clock.c: 840: led_mask1 |= ptr[1];
  7420  000E46  0E01               	movlw	1
  7421  000E48  2420               	addwf	draw_time@ptr,w,c
  7422  000E4A  6E1C               	movwf	??_draw_time& (0+255),c
  7423  000E4C  0E00               	movlw	0
  7424  000E4E  2021               	addwfc	draw_time@ptr+1,w,c
  7425  000E50  6E1D               	movwf	(??_draw_time+1)& (0+255),c
  7426  000E52  C01C  FFF6         	movff	??_draw_time,tblptrl
  7427  000E56  C01D  FFF7         	movff	??_draw_time+1,tblptrh
  7428  000E5A                     	if	0	;tblptru may be non-zero
  7429  000E5A                     	endif
  7430  000E5A                     	if	0	;tblptru may be non-zero
  7431  000E5A                     	endif
  7432  000E5A  0008               	tblrd		*
  7433  000E5C  FFFF               	dw	65535	; errata NOP
  7434  000E5E  50F5               	movf	tablat,w,c
  7435  000E60  1235               	iorwf	_led_mask1,f,c
  7436                           
  7437                           ;clock.c: 841: led_mask2 |= ptr[2];
  7438  000E62  0E02               	movlw	2
  7439  000E64  2420               	addwf	draw_time@ptr,w,c
  7440  000E66  6E1C               	movwf	??_draw_time& (0+255),c
  7441  000E68  0E00               	movlw	0
  7442  000E6A  2021               	addwfc	draw_time@ptr+1,w,c
  7443  000E6C  6E1D               	movwf	(??_draw_time+1)& (0+255),c
  7444  000E6E  C01C  FFF6         	movff	??_draw_time,tblptrl
  7445  000E72  C01D  FFF7         	movff	??_draw_time+1,tblptrh
  7446  000E76                     	if	0	;tblptru may be non-zero
  7447  000E76                     	endif
  7448  000E76                     	if	0	;tblptru may be non-zero
  7449  000E76                     	endif
  7450  000E76  0008               	tblrd		*
  7451  000E78  FFFF               	dw	65535	; errata NOP
  7452  000E7A  50F5               	movf	tablat,w,c
  7453  000E7C  1234               	iorwf	_led_mask2,f,c
  7454                           
  7455                           ;clock.c: 842: led_mask3 |= ptr[3];
  7456  000E7E  0E03               	movlw	3
  7457  000E80  2420               	addwf	draw_time@ptr,w,c
  7458  000E82  6E1C               	movwf	??_draw_time& (0+255),c
  7459  000E84  0E00               	movlw	0
  7460  000E86  2021               	addwfc	draw_time@ptr+1,w,c
  7461  000E88  6E1D               	movwf	(??_draw_time+1)& (0+255),c
  7462  000E8A  C01C  FFF6         	movff	??_draw_time,tblptrl
  7463  000E8E  C01D  FFF7         	movff	??_draw_time+1,tblptrh
  7464  000E92                     	if	0	;tblptru may be non-zero
  7465  000E92                     	endif
  7466  000E92                     	if	0	;tblptru may be non-zero
  7467  000E92                     	endif
  7468  000E92  0008               	tblrd		*
  7469  000E94  FFFF               	dw	65535	; errata NOP
  7470  000E96  50F5               	movf	tablat,w,c
  7471  000E98  1233               	iorwf	_led_mask3,f,c
  7472                           
  7473                           ;clock.c: 844: minutes10 = minutes - minutes10 * 10;
  7474  000E9A  501F               	movf	draw_time@minutes10,w,c
  7475  000E9C  0D0A               	mullw	10
  7476  000E9E  50F3               	movf	prodl,w,c
  7477  000EA0  0800               	sublw	0
  7478  000EA2  243F               	addwf	_minutes,w,c
  7479  000EA4  6E1F               	movwf	draw_time@minutes10,c
  7480                           
  7481                           ;clock.c: 845: ptr = &led_masks4[minutes10];
  7482  000EA6  501F               	movf	draw_time@minutes10,w,c
  7483  000EA8  0D04               	mullw	4
  7484  000EAA  0E71               	movlw	low _led_masks4
  7485  000EAC  24F3               	addwf	prodl,w,c
  7486  000EAE  6E20               	movwf	draw_time@ptr,c
  7487  000EB0  0EBE               	movlw	high _led_masks4
  7488  000EB2  20F4               	addwfc	prodh,w,c
  7489  000EB4  6E21               	movwf	draw_time@ptr+1,c
  7490                           
  7491                           ;clock.c: 846: led_mask0 |= ptr[0];
  7492  000EB6  C020  FFF6         	movff	draw_time@ptr,tblptrl
  7493  000EBA  C021  FFF7         	movff	draw_time@ptr+1,tblptrh
  7494  000EBE                     	if	0	;tblptru may be non-zero
  7495  000EBE                     	endif
  7496  000EBE                     	if	0	;tblptru may be non-zero
  7497  000EBE                     	endif
  7498  000EBE  0008               	tblrd		*
  7499  000EC0  FFFF               	dw	65535	; errata NOP
  7500  000EC2  50F5               	movf	tablat,w,c
  7501  000EC4  124B               	iorwf	_led_mask0,f,c
  7502                           
  7503                           ;clock.c: 847: led_mask1 |= ptr[1];
  7504  000EC6  0E01               	movlw	1
  7505  000EC8  2420               	addwf	draw_time@ptr,w,c
  7506  000ECA  6E1C               	movwf	??_draw_time& (0+255),c
  7507  000ECC  0E00               	movlw	0
  7508  000ECE  2021               	addwfc	draw_time@ptr+1,w,c
  7509  000ED0  6E1D               	movwf	(??_draw_time+1)& (0+255),c
  7510  000ED2  C01C  FFF6         	movff	??_draw_time,tblptrl
  7511  000ED6  C01D  FFF7         	movff	??_draw_time+1,tblptrh
  7512  000EDA                     	if	0	;tblptru may be non-zero
  7513  000EDA                     	endif
  7514  000EDA                     	if	0	;tblptru may be non-zero
  7515  000EDA                     	endif
  7516  000EDA  0008               	tblrd		*
  7517  000EDC  FFFF               	dw	65535	; errata NOP
  7518  000EDE  50F5               	movf	tablat,w,c
  7519  000EE0  1235               	iorwf	_led_mask1,f,c
  7520                           
  7521                           ;clock.c: 848: led_mask2 |= ptr[2];
  7522  000EE2  0E02               	movlw	2
  7523  000EE4  2420               	addwf	draw_time@ptr,w,c
  7524  000EE6  6E1C               	movwf	??_draw_time& (0+255),c
  7525  000EE8  0E00               	movlw	0
  7526  000EEA  2021               	addwfc	draw_time@ptr+1,w,c
  7527  000EEC  6E1D               	movwf	(??_draw_time+1)& (0+255),c
  7528  000EEE  C01C  FFF6         	movff	??_draw_time,tblptrl
  7529  000EF2  C01D  FFF7         	movff	??_draw_time+1,tblptrh
  7530  000EF6                     	if	0	;tblptru may be non-zero
  7531  000EF6                     	endif
  7532  000EF6                     	if	0	;tblptru may be non-zero
  7533  000EF6                     	endif
  7534  000EF6  0008               	tblrd		*
  7535  000EF8  FFFF               	dw	65535	; errata NOP
  7536  000EFA  50F5               	movf	tablat,w,c
  7537  000EFC  1234               	iorwf	_led_mask2,f,c
  7538                           
  7539                           ;clock.c: 849: led_mask3 |= ptr[3];
  7540  000EFE  0E03               	movlw	3
  7541  000F00  2420               	addwf	draw_time@ptr,w,c
  7542  000F02  6E1C               	movwf	??_draw_time& (0+255),c
  7543  000F04  0E00               	movlw	0
  7544  000F06  2021               	addwfc	draw_time@ptr+1,w,c
  7545  000F08  6E1D               	movwf	(??_draw_time+1)& (0+255),c
  7546  000F0A  C01C  FFF6         	movff	??_draw_time,tblptrl
  7547  000F0E  C01D  FFF7         	movff	??_draw_time+1,tblptrh
  7548  000F12                     	if	0	;tblptru may be non-zero
  7549  000F12                     	endif
  7550  000F12                     	if	0	;tblptru may be non-zero
  7551  000F12                     	endif
  7552  000F12  0008               	tblrd		*
  7553  000F14  FFFF               	dw	65535	; errata NOP
  7554  000F16  50F5               	movf	tablat,w,c
  7555  000F18  1233               	iorwf	_led_mask3,f,c
  7556                           
  7557                           ;clock.c: 851: if(colon || mode == 1)
  7558  000F1A  5049               	movf	_colon,w,c
  7559  000F1C  A4D8               	btfss	status,2,c
  7560  000F1E  D003               	goto	l3673
  7561  000F20  043C               	decf	_mode,w,c
  7562  000F22  A4D8               	btfss	status,2,c
  7563  000F24  D003               	goto	l3675
  7564  000F26                     l3673:
  7565  000F26  FFFF               	dw	65535	; assembler added errata NOP
  7566                           
  7567                           ;clock.c: 852: {
  7568                           ;clock.c: 853: led_mask1 |= 0b00001000;
  7569  000F28  8635               	bsf	_led_mask1,3,c
  7570                           
  7571                           ;clock.c: 854: led_mask2 |= 0b00100000;
  7572  000F2A  8A34               	bsf	_led_mask2,5,c
  7573  000F2C                     l3675:
  7574  000F2C  FFFF               	dw	65535	; assembler added errata NOP
  7575                           
  7576                           ;clock.c: 855: }
  7577                           ;clock.c: 857: if(ampm)
  7578  000F2E  503E               	movf	_ampm,w,c
  7579  000F30  A4D8               	btfss	status,2,c
  7580                           
  7581                           ;clock.c: 858: {
  7582                           ;clock.c: 859: led_mask0 |= 0b10000000;
  7583  000F32  8E4B               	bsf	_led_mask0,7,c
  7584                           
  7585                           ;clock.c: 860: }
  7586                           ;clock.c: 862: if(alarm)
  7587  000F34  503D               	movf	_alarm,w,c
  7588  000F36  A4D8               	btfss	status,2,c
  7589                           
  7590                           ;clock.c: 863: {
  7591                           ;clock.c: 864: led_mask1 |= 0b00000001;
  7592  000F38  8035               	bsf	_led_mask1,0,c
  7593  000F3A                     l3683:
  7594  000F3A  FFFF               	dw	65535	; assembler added errata NOP
  7595                           
  7596                           ;clock.c: 865: }
  7597                           ;clock.c: 866: }
  7598                           ;clock.c: 868: write_leds();
  7599  000F3C  ECED  F002         	call	_write_leds	;wreg free
  7600  000F40  0012               	return		;funcret
  7601  000F42  FFFF               	dw	65535	; errata NOP
  7602  000F44                     __end_of_draw_time:
  7603                           	opt stack 0
  7604                           tblptru	equ	0xFF8
  7605                           tblptrh	equ	0xFF7
  7606                           tblptrl	equ	0xFF6
  7607                           tablat	equ	0xFF5
  7608                           prodh	equ	0xFF4
  7609                           prodl	equ	0xFF3
  7610                           intcon	equ	0xFF2
  7611                           intcon2	equ	0xFF1
  7612                           intcon3	equ	0xFF0
  7613                           postinc0	equ	0xFEE
  7614                           wreg	equ	0xFE8
  7615                           postdec1	equ	0xFE5
  7616                           fsr1h	equ	0xFE2
  7617                           fsr1l	equ	0xFE1
  7618                           indf2	equ	0xFDF
  7619                           fsr2h	equ	0xFDA
  7620                           fsr2l	equ	0xFD9
  7621                           status	equ	0xFD8
  7622                           
  7623 ;; *************** function _decrement_alarm_hours *****************
  7624 ;; Defined at:
  7625 ;;		line 1039 in file "clock.c"
  7626 ;; Parameters:    Size  Location     Type
  7627 ;;		None
  7628 ;; Auto vars:     Size  Location     Type
  7629 ;;		None
  7630 ;; Return value:  Size  Location     Type
  7631 ;;                  1    wreg      void 
  7632 ;; Registers used:
  7633 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7634 ;; Tracked objects:
  7635 ;;		On entry : 0/0
  7636 ;;		On exit  : 0/0
  7637 ;;		Unchanged: 0/0
  7638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7643 ;;Total ram usage:        0 bytes
  7644 ;; Hardware stack levels used:    1
  7645 ;; Hardware stack levels required when called:    4
  7646 ;; This function calls:
  7647 ;;		_draw_alarm
  7648 ;; This function is called by:
  7649 ;;		_do_hour_down
  7650 ;; This function uses a non-reentrant model
  7651 ;;
  7652                           
  7653                           	psect	text30
  7654  001B7C                     __ptext30:
  7655                           	opt stack 0
  7656  001B7C                     _decrement_alarm_hours:
  7657                           	opt stack 0
  7658  001B7C  FFFF               	dw	65535	; assembler added errata NOP
  7659                           
  7660                           ;clock.c: 1041: alarm_hours--;
  7661                           
  7662                           ;incstack = 0
  7663  001B7E  0647               	decf	_alarm_hours,f,c
  7664                           
  7665                           ;clock.c: 1042: if(alarm_hours == 0)
  7666  001B80  5047               	movf	_alarm_hours,w,c
  7667  001B82  A4D8               	btfss	status,2,c
  7668  001B84  D002               	goto	l3923
  7669                           
  7670                           ;clock.c: 1043: {
  7671                           ;clock.c: 1044: alarm_hours = 12;
  7672  001B86  0E0C               	movlw	12
  7673  001B88  6E47               	movwf	_alarm_hours,c
  7674  001B8A                     l3923:
  7675  001B8A  FFFF               	dw	65535	; assembler added errata NOP
  7676                           
  7677                           ;clock.c: 1045: }
  7678                           ;clock.c: 1046: if(alarm_hours == 11)
  7679  001B8C  0E0B               	movlw	11
  7680  001B8E  1847               	xorwf	_alarm_hours,w,c
  7681  001B90  A4D8               	btfss	status,2,c
  7682  001B92  D009               	goto	l3927
  7683                           
  7684                           ;clock.c: 1047: {
  7685                           ;clock.c: 1048: alarm_ampm = !alarm_ampm;
  7686  001B94  5038               	movf	_alarm_ampm,w,c
  7687  001B96  A4D8               	btfss	status,2,c
  7688  001B98  D002               	goto	u5440
  7689  001B9A  0E01               	movlw	1
  7690  001B9C  D002               	goto	u5450
  7691  001B9E                     u5440:
  7692  001B9E  FFFF               	dw	65535	; assembler added errata NOP
  7693  001BA0  0E00               	movlw	0
  7694  001BA2                     u5450:
  7695  001BA2  FFFF               	dw	65535	; assembler added errata NOP
  7696  001BA4  6E38               	movwf	_alarm_ampm,c
  7697  001BA6                     l3927:
  7698  001BA6  FFFF               	dw	65535	; assembler added errata NOP
  7699                           
  7700                           ;clock.c: 1049: }
  7701                           ;clock.c: 1050: draw_alarm();
  7702  001BA8  EC82  F008         	call	_draw_alarm	;wreg free
  7703  001BAC  0012               	return		;funcret
  7704  001BAE  FFFF               	dw	65535	; errata NOP
  7705  001BB0                     __end_of_decrement_alarm_hours:
  7706                           	opt stack 0
  7707                           tblptru	equ	0xFF8
  7708                           tblptrh	equ	0xFF7
  7709                           tblptrl	equ	0xFF6
  7710                           tablat	equ	0xFF5
  7711                           prodh	equ	0xFF4
  7712                           prodl	equ	0xFF3
  7713                           intcon	equ	0xFF2
  7714                           intcon2	equ	0xFF1
  7715                           intcon3	equ	0xFF0
  7716                           postinc0	equ	0xFEE
  7717                           wreg	equ	0xFE8
  7718                           postdec1	equ	0xFE5
  7719                           fsr1h	equ	0xFE2
  7720                           fsr1l	equ	0xFE1
  7721                           indf2	equ	0xFDF
  7722                           fsr2h	equ	0xFDA
  7723                           fsr2l	equ	0xFD9
  7724                           status	equ	0xFD8
  7725                           
  7726 ;; *************** function _draw_alarm *****************
  7727 ;; Defined at:
  7728 ;;		line 873 in file "clock.c"
  7729 ;; Parameters:    Size  Location     Type
  7730 ;;		None
  7731 ;; Auto vars:     Size  Location     Type
  7732 ;;  ptr             2   31[COMRAM] PTR const unsigned char 
  7733 ;;		 -> led_masks4(40), led_masks3(40), led_masks2(40), 
  7734 ;;  minutes10       1   30[COMRAM] unsigned char 
  7735 ;;  hours10         1   29[COMRAM] unsigned char 
  7736 ;; Return value:  Size  Location     Type
  7737 ;;                  1    wreg      void 
  7738 ;; Registers used:
  7739 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7740 ;; Tracked objects:
  7741 ;;		On entry : 0/0
  7742 ;;		On exit  : 0/0
  7743 ;;		Unchanged: 0/0
  7744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7746 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7747 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7748 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7749 ;;Total ram usage:        6 bytes
  7750 ;; Hardware stack levels used:    1
  7751 ;; Hardware stack levels required when called:    3
  7752 ;; This function calls:
  7753 ;;		___awdiv
  7754 ;;		_write_leds
  7755 ;; This function is called by:
  7756 ;;		_increment_alarm_minutes
  7757 ;;		_decrement_alarm_minutes
  7758 ;;		_increment_alarm_hours
  7759 ;;		_decrement_alarm_hours
  7760 ;;		_handle_ir
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763                           
  7764                           	psect	text31
  7765  001104                     __ptext31:
  7766                           	opt stack 0
  7767  001104                     _draw_alarm:
  7768                           	opt stack 0
  7769  001104  FFFF               	dw	65535	; assembler added errata NOP
  7770                           
  7771                           ;clock.c: 876: led_mask0 = 0;
  7772                           
  7773                           ;incstack = 0
  7774  001106  0E00               	movlw	0
  7775  001108  6E4B               	movwf	_led_mask0,c
  7776                           
  7777                           ;clock.c: 877: led_mask1 = 0;
  7778  00110A  0E00               	movlw	0
  7779  00110C  6E35               	movwf	_led_mask1,c
  7780                           
  7781                           ;clock.c: 878: led_mask2 = 0;
  7782  00110E  0E00               	movlw	0
  7783  001110  6E34               	movwf	_led_mask2,c
  7784                           
  7785                           ;clock.c: 879: led_mask3 = 0;
  7786  001112  0E00               	movlw	0
  7787  001114  6E33               	movwf	_led_mask3,c
  7788                           
  7789                           ;clock.c: 882: uint8_t hours10 = alarm_hours;
  7790  001116  C047  F01E         	movff	_alarm_hours,draw_alarm@hours10
  7791                           
  7792                           ;clock.c: 883: if(alarm_hours > 9)
  7793  00111A  0E09               	movlw	9
  7794  00111C  6447               	cpfsgt	_alarm_hours,c
  7795  00111E  D004               	goto	l3695
  7796                           
  7797                           ;clock.c: 884: {
  7798                           ;clock.c: 885: hours10 -= 10;
  7799  001120  0E0A               	movlw	10
  7800  001122  5E1E               	subwf	draw_alarm@hours10,f,c
  7801                           
  7802                           ;clock.c: 886: led_mask0 = 0b00010100;
  7803  001124  0E14               	movlw	20
  7804  001126  6E4B               	movwf	_led_mask0,c
  7805  001128                     l3695:
  7806  001128  FFFF               	dw	65535	; assembler added errata NOP
  7807                           
  7808                           ;clock.c: 887: }
  7809                           ;clock.c: 889: const uint8_t *ptr = &led_masks2[hours10];
  7810  00112A  501E               	movf	draw_alarm@hours10,w,c
  7811  00112C  0D04               	mullw	4
  7812  00112E  0EC1               	movlw	low _led_masks2
  7813  001130  24F3               	addwf	prodl,w,c
  7814  001132  6E20               	movwf	draw_alarm@ptr,c
  7815  001134  0EBE               	movlw	high _led_masks2
  7816  001136  20F4               	addwfc	prodh,w,c
  7817  001138  6E21               	movwf	draw_alarm@ptr+1,c
  7818                           
  7819                           ;clock.c: 890: led_mask0 |= ptr[0];
  7820  00113A  C020  FFF6         	movff	draw_alarm@ptr,tblptrl
  7821  00113E  C021  FFF7         	movff	draw_alarm@ptr+1,tblptrh
  7822  001142                     	if	0	;tblptru may be non-zero
  7823  001142                     	endif
  7824  001142                     	if	0	;tblptru may be non-zero
  7825  001142                     	endif
  7826  001142  0008               	tblrd		*
  7827  001144  FFFF               	dw	65535	; errata NOP
  7828  001146  50F5               	movf	tablat,w,c
  7829  001148  124B               	iorwf	_led_mask0,f,c
  7830                           
  7831                           ;clock.c: 891: led_mask1 |= ptr[1];
  7832  00114A  0E01               	movlw	1
  7833  00114C  2420               	addwf	draw_alarm@ptr,w,c
  7834  00114E  6E1C               	movwf	??_draw_alarm& (0+255),c
  7835  001150  0E00               	movlw	0
  7836  001152  2021               	addwfc	draw_alarm@ptr+1,w,c
  7837  001154  6E1D               	movwf	(??_draw_alarm+1)& (0+255),c
  7838  001156  C01C  FFF6         	movff	??_draw_alarm,tblptrl
  7839  00115A  C01D  FFF7         	movff	??_draw_alarm+1,tblptrh
  7840  00115E                     	if	0	;tblptru may be non-zero
  7841  00115E                     	endif
  7842  00115E                     	if	0	;tblptru may be non-zero
  7843  00115E                     	endif
  7844  00115E  0008               	tblrd		*
  7845  001160  FFFF               	dw	65535	; errata NOP
  7846  001162  50F5               	movf	tablat,w,c
  7847  001164  1235               	iorwf	_led_mask1,f,c
  7848                           
  7849                           ;clock.c: 892: led_mask2 |= ptr[2];
  7850  001166  0E02               	movlw	2
  7851  001168  2420               	addwf	draw_alarm@ptr,w,c
  7852  00116A  6E1C               	movwf	??_draw_alarm& (0+255),c
  7853  00116C  0E00               	movlw	0
  7854  00116E  2021               	addwfc	draw_alarm@ptr+1,w,c
  7855  001170  6E1D               	movwf	(??_draw_alarm+1)& (0+255),c
  7856  001172  C01C  FFF6         	movff	??_draw_alarm,tblptrl
  7857  001176  C01D  FFF7         	movff	??_draw_alarm+1,tblptrh
  7858  00117A                     	if	0	;tblptru may be non-zero
  7859  00117A                     	endif
  7860  00117A                     	if	0	;tblptru may be non-zero
  7861  00117A                     	endif
  7862  00117A  0008               	tblrd		*
  7863  00117C  FFFF               	dw	65535	; errata NOP
  7864  00117E  50F5               	movf	tablat,w,c
  7865  001180  1234               	iorwf	_led_mask2,f,c
  7866                           
  7867                           ;clock.c: 893: led_mask3 |= ptr[3];
  7868  001182  0E03               	movlw	3
  7869  001184  2420               	addwf	draw_alarm@ptr,w,c
  7870  001186  6E1C               	movwf	??_draw_alarm& (0+255),c
  7871  001188  0E00               	movlw	0
  7872  00118A  2021               	addwfc	draw_alarm@ptr+1,w,c
  7873  00118C  6E1D               	movwf	(??_draw_alarm+1)& (0+255),c
  7874  00118E  C01C  FFF6         	movff	??_draw_alarm,tblptrl
  7875  001192  C01D  FFF7         	movff	??_draw_alarm+1,tblptrh
  7876  001196                     	if	0	;tblptru may be non-zero
  7877  001196                     	endif
  7878  001196                     	if	0	;tblptru may be non-zero
  7879  001196                     	endif
  7880  001196  0008               	tblrd		*
  7881  001198  FFFF               	dw	65535	; errata NOP
  7882  00119A  50F5               	movf	tablat,w,c
  7883  00119C  1233               	iorwf	_led_mask3,f,c
  7884                           
  7885                           ;clock.c: 895: uint8_t minutes10 = alarm_minutes / 10;
  7886  00119E  C039  F014         	movff	_alarm_minutes,___awdiv@dividend
  7887  0011A2  6A15               	clrf	___awdiv@dividend+1,c
  7888  0011A4  0E00               	movlw	0
  7889  0011A6  6E17               	movwf	___awdiv@divisor+1,c
  7890  0011A8  0E0A               	movlw	10
  7891  0011AA  6E16               	movwf	___awdiv@divisor,c
  7892  0011AC  ECCF  F00A         	call	___awdiv	;wreg free
  7893  0011B0  5014               	movf	?___awdiv,w,c
  7894  0011B2  6E1F               	movwf	draw_alarm@minutes10,c
  7895                           
  7896                           ;clock.c: 896: ptr = &led_masks3[minutes10];
  7897  0011B4  501F               	movf	draw_alarm@minutes10,w,c
  7898  0011B6  0D04               	mullw	4
  7899  0011B8  0E99               	movlw	low _led_masks3
  7900  0011BA  24F3               	addwf	prodl,w,c
  7901  0011BC  6E20               	movwf	draw_alarm@ptr,c
  7902  0011BE  0EBE               	movlw	high _led_masks3
  7903  0011C0  20F4               	addwfc	prodh,w,c
  7904  0011C2  6E21               	movwf	draw_alarm@ptr+1,c
  7905                           
  7906                           ;clock.c: 897: led_mask0 |= ptr[0];
  7907  0011C4  C020  FFF6         	movff	draw_alarm@ptr,tblptrl
  7908  0011C8  C021  FFF7         	movff	draw_alarm@ptr+1,tblptrh
  7909  0011CC                     	if	0	;tblptru may be non-zero
  7910  0011CC                     	endif
  7911  0011CC                     	if	0	;tblptru may be non-zero
  7912  0011CC                     	endif
  7913  0011CC  0008               	tblrd		*
  7914  0011CE  FFFF               	dw	65535	; errata NOP
  7915  0011D0  50F5               	movf	tablat,w,c
  7916  0011D2  124B               	iorwf	_led_mask0,f,c
  7917                           
  7918                           ;clock.c: 898: led_mask1 |= ptr[1];
  7919  0011D4  0E01               	movlw	1
  7920  0011D6  2420               	addwf	draw_alarm@ptr,w,c
  7921  0011D8  6E1C               	movwf	??_draw_alarm& (0+255),c
  7922  0011DA  0E00               	movlw	0
  7923  0011DC  2021               	addwfc	draw_alarm@ptr+1,w,c
  7924  0011DE  6E1D               	movwf	(??_draw_alarm+1)& (0+255),c
  7925  0011E0  C01C  FFF6         	movff	??_draw_alarm,tblptrl
  7926  0011E4  C01D  FFF7         	movff	??_draw_alarm+1,tblptrh
  7927  0011E8                     	if	0	;tblptru may be non-zero
  7928  0011E8                     	endif
  7929  0011E8                     	if	0	;tblptru may be non-zero
  7930  0011E8                     	endif
  7931  0011E8  0008               	tblrd		*
  7932  0011EA  FFFF               	dw	65535	; errata NOP
  7933  0011EC  50F5               	movf	tablat,w,c
  7934  0011EE  1235               	iorwf	_led_mask1,f,c
  7935                           
  7936                           ;clock.c: 899: led_mask2 |= ptr[2];
  7937  0011F0  0E02               	movlw	2
  7938  0011F2  2420               	addwf	draw_alarm@ptr,w,c
  7939  0011F4  6E1C               	movwf	??_draw_alarm& (0+255),c
  7940  0011F6  0E00               	movlw	0
  7941  0011F8  2021               	addwfc	draw_alarm@ptr+1,w,c
  7942  0011FA  6E1D               	movwf	(??_draw_alarm+1)& (0+255),c
  7943  0011FC  C01C  FFF6         	movff	??_draw_alarm,tblptrl
  7944  001200  C01D  FFF7         	movff	??_draw_alarm+1,tblptrh
  7945  001204                     	if	0	;tblptru may be non-zero
  7946  001204                     	endif
  7947  001204                     	if	0	;tblptru may be non-zero
  7948  001204                     	endif
  7949  001204  0008               	tblrd		*
  7950  001206  FFFF               	dw	65535	; errata NOP
  7951  001208  50F5               	movf	tablat,w,c
  7952  00120A  1234               	iorwf	_led_mask2,f,c
  7953                           
  7954                           ;clock.c: 900: led_mask3 |= ptr[3];
  7955  00120C  0E03               	movlw	3
  7956  00120E  2420               	addwf	draw_alarm@ptr,w,c
  7957  001210  6E1C               	movwf	??_draw_alarm& (0+255),c
  7958  001212  0E00               	movlw	0
  7959  001214  2021               	addwfc	draw_alarm@ptr+1,w,c
  7960  001216  6E1D               	movwf	(??_draw_alarm+1)& (0+255),c
  7961  001218  C01C  FFF6         	movff	??_draw_alarm,tblptrl
  7962  00121C  C01D  FFF7         	movff	??_draw_alarm+1,tblptrh
  7963  001220                     	if	0	;tblptru may be non-zero
  7964  001220                     	endif
  7965  001220                     	if	0	;tblptru may be non-zero
  7966  001220                     	endif
  7967  001220  0008               	tblrd		*
  7968  001222  FFFF               	dw	65535	; errata NOP
  7969  001224  50F5               	movf	tablat,w,c
  7970  001226  1233               	iorwf	_led_mask3,f,c
  7971                           
  7972                           ;clock.c: 902: minutes10 = alarm_minutes - minutes10 * 10;
  7973  001228  501F               	movf	draw_alarm@minutes10,w,c
  7974  00122A  0D0A               	mullw	10
  7975  00122C  50F3               	movf	prodl,w,c
  7976  00122E  0800               	sublw	0
  7977  001230  2439               	addwf	_alarm_minutes,w,c
  7978  001232  6E1F               	movwf	draw_alarm@minutes10,c
  7979                           
  7980                           ;clock.c: 903: ptr = &led_masks4[minutes10];
  7981  001234  501F               	movf	draw_alarm@minutes10,w,c
  7982  001236  0D04               	mullw	4
  7983  001238  0E71               	movlw	low _led_masks4
  7984  00123A  24F3               	addwf	prodl,w,c
  7985  00123C  6E20               	movwf	draw_alarm@ptr,c
  7986  00123E  0EBE               	movlw	high _led_masks4
  7987  001240  20F4               	addwfc	prodh,w,c
  7988  001242  6E21               	movwf	draw_alarm@ptr+1,c
  7989                           
  7990                           ;clock.c: 904: led_mask0 |= ptr[0];
  7991  001244  C020  FFF6         	movff	draw_alarm@ptr,tblptrl
  7992  001248  C021  FFF7         	movff	draw_alarm@ptr+1,tblptrh
  7993  00124C                     	if	0	;tblptru may be non-zero
  7994  00124C                     	endif
  7995  00124C                     	if	0	;tblptru may be non-zero
  7996  00124C                     	endif
  7997  00124C  0008               	tblrd		*
  7998  00124E  FFFF               	dw	65535	; errata NOP
  7999  001250  50F5               	movf	tablat,w,c
  8000  001252  124B               	iorwf	_led_mask0,f,c
  8001                           
  8002                           ;clock.c: 905: led_mask1 |= ptr[1];
  8003  001254  0E01               	movlw	1
  8004  001256  2420               	addwf	draw_alarm@ptr,w,c
  8005  001258  6E1C               	movwf	??_draw_alarm& (0+255),c
  8006  00125A  0E00               	movlw	0
  8007  00125C  2021               	addwfc	draw_alarm@ptr+1,w,c
  8008  00125E  6E1D               	movwf	(??_draw_alarm+1)& (0+255),c
  8009  001260  C01C  FFF6         	movff	??_draw_alarm,tblptrl
  8010  001264  C01D  FFF7         	movff	??_draw_alarm+1,tblptrh
  8011  001268                     	if	0	;tblptru may be non-zero
  8012  001268                     	endif
  8013  001268                     	if	0	;tblptru may be non-zero
  8014  001268                     	endif
  8015  001268  0008               	tblrd		*
  8016  00126A  FFFF               	dw	65535	; errata NOP
  8017  00126C  50F5               	movf	tablat,w,c
  8018  00126E  1235               	iorwf	_led_mask1,f,c
  8019                           
  8020                           ;clock.c: 906: led_mask2 |= ptr[2];
  8021  001270  0E02               	movlw	2
  8022  001272  2420               	addwf	draw_alarm@ptr,w,c
  8023  001274  6E1C               	movwf	??_draw_alarm& (0+255),c
  8024  001276  0E00               	movlw	0
  8025  001278  2021               	addwfc	draw_alarm@ptr+1,w,c
  8026  00127A  6E1D               	movwf	(??_draw_alarm+1)& (0+255),c
  8027  00127C  C01C  FFF6         	movff	??_draw_alarm,tblptrl
  8028  001280  C01D  FFF7         	movff	??_draw_alarm+1,tblptrh
  8029  001284                     	if	0	;tblptru may be non-zero
  8030  001284                     	endif
  8031  001284                     	if	0	;tblptru may be non-zero
  8032  001284                     	endif
  8033  001284  0008               	tblrd		*
  8034  001286  FFFF               	dw	65535	; errata NOP
  8035  001288  50F5               	movf	tablat,w,c
  8036  00128A  1234               	iorwf	_led_mask2,f,c
  8037                           
  8038                           ;clock.c: 907: led_mask3 |= ptr[3];
  8039  00128C  0E03               	movlw	3
  8040  00128E  2420               	addwf	draw_alarm@ptr,w,c
  8041  001290  6E1C               	movwf	??_draw_alarm& (0+255),c
  8042  001292  0E00               	movlw	0
  8043  001294  2021               	addwfc	draw_alarm@ptr+1,w,c
  8044  001296  6E1D               	movwf	(??_draw_alarm+1)& (0+255),c
  8045  001298  C01C  FFF6         	movff	??_draw_alarm,tblptrl
  8046  00129C  C01D  FFF7         	movff	??_draw_alarm+1,tblptrh
  8047  0012A0                     	if	0	;tblptru may be non-zero
  8048  0012A0                     	endif
  8049  0012A0                     	if	0	;tblptru may be non-zero
  8050  0012A0                     	endif
  8051  0012A0  0008               	tblrd		*
  8052  0012A2  FFFF               	dw	65535	; errata NOP
  8053  0012A4  50F5               	movf	tablat,w,c
  8054  0012A6  1233               	iorwf	_led_mask3,f,c
  8055                           
  8056                           ;clock.c: 909: led_mask1 |= 0b00001000;
  8057  0012A8  8635               	bsf	_led_mask1,3,c
  8058                           
  8059                           ;clock.c: 910: led_mask2 |= 0b00100000;
  8060  0012AA  8A34               	bsf	_led_mask2,5,c
  8061                           
  8062                           ;clock.c: 912: if(alarm_ampm)
  8063  0012AC  5038               	movf	_alarm_ampm,w,c
  8064  0012AE  A4D8               	btfss	status,2,c
  8065                           
  8066                           ;clock.c: 913: {
  8067                           ;clock.c: 914: led_mask0 |= 0b10000000;
  8068  0012B0  8E4B               	bsf	_led_mask0,7,c
  8069                           
  8070                           ;clock.c: 915: }
  8071                           ;clock.c: 917: if(alarm)
  8072  0012B2  503D               	movf	_alarm,w,c
  8073  0012B4  A4D8               	btfss	status,2,c
  8074                           
  8075                           ;clock.c: 918: {
  8076                           ;clock.c: 919: led_mask1 |= 0b00000001;
  8077  0012B6  8035               	bsf	_led_mask1,0,c
  8078                           
  8079                           ;clock.c: 920: }
  8080                           ;clock.c: 922: write_leds();
  8081  0012B8  ECED  F002         	call	_write_leds	;wreg free
  8082  0012BC  0012               	return		;funcret
  8083  0012BE  FFFF               	dw	65535	; errata NOP
  8084  0012C0                     __end_of_draw_alarm:
  8085                           	opt stack 0
  8086                           tblptru	equ	0xFF8
  8087                           tblptrh	equ	0xFF7
  8088                           tblptrl	equ	0xFF6
  8089                           tablat	equ	0xFF5
  8090                           prodh	equ	0xFF4
  8091                           prodl	equ	0xFF3
  8092                           intcon	equ	0xFF2
  8093                           intcon2	equ	0xFF1
  8094                           intcon3	equ	0xFF0
  8095                           postinc0	equ	0xFEE
  8096                           wreg	equ	0xFE8
  8097                           postdec1	equ	0xFE5
  8098                           fsr1h	equ	0xFE2
  8099                           fsr1l	equ	0xFE1
  8100                           indf2	equ	0xFDF
  8101                           fsr2h	equ	0xFDA
  8102                           fsr2l	equ	0xFD9
  8103                           status	equ	0xFD8
  8104                           
  8105 ;; *************** function _write_leds *****************
  8106 ;; Defined at:
  8107 ;;		line 696 in file "clock.c"
  8108 ;; Parameters:    Size  Location     Type
  8109 ;;		None
  8110 ;; Auto vars:     Size  Location     Type
  8111 ;;		None
  8112 ;; Return value:  Size  Location     Type
  8113 ;;                  1    wreg      void 
  8114 ;; Registers used:
  8115 ;;		wreg, status,2, status,0
  8116 ;; Tracked objects:
  8117 ;;		On entry : 0/0
  8118 ;;		On exit  : 0/0
  8119 ;;		Unchanged: 0/0
  8120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8123 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8124 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8125 ;;Total ram usage:        1 bytes
  8126 ;; Hardware stack levels used:    1
  8127 ;; Hardware stack levels required when called:    2
  8128 ;; This function calls:
  8129 ;;		Nothing
  8130 ;; This function is called by:
  8131 ;;		_draw_time
  8132 ;;		_draw_alarm
  8133 ;;		_draw_test
  8134 ;;		_do_hour_up
  8135 ;;		_do_hour_down
  8136 ;; This function uses a non-reentrant model
  8137 ;;
  8138                           
  8139                           	psect	text32
  8140  0005DA                     __ptext32:
  8141                           	opt stack 0
  8142  0005DA                     _write_leds:
  8143                           	opt stack 0
  8144  0005DA  FFFF               	dw	65535	; assembler added errata NOP
  8145                           
  8146                           ;clock.c: 698: LATAbits.LATA0 = led_mask0 & 0x01;
  8147                           
  8148                           ;incstack = 0
  8149  0005DC  C04B  F014         	movff	_led_mask0,??_write_leds
  8150  0005E0  0E01               	movlw	1
  8151  0005E2  1614               	andwf	??_write_leds,f,c
  8152  0005E4  5089               	movf	3977,w,c	;volatile
  8153  0005E6  1814               	xorwf	??_write_leds,w,c
  8154  0005E8  0BFE               	andlw	-2
  8155  0005EA  1814               	xorwf	??_write_leds,w,c
  8156  0005EC  6E89               	movwf	3977,c	;volatile
  8157                           
  8158                           ;clock.c: 699: LATAbits.LATA1 = (led_mask0 & 0x02) ? 1 : 0;
  8159  0005EE  A24B               	btfss	_led_mask0,1,c
  8160  0005F0  D003               	goto	u4390
  8161  0005F2  6A14               	clrf	??_write_leds& (0+255),c
  8162  0005F4  2A14               	incf	??_write_leds& (0+255),f,c
  8163  0005F6  D002               	goto	u4408
  8164  0005F8                     u4390:
  8165  0005F8  FFFF               	dw	65535	; assembler added errata NOP
  8166  0005FA  6A14               	clrf	??_write_leds& (0+255),c
  8167  0005FC                     u4408:
  8168  0005FC  FFFF               	dw	65535	; assembler added errata NOP
  8169  0005FE  4614               	rlncf	??_write_leds,f,c
  8170  000600  5089               	movf	3977,w,c	;volatile
  8171  000602  1814               	xorwf	??_write_leds,w,c
  8172  000604  0BFD               	andlw	-3
  8173  000606  1814               	xorwf	??_write_leds,w,c
  8174  000608  6E89               	movwf	3977,c	;volatile
  8175                           
  8176                           ;clock.c: 700: LATAbits.LATA2 = (led_mask0 & 0x04) ? 1 : 0;
  8177  00060A  A44B               	btfss	_led_mask0,2,c
  8178  00060C  D003               	goto	u4410
  8179  00060E  6A14               	clrf	??_write_leds& (0+255),c
  8180  000610  2A14               	incf	??_write_leds& (0+255),f,c
  8181  000612  D002               	goto	u4428
  8182  000614                     u4410:
  8183  000614  FFFF               	dw	65535	; assembler added errata NOP
  8184  000616  6A14               	clrf	??_write_leds& (0+255),c
  8185  000618                     u4428:
  8186  000618  FFFF               	dw	65535	; assembler added errata NOP
  8187  00061A  4614               	rlncf	??_write_leds,f,c
  8188  00061C  4614               	rlncf	??_write_leds,f,c
  8189  00061E  5089               	movf	3977,w,c	;volatile
  8190  000620  1814               	xorwf	??_write_leds,w,c
  8191  000622  0BFB               	andlw	-5
  8192  000624  1814               	xorwf	??_write_leds,w,c
  8193  000626  6E89               	movwf	3977,c	;volatile
  8194                           
  8195                           ;clock.c: 701: LATAbits.LATA3 = (led_mask0 & 0x08) ? 1 : 0;
  8196  000628  A64B               	btfss	_led_mask0,3,c
  8197  00062A  D003               	goto	u4430
  8198  00062C  6A14               	clrf	??_write_leds& (0+255),c
  8199  00062E  2A14               	incf	??_write_leds& (0+255),f,c
  8200  000630  D002               	goto	u4448
  8201  000632                     u4430:
  8202  000632  FFFF               	dw	65535	; assembler added errata NOP
  8203  000634  6A14               	clrf	??_write_leds& (0+255),c
  8204  000636                     u4448:
  8205  000636  FFFF               	dw	65535	; assembler added errata NOP
  8206  000638  4614               	rlncf	??_write_leds,f,c
  8207  00063A  4614               	rlncf	??_write_leds,f,c
  8208  00063C  4614               	rlncf	??_write_leds,f,c
  8209  00063E  5089               	movf	3977,w,c	;volatile
  8210  000640  1814               	xorwf	??_write_leds,w,c
  8211  000642  0BF7               	andlw	-9
  8212  000644  1814               	xorwf	??_write_leds,w,c
  8213  000646  6E89               	movwf	3977,c	;volatile
  8214                           
  8215                           ;clock.c: 702: LATAbits.LATA5 = (led_mask0 & 0x10) ? 1 : 0;
  8216  000648  A84B               	btfss	_led_mask0,4,c
  8217  00064A  D003               	goto	u4450
  8218  00064C  6A14               	clrf	??_write_leds& (0+255),c
  8219  00064E  2A14               	incf	??_write_leds& (0+255),f,c
  8220  000650  D002               	goto	u4468
  8221  000652                     u4450:
  8222  000652  FFFF               	dw	65535	; assembler added errata NOP
  8223  000654  6A14               	clrf	??_write_leds& (0+255),c
  8224  000656                     u4468:
  8225  000656  FFFF               	dw	65535	; assembler added errata NOP
  8226  000658  3A14               	swapf	??_write_leds,f,c
  8227  00065A  4614               	rlncf	??_write_leds,f,c
  8228  00065C  5089               	movf	3977,w,c	;volatile
  8229  00065E  1814               	xorwf	??_write_leds,w,c
  8230  000660  0BDF               	andlw	-33
  8231  000662  1814               	xorwf	??_write_leds,w,c
  8232  000664  6E89               	movwf	3977,c	;volatile
  8233                           
  8234                           ;clock.c: 703: LATCbits.LATC0 = (led_mask0 & 0x20) ? 1 : 0;
  8235  000666  AA4B               	btfss	_led_mask0,5,c
  8236  000668  D003               	goto	u4470
  8237  00066A  6A14               	clrf	??_write_leds& (0+255),c
  8238  00066C  2A14               	incf	??_write_leds& (0+255),f,c
  8239  00066E  D002               	goto	u4488
  8240  000670                     u4470:
  8241  000670  FFFF               	dw	65535	; assembler added errata NOP
  8242  000672  6A14               	clrf	??_write_leds& (0+255),c
  8243  000674                     u4488:
  8244  000674  FFFF               	dw	65535	; assembler added errata NOP
  8245  000676  508B               	movf	3979,w,c	;volatile
  8246  000678  1814               	xorwf	??_write_leds,w,c
  8247  00067A  0BFE               	andlw	-2
  8248  00067C  1814               	xorwf	??_write_leds,w,c
  8249  00067E  6E8B               	movwf	3979,c	;volatile
  8250                           
  8251                           ;clock.c: 704: LATCbits.LATC1 = (led_mask0 & 0x40) ? 1 : 0;
  8252  000680  AC4B               	btfss	_led_mask0,6,c
  8253  000682  D003               	goto	u4490
  8254  000684  6A14               	clrf	??_write_leds& (0+255),c
  8255  000686  2A14               	incf	??_write_leds& (0+255),f,c
  8256  000688  D002               	goto	u4508
  8257  00068A                     u4490:
  8258  00068A  FFFF               	dw	65535	; assembler added errata NOP
  8259  00068C  6A14               	clrf	??_write_leds& (0+255),c
  8260  00068E                     u4508:
  8261  00068E  FFFF               	dw	65535	; assembler added errata NOP
  8262  000690  4614               	rlncf	??_write_leds,f,c
  8263  000692  508B               	movf	3979,w,c	;volatile
  8264  000694  1814               	xorwf	??_write_leds,w,c
  8265  000696  0BFD               	andlw	-3
  8266  000698  1814               	xorwf	??_write_leds,w,c
  8267  00069A  6E8B               	movwf	3979,c	;volatile
  8268                           
  8269                           ;clock.c: 705: LATCbits.LATC3 = (led_mask0 & 0x80) ? 1 : 0;
  8270  00069C  AE4B               	btfss	_led_mask0,7,c
  8271  00069E  D003               	goto	u4510
  8272  0006A0  6A14               	clrf	??_write_leds& (0+255),c
  8273  0006A2  2A14               	incf	??_write_leds& (0+255),f,c
  8274  0006A4  D002               	goto	u4528
  8275  0006A6                     u4510:
  8276  0006A6  FFFF               	dw	65535	; assembler added errata NOP
  8277  0006A8  6A14               	clrf	??_write_leds& (0+255),c
  8278  0006AA                     u4528:
  8279  0006AA  FFFF               	dw	65535	; assembler added errata NOP
  8280  0006AC  4614               	rlncf	??_write_leds,f,c
  8281  0006AE  4614               	rlncf	??_write_leds,f,c
  8282  0006B0  4614               	rlncf	??_write_leds,f,c
  8283  0006B2  508B               	movf	3979,w,c	;volatile
  8284  0006B4  1814               	xorwf	??_write_leds,w,c
  8285  0006B6  0BF7               	andlw	-9
  8286  0006B8  1814               	xorwf	??_write_leds,w,c
  8287  0006BA  6E8B               	movwf	3979,c	;volatile
  8288                           
  8289                           ;clock.c: 706: LATCbits.LATC4 = led_mask1 & 0x01;
  8290  0006BC  C035  F014         	movff	_led_mask1,??_write_leds
  8291  0006C0  0E01               	movlw	1
  8292  0006C2  1614               	andwf	??_write_leds,f,c
  8293  0006C4  3A14               	swapf	??_write_leds,f,c
  8294  0006C6  508B               	movf	3979,w,c	;volatile
  8295  0006C8  1814               	xorwf	??_write_leds,w,c
  8296  0006CA  0BEF               	andlw	-17
  8297  0006CC  1814               	xorwf	??_write_leds,w,c
  8298  0006CE  6E8B               	movwf	3979,c	;volatile
  8299                           
  8300                           ;clock.c: 707: LATCbits.LATC5 = (led_mask1 & 0x02) ? 1 : 0;
  8301  0006D0  A235               	btfss	_led_mask1,1,c
  8302  0006D2  D003               	goto	u4530
  8303  0006D4  6A14               	clrf	??_write_leds& (0+255),c
  8304  0006D6  2A14               	incf	??_write_leds& (0+255),f,c
  8305  0006D8  D002               	goto	u4548
  8306  0006DA                     u4530:
  8307  0006DA  FFFF               	dw	65535	; assembler added errata NOP
  8308  0006DC  6A14               	clrf	??_write_leds& (0+255),c
  8309  0006DE                     u4548:
  8310  0006DE  FFFF               	dw	65535	; assembler added errata NOP
  8311  0006E0  3A14               	swapf	??_write_leds,f,c
  8312  0006E2  4614               	rlncf	??_write_leds,f,c
  8313  0006E4  508B               	movf	3979,w,c	;volatile
  8314  0006E6  1814               	xorwf	??_write_leds,w,c
  8315  0006E8  0BDF               	andlw	-33
  8316  0006EA  1814               	xorwf	??_write_leds,w,c
  8317  0006EC  6E8B               	movwf	3979,c	;volatile
  8318                           
  8319                           ;clock.c: 708: LATEbits.LATE0 = (led_mask1 & 0x04) ? 1 : 0;
  8320  0006EE  A435               	btfss	_led_mask1,2,c
  8321  0006F0  D003               	goto	u4550
  8322  0006F2  6A14               	clrf	??_write_leds& (0+255),c
  8323  0006F4  2A14               	incf	??_write_leds& (0+255),f,c
  8324  0006F6  D002               	goto	u4568
  8325  0006F8                     u4550:
  8326  0006F8  FFFF               	dw	65535	; assembler added errata NOP
  8327  0006FA  6A14               	clrf	??_write_leds& (0+255),c
  8328  0006FC                     u4568:
  8329  0006FC  FFFF               	dw	65535	; assembler added errata NOP
  8330  0006FE  508D               	movf	3981,w,c	;volatile
  8331  000700  1814               	xorwf	??_write_leds,w,c
  8332  000702  0BFE               	andlw	-2
  8333  000704  1814               	xorwf	??_write_leds,w,c
  8334  000706  6E8D               	movwf	3981,c	;volatile
  8335                           
  8336                           ;clock.c: 709: LATEbits.LATE1 = (led_mask1 & 0x08) ? 1 : 0;
  8337  000708  A635               	btfss	_led_mask1,3,c
  8338  00070A  D003               	goto	u4570
  8339  00070C  6A14               	clrf	??_write_leds& (0+255),c
  8340  00070E  2A14               	incf	??_write_leds& (0+255),f,c
  8341  000710  D002               	goto	u4588
  8342  000712                     u4570:
  8343  000712  FFFF               	dw	65535	; assembler added errata NOP
  8344  000714  6A14               	clrf	??_write_leds& (0+255),c
  8345  000716                     u4588:
  8346  000716  FFFF               	dw	65535	; assembler added errata NOP
  8347  000718  4614               	rlncf	??_write_leds,f,c
  8348  00071A  508D               	movf	3981,w,c	;volatile
  8349  00071C  1814               	xorwf	??_write_leds,w,c
  8350  00071E  0BFD               	andlw	-3
  8351  000720  1814               	xorwf	??_write_leds,w,c
  8352  000722  6E8D               	movwf	3981,c	;volatile
  8353                           
  8354                           ;clock.c: 710: LATEbits.LATE2 = (led_mask1 & 0x10) ? 1 : 0;
  8355  000724  A835               	btfss	_led_mask1,4,c
  8356  000726  D003               	goto	u4590
  8357  000728  6A14               	clrf	??_write_leds& (0+255),c
  8358  00072A  2A14               	incf	??_write_leds& (0+255),f,c
  8359  00072C  D002               	goto	u4608
  8360  00072E                     u4590:
  8361  00072E  FFFF               	dw	65535	; assembler added errata NOP
  8362  000730  6A14               	clrf	??_write_leds& (0+255),c
  8363  000732                     u4608:
  8364  000732  FFFF               	dw	65535	; assembler added errata NOP
  8365  000734  4614               	rlncf	??_write_leds,f,c
  8366  000736  4614               	rlncf	??_write_leds,f,c
  8367  000738  508D               	movf	3981,w,c	;volatile
  8368  00073A  1814               	xorwf	??_write_leds,w,c
  8369  00073C  0BFB               	andlw	-5
  8370  00073E  1814               	xorwf	??_write_leds,w,c
  8371  000740  6E8D               	movwf	3981,c	;volatile
  8372                           
  8373                           ;clock.c: 711: LATEbits.LATE3 = (led_mask1 & 0x20) ? 1 : 0;
  8374  000742  AA35               	btfss	_led_mask1,5,c
  8375  000744  D003               	goto	u4610
  8376  000746  6A14               	clrf	??_write_leds& (0+255),c
  8377  000748  2A14               	incf	??_write_leds& (0+255),f,c
  8378  00074A  D002               	goto	u4628
  8379  00074C                     u4610:
  8380  00074C  FFFF               	dw	65535	; assembler added errata NOP
  8381  00074E  6A14               	clrf	??_write_leds& (0+255),c
  8382  000750                     u4628:
  8383  000750  FFFF               	dw	65535	; assembler added errata NOP
  8384  000752  4614               	rlncf	??_write_leds,f,c
  8385  000754  4614               	rlncf	??_write_leds,f,c
  8386  000756  4614               	rlncf	??_write_leds,f,c
  8387  000758  508D               	movf	3981,w,c	;volatile
  8388  00075A  1814               	xorwf	??_write_leds,w,c
  8389  00075C  0BF7               	andlw	-9
  8390  00075E  1814               	xorwf	??_write_leds,w,c
  8391  000760  6E8D               	movwf	3981,c	;volatile
  8392                           
  8393                           ;clock.c: 712: LATEbits.LATE4 = (led_mask1 & 0x40) ? 1 : 0;
  8394  000762  AC35               	btfss	_led_mask1,6,c
  8395  000764  D003               	goto	u4630
  8396  000766  6A14               	clrf	??_write_leds& (0+255),c
  8397  000768  2A14               	incf	??_write_leds& (0+255),f,c
  8398  00076A  D002               	goto	u4648
  8399  00076C                     u4630:
  8400  00076C  FFFF               	dw	65535	; assembler added errata NOP
  8401  00076E  6A14               	clrf	??_write_leds& (0+255),c
  8402  000770                     u4648:
  8403  000770  FFFF               	dw	65535	; assembler added errata NOP
  8404  000772  3A14               	swapf	??_write_leds,f,c
  8405  000774  508D               	movf	3981,w,c	;volatile
  8406  000776  1814               	xorwf	??_write_leds,w,c
  8407  000778  0BEF               	andlw	-17
  8408  00077A  1814               	xorwf	??_write_leds,w,c
  8409  00077C  6E8D               	movwf	3981,c	;volatile
  8410                           
  8411                           ;clock.c: 713: LATEbits.LATE5 = (led_mask1 & 0x80) ? 1 : 0;
  8412  00077E  AE35               	btfss	_led_mask1,7,c
  8413  000780  D003               	goto	u4650
  8414  000782  6A14               	clrf	??_write_leds& (0+255),c
  8415  000784  2A14               	incf	??_write_leds& (0+255),f,c
  8416  000786  D002               	goto	u4668
  8417  000788                     u4650:
  8418  000788  FFFF               	dw	65535	; assembler added errata NOP
  8419  00078A  6A14               	clrf	??_write_leds& (0+255),c
  8420  00078C                     u4668:
  8421  00078C  FFFF               	dw	65535	; assembler added errata NOP
  8422  00078E  3A14               	swapf	??_write_leds,f,c
  8423  000790  4614               	rlncf	??_write_leds,f,c
  8424  000792  508D               	movf	3981,w,c	;volatile
  8425  000794  1814               	xorwf	??_write_leds,w,c
  8426  000796  0BDF               	andlw	-33
  8427  000798  1814               	xorwf	??_write_leds,w,c
  8428  00079A  6E8D               	movwf	3981,c	;volatile
  8429                           
  8430                           ;clock.c: 714: LATEbits.LATE6 = led_mask2 & 0x01;
  8431  00079C  C034  F014         	movff	_led_mask2,??_write_leds
  8432  0007A0  0E01               	movlw	1
  8433  0007A2  1614               	andwf	??_write_leds,f,c
  8434  0007A4  3A14               	swapf	??_write_leds,f,c
  8435  0007A6  4614               	rlncf	??_write_leds,f,c
  8436  0007A8  4614               	rlncf	??_write_leds,f,c
  8437  0007AA  508D               	movf	3981,w,c	;volatile
  8438  0007AC  1814               	xorwf	??_write_leds,w,c
  8439  0007AE  0BBF               	andlw	-65
  8440  0007B0  1814               	xorwf	??_write_leds,w,c
  8441  0007B2  6E8D               	movwf	3981,c	;volatile
  8442                           
  8443                           ;clock.c: 715: LATEbits.LATE7 = (led_mask2 & 0x02) ? 1 : 0;
  8444  0007B4  A234               	btfss	_led_mask2,1,c
  8445  0007B6  D003               	goto	u4670
  8446  0007B8  6A14               	clrf	??_write_leds& (0+255),c
  8447  0007BA  2A14               	incf	??_write_leds& (0+255),f,c
  8448  0007BC  D002               	goto	u4688
  8449  0007BE                     u4670:
  8450  0007BE  FFFF               	dw	65535	; assembler added errata NOP
  8451  0007C0  6A14               	clrf	??_write_leds& (0+255),c
  8452  0007C2                     u4688:
  8453  0007C2  FFFF               	dw	65535	; assembler added errata NOP
  8454  0007C4  3214               	rrcf	??_write_leds,f,c
  8455  0007C6  3214               	rrcf	??_write_leds,f,c
  8456  0007C8  508D               	movf	3981,w,c	;volatile
  8457  0007CA  1814               	xorwf	??_write_leds,w,c
  8458  0007CC  0B7F               	andlw	-129
  8459  0007CE  1814               	xorwf	??_write_leds,w,c
  8460  0007D0  6E8D               	movwf	3981,c	;volatile
  8461                           
  8462                           ;clock.c: 716: LATFbits.LATF0 = (led_mask2 & 0x04) ? 1 : 0;
  8463  0007D2  A434               	btfss	_led_mask2,2,c
  8464  0007D4  D003               	goto	u4690
  8465  0007D6  6A14               	clrf	??_write_leds& (0+255),c
  8466  0007D8  2A14               	incf	??_write_leds& (0+255),f,c
  8467  0007DA  D002               	goto	u4708
  8468  0007DC                     u4690:
  8469  0007DC  FFFF               	dw	65535	; assembler added errata NOP
  8470  0007DE  6A14               	clrf	??_write_leds& (0+255),c
  8471  0007E0                     u4708:
  8472  0007E0  FFFF               	dw	65535	; assembler added errata NOP
  8473  0007E2  508E               	movf	3982,w,c	;volatile
  8474  0007E4  1814               	xorwf	??_write_leds,w,c
  8475  0007E6  0BFE               	andlw	-2
  8476  0007E8  1814               	xorwf	??_write_leds,w,c
  8477  0007EA  6E8E               	movwf	3982,c	;volatile
  8478                           
  8479                           ;clock.c: 717: LATFbits.LATF1 = (led_mask2 & 0x08) ? 1 : 0;
  8480  0007EC  A634               	btfss	_led_mask2,3,c
  8481  0007EE  D003               	goto	u4710
  8482  0007F0  6A14               	clrf	??_write_leds& (0+255),c
  8483  0007F2  2A14               	incf	??_write_leds& (0+255),f,c
  8484  0007F4  D002               	goto	u4728
  8485  0007F6                     u4710:
  8486  0007F6  FFFF               	dw	65535	; assembler added errata NOP
  8487  0007F8  6A14               	clrf	??_write_leds& (0+255),c
  8488  0007FA                     u4728:
  8489  0007FA  FFFF               	dw	65535	; assembler added errata NOP
  8490  0007FC  4614               	rlncf	??_write_leds,f,c
  8491  0007FE  508E               	movf	3982,w,c	;volatile
  8492  000800  1814               	xorwf	??_write_leds,w,c
  8493  000802  0BFD               	andlw	-3
  8494  000804  1814               	xorwf	??_write_leds,w,c
  8495  000806  6E8E               	movwf	3982,c	;volatile
  8496                           
  8497                           ;clock.c: 718: LATFbits.LATF2 = (led_mask2 & 0x10) ? 1 : 0;
  8498  000808  A834               	btfss	_led_mask2,4,c
  8499  00080A  D003               	goto	u4730
  8500  00080C  6A14               	clrf	??_write_leds& (0+255),c
  8501  00080E  2A14               	incf	??_write_leds& (0+255),f,c
  8502  000810  D002               	goto	u4748
  8503  000812                     u4730:
  8504  000812  FFFF               	dw	65535	; assembler added errata NOP
  8505  000814  6A14               	clrf	??_write_leds& (0+255),c
  8506  000816                     u4748:
  8507  000816  FFFF               	dw	65535	; assembler added errata NOP
  8508  000818  4614               	rlncf	??_write_leds,f,c
  8509  00081A  4614               	rlncf	??_write_leds,f,c
  8510  00081C  508E               	movf	3982,w,c	;volatile
  8511  00081E  1814               	xorwf	??_write_leds,w,c
  8512  000820  0BFB               	andlw	-5
  8513  000822  1814               	xorwf	??_write_leds,w,c
  8514  000824  6E8E               	movwf	3982,c	;volatile
  8515                           
  8516                           ;clock.c: 719: LATFbits.LATF3 = (led_mask2 & 0x20) ? 1 : 0;
  8517  000826  AA34               	btfss	_led_mask2,5,c
  8518  000828  D003               	goto	u4750
  8519  00082A  6A14               	clrf	??_write_leds& (0+255),c
  8520  00082C  2A14               	incf	??_write_leds& (0+255),f,c
  8521  00082E  D002               	goto	u4768
  8522  000830                     u4750:
  8523  000830  FFFF               	dw	65535	; assembler added errata NOP
  8524  000832  6A14               	clrf	??_write_leds& (0+255),c
  8525  000834                     u4768:
  8526  000834  FFFF               	dw	65535	; assembler added errata NOP
  8527  000836  4614               	rlncf	??_write_leds,f,c
  8528  000838  4614               	rlncf	??_write_leds,f,c
  8529  00083A  4614               	rlncf	??_write_leds,f,c
  8530  00083C  508E               	movf	3982,w,c	;volatile
  8531  00083E  1814               	xorwf	??_write_leds,w,c
  8532  000840  0BF7               	andlw	-9
  8533  000842  1814               	xorwf	??_write_leds,w,c
  8534  000844  6E8E               	movwf	3982,c	;volatile
  8535                           
  8536                           ;clock.c: 720: LATFbits.LATF4 = (led_mask2 & 0x40) ? 1 : 0;
  8537  000846  AC34               	btfss	_led_mask2,6,c
  8538  000848  D003               	goto	u4770
  8539  00084A  6A14               	clrf	??_write_leds& (0+255),c
  8540  00084C  2A14               	incf	??_write_leds& (0+255),f,c
  8541  00084E  D002               	goto	u4788
  8542  000850                     u4770:
  8543  000850  FFFF               	dw	65535	; assembler added errata NOP
  8544  000852  6A14               	clrf	??_write_leds& (0+255),c
  8545  000854                     u4788:
  8546  000854  FFFF               	dw	65535	; assembler added errata NOP
  8547  000856  3A14               	swapf	??_write_leds,f,c
  8548  000858  508E               	movf	3982,w,c	;volatile
  8549  00085A  1814               	xorwf	??_write_leds,w,c
  8550  00085C  0BEF               	andlw	-17
  8551  00085E  1814               	xorwf	??_write_leds,w,c
  8552  000860  6E8E               	movwf	3982,c	;volatile
  8553                           
  8554                           ;clock.c: 721: LATFbits.LATF5 = (led_mask2 & 0x80) ? 1 : 0;
  8555  000862  AE34               	btfss	_led_mask2,7,c
  8556  000864  D003               	goto	u4790
  8557  000866  6A14               	clrf	??_write_leds& (0+255),c
  8558  000868  2A14               	incf	??_write_leds& (0+255),f,c
  8559  00086A  D002               	goto	u4808
  8560  00086C                     u4790:
  8561  00086C  FFFF               	dw	65535	; assembler added errata NOP
  8562  00086E  6A14               	clrf	??_write_leds& (0+255),c
  8563  000870                     u4808:
  8564  000870  FFFF               	dw	65535	; assembler added errata NOP
  8565  000872  3A14               	swapf	??_write_leds,f,c
  8566  000874  4614               	rlncf	??_write_leds,f,c
  8567  000876  508E               	movf	3982,w,c	;volatile
  8568  000878  1814               	xorwf	??_write_leds,w,c
  8569  00087A  0BDF               	andlw	-33
  8570  00087C  1814               	xorwf	??_write_leds,w,c
  8571  00087E  6E8E               	movwf	3982,c	;volatile
  8572                           
  8573                           ;clock.c: 722: LATFbits.LATF6 = led_mask3 & 0x01;
  8574  000880  C033  F014         	movff	_led_mask3,??_write_leds
  8575  000884  0E01               	movlw	1
  8576  000886  1614               	andwf	??_write_leds,f,c
  8577  000888  3A14               	swapf	??_write_leds,f,c
  8578  00088A  4614               	rlncf	??_write_leds,f,c
  8579  00088C  4614               	rlncf	??_write_leds,f,c
  8580  00088E  508E               	movf	3982,w,c	;volatile
  8581  000890  1814               	xorwf	??_write_leds,w,c
  8582  000892  0BBF               	andlw	-65
  8583  000894  1814               	xorwf	??_write_leds,w,c
  8584  000896  6E8E               	movwf	3982,c	;volatile
  8585                           
  8586                           ;clock.c: 723: LATGbits.LATG0 = (led_mask3 & 0x02) ? 1 : 0;
  8587  000898  A233               	btfss	_led_mask3,1,c
  8588  00089A  D003               	goto	u4810
  8589  00089C  6A14               	clrf	??_write_leds& (0+255),c
  8590  00089E  2A14               	incf	??_write_leds& (0+255),f,c
  8591  0008A0  D002               	goto	u4828
  8592  0008A2                     u4810:
  8593  0008A2  FFFF               	dw	65535	; assembler added errata NOP
  8594  0008A4  6A14               	clrf	??_write_leds& (0+255),c
  8595  0008A6                     u4828:
  8596  0008A6  FFFF               	dw	65535	; assembler added errata NOP
  8597  0008A8  508F               	movf	3983,w,c	;volatile
  8598  0008AA  1814               	xorwf	??_write_leds,w,c
  8599  0008AC  0BFE               	andlw	-2
  8600  0008AE  1814               	xorwf	??_write_leds,w,c
  8601  0008B0  6E8F               	movwf	3983,c	;volatile
  8602                           
  8603                           ;clock.c: 724: LATGbits.LATG1 = (led_mask3 & 0x04) ? 1 : 0;
  8604  0008B2  A433               	btfss	_led_mask3,2,c
  8605  0008B4  D003               	goto	u4830
  8606  0008B6  6A14               	clrf	??_write_leds& (0+255),c
  8607  0008B8  2A14               	incf	??_write_leds& (0+255),f,c
  8608  0008BA  D002               	goto	u4848
  8609  0008BC                     u4830:
  8610  0008BC  FFFF               	dw	65535	; assembler added errata NOP
  8611  0008BE  6A14               	clrf	??_write_leds& (0+255),c
  8612  0008C0                     u4848:
  8613  0008C0  FFFF               	dw	65535	; assembler added errata NOP
  8614  0008C2  4614               	rlncf	??_write_leds,f,c
  8615  0008C4  508F               	movf	3983,w,c	;volatile
  8616  0008C6  1814               	xorwf	??_write_leds,w,c
  8617  0008C8  0BFD               	andlw	-3
  8618  0008CA  1814               	xorwf	??_write_leds,w,c
  8619  0008CC  6E8F               	movwf	3983,c	;volatile
  8620  0008CE  0012               	return		;funcret
  8621  0008D0  FFFF               	dw	65535	; errata NOP
  8622  0008D2                     __end_of_write_leds:
  8623                           	opt stack 0
  8624                           tblptru	equ	0xFF8
  8625                           tblptrh	equ	0xFF7
  8626                           tblptrl	equ	0xFF6
  8627                           tablat	equ	0xFF5
  8628                           prodh	equ	0xFF4
  8629                           prodl	equ	0xFF3
  8630                           intcon	equ	0xFF2
  8631                           intcon2	equ	0xFF1
  8632                           intcon3	equ	0xFF0
  8633                           postinc0	equ	0xFEE
  8634                           wreg	equ	0xFE8
  8635                           postdec1	equ	0xFE5
  8636                           fsr1h	equ	0xFE2
  8637                           fsr1l	equ	0xFE1
  8638                           indf2	equ	0xFDF
  8639                           fsr2h	equ	0xFDA
  8640                           fsr2l	equ	0xFD9
  8641                           status	equ	0xFD8
  8642                           
  8643 ;; *************** function ___awdiv *****************
  8644 ;; Defined at:
  8645 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awdiv.c"
  8646 ;; Parameters:    Size  Location     Type
  8647 ;;  dividend        2   19[COMRAM] int 
  8648 ;;  divisor         2   21[COMRAM] int 
  8649 ;; Auto vars:     Size  Location     Type
  8650 ;;  quotient        2   25[COMRAM] int 
  8651 ;;  sign            1   24[COMRAM] unsigned char 
  8652 ;;  counter         1   23[COMRAM] unsigned char 
  8653 ;; Return value:  Size  Location     Type
  8654 ;;                  2   19[COMRAM] int 
  8655 ;; Registers used:
  8656 ;;		wreg, status,2, status,0
  8657 ;; Tracked objects:
  8658 ;;		On entry : 0/0
  8659 ;;		On exit  : 0/0
  8660 ;;		Unchanged: 0/0
  8661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8662 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8663 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8665 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8666 ;;Total ram usage:        8 bytes
  8667 ;; Hardware stack levels used:    1
  8668 ;; Hardware stack levels required when called:    2
  8669 ;; This function calls:
  8670 ;;		Nothing
  8671 ;; This function is called by:
  8672 ;;		_print_number2
  8673 ;;		_draw_time
  8674 ;;		_draw_alarm
  8675 ;; This function uses a non-reentrant model
  8676 ;;
  8677                           
  8678                           	psect	text33
  8679  00159E                     __ptext33:
  8680                           	opt stack 0
  8681  00159E                     ___awdiv:
  8682                           	opt stack 0
  8683  00159E  FFFF               	dw	65535	; assembler added errata NOP
  8684                           
  8685                           ;incstack = 0
  8686  0015A0  0E00               	movlw	0
  8687  0015A2  6E19               	movwf	___awdiv@sign,c
  8688  0015A4  AE17               	btfss	___awdiv@divisor+1,7,c
  8689  0015A6  D006               	goto	l3523
  8690  0015A8  6C16               	negf	___awdiv@divisor,c
  8691  0015AA  1E17               	comf	___awdiv@divisor+1,f,c
  8692  0015AC  B0D8               	btfsc	status,0,c
  8693  0015AE  2A17               	incf	___awdiv@divisor+1,f,c
  8694  0015B0  0E01               	movlw	1
  8695  0015B2  6E19               	movwf	___awdiv@sign,c
  8696  0015B4                     l3523:
  8697  0015B4  FFFF               	dw	65535	; assembler added errata NOP
  8698  0015B6  AE15               	btfss	___awdiv@dividend+1,7,c
  8699  0015B8  D006               	goto	l3529
  8700  0015BA  6C14               	negf	___awdiv@dividend,c
  8701  0015BC  1E15               	comf	___awdiv@dividend+1,f,c
  8702  0015BE  B0D8               	btfsc	status,0,c
  8703  0015C0  2A15               	incf	___awdiv@dividend+1,f,c
  8704  0015C2  0E01               	movlw	1
  8705  0015C4  1A19               	xorwf	___awdiv@sign,f,c
  8706  0015C6                     l3529:
  8707  0015C6  FFFF               	dw	65535	; assembler added errata NOP
  8708  0015C8  0E00               	movlw	0
  8709  0015CA  6E1B               	movwf	___awdiv@quotient+1,c
  8710  0015CC  0E00               	movlw	0
  8711  0015CE  6E1A               	movwf	___awdiv@quotient,c
  8712  0015D0  5016               	movf	___awdiv@divisor,w,c
  8713  0015D2  1017               	iorwf	___awdiv@divisor+1,w,c
  8714  0015D4  B4D8               	btfsc	status,2,c
  8715  0015D6  D020               	goto	l3551
  8716  0015D8  0E01               	movlw	1
  8717  0015DA  6E18               	movwf	___awdiv@counter,c
  8718  0015DC  D005               	goto	l3537
  8719  0015DE                     l3535:
  8720  0015DE  FFFF               	dw	65535	; assembler added errata NOP
  8721  0015E0  90D8               	bcf	status,0,c
  8722  0015E2  3616               	rlcf	___awdiv@divisor,f,c
  8723  0015E4  3617               	rlcf	___awdiv@divisor+1,f,c
  8724  0015E6  2A18               	incf	___awdiv@counter,f,c
  8725  0015E8                     l3537:
  8726  0015E8  FFFF               	dw	65535	; assembler added errata NOP
  8727  0015EA  AE17               	btfss	___awdiv@divisor+1,7,c
  8728  0015EC  D7F8               	goto	l3535
  8729  0015EE                     l3539:
  8730  0015EE  FFFF               	dw	65535	; assembler added errata NOP
  8731  0015F0  90D8               	bcf	status,0,c
  8732  0015F2  361A               	rlcf	___awdiv@quotient,f,c
  8733  0015F4  361B               	rlcf	___awdiv@quotient+1,f,c
  8734  0015F6  5016               	movf	___awdiv@divisor,w,c
  8735  0015F8  5C14               	subwf	___awdiv@dividend,w,c
  8736  0015FA  5017               	movf	___awdiv@divisor+1,w,c
  8737  0015FC  5815               	subwfb	___awdiv@dividend+1,w,c
  8738  0015FE  A0D8               	btfss	status,0,c
  8739  001600  D005               	goto	l3547
  8740  001602  5016               	movf	___awdiv@divisor,w,c
  8741  001604  5E14               	subwf	___awdiv@dividend,f,c
  8742  001606  5017               	movf	___awdiv@divisor+1,w,c
  8743  001608  5A15               	subwfb	___awdiv@dividend+1,f,c
  8744  00160A  801A               	bsf	___awdiv@quotient,0,c
  8745  00160C                     l3547:
  8746  00160C  FFFF               	dw	65535	; assembler added errata NOP
  8747  00160E  90D8               	bcf	status,0,c
  8748  001610  3217               	rrcf	___awdiv@divisor+1,f,c
  8749  001612  3216               	rrcf	___awdiv@divisor,f,c
  8750  001614  2E18               	decfsz	___awdiv@counter,f,c
  8751  001616  D7EB               	goto	l3539
  8752  001618                     l3551:
  8753  001618  FFFF               	dw	65535	; assembler added errata NOP
  8754  00161A  5019               	movf	___awdiv@sign,w,c
  8755  00161C  B4D8               	btfsc	status,2,c
  8756  00161E  D004               	goto	l3555
  8757  001620  6C1A               	negf	___awdiv@quotient,c
  8758  001622  1E1B               	comf	___awdiv@quotient+1,f,c
  8759  001624  B0D8               	btfsc	status,0,c
  8760  001626  2A1B               	incf	___awdiv@quotient+1,f,c
  8761  001628                     l3555:
  8762  001628  FFFF               	dw	65535	; assembler added errata NOP
  8763  00162A  C01A  F014         	movff	___awdiv@quotient,?___awdiv
  8764  00162E  C01B  F015         	movff	___awdiv@quotient+1,?___awdiv+1
  8765  001632  0012               	return		;funcret
  8766  001634  FFFF               	dw	65535	; errata NOP
  8767  001636                     __end_of___awdiv:
  8768                           	opt stack 0
  8769                           tblptru	equ	0xFF8
  8770                           tblptrh	equ	0xFF7
  8771                           tblptrl	equ	0xFF6
  8772                           tablat	equ	0xFF5
  8773                           prodh	equ	0xFF4
  8774                           prodl	equ	0xFF3
  8775                           intcon	equ	0xFF2
  8776                           intcon2	equ	0xFF1
  8777                           intcon3	equ	0xFF0
  8778                           postinc0	equ	0xFEE
  8779                           wreg	equ	0xFE8
  8780                           postdec1	equ	0xFE5
  8781                           fsr1h	equ	0xFE2
  8782                           fsr1l	equ	0xFE1
  8783                           indf2	equ	0xFDF
  8784                           fsr2h	equ	0xFDA
  8785                           fsr2l	equ	0xFD9
  8786                           status	equ	0xFD8
  8787                           
  8788 ;; *************** function _isr *****************
  8789 ;; Defined at:
  8790 ;;		line 1650 in file "clock.c"
  8791 ;; Parameters:    Size  Location     Type
  8792 ;;		None
  8793 ;; Auto vars:     Size  Location     Type
  8794 ;;		None
  8795 ;; Return value:  Size  Location     Type
  8796 ;;                  1    wreg      void 
  8797 ;; Registers used:
  8798 ;;		wreg, status,2, status,0, cstack
  8799 ;; Tracked objects:
  8800 ;;		On entry : 0/0
  8801 ;;		On exit  : 0/0
  8802 ;;		Unchanged: 0/0
  8803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8806 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8807 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8808 ;;Total ram usage:       16 bytes
  8809 ;; Hardware stack levels used:    1
  8810 ;; Hardware stack levels required when called:    1
  8811 ;; This function calls:
  8812 ;;		_handle_audio
  8813 ;; This function is called by:
  8814 ;;		Interrupt level 2
  8815 ;; This function uses a non-reentrant model
  8816 ;;
  8817                           
  8818                           	psect	intcode
  8819  000008                     __pintcode:
  8820                           	opt stack 0
  8821  000008                     _isr:
  8822                           	opt stack 0
  8823  000008  FFFF               	dw	65535	; assembler added errata NOP
  8824                           
  8825                           ;incstack = 0
  8826  00000A  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8827  00000C  CFFA F006          	movff	pclath,??_isr+2
  8828  000010  CFFB F007          	movff	pclatu,??_isr+3
  8829  000014  CFE9 F008          	movff	fsr0l,??_isr+4
  8830  000018  CFEA F009          	movff	fsr0h,??_isr+5
  8831  00001C  CFE1 F00A          	movff	fsr1l,??_isr+6
  8832  000020  CFE2 F00B          	movff	fsr1h,??_isr+7
  8833  000024  CFD9 F00C          	movff	fsr2l,??_isr+8
  8834  000028  CFDA F00D          	movff	fsr2h,??_isr+9
  8835  00002C  CFF3 F00E          	movff	prodl,??_isr+10
  8836  000030  CFF4 F00F          	movff	prodh,??_isr+11
  8837  000034  CFF6 F010          	movff	tblptrl,??_isr+12
  8838  000038  CFF7 F011          	movff	tblptrh,??_isr+13
  8839  00003C  CFF8 F012          	movff	tblptru,??_isr+14
  8840  000040  CFF5 F013          	movff	tablat,??_isr+15
  8841  000044  D022               	goto	i2l3303
  8842  000046                     i2l3281:
  8843  000046  FFFF               	dw	65535	; assembler added errata NOP
  8844                           
  8845                           ; BSR set to: 0
  8846                           ;clock.c: 1654: {
  8847                           ;clock.c: 1655: interrupt_done = 1;
  8848  000048  0E01               	movlw	1
  8849  00004A  0100               	movlb	0	; () banked
  8850  00004C  6F7E               	movwf	_interrupt_done& (0+255),b
  8851                           
  8852                           ; BSR set to: 0
  8853                           ;clock.c: 1668: if(PIR1bits.TMR2IF)
  8854  00004E  A29E               	btfss	3998,1,c	;volatile
  8855  000050  D005               	goto	i2l3289
  8856                           
  8857                           ; BSR set to: 0
  8858                           ;clock.c: 1669: {
  8859                           ;clock.c: 1670: PIR1bits.TMR2IF = 0;
  8860  000052  929E               	bcf	3998,1,c	;volatile
  8861                           
  8862                           ;clock.c: 1671: CCPR1L = next_duty;
  8863  000054  C045  FFBE         	movff	_next_duty,4030	;volatile
  8864                           
  8865                           ; BSR set to: 0
  8866                           ;clock.c: 1672: handle_audio();
  8867  000058  ECA2  F007         	call	_handle_audio	;wreg free
  8868  00005C                     i2l3289:
  8869  00005C  FFFF               	dw	65535	; assembler added errata NOP
  8870                           
  8871                           ;clock.c: 1673: }
  8872                           ;clock.c: 1677: if(INTCON3bits.INT3IF)
  8873  00005E  A4F0               	btfss	intcon3,2,c	;volatile
  8874  000060  D018               	goto	i2l3305
  8875                           
  8876                           ;clock.c: 1678: {
  8877                           ;clock.c: 1679: INTCON3bits.INT3IF = 0;
  8878  000062  94F0               	bcf	intcon3,2,c	;volatile
  8879                           
  8880                           ;clock.c: 1680: got_ir_int = 1;
  8881  000064  0E01               	movlw	1
  8882  000066  6E31               	movwf	_got_ir_int,c	;volatile
  8883                           
  8884                           ;clock.c: 1681: ir_time2 = TMR0L;
  8885  000068  CFD6 F068          	movff	4054,_ir_time2	;volatile
  8886  00006C  0100               	movlb	0	; () banked
  8887  00006E  6B69               	clrf	(_ir_time2+1)& (0+255),b	;volatile
  8888                           
  8889                           ; BSR set to: 0
  8890                           ;clock.c: 1682: ir_time2 |= ((uint16_t)TMR0H) << 8;
  8891  000070  50D7               	movf	4055,w,c	;volatile
  8892  000072  6E05               	movwf	(??_isr+1)& (0+255),c
  8893  000074  6A04               	clrf	??_isr& (0+255),c
  8894  000076  5004               	movf	??_isr,w,c
  8895  000078  0100               	movlb	0	; () banked
  8896  00007A  1368               	iorwf	_ir_time2& (0+255),f,b	;volatile
  8897  00007C  5005               	movf	??_isr+1,w,c
  8898  00007E  0100               	movlb	0	; () banked
  8899  000080  1369               	iorwf	(_ir_time2+1)& (0+255),f,b	;volatile
  8900                           
  8901                           ; BSR set to: 0
  8902                           ;clock.c: 1683: TMR0H = 0;
  8903  000082  0E00               	movlw	0
  8904  000084  6ED7               	movwf	4055,c	;volatile
  8905                           
  8906                           ; BSR set to: 0
  8907                           ;clock.c: 1684: TMR0L = 0;
  8908  000086  0E00               	movlw	0
  8909  000088  6ED6               	movwf	4054,c	;volatile
  8910  00008A                     i2l3303:
  8911  00008A  FFFF               	dw	65535	; assembler added errata NOP
  8912                           
  8913                           ; BSR set to: 0
  8914                           ;clock.c: 1685: interrupt_done = 0;
  8915  00008C  0E00               	movlw	0
  8916  00008E  0100               	movlb	0	; () banked
  8917  000090  6F7E               	movwf	_interrupt_done& (0+255),b
  8918  000092                     i2l3305:
  8919  000092  FFFF               	dw	65535	; assembler added errata NOP
  8920  000094  0100               	movlb	0	; () banked
  8921  000096  517E               	movf	_interrupt_done& (0+255),w,b
  8922  000098  B4D8               	btfsc	status,2,c
  8923  00009A  D7D5               	goto	i2l3281
  8924                           
  8925                           ; BSR set to: 0
  8926                           
  8927                           ; BSR set to: 0
  8928  00009C  C013  FFF5         	movff	??_isr+15,tablat
  8929  0000A0  C012  FFF8         	movff	??_isr+14,tblptru
  8930  0000A4  C011  FFF7         	movff	??_isr+13,tblptrh
  8931  0000A8  C010  FFF6         	movff	??_isr+12,tblptrl
  8932  0000AC  C00F  FFF4         	movff	??_isr+11,prodh
  8933  0000B0  C00E  FFF3         	movff	??_isr+10,prodl
  8934  0000B4  C00D  FFDA         	movff	??_isr+9,fsr2h
  8935  0000B8  C00C  FFD9         	movff	??_isr+8,fsr2l
  8936  0000BC  C00B  FFE2         	movff	??_isr+7,fsr1h
  8937  0000C0  C00A  FFE1         	movff	??_isr+6,fsr1l
  8938  0000C4  C009  FFEA         	movff	??_isr+5,fsr0h
  8939  0000C8  C008  FFE9         	movff	??_isr+4,fsr0l
  8940  0000CC  C007  FFFB         	movff	??_isr+3,pclatu
  8941  0000D0  C006  FFFA         	movff	??_isr+2,pclath
  8942  0000D4  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8943  0000D6  0011               	retfie		f
  8944  0000D8  FFFF               	dw	65535	; errata NOP
  8945  0000DA                     __end_of_isr:
  8946                           	opt stack 0
  8947                           pclatu	equ	0xFFB
  8948                           pclath	equ	0xFFA
  8949                           tblptru	equ	0xFF8
  8950                           tblptrh	equ	0xFF7
  8951                           tblptrl	equ	0xFF6
  8952                           tablat	equ	0xFF5
  8953                           prodh	equ	0xFF4
  8954                           prodl	equ	0xFF3
  8955                           intcon	equ	0xFF2
  8956                           intcon2	equ	0xFF1
  8957                           intcon3	equ	0xFF0
  8958                           postinc0	equ	0xFEE
  8959                           fsr0h	equ	0xFEA
  8960                           fsr0l	equ	0xFE9
  8961                           wreg	equ	0xFE8
  8962                           postdec1	equ	0xFE5
  8963                           fsr1h	equ	0xFE2
  8964                           fsr1l	equ	0xFE1
  8965                           indf2	equ	0xFDF
  8966                           fsr2h	equ	0xFDA
  8967                           fsr2l	equ	0xFD9
  8968                           status	equ	0xFD8
  8969                           
  8970 ;; *************** function _handle_audio *****************
  8971 ;; Defined at:
  8972 ;;		line 1424 in file "clock.c"
  8973 ;; Parameters:    Size  Location     Type
  8974 ;;		None
  8975 ;; Auto vars:     Size  Location     Type
  8976 ;;  amplitude       1    2[COMRAM] unsigned char 
  8977 ;; Return value:  Size  Location     Type
  8978 ;;                  1    wreg      void 
  8979 ;; Registers used:
  8980 ;;		wreg, status,2, status,0
  8981 ;; Tracked objects:
  8982 ;;		On entry : 0/0
  8983 ;;		On exit  : 0/0
  8984 ;;		Unchanged: 0/0
  8985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8987 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8988 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8989 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8990 ;;Total ram usage:        3 bytes
  8991 ;; Hardware stack levels used:    1
  8992 ;; This function calls:
  8993 ;;		Nothing
  8994 ;; This function is called by:
  8995 ;;		_isr
  8996 ;; This function uses a non-reentrant model
  8997 ;;
  8998                           
  8999                           	psect	text35
  9000  000F44                     __ptext35:
  9001                           	opt stack 0
  9002  000F44                     _handle_audio:
  9003                           	opt stack 0
  9004  000F44  FFFF               	dw	65535	; assembler added errata NOP
  9005                           
  9006                           ;clock.c: 1427: decay_count++;
  9007                           
  9008                           ; BSR set to: 0
  9009                           ;incstack = 0
  9010  000F46  0100               	movlb	0	; () banked
  9011  000F48  4B76               	infsnz	_decay_count& (0+255),f,b
  9012  000F4A  2B77               	incf	(_decay_count+1)& (0+255),f,b
  9013                           
  9014                           ; BSR set to: 0
  9015                           ;clock.c: 1428: if(decay_count > 512)
  9016  000F4C  0100               	movlb	0	; () banked
  9017  000F4E  0576               	decf	_decay_count& (0+255),w,b
  9018  000F50  0E02               	movlw	2
  9019  000F52  0100               	movlb	0	; () banked
  9020  000F54  5977               	subwfb	(_decay_count+1)& (0+255),w,b
  9021  000F56  A0D8               	btfss	status,0,c
  9022  000F58  D019               	goto	i2l3151
  9023                           
  9024                           ; BSR set to: 0
  9025                           ;clock.c: 1429: {
  9026                           ;clock.c: 1430: decay_count = 0;
  9027  000F5A  0E00               	movlw	0
  9028  000F5C  0100               	movlb	0	; () banked
  9029  000F5E  6F77               	movwf	(_decay_count+1)& (0+255),b
  9030  000F60  0E00               	movlw	0
  9031  000F62  6F76               	movwf	_decay_count& (0+255),b
  9032                           
  9033                           ;clock.c: 1431: if(osc1_volume > 0) osc1_volume--;
  9034  000F64  0100               	movlb	0	; () banked
  9035  000F66  519D               	movf	_osc1_volume& (0+255),w,b
  9036  000F68  B4D8               	btfsc	status,2,c
  9037  000F6A  D002               	goto	i2l3143
  9038                           
  9039                           ; BSR set to: 0
  9040  000F6C  0100               	movlb	0	; () banked
  9041  000F6E  079D               	decf	_osc1_volume& (0+255),f,b
  9042  000F70                     i2l3143:
  9043  000F70  FFFF               	dw	65535	; assembler added errata NOP
  9044                           
  9045                           ; BSR set to: 0
  9046                           ;clock.c: 1432: if(osc2_volume > 0) osc2_volume--;
  9047  000F72  0100               	movlb	0	; () banked
  9048  000F74  519C               	movf	_osc2_volume& (0+255),w,b
  9049  000F76  B4D8               	btfsc	status,2,c
  9050  000F78  D002               	goto	i2l3147
  9051                           
  9052                           ; BSR set to: 0
  9053  000F7A  0100               	movlb	0	; () banked
  9054  000F7C  079C               	decf	_osc2_volume& (0+255),f,b
  9055  000F7E                     i2l3147:
  9056  000F7E  FFFF               	dw	65535	; assembler added errata NOP
  9057                           
  9058                           ; BSR set to: 0
  9059                           ;clock.c: 1433: if(osc3_volume > 0) osc3_volume--;
  9060  000F80  0100               	movlb	0	; () banked
  9061  000F82  519B               	movf	_osc3_volume& (0+255),w,b
  9062  000F84  B4D8               	btfsc	status,2,c
  9063  000F86  D002               	goto	i2l3151
  9064                           
  9065                           ; BSR set to: 0
  9066  000F88  0100               	movlb	0	; () banked
  9067  000F8A  079B               	decf	_osc3_volume& (0+255),f,b
  9068  000F8C                     i2l3151:
  9069  000F8C  FFFF               	dw	65535	; assembler added errata NOP
  9070                           
  9071                           ; BSR set to: 0
  9072                           ;clock.c: 1434: }
  9073                           ;clock.c: 1436: if(osc1_volume == 0 &&
  9074                           ;clock.c: 1437: osc2_volume == 0 &&
  9075                           ;clock.c: 1438: osc3_volume == 0)
  9076  000F8E  0100               	movlb	0	; () banked
  9077  000F90  519D               	movf	_osc1_volume& (0+255),w,b
  9078  000F92  A4D8               	btfss	status,2,c
  9079  000F94  D017               	goto	i2l3165
  9080                           
  9081                           ; BSR set to: 0
  9082  000F96  0100               	movlb	0	; () banked
  9083  000F98  519C               	movf	_osc2_volume& (0+255),w,b
  9084  000F9A  A4D8               	btfss	status,2,c
  9085  000F9C  D013               	goto	i2l3165
  9086                           
  9087                           ; BSR set to: 0
  9088  000F9E  0100               	movlb	0	; () banked
  9089  000FA0  519B               	movf	_osc3_volume& (0+255),w,b
  9090  000FA2  A4D8               	btfss	status,2,c
  9091  000FA4  D00F               	goto	i2l3165
  9092                           
  9093                           ; BSR set to: 0
  9094                           ;clock.c: 1439: {
  9095                           ;clock.c: 1440: if(powerdown_count < 8192)
  9096  000FA6  0E20               	movlw	32
  9097  000FA8  0100               	movlb	0	; () banked
  9098  000FAA  5D75               	subwf	(_powerdown_count+1)& (0+255),w,b
  9099  000FAC  B0D8               	btfsc	status,0,c
  9100  000FAE  D004               	goto	i2l3161
  9101                           
  9102                           ; BSR set to: 0
  9103                           ;clock.c: 1441: {
  9104                           ;clock.c: 1442: powerdown_count++;
  9105  000FB0  0100               	movlb	0	; () banked
  9106  000FB2  4B74               	infsnz	_powerdown_count& (0+255),f,b
  9107  000FB4  2B75               	incf	(_powerdown_count+1)& (0+255),f,b
  9108                           
  9109                           ;clock.c: 1443: }
  9110  000FB6  D0A3               	goto	i2l494
  9111  000FB8                     i2l3161:
  9112  000FB8  FFFF               	dw	65535	; assembler added errata NOP
  9113                           
  9114                           ; BSR set to: 0
  9115                           ;clock.c: 1444: else
  9116                           ;clock.c: 1445: if(next_duty > 0)
  9117  000FBA  5045               	movf	_next_duty,w,c
  9118  000FBC  B4D8               	btfsc	status,2,c
  9119  000FBE  D09F               	goto	i2l494
  9120                           
  9121                           ; BSR set to: 0
  9122                           ;clock.c: 1446: {
  9123                           ;clock.c: 1448: next_duty--;
  9124  000FC0  0645               	decf	_next_duty,f,c
  9125                           
  9126                           ; BSR set to: 0
  9127                           ;clock.c: 1449: }
  9128                           ;clock.c: 1450: }
  9129                           
  9130                           ; BSR set to: 0
  9131  000FC2  D09D               	goto	i2l494
  9132  000FC4                     i2l3165:
  9133  000FC4  FFFF               	dw	65535	; assembler added errata NOP
  9134                           
  9135                           ; BSR set to: 0
  9136                           ;clock.c: 1451: else
  9137                           ;clock.c: 1452: {
  9138                           ;clock.c: 1453: powerdown_count = 0;
  9139  000FC6  0E00               	movlw	0
  9140  000FC8  0100               	movlb	0	; () banked
  9141  000FCA  6F75               	movwf	(_powerdown_count+1)& (0+255),b
  9142  000FCC  0E00               	movlw	0
  9143  000FCE  6F74               	movwf	_powerdown_count& (0+255),b
  9144                           
  9145                           ; BSR set to: 0
  9146                           ;clock.c: 1456: osc1_time += 0xff;
  9147  000FD0  0EFF               	movlw	255
  9148  000FD2  0100               	movlb	0	; () banked
  9149  000FD4  2772               	addwf	_osc1_time& (0+255),f,b
  9150  000FD6  0E00               	movlw	0
  9151  000FD8  2373               	addwfc	(_osc1_time+1)& (0+255),f,b
  9152                           
  9153                           ; BSR set to: 0
  9154                           ;clock.c: 1457: osc2_time += 0xff;
  9155  000FDA  0EFF               	movlw	255
  9156  000FDC  0100               	movlb	0	; () banked
  9157  000FDE  2770               	addwf	_osc2_time& (0+255),f,b
  9158  000FE0  0E00               	movlw	0
  9159  000FE2  2371               	addwfc	(_osc2_time+1)& (0+255),f,b
  9160                           
  9161                           ; BSR set to: 0
  9162                           ;clock.c: 1458: osc3_time += 0xff;
  9163  000FE4  0EFF               	movlw	255
  9164  000FE6  0100               	movlb	0	; () banked
  9165  000FE8  276E               	addwf	_osc3_time& (0+255),f,b
  9166  000FEA  0E00               	movlw	0
  9167  000FEC  236F               	addwfc	(_osc3_time+1)& (0+255),f,b
  9168                           
  9169                           ; BSR set to: 0
  9170                           ;clock.c: 1463: uint8_t amplitude = 0x68;
  9171  000FEE  0E68               	movlw	104
  9172  000FF0  6E03               	movwf	handle_audio@amplitude,c
  9173                           
  9174                           ;clock.c: 1464: if(osc1_time >= osc1_period)
  9175  000FF2  0100               	movlb	0	; () banked
  9176  000FF4  5199               	movf	_osc1_period& (0+255),w,b
  9177  000FF6  0100               	movlb	0	; () banked
  9178  000FF8  5D72               	subwf	_osc1_time& (0+255),w,b
  9179  000FFA  0100               	movlb	0	; () banked
  9180  000FFC  519A               	movf	(_osc1_period+1)& (0+255),w,b
  9181  000FFE  0100               	movlb	0	; () banked
  9182  001000  5973               	subwfb	(_osc1_time+1)& (0+255),w,b
  9183  001002  A0D8               	btfss	status,0,c
  9184  001004  D009               	goto	i2l3177
  9185                           
  9186                           ; BSR set to: 0
  9187                           ;clock.c: 1465: {
  9188                           ;clock.c: 1466: osc1_time -= osc1_period;
  9189  001006  0100               	movlb	0	; () banked
  9190  001008  5199               	movf	_osc1_period& (0+255),w,b
  9191  00100A  0100               	movlb	0	; () banked
  9192  00100C  5F72               	subwf	_osc1_time& (0+255),f,b
  9193  00100E  0100               	movlb	0	; () banked
  9194  001010  519A               	movf	(_osc1_period+1)& (0+255),w,b
  9195  001012  0100               	movlb	0	; () banked
  9196  001014  5B73               	subwfb	(_osc1_time+1)& (0+255),f,b
  9197  001016  D014               	goto	i2l3181
  9198  001018                     i2l3177:
  9199  001018  FFFF               	dw	65535	; assembler added errata NOP
  9200                           
  9201                           ; BSR set to: 0
  9202                           ;clock.c: 1469: else
  9203                           ;clock.c: 1470: if(osc1_time >= osc1_period / 2)
  9204  00101A  90D8               	bcf	status,0,c
  9205  00101C  0100               	movlb	0	; () banked
  9206  00101E  319A               	rrcf	(_osc1_period+1)& (0+255),w,b
  9207  001020  6E02               	movwf	(??_handle_audio+1)& (0+255),c
  9208  001022  0100               	movlb	0	; () banked
  9209  001024  3199               	rrcf	_osc1_period& (0+255),w,b
  9210  001026  6E01               	movwf	??_handle_audio& (0+255),c
  9211  001028  5001               	movf	??_handle_audio,w,c
  9212  00102A  0100               	movlb	0	; () banked
  9213  00102C  5D72               	subwf	_osc1_time& (0+255),w,b
  9214  00102E  5002               	movf	??_handle_audio+1,w,c
  9215  001030  0100               	movlb	0	; () banked
  9216  001032  5973               	subwfb	(_osc1_time+1)& (0+255),w,b
  9217  001034  A0D8               	btfss	status,0,c
  9218  001036  D004               	goto	i2l3181
  9219                           
  9220                           ; BSR set to: 0
  9221                           ;clock.c: 1471: {
  9222                           ;clock.c: 1472: amplitude -= osc1_volume;
  9223  001038  0100               	movlb	0	; () banked
  9224  00103A  519D               	movf	_osc1_volume& (0+255),w,b
  9225  00103C  5E03               	subwf	handle_audio@amplitude,f,c
  9226                           
  9227                           ;clock.c: 1473: }
  9228  00103E  D004               	goto	i2l483
  9229  001040                     i2l3181:
  9230  001040  FFFF               	dw	65535	; assembler added errata NOP
  9231                           
  9232                           ; BSR set to: 0
  9233                           ;clock.c: 1474: else
  9234                           ;clock.c: 1475: {
  9235                           ;clock.c: 1476: amplitude += osc1_volume;
  9236  001042  0100               	movlb	0	; () banked
  9237  001044  519D               	movf	_osc1_volume& (0+255),w,b
  9238  001046  2603               	addwf	handle_audio@amplitude,f,c
  9239  001048                     i2l483:
  9240  001048  FFFF               	dw	65535	; assembler added errata NOP
  9241                           
  9242                           ; BSR set to: 0
  9243                           ;clock.c: 1477: }
  9244                           ;clock.c: 1479: if(osc2_time >= osc2_period)
  9245  00104A  0100               	movlb	0	; () banked
  9246  00104C  5197               	movf	_osc2_period& (0+255),w,b
  9247  00104E  0100               	movlb	0	; () banked
  9248  001050  5D70               	subwf	_osc2_time& (0+255),w,b
  9249  001052  0100               	movlb	0	; () banked
  9250  001054  5198               	movf	(_osc2_period+1)& (0+255),w,b
  9251  001056  0100               	movlb	0	; () banked
  9252  001058  5971               	subwfb	(_osc2_time+1)& (0+255),w,b
  9253  00105A  A0D8               	btfss	status,0,c
  9254  00105C  D009               	goto	i2l3185
  9255                           
  9256                           ; BSR set to: 0
  9257                           ;clock.c: 1480: {
  9258                           ;clock.c: 1481: osc2_time -= osc2_period;
  9259  00105E  0100               	movlb	0	; () banked
  9260  001060  5197               	movf	_osc2_period& (0+255),w,b
  9261  001062  0100               	movlb	0	; () banked
  9262  001064  5F70               	subwf	_osc2_time& (0+255),f,b
  9263  001066  0100               	movlb	0	; () banked
  9264  001068  5198               	movf	(_osc2_period+1)& (0+255),w,b
  9265  00106A  0100               	movlb	0	; () banked
  9266  00106C  5B71               	subwfb	(_osc2_time+1)& (0+255),f,b
  9267  00106E  D014               	goto	i2l3189
  9268  001070                     i2l3185:
  9269  001070  FFFF               	dw	65535	; assembler added errata NOP
  9270                           
  9271                           ; BSR set to: 0
  9272                           ;clock.c: 1484: else
  9273                           ;clock.c: 1485: if(osc2_time >= osc2_period / 2)
  9274  001072  90D8               	bcf	status,0,c
  9275  001074  0100               	movlb	0	; () banked
  9276  001076  3198               	rrcf	(_osc2_period+1)& (0+255),w,b
  9277  001078  6E02               	movwf	(??_handle_audio+1)& (0+255),c
  9278  00107A  0100               	movlb	0	; () banked
  9279  00107C  3197               	rrcf	_osc2_period& (0+255),w,b
  9280  00107E  6E01               	movwf	??_handle_audio& (0+255),c
  9281  001080  5001               	movf	??_handle_audio,w,c
  9282  001082  0100               	movlb	0	; () banked
  9283  001084  5D70               	subwf	_osc2_time& (0+255),w,b
  9284  001086  5002               	movf	??_handle_audio+1,w,c
  9285  001088  0100               	movlb	0	; () banked
  9286  00108A  5971               	subwfb	(_osc2_time+1)& (0+255),w,b
  9287  00108C  A0D8               	btfss	status,0,c
  9288  00108E  D004               	goto	i2l3189
  9289                           
  9290                           ; BSR set to: 0
  9291                           ;clock.c: 1486: {
  9292                           ;clock.c: 1487: amplitude -= osc2_volume;
  9293  001090  0100               	movlb	0	; () banked
  9294  001092  519C               	movf	_osc2_volume& (0+255),w,b
  9295  001094  5E03               	subwf	handle_audio@amplitude,f,c
  9296                           
  9297                           ;clock.c: 1488: }
  9298  001096  D004               	goto	i2l487
  9299  001098                     i2l3189:
  9300  001098  FFFF               	dw	65535	; assembler added errata NOP
  9301                           
  9302                           ; BSR set to: 0
  9303                           ;clock.c: 1489: else
  9304                           ;clock.c: 1490: {
  9305                           ;clock.c: 1491: amplitude += osc2_volume;
  9306  00109A  0100               	movlb	0	; () banked
  9307  00109C  519C               	movf	_osc2_volume& (0+255),w,b
  9308  00109E  2603               	addwf	handle_audio@amplitude,f,c
  9309  0010A0                     i2l487:
  9310  0010A0  FFFF               	dw	65535	; assembler added errata NOP
  9311                           
  9312                           ; BSR set to: 0
  9313                           ;clock.c: 1492: }
  9314                           ;clock.c: 1494: if(osc3_time >= osc3_period)
  9315  0010A2  0100               	movlb	0	; () banked
  9316  0010A4  5195               	movf	_osc3_period& (0+255),w,b
  9317  0010A6  0100               	movlb	0	; () banked
  9318  0010A8  5D6E               	subwf	_osc3_time& (0+255),w,b
  9319  0010AA  0100               	movlb	0	; () banked
  9320  0010AC  5196               	movf	(_osc3_period+1)& (0+255),w,b
  9321  0010AE  0100               	movlb	0	; () banked
  9322  0010B0  596F               	subwfb	(_osc3_time+1)& (0+255),w,b
  9323  0010B2  A0D8               	btfss	status,0,c
  9324  0010B4  D009               	goto	i2l3193
  9325                           
  9326                           ; BSR set to: 0
  9327                           ;clock.c: 1495: {
  9328                           ;clock.c: 1496: osc3_time -= osc3_period;
  9329  0010B6  0100               	movlb	0	; () banked
  9330  0010B8  5195               	movf	_osc3_period& (0+255),w,b
  9331  0010BA  0100               	movlb	0	; () banked
  9332  0010BC  5F6E               	subwf	_osc3_time& (0+255),f,b
  9333  0010BE  0100               	movlb	0	; () banked
  9334  0010C0  5196               	movf	(_osc3_period+1)& (0+255),w,b
  9335  0010C2  0100               	movlb	0	; () banked
  9336  0010C4  5B6F               	subwfb	(_osc3_time+1)& (0+255),f,b
  9337  0010C6  D014               	goto	i2l3197
  9338  0010C8                     i2l3193:
  9339  0010C8  FFFF               	dw	65535	; assembler added errata NOP
  9340                           
  9341                           ; BSR set to: 0
  9342                           ;clock.c: 1499: else
  9343                           ;clock.c: 1500: if(osc3_time >= osc3_period / 2)
  9344  0010CA  90D8               	bcf	status,0,c
  9345  0010CC  0100               	movlb	0	; () banked
  9346  0010CE  3196               	rrcf	(_osc3_period+1)& (0+255),w,b
  9347  0010D0  6E02               	movwf	(??_handle_audio+1)& (0+255),c
  9348  0010D2  0100               	movlb	0	; () banked
  9349  0010D4  3195               	rrcf	_osc3_period& (0+255),w,b
  9350  0010D6  6E01               	movwf	??_handle_audio& (0+255),c
  9351  0010D8  5001               	movf	??_handle_audio,w,c
  9352  0010DA  0100               	movlb	0	; () banked
  9353  0010DC  5D6E               	subwf	_osc3_time& (0+255),w,b
  9354  0010DE  5002               	movf	??_handle_audio+1,w,c
  9355  0010E0  0100               	movlb	0	; () banked
  9356  0010E2  596F               	subwfb	(_osc3_time+1)& (0+255),w,b
  9357  0010E4  A0D8               	btfss	status,0,c
  9358  0010E6  D004               	goto	i2l3197
  9359                           
  9360                           ; BSR set to: 0
  9361                           ;clock.c: 1501: {
  9362                           ;clock.c: 1502: amplitude -= osc3_volume;
  9363  0010E8  0100               	movlb	0	; () banked
  9364  0010EA  519B               	movf	_osc3_volume& (0+255),w,b
  9365  0010EC  5E03               	subwf	handle_audio@amplitude,f,c
  9366                           
  9367                           ;clock.c: 1503: }
  9368  0010EE  D004               	goto	i2l3199
  9369  0010F0                     i2l3197:
  9370  0010F0  FFFF               	dw	65535	; assembler added errata NOP
  9371                           
  9372                           ; BSR set to: 0
  9373                           ;clock.c: 1504: else
  9374                           ;clock.c: 1505: {
  9375                           ;clock.c: 1506: amplitude += osc3_volume;
  9376  0010F2  0100               	movlb	0	; () banked
  9377  0010F4  519B               	movf	_osc3_volume& (0+255),w,b
  9378  0010F6  2603               	addwf	handle_audio@amplitude,f,c
  9379  0010F8                     i2l3199:
  9380  0010F8  FFFF               	dw	65535	; assembler added errata NOP
  9381                           
  9382                           ; BSR set to: 0
  9383                           ;clock.c: 1507: }
  9384                           ;clock.c: 1551: next_duty = amplitude;
  9385  0010FA  C003  F045         	movff	handle_audio@amplitude,_next_duty
  9386  0010FE                     i2l494:
  9387  0010FE  FFFF               	dw	65535	; assembler added errata NOP
  9388                           
  9389                           ; BSR set to: 0
  9390  001100  0012               	return		;funcret
  9391  001102  FFFF               	dw	65535	; errata NOP
  9392  001104                     __end_of_handle_audio:
  9393                           	opt stack 0
  9394                           pclatu	equ	0xFFB
  9395                           pclath	equ	0xFFA
  9396                           tblptru	equ	0xFF8
  9397                           tblptrh	equ	0xFF7
  9398                           tblptrl	equ	0xFF6
  9399                           tablat	equ	0xFF5
  9400                           prodh	equ	0xFF4
  9401                           prodl	equ	0xFF3
  9402                           intcon	equ	0xFF2
  9403                           intcon2	equ	0xFF1
  9404                           intcon3	equ	0xFF0
  9405                           postinc0	equ	0xFEE
  9406                           fsr0h	equ	0xFEA
  9407                           fsr0l	equ	0xFE9
  9408                           wreg	equ	0xFE8
  9409                           postdec1	equ	0xFE5
  9410                           fsr1h	equ	0xFE2
  9411                           fsr1l	equ	0xFE1
  9412                           indf2	equ	0xFDF
  9413                           fsr2h	equ	0xFDA
  9414                           fsr2l	equ	0xFD9
  9415                           status	equ	0xFD8
  9416                           pclatu	equ	0xFFB
  9417                           pclath	equ	0xFFA
  9418                           tblptru	equ	0xFF8
  9419                           tblptrh	equ	0xFF7
  9420                           tblptrl	equ	0xFF6
  9421                           tablat	equ	0xFF5
  9422                           prodh	equ	0xFF4
  9423                           prodl	equ	0xFF3
  9424                           intcon	equ	0xFF2
  9425                           intcon2	equ	0xFF1
  9426                           intcon3	equ	0xFF0
  9427                           postinc0	equ	0xFEE
  9428                           fsr0h	equ	0xFEA
  9429                           fsr0l	equ	0xFE9
  9430                           wreg	equ	0xFE8
  9431                           postdec1	equ	0xFE5
  9432                           fsr1h	equ	0xFE2
  9433                           fsr1l	equ	0xFE1
  9434                           indf2	equ	0xFDF
  9435                           fsr2h	equ	0xFDA
  9436                           fsr2l	equ	0xFD9
  9437                           status	equ	0xFD8
  9438                           
  9439                           	psect	rparam
  9440  0000                     pclatu	equ	0xFFB
  9441                           pclath	equ	0xFFA
  9442                           tblptru	equ	0xFF8
  9443                           tblptrh	equ	0xFF7
  9444                           tblptrl	equ	0xFF6
  9445                           tablat	equ	0xFF5
  9446                           prodh	equ	0xFF4
  9447                           prodl	equ	0xFF3
  9448                           intcon	equ	0xFF2
  9449                           intcon2	equ	0xFF1
  9450                           intcon3	equ	0xFF0
  9451                           postinc0	equ	0xFEE
  9452                           fsr0h	equ	0xFEA
  9453                           fsr0l	equ	0xFE9
  9454                           wreg	equ	0xFE8
  9455                           postdec1	equ	0xFE5
  9456                           fsr1h	equ	0xFE2
  9457                           fsr1l	equ	0xFE1
  9458                           indf2	equ	0xFDF
  9459                           fsr2h	equ	0xFDA
  9460                           fsr2l	equ	0xFD9
  9461                           status	equ	0xFD8
  9462                           
  9463                           	psect	temp
  9464  00004C                     btemp:
  9465                           	opt stack 0
  9466  00004C                     	ds	1
  9467  0000                     int$flags	set	btemp
  9468                           pclatu	equ	0xFFB
  9469                           pclath	equ	0xFFA
  9470                           tblptru	equ	0xFF8
  9471                           tblptrh	equ	0xFF7
  9472                           tblptrl	equ	0xFF6
  9473                           tablat	equ	0xFF5
  9474                           prodh	equ	0xFF4
  9475                           prodl	equ	0xFF3
  9476                           intcon	equ	0xFF2
  9477                           intcon2	equ	0xFF1
  9478                           intcon3	equ	0xFF0
  9479                           postinc0	equ	0xFEE
  9480                           fsr0h	equ	0xFEA
  9481                           fsr0l	equ	0xFE9
  9482                           wreg	equ	0xFE8
  9483                           postdec1	equ	0xFE5
  9484                           fsr1h	equ	0xFE2
  9485                           fsr1l	equ	0xFE1
  9486                           indf2	equ	0xFDF
  9487                           fsr2h	equ	0xFDA
  9488                           fsr2l	equ	0xFD9
  9489                           status	equ	0xFD8


Data Sizes:
    Strings     58
    Constant    1642
    Data        5
    BSS         1082
    Persistent  10
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      75
    BANK0           160     19      62
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    handle_ir@code.data	PTR const int  size(2) Largest target is 142
		 -> number3_data(CODE[142]), number2_data(CODE[142]), number1_data(CODE[142]), prev_track_data(CODE[142]), 
		 -> next_track_data(CODE[142]), volume_dn_data(CODE[142]), volume_up_data(CODE[142]), power_data(CODE[142]), 

    handle_ir@data	PTR const int  size(2) Largest target is 142
		 -> number3_data(CODE[142]), number2_data(CODE[142]), number1_data(CODE[142]), prev_track_data(CODE[142]), 
		 -> next_track_data(CODE[142]), volume_dn_data(CODE[142]), volume_up_data(CODE[142]), power_data(CODE[142]), 

    handle_ir@code	PTR const struct . size(2) Largest target is 40
		 -> ir_codes(CODE[32]), 

    draw_alarm@ptr	PTR const unsigned char  size(2) Largest target is 40
		 -> led_masks4(CODE[40]), led_masks3(CODE[40]), led_masks2(CODE[40]), 

    draw_time@ptr	PTR const unsigned char  size(2) Largest target is 40
		 -> led_masks4(CODE[40]), led_masks3(CODE[40]), led_masks2(CODE[40]), 

    play_song@ptr	PTR const struct . size(2) Largest target is 76
		 -> alarm_song(CODE[76]), dn_tone(CODE[12]), up_tone(CODE[12]), set_time_tone2(CODE[20]), 
		 -> set_time_tone1(CODE[20]), set_alarm_tone2(CODE[20]), set_alarm_tone1(CODE[20]), alarm_on_tone(CODE[36]), 
		 -> alarm_off_tone(CODE[36]), test_tone(CODE[12]), 

    song_ptr	PTR const struct . size(3) Largest target is 49151
		 -> ROM(CODE[49151]), alarm_song(CODE[76]), dn_tone(CODE[12]), up_tone(CODE[12]), 
		 -> set_time_tone2(CODE[20]), set_time_tone1(CODE[20]), set_alarm_tone2(CODE[20]), set_alarm_tone1(CODE[20]), 
		 -> alarm_on_tone(CODE[36]), alarm_off_tone(CODE[36]), test_tone(CODE[12]), 

    print_text@s	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_5(CODE[14]), STR_4(CODE[2]), STR_3(CODE[27]), STR_2(CODE[7]), 
		 -> STR_1(CODE[10]), 

    S26$data	PTR const int  size(2) Largest target is 142
		 -> number3_data(CODE[142]), number2_data(CODE[142]), number1_data(CODE[142]), prev_track_data(CODE[142]), 
		 -> next_track_data(CODE[142]), volume_dn_data(CODE[142]), volume_up_data(CODE[142]), power_data(CODE[142]), 

    ir_codes.data	PTR const int  size(2) Largest target is 142
		 -> number3_data(CODE[142]), number2_data(CODE[142]), number1_data(CODE[142]), prev_track_data(CODE[142]), 
		 -> next_track_data(CODE[142]), volume_dn_data(CODE[142]), volume_up_data(CODE[142]), power_data(CODE[142]), 


Critical Paths under _main in COMRAM

    _main->_handle_ir
    _start_alarm->_play_song
    _handle_time->_print_number2
    _print_number2->___awmod
    ___awmod->___awdiv
    _print_text->_print_byte
    _print_number->_print_number_nospace
    _print_number_nospace->___lwmod
    ___lwmod->___lwdiv
    _draw_test->_write_leds
    _increment_time_minutes->_draw_time
    _increment_alarm_minutes->_draw_alarm
    _decrement_time_minutes->_draw_time
    _decrement_alarm_minutes->_draw_alarm
    _increment_time_hours->_draw_time
    _increment_alarm_hours->_draw_alarm
    _dump_leds->_print_bin_nospace
    _print_bin_nospace->_print_byte
    _decrement_time_hours->_draw_time
    _draw_time->___awdiv
    _decrement_alarm_hours->_draw_alarm
    _draw_alarm->___awdiv

Critical Paths under _isr in COMRAM

    _isr->_handle_audio

Critical Paths under _main in BANK0

    _main->_handle_ir

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   39410
                                             43 COMRAM     2     2      0
                                             14 BANK0      5     5      0
                          _draw_time
                          _handle_ir
                      _handle_repeat
                        _handle_time
                         _print_text
                        _start_alarm
 ---------------------------------------------------------------------------------
 (1) _start_alarm                                          0     0      0    1186
                          _play_song
 ---------------------------------------------------------------------------------
 (1) _handle_time                                          0     0      0    3196
                          _draw_time
                        _handle_song
                         _print_byte
                      _print_number2
 ---------------------------------------------------------------------------------
 (2) _print_number2                                        1     1      0    1741
                                             33 COMRAM     1     1      0
                            ___awdiv
                            ___awmod
                         _print_byte
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     741
                                             27 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _handle_repeat                                        0     0      0   12604
                       _do_hour_down
                         _do_hour_up
                     _do_minute_down
                       _do_minute_up
 ---------------------------------------------------------------------------------
 (1) _handle_ir                                           20    20      0   20315
                                             37 COMRAM     6     6      0
                                              0 BANK0     14    14      0
                       _do_hour_down
                         _do_hour_up
                     _do_minute_down
                       _do_minute_up
                         _draw_alarm
                          _draw_test
                          _draw_time
                          _play_song
                         _print_byte
                       _print_number
                         _print_text
 ---------------------------------------------------------------------------------
 (1) _print_text                                           2     0      2     481
                                             20 COMRAM     2     0      2
                         _print_byte
 ---------------------------------------------------------------------------------
 (2) _print_number                                         2     0      2    2308
                                             33 COMRAM     2     0      2
                         _print_byte
               _print_number_nospace
 ---------------------------------------------------------------------------------
 (3) _print_number_nospace                                 2     0      2    2092
                                             31 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
                         _print_byte
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     848
                                             26 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     857
                                             19 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _play_song                                            2     0      2    1186
                                             19 COMRAM     2     0      2
                        _handle_song
 ---------------------------------------------------------------------------------
 (3) _handle_song                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _draw_test                                            0     0      0       0
                         _write_leds
 ---------------------------------------------------------------------------------
 (2) _do_minute_up                                         0     0      0    2848
            _increment_alarm_minutes
             _increment_time_minutes
 ---------------------------------------------------------------------------------
 (3) _increment_time_minutes                               0     0      0    1424
                          _draw_time
 ---------------------------------------------------------------------------------
 (3) _increment_alarm_minutes                              0     0      0    1424
                         _draw_alarm
 ---------------------------------------------------------------------------------
 (2) _do_minute_down                                       0     0      0    2848
            _decrement_alarm_minutes
             _decrement_time_minutes
 ---------------------------------------------------------------------------------
 (3) _decrement_time_minutes                               0     0      0    1424
                          _draw_time
 ---------------------------------------------------------------------------------
 (3) _decrement_alarm_minutes                              0     0      0    1424
                         _draw_alarm
 ---------------------------------------------------------------------------------
 (2) _do_hour_up                                           0     0      0    3454
                          _dump_leds
              _increment_alarm_hours
               _increment_time_hours
                         _write_leds
 ---------------------------------------------------------------------------------
 (3) _increment_time_hours                                 0     0      0    1424
                          _draw_time
 ---------------------------------------------------------------------------------
 (3) _increment_alarm_hours                                0     0      0    1424
                         _draw_alarm
 ---------------------------------------------------------------------------------
 (2) _do_hour_down                                         0     0      0    3454
              _decrement_alarm_hours
               _decrement_time_hours
                          _dump_leds
                         _write_leds
 ---------------------------------------------------------------------------------
 (3) _dump_leds                                            0     0      0     606
                  _print_bin_nospace
                         _print_byte
 ---------------------------------------------------------------------------------
 (4) _print_bin_nospace                                   17    17      0     575
                                             20 COMRAM    17    17      0
                         _print_byte
 ---------------------------------------------------------------------------------
 (2) _print_byte                                           1     1      0      31
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _decrement_time_hours                                 0     0      0    1424
                          _draw_time
 ---------------------------------------------------------------------------------
 (2) _draw_time                                            6     6      0    1424
                                             27 COMRAM     6     6      0
                            ___awdiv
                         _write_leds
 ---------------------------------------------------------------------------------
 (3) _decrement_alarm_hours                                0     0      0    1424
                         _draw_alarm
 ---------------------------------------------------------------------------------
 (4) _draw_alarm                                           6     6      0    1424
                                             27 COMRAM     6     6      0
                            ___awdiv
                         _write_leds
 ---------------------------------------------------------------------------------
 (3) _write_leds                                           1     1      0       0
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     907
                                             19 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                 16    16      0      32
                                              3 COMRAM    16    16      0
                       _handle_audio
 ---------------------------------------------------------------------------------
 (7) _handle_audio                                         3     3      0      32
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _draw_time
     ___awdiv
     _write_leds
   _handle_ir
     _do_hour_down
       _decrement_alarm_hours
         _draw_alarm
           ___awdiv
           _write_leds
       _decrement_time_hours
         _draw_time
           ___awdiv
           _write_leds
       _dump_leds
         _print_bin_nospace
           _print_byte
         _print_byte
       _write_leds
     _do_hour_up
       _dump_leds
         _print_bin_nospace
           _print_byte
         _print_byte
       _increment_alarm_hours
         _draw_alarm
           ___awdiv
           _write_leds
       _increment_time_hours
         _draw_time
           ___awdiv
           _write_leds
       _write_leds
     _do_minute_down
       _decrement_alarm_minutes
         _draw_alarm
           ___awdiv
           _write_leds
       _decrement_time_minutes
         _draw_time
           ___awdiv
           _write_leds
     _do_minute_up
       _increment_alarm_minutes
         _draw_alarm
           ___awdiv
           _write_leds
       _increment_time_minutes
         _draw_time
           ___awdiv
           _write_leds
     _draw_alarm
       ___awdiv
       _write_leds
     _draw_test
       _write_leds
     _draw_time
       ___awdiv
       _write_leds
     _play_song
       _handle_song
     _print_byte
     _print_number
       _print_byte
       _print_number_nospace
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _print_byte
     _print_text
       _print_byte
   _handle_repeat
     _do_hour_down
       _decrement_alarm_hours
         _draw_alarm
           ___awdiv
           _write_leds
       _decrement_time_hours
         _draw_time
           ___awdiv
           _write_leds
       _dump_leds
         _print_bin_nospace
           _print_byte
         _print_byte
       _write_leds
     _do_hour_up
       _dump_leds
         _print_bin_nospace
           _print_byte
         _print_byte
       _increment_alarm_hours
         _draw_alarm
           ___awdiv
           _write_leds
       _increment_time_hours
         _draw_time
           ___awdiv
           _write_leds
       _write_leds
     _do_minute_down
       _decrement_alarm_minutes
         _draw_alarm
           ___awdiv
           _write_leds
       _decrement_time_minutes
         _draw_time
           ___awdiv
           _write_leds
     _do_minute_up
       _increment_alarm_minutes
         _draw_alarm
           ___awdiv
           _write_leds
       _increment_time_minutes
         _draw_time
           ___awdiv
           _write_leds
   _handle_time
     _draw_time
       ___awdiv
       _write_leds
     _handle_song
     _print_byte
     _print_number2
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       _print_byte
   _print_text
     _print_byte
   _start_alarm
     _play_song
       _handle_song

 _isr (ROOT)
   _handle_audio

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0     400      31       30.8%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     13      3E       5       38.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      4B       1       79.8%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      89      20        0.0%
DATA                 0      0     489       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Jun 22 21:49:44 2017

                                              ?_print_number2 0001  
                                              ??_do_hour_down 0026  
                                                ___awdiv@sign 0019  
                                              ??_do_minute_up 0022  
                                                         l223 1A9E  
                                                         l306 0D5C  
                                                         l403 1BFC  
                                                         l235 13A4  
                                                         l317 0D86  
                                                         l421 1806  
                                                         l510 1598  
                                                         l344 1BD4  
                                                         l336 1B6E  
                                                         l353 1A00  
                                                         l409 1C1C  
                                                         l434 0582  
                                                         l363 1A4E  
                                                         l292 0D38  
                                                         l470 05D4  
                                                         l383 1728  
                                                         l295 0CC0  
                                                         l528 09F2  
                                                         l529 0A80  
                                                         l387 1754  
                                                         l397 179C  
                                                         l498 1514  
                                                         l946 185E  
                                                         l956 19B0  
                                             _powerdown_count 0074  
                                                 _start_alarm 1C6C  
                                                         _PR2 000FCB  
                                __end_of_increment_time_hours 1A0E  
                                                         _isr 0008  
                                                ___awmod@sign 0021  
                                                         prod 000FF3  
                                                         wreg 000FE8  
                                                __CFG_LVP$OFF 000000  
                                     ?_increment_time_minutes 0001  
                                                        l4003 16E0  
                                                        l4101 17B8  
                                                        l4031 170E  
                                                        l4111 17D8  
                                                        l4121 00F6  
                                                        l4113 17E0  
                                                        l4035 171C  
                                                        l4203 03D8  
                                                        l4107 17C8  
                                                        l4029 1706  
                                                        l4301 05B6  
                                                        l4213 0408  
                                                        l4205 03E8  
                                                        l4141 0210  
                                                        l4125 0102  
                                                        l4109 17D0  
                                                        l4117 17E8  
                                                        l4071 177A  
                                                        l4151 02B4  
                                                        l4143 0266  
                                                        l4073 1782  
                                                        l4241 0476  
                                                        l4233 0456  
                                                        l4161 02D8  
                                                        l3523 15B4  
                                                        l3611 148A  
                                                        l3603 146C  
                                                        l4227 043E  
                                                        l4219 0420  
                                                        l4147 0284  
                                                        l4331 1508  
                                                        l4077 1790  
                                                        l4093 1C10  
                                                        l4085 1BF0  
                                                        l4261 04BA  
                                                        l4253 049E  
                                                        l4245 0482  
                                                        l4181 0370  
                                                        l4157 02CC  
                                                        l3535 15DE  
                                                        l3551 1618  
                                                        l4271 04EE  
                                                        l4191 03A4  
                                                        l4167 02F6  
                                                        l4351 1546  
                                                        l3537 15E8  
                                                        l3529 15C6  
                                                        l4265 04D2  
                                                        l4185 0390  
                                                        l4361 157A  
                                                        l4505 0A4A  
                                                        l3555 1628  
                                                        l3547 160C  
                                                        l3539 15EE  
                                                        l3635 0D9A  
                                                        l3619 14A8  
                                                        l3571 13F4  
                                                        l3563 13D6  
                                                        l3811 0C40  
                                                        l3803 0B98  
                                                        l4275 0506  
                                                        l4187 0398  
                                                        l4283 0522  
                                                        l4515 0A74  
                                                        l3901 1B08  
                                                        l4285 0572  
                                                        l4293 0594  
                                                        l4541 0AF4  
                                                        l4509 0A56  
                                                        l3911 1A32  
                                                        l3807 0BEC  
                                                        l3751 182E  
                                                        l4199 03C2  
                                                        l4359 1574  
                                                        l4527 0AC0  
                                                        l4471 09C2  
                                                        l3673 0F26  
                                                        l3817 0C94  
                                                        l3761 1852  
                                                        l3753 1834  
                                                        l4297 05AA  
                                                        l4289 058C  
                                                        l4529 0AC6  
                                                        l3923 1B8A  
                                                        l3675 0F2C  
                                                        l3683 0F3A  
                                                        l3595 144E  
                                                        l3587 1430  
                                                        l3579 1412  
                                                        l3835 0D14  
                                                        l3771 1988  
                                                        l3837 0D28  
                                                        l3749 1824  
                                                        l3773 198E  
                                                        l3941 165A  
                                                        l3695 1128  
                                                        l3927 1BA6  
                                                        l4559 0B2E  
                                                        l4479 09D8  
                                                        l3857 1C32  
                                                        l3777 19A4  
                                                        l3769 197E  
                                                        l3793 1366  
                                                        l3785 12EA  
                                                        l3961 16AC  
                                                        l3953 1690  
                                                        l3945 166A  
                                                        l3937 164C  
                                                        l3875 1C62  
                                                        l3971 1AC0  
                                                        l3947 1674  
                                                        l3885 19F2  
                                                        l3789 1328  
                                                        l3949 167A  
                                                        l3957 169C  
                                                        l3799 0B7A  
                                                        l3967 1AA8  
                                                        l3897 1AFA  
                                                        ?_isr 0001  
                                                        STR_1 BFEE  
                                                        STR_2 BFF8  
                                                        STR_3 BFC5  
                                                        STR_4 BFDE  
                                                        STR_5 BFE0  
                                                        u4410 0614  
                                                        u6100 1564  
                                                        u4510 06A6  
                                                        u4430 0632  
                                                        u5310 19EA  
                                                        u4408 05FC  
                                                        u5400 1A46  
                                                        u5320 19EE  
                                                        u6040 14FE  
                                                        u4610 074C  
                                                        u4530 06DA  
                                                        u4450 0652  
                                                        u5410 1A4A  
                                                        u6050 1502  
                                                        u4508 068E  
                                                        u4428 0618  
                                                        u5180 1336  
                                                        u6220 0A96  
                                                        u4710 07F6  
                                                        u4630 076C  
                                                        u4550 06F8  
                                                        u4470 0670  
                                                        u4390 05F8  
                                                        u5350 1AF2  
                                                        u5190 1374  
                                                        u4608 0732  
                                                        u4528 06AA  
                                                        u4448 0636  
                                                        u5440 1B9E  
                                                        u5360 1AF6  
                                                        u4810 08A2  
                                                        u4730 0812  
                                                        u4650 0788  
                                                        u4570 0712  
                                                        u4490 068A  
                                                        u5450 1BA2  
                                                        u6090 1560  
                                                        u4708 07E0  
                                                        u4628 0750  
                                                        u4548 06DE  
                                                        u4468 0656  
                                                        u4830 08BC  
                                                        u4750 0830  
                                                        u4670 07BE  
                                                        u4590 072E  
                                                        u6238 0A9A  
                                                        u4808 0870  
                                                        u4728 07FA  
                                                        u4648 0770  
                                                        u4568 06FC  
                                                        u4488 0674  
                                                        u4770 0850  
                                                        u4690 07DC  
                                                        u4828 08A6  
                                                        u4748 0816  
                                                        u4668 078C  
                                                        u4588 0716  
                                                        u4790 086C  
                                                        u5830 037C  
                                                        u4848 08C0  
                                                        u4768 0834  
                                                        u4688 07C2  
                                                        u5840 0380  
                                                        u4788 0854  
                                                        u5790 029C  
                                      ??_decrement_time_hours 0022  
                                                        _ampm 003E  
                                                        _main 08D2  
                                                        _mode 003C  
                                                        fsr0h 000FEA  
                                                        fsr1h 000FE2  
                                                        fsr2h 000FDA  
                                                        fsr0l 000FE9  
                                                        indf2 000FDF  
                                                        fsr1l 000FE1  
                                                        fsr2l 000FD9  
                                                        btemp 004C  
                                            ??_do_minute_down 0022  
                                                        prodh 000FF4  
                                                        prodl 000FF3  
                                                        start 00DA  
                              __size_of_decrement_alarm_hours 0034  
                               __end_of_decrement_alarm_hours 1BB0  
                                                ___param_bank 000000  
                                                       ??_isr 0004  
                                       _increment_alarm_hours 1ADC  
                                                       ?_main 0001  
                                             __end_of___awdiv 1636  
                                             __end_of___awmod 16BA  
                                                       _T0CON 000FD5  
                                             ___awdiv@divisor 0016  
                                                       _T1CON 000FCD  
                                                       _T2CON 000FCA  
                                             __end_of___lwdiv 186C  
                                             __end_of___lwmod 19BE  
                                                       i2l483 1048  
                                                       i2l494 10FE  
                                                       i2l487 10A0  
                                             ___awdiv@counter 0018  
                                                       _RCSTA 000FAB  
                                                       _TMR0H 000FD7  
                                                       _TMR0L 000FD6  
                                                       _SPBRG 000FAF  
                                                       _TRISE 000F96  
                                                       _TXREG 000FAD  
                                                       _TXSTA 000FAC  
                              __end_of_increment_time_minutes 1B7C  
                                             __end_of_dn_tone BFAD  
                                                       _alarm 003D  
                                                       _colon 0049  
                                                       _freqs B95B  
                                                       _hours 004A  
                                                       main@i 0092  
                                                       pclath 000FFA  
                                                       tablat 000FF5  
                                       __end_of_alarm_on_tone BF0D  
                                             __end_of_up_tone BFB9  
                                                       status 000FD8  
                            __size_of_increment_alarm_minutes 001A  
                                             ??_print_number2 0022  
                                             __initialization 186C  
                                                __end_of_main 0B78  
                               __size_of_print_number_nospace 0106  
                                    ?_decrement_alarm_minutes 0001  
                                                draw_time@ptr 0020  
                                              __CFG_OSC$HSPLL 000000  
                                       handle_audio@amplitude 0003  
                                                      ??_main 002C  
                                        __end_of_handle_audio 1104  
                                               __activetblptr 000002  
                                              _alarm_off_tone BF0D  
                                                      _ADCON1 000FC1  
                                        __size_of_handle_time 00E0  
                                        __size_of_handle_song 01EA  
                                                      _CCPR2H 000FBC  
                                                      _CCPR1L 000FBE  
                                                      _CCPR2L 000FBB  
                                            ___awdiv@dividend 0014  
                                        __end_of_do_hour_down 17A2  
                                                      i2l3143 0F70  
                                                      i2l3151 0F8C  
                                                      i2l3303 008A  
                                                      i2l3161 0FB8  
                                                      i2l3305 0092  
                                                      i2l3147 0F7E  
                                                      i2l3181 1040  
                                                      i2l3165 0FC4  
                                                      i2l3193 10C8  
                                                      i2l3185 1070  
                                                      i2l3177 1018  
                                                      i2l3281 0046  
                                                      i2l3197 10F0  
                                                      i2l3189 1098  
                                                      i2l3199 10F8  
                                                      i2l3289 005C  
                                                      _SPBRGH 000F7F  
                                        __end_of_do_minute_up 1C02  
                                              _alarm_sounding 0037  
                                        _increment_time_hours 19BE  
                                                   ??___awdiv 0018  
                                    ??_decrement_time_minutes 0022  
                                                   ??___awmod 0020  
                                      ?_increment_alarm_hours 0001  
                                                   ??___lwdiv 0018  
                                            __end_of_ir_codes BF51  
                                                   ??___lwmod 001F  
                                                      clear_0 1894  
                                                      clear_1 18A6  
                                                      clear_2 18B2  
                                            ___awdiv@quotient 001A  
                                             ___awmod@divisor 001E  
                                               draw_alarm@ptr 0020  
                                             ___awmod@counter 0020  
                                                __pdataCOMRAM 0046  
                                      __end_of_alarm_off_tone BF31  
                                               main@test_time 0090  
                                                __mediumconst B95A  
                                                      tblptrh 000FF7  
                                                      tblptrl 000FF6  
                                                      tblptru 000FF8  
                                           handle_ir@ir_error 0085  
                                              _repeat_counter 003A  
                                                  __accesstop 0060  
                                     __end_of__initialization 18B8  
                                               ___rparam_used 000001  
                                       ?_increment_time_hours 0001  
                                              __pcstackCOMRAM 0001  
                                               __end_of_freqs B9A5  
                                                ?_start_alarm 0001  
                                          __size_of_handle_ir 04FC  
                                             handle_ir@failed 0082  
                                          draw_time@minutes10 001F  
                                          __size_of_draw_time 01E2  
                                          __size_of_draw_test 0012  
                                             handle_ir@got_it 0084  
                                                  __pbssBANK0 0060  
                                       __end_of_handle_repeat 180C  
                                     _increment_alarm_minutes 1C22  
                                                  __pnvCOMRAM 004B  
                                          __size_of_dump_leds 0036  
                                                  _alarm_ampm 0038  
                                            draw_time@hours10 001E  
                                                  _alarm_time 0036  
                                                  _alarm_song BE25  
                                       __size_of_handle_audio 01C0  
                             __size_of_decrement_time_minutes 0032  
                                              _ir_code_failed 0060  
                                                     _CCP1CON 000FBD  
                                                     _CCP2CON 000FBA  
                                          __size_of_play_song 0058  
                                                     _BAUDCTL 000F7E  
                                                  _do_hour_up 16BA  
                                       __size_of_do_hour_down 0074  
                                       __size_of_do_minute_up 0020  
                                                  _draw_alarm 1104  
                                                  _led_masks2 BEC1  
                                                  _led_masks3 BE99  
                                                  _led_masks4 BE71  
                                      ??_increment_time_hours 0022  
                                                _handle_audio 0F44  
                                                  _need_audio 0081  
                                                  _first_edge 0046  
                               __size_of_decrement_time_hours 004E  
                                           __end_of_handle_ir 05DA  
                                                     __Hparam 0000  
                                                     __Lparam 0000  
                                                     ___awdiv 159E  
                                                     ___awmod 1636  
                                                  _got_ir_int 0031  
                                       _decrement_alarm_hours 1B7C  
                                           __end_of_draw_time 0F44  
                                           __end_of_draw_test 1C94  
                                                     ___lwdiv 180C  
                                                     ___lwmod 196E  
                                           __end_of_hex_table B9B5  
                                                _do_hour_down 172E  
                                                     __pcinit 186C  
                                                     __ramtop 0D00  
                                                     __ptext0 08D2  
                                                     __ptext1 1C6C  
                                                     __ptext2 14BE  
                                                     __ptext3 191E  
                                                     __ptext4 1636  
                                                     __ptext5 17A2  
                                                     __ptext6 00DE  
                                                     __ptext7 1AA4  
                                                     __ptext8 1C3C  
                                                     __ptext9 12C0  
                                                     _dn_tone BFA1  
                                                     _have_ir 0080  
                                                _do_minute_up 1BE2  
                                           __end_of_dump_leds 1B48  
                                                     _ir_code 007F  
                                                     _ir_time 006A  
                                                     _ir_size 0032  
                                                __size_of_isr 00D2  
                                            ___awmod@dividend 001C  
                                                     _minutes 003F  
                                                     _seconds 0040  
                                                     _not_set 0048  
                                __end_of_print_number_nospace 13C6  
                                                     _time_hz 0041  
                            __size_of_decrement_alarm_minutes 0018  
                                                     _up_tone BFAD  
                                      _decrement_time_minutes 1BB0  
                                   ??_increment_alarm_minutes 0022  
                                        end_of_initialization 18B8  
                                          handle_ir@code_size 0083  
                                           __end_of_play_song 191E  
                                               __Lmediumconst B95A  
                                     ??_increment_alarm_hours 0022  
                                           __end_of_test_tone BFC5  
                                           draw_alarm@hours10 001E  
                                     print_bin_nospace@number 0025  
                                       __end_of_print_number2 196E  
                                                     postdec1 000FE5  
                                                     postinc0 000FEE  
                                             _next_track_data BBED  
                                       _print_bin_nospace$810 0023  
                                       _print_bin_nospace$803 0015  
                                       _print_bin_nospace$804 0017  
                                       _print_bin_nospace$805 0019  
                                       _print_bin_nospace$806 001B  
                                       _print_bin_nospace$807 001D  
                                       _print_bin_nospace$808 001F  
                                       _print_bin_nospace$809 0021  
                                                  handle_ir@i 008B  
                                                  handle_ir@j 008F  
                                     __size_of_do_minute_down 0020  
                                                 ?_do_hour_up 0001  
                                                  _print_byte 1A5C  
                                                  _print_text 1AA4  
                                               ??_handle_time 0023  
                                               ??_handle_song 0014  
                                                  _power_data BD97  
                                                  _song_delay 0043  
                                        __size_of_start_alarm 0016  
                                                   _TRISAbits 000F92  
                                                   _TRISCbits 000F94  
                                                   _TRISDbits 000F95  
                                                   _TRISFbits 000F97  
                                                   _TRISGbits 000F98  
                                               ?_print_number 0022  
                                                 ?_draw_alarm 0001  
                                                  main@i_1024 0094  
                                                 print_byte@c 0014  
                                      ?_decrement_alarm_hours 0001  
                                                 print_text@s 0015  
                             __end_of_increment_alarm_minutes 1C3C  
                                               __pidataCOMRAM 1C94  
                                                  _write_leds 05DA  
                                              _set_time_tone1 BF65  
                                              _set_time_tone2 BF51  
                                    ??_increment_time_minutes 0022  
                                             _prev_track_data BB5F  
                                         start_initialization 186C  
                                              ??_print_number 0024  
                                                 __end_of_isr 00DA  
                                         __end_of_handle_time 159E  
                                         __end_of_handle_song 0D62  
                                               _alarm_minutes 0039  
                                               _alarm_on_tone BEE9  
                                     __end_of_next_track_data BC7B  
                                         __size_of_do_hour_up 0074  
                                        _print_number_nospace 12C0  
                                      __end_of_set_time_tone1 BF79  
                                      __end_of_set_time_tone2 BF65  
                                         __size_of_draw_alarm 01BC  
                                                 _decay_count 0076  
                                                 ?_print_byte 0001  
                                                 ?_print_text 0015  
                                                 __pbssBIGRAM 009E  
                                                 __pbssCOMRAM 002E  
                                              _volume_dn_data BC7B  
                                               __pcstackBANK0 0082  
                                     _decrement_alarm_minutes 1C54  
                                                 _alarm_hours 0047  
                                              handle_ir@i_924 008C  
                                              _volume_up_data BD09  
                                        __end_of_number1_data BB5F  
                                        __end_of_number2_data BAD1  
                                        __end_of_number3_data BA43  
                                              handle_ir@error 0089  
                                                   __pnvBANK0 0095  
                                            ___lwdiv@dividend 0014  
                                       ?_print_number_nospace 0020  
                                                   __pintcode 0008  
                                               __pmediumconst B95A  
                                                    ?___awdiv 0014  
                                     __end_of_prev_track_data BBED  
                                                   _handle_ir 00DE  
                                                    ?___awmod 001C  
                                                    ?___lwdiv 0014  
                                                    ?___lwmod 001B  
                                              _do_minute_down 1C02  
                                                 ?_write_leds 0001  
                                                _crystal_time 006C  
                                                   _led_mask0 004B  
                                                   _led_mask1 0035  
                                                   _led_mask2 0034  
                                                   _led_mask3 0033  
                             __size_of_increment_time_minutes 0034  
                                      __size_of_handle_repeat 006A  
                                      __end_of_volume_dn_data BD09  
                                                   _draw_time 0D62  
                                                   _draw_test 1C82  
                                __end_of_decrement_time_hours 1A5C  
                                                   _hex_table B9A5  
                                     ?_decrement_time_minutes 0001  
                                                 _handle_time 14BE  
                                                 _handle_song 0B78  
                                                   _osc1_time 0072  
                                                   _dump_leds 1B12  
                                                   _osc2_time 0070  
                                                   _osc3_time 006E  
                                            ___lwdiv@quotient 0019  
                                      __end_of_volume_up_data BD97  
                                              _uart_position1 007A  
                                              _uart_position2 0078  
                                                    _LATAbits 000F89  
                                                    _LATCbits 000F8B  
                                                    _LATDbits 000F8C  
                                                    _LATEbits 000F8D  
                                                    _LATFbits 000F8E  
                                                    _LATGbits 000F8F  
                                                   _next_duty 0045  
                                                    _PIE1bits 000F9D  
                                                   _repeating 003B  
                                                   _play_song 18C6  
                               __size_of_increment_time_hours 0050  
                                         __size_of_print_byte 0048  
                                  print_number_nospace@number 0020  
                                         __size_of_print_text 0038  
                                                    _PIR1bits 000F9E  
                                                    _PIR2bits 000FA1  
                                        __end_of_print_number 1C54  
                              __size_of_increment_alarm_hours 0036  
                               __end_of_increment_alarm_hours 1B12  
                                      __end_of_do_minute_down 1C22  
                                                  ?_handle_ir 0001  
                                                   _uart_size 007C  
                                                   _test_tone BFB9  
                                         print_number2@number 0022  
                                                ??_do_hour_up 0026  
                                                  ?_draw_time 0001  
                                                  ?_draw_test 0001  
                              __end_of_decrement_time_minutes 1BE2  
                                   ??_decrement_alarm_minutes 0022  
                                          __end_of_alarm_song BE71  
                                                  ?_dump_leds 0001  
                                                ??_draw_alarm 001C  
                                                 _INTCON2bits 000FF1  
                                                 _INTCON3bits 000FF0  
                                                   copy_data0 1880  
                                                play_song@ptr 0014  
                                           _print_bin_nospace 13C6  
                                      _increment_time_minutes 1B48  
                                               _handle_repeat 17A2  
                                             _set_alarm_tone1 BF8D  
                                             _set_alarm_tone2 BF79  
                                         __size_of_write_leds 02F8  
                                          ?_print_bin_nospace 0001  
                                     ??_decrement_alarm_hours 0022  
                                                  ?_play_song 0014  
                                          __end_of_do_hour_up 172E  
                                                    __Hrparam 0000  
                                      ??_print_number_nospace 0022  
                                                    __Lrparam 0000  
                                         ??_print_bin_nospace 0015  
                                             ?_do_minute_down 0001  
                                                 _osc1_period 0099  
                                                 _osc2_period 0097  
                                                 _osc3_period 0095  
                                            __size_of___awdiv 0098  
                                            __size_of___awmod 0084  
                                                 _osc1_volume 009D  
                                          __end_of_draw_alarm 12C0  
                                            __size_of___lwdiv 0060  
                                                 _osc2_volume 009C  
                                          __end_of_led_masks2 BEE9  
                                          __end_of_led_masks3 BEC1  
                                          __end_of_led_masks4 BE99  
                                            __size_of___lwmod 0050  
                                                 _osc3_volume 009B  
                                               ??_start_alarm 0016  
                                               handle_ir@data 0087  
                                               handle_ir@code 008D  
                                    ?_increment_alarm_minutes 0001  
                                             ___lwdiv@divisor 0016  
                                             ___lwdiv@counter 0018  
                                                    __ptext10 196E  
                                                    __ptext11 180C  
                                                    __ptext20 1C54  
                                                    __ptext12 18C6  
                                                    __ptext21 16BA  
                                                    __ptext13 0B78  
                                                    __ptext30 1B7C  
                                                    __ptext22 19BE  
                                                    __ptext14 1C82  
                                                    __ptext31 1104  
                                                    __ptext23 1ADC  
                                                    __ptext15 1BE2  
                                                    __ptext32 05DA  
                                                    __ptext24 172E  
                                                    __ptext16 1B48  
                                                    __ptext33 159E  
                                                    __ptext25 1B12  
                                                    __ptext17 1C22  
                                                    __ptext26 13C6  
                                                    __ptext18 1C02  
                                                    __ptext35 0F44  
                                                    __ptext27 1A5C  
                                                    __ptext19 1BB0  
                                                    __ptext28 1A0E  
                                                    __ptext29 0D62  
                                   __end_of_print_bin_nospace 14BE  
                                      __size_of_print_number2 0050  
                                              ?_handle_repeat 0001  
                                                    _ir_codes BF31  
                                                    _ir_time2 0068  
                                               __size_of_main 02A6  
                             __end_of_decrement_alarm_minutes 1C6C  
                                        _decrement_time_hours 1A0E  
                                                 ??_handle_ir 0026  
                                                    int$flags 004C  
                                                    _song_ptr 002E  
                                                _number1_data BAD1  
                                                _number2_data BA43  
                                                _number3_data B9B5  
                                                 ??_draw_time 001C  
                                                 ??_draw_test 0015  
                                         draw_alarm@minutes10 001F  
                                                ??_print_byte 0014  
                                                ??_print_text 0017  
                                                  _INTCONbits 000FF2  
                                                 ??_dump_leds 0026  
                                     __end_of_set_alarm_tone1 BFA1  
                                     __end_of_set_alarm_tone2 BF8D  
                                         __end_of_start_alarm 1C82  
                                                    intlevel2 1C9A  
                                          print_number@number 0022  
                                            ___lwmod@dividend 001B  
                                               ?_handle_audio 0001  
                                       __size_of_print_number 0018  
                                       ?_decrement_time_hours 0001  
                                                 ??_play_song 0016  
                                          __end_of_print_byte 1AA4  
                                          __end_of_print_text 1ADC  
                                          __end_of_power_data BE25  
                                               _print_number2 191E  
                                               ?_do_hour_down 0001  
                                                ??_write_leds 0014  
                                               ?_do_minute_up 0001  
                                                 _uart_buffer 009E  
                                             ___lwmod@divisor 001D  
                                              _interrupt_done 007E  
                                                ?_handle_time 0001  
                                             ___lwmod@counter 001F  
                                                ?_handle_song 0001  
                                                _print_number 1C3C  
                                  __size_of_print_bin_nospace 00F8  
                                             ??_handle_repeat 0026  
                                               _display_flash 0042  
                                              ??_handle_audio 0001  
                                          __end_of_write_leds 08D2  
                                                _song_counter 0044  

// heroineclock 2


// remote is PWM modulated
// press tuner button to engage tuner codes



// pins:
// 
// A0 - LED
// A1 - LED
// A2 - LED
// A3 - LED
// A5 - LED
// B3 - IR RX
// C0 - LED
// C1 - LED
// C2/P1A - speaker
// C3 - LED
// C4 - LED
// C5 - LED
// C6/TX - DEBUG UART
// C7/RX - 
// E0 - LED
// E1 - LED
// E2 - LED
// E3 - LED
// E4 - LED
// E5 - LED
// E6 - LED
// E7 - LED
// F0 - LED
// F1 - LED
// F2 - LED
// F3 - LED
// F4 - LED
// F5 - LED
// F6 - LED
// G0 - LED
// G1 - LED



// CONFIG1H
#pragma config OSC = HS         // Oscillator (HS oscillator)
#pragma config LVP = OFF        // Low Voltage Program (Low-voltage ICSP disabled)



#include <p18f6585.h>
#include <stdint.h>






#define ENABLE_DEBUG

#ifdef ENABLE_DEBUG
#define DEBUG_TRIS TRISDbits.TRISD7
#define DEBUG_LAT LATDbits.LATD7


#define UART_BUFSIZE 1024
uint8_t uart_buffer[UART_BUFSIZE];
uint16_t uart_size = 0;
uint16_t uart_position1 = 0;
uint16_t uart_position2 = 0;
#endif // ENABLE_DEBUG


// mane timer increments at this rate
#define HZ 250
// 115200 baud for debug
#define BAUD_CODE 35

#define ABS(x) ((x) < 0 ? (-(x)) : (x))

// time in seconds * HZ
volatile uint32_t time;
volatile uint8_t have_serial = 0;
volatile uint8_t serial_in = 0;




#define ENABLE_ALARM 0x00
#define HOUR_UP 0x01
#define HOUR_DN 0x02
#define MINUTE_UP 0x03
#define MINUTE_DN 0x04
#define SET_ALARM 0x05
#define SET_TIME 0x06
#define SET_TEST 0x07


typedef struct
{
    const int16_t *data;
    const uint8_t value;
} ir_code_t;


// remote control codes
#define CODE_SIZE 71
const int16_t power_data[] = 
{ 
	2245, 1116, 185, 91, 186, 373, 184, 92, 184, 375, 183, 381, 180, 375,
	177, 386, 176, 100, 173, 387, 174, 103, 176, 383, 173, 104, 173, 103,
	172, 104, 172, 104, 172, 387, 172, 387, 172, 387, 170, 389, 170, 389,
	169, 390, 167, 108, 168, 108, 169, 107, 168, 108, 168, 108, 166, 110,
	166, 111, 168, 108, 168, 392, 165, 394, 171, 388, 165, 9918, 2225, 523,
	165 
};

const int16_t volume_up_data[] = 
{  
	2246, 1117, 183, 93, 185, 374, 183, 94, 180, 379, 178, 385, 179,
	375, 178, 386, 174, 103, 173, 386, 173, 103, 175, 384, 172, 104, 172,
	104, 172, 104, 172, 104, 172, 387, 167, 109, 168, 391, 172, 104, 172,
	388, 167, 392, 166, 110, 166, 110, 167, 109, 165, 394, 167, 109, 166,
	393, 165, 111, 165, 110, 165, 394, 165, 394, 166, 392, 165, 9918, 2226,
	523, 165
};

const int16_t volume_dn_data[] = 
{  
	2245, 1116, 183, 93, 179, 381, 182, 94, 181, 378, 179, 381, 178,
	381, 178, 387, 170, 106, 171, 388, 172, 104, 172, 388, 170, 106, 171,
	105, 171, 105, 167, 109, 171, 389, 166, 393, 167, 392, 166, 110, 166,
	394, 166, 394, 166, 111, 166, 111, 166, 111, 166, 110, 166, 111, 166,
	394, 165, 111, 165, 111, 165, 394, 165, 394, 165, 394, 165, 9918, 2225,
	524, 165
};

const int16_t next_track_data[] = 
{  
	2246, 1115, 185, 92, 185, 374, 178, 98, 184, 375, 179, 380, 181,
	379, 177, 387, 173, 103, 173, 386, 172, 105, 173, 386, 172, 104, 168,
	107, 172, 104, 171, 106, 170, 389, 166, 110, 166, 393, 167, 109, 167,
	109, 167, 392, 166, 110, 167, 392, 165, 111, 165, 395, 166, 110, 167,
	393, 165, 394, 165, 111, 165, 395, 165, 111, 166, 394, 165, 9919, 2225,
	523, 164
};

const int16_t prev_track_data[] = 
{  
	2244, 1117, 184, 92, 184, 375, 179, 98, 178, 381, 179, 386, 174,
	380, 177, 387, 173, 103, 171, 389, 173, 103, 172, 387, 172, 104, 171,
	105, 170, 106, 168, 108, 166, 393, 167, 391, 170, 390, 166, 110, 166,
	111, 165, 394, 165, 111, 166, 394, 167, 109, 167, 110, 166, 110, 165,
	394, 165, 394, 165, 112, 165, 394, 165, 111, 165, 394, 165, 9918, 2225,
	523, 165
};

const int16_t number1_data[] =     
{  
	2249, 1114, 187, 90, 184, 375, 182, 94, 184, 380, 180, 380, 176,
	378, 180, 384, 175, 101, 179, 380, 174, 102, 179, 381, 173, 104, 173,
	103, 174, 103, 172, 105, 172, 387, 172, 387, 173, 104, 173, 386, 171,
	105, 172, 388, 172, 104, 171, 105, 171, 105, 170, 106, 168, 391, 171,
	105, 171, 388, 169, 107, 169, 390, 168, 388, 174, 388, 167, 9916, 2226,
	523, 165
};

const int16_t number2_data[] =      
{  
	2246, 1116, 185, 91, 185, 375, 185, 92, 185, 374, 182, 383, 179,
	381, 179, 380, 178, 98, 179, 381, 173, 103, 174, 386, 174, 102, 174,
	102, 175, 101, 175, 101, 172, 387, 172, 104, 172, 387, 172, 387, 172,
	105, 172, 387, 172, 105, 171, 105, 171, 105, 169, 390, 169, 107, 166,
	110, 167, 392, 168, 109, 167, 392, 170, 389, 165, 394, 171, 9912, 2225,
	523, 167
};

const int16_t number3_data[] =      
{  
	2243, 1119, 180, 96, 182, 378, 185, 91, 183, 376, 179, 380, 179,
	380, 179, 386, 176, 100, 173, 387, 172, 104, 172, 387, 174, 102, 175,
	101, 173, 103, 173, 103, 169, 390, 172, 105, 170, 106, 172, 104, 168,
	391, 166, 393, 167, 109, 167, 109, 168, 108, 167, 392, 165, 394, 166,
	393, 166, 110, 167, 109, 165, 394, 165, 394, 165, 394, 166, 9917, 2226,
	523, 165
};




// translate the remote control buttons to clock buttons
const ir_code_t ir_codes[] = { 
    { power_data, ENABLE_ALARM },
	{ volume_up_data, HOUR_UP },
	{ volume_dn_data, HOUR_DN },
	{ next_track_data, MINUTE_UP },
	{ prev_track_data, MINUTE_DN },
	{ number1_data, SET_ALARM },
	{ number2_data, SET_TIME },
	{ number3_data, SET_TEST },
};

#define IR_MARGIN 16

int16_t ir_buffer[CODE_SIZE];
uint8_t ir_size = 0;

void (*ir_state)();
void (*ir_state2)();
// IR interrupt fired
uint8_t got_ir_int = 0;
// time of IR interrupt in us / 4
uint16_t ir_time = 0;
uint8_t first_edge = 1;


#ifdef ENABLE_DEBUG


void print_byte(uint8_t c)
{
	if(uart_size < UART_BUFSIZE)
	{
		uart_buffer[uart_position1++] = c;
		uart_size++;
		if(uart_position1 >= UART_BUFSIZE)
		{
			uart_position1 = 0;
		}
	}
}

void print_text(const uint8_t *s)
{
	while(*s != 0)
	{
		print_byte(*s);
		s++;
	}
}


void print_number_nospace(uint16_t number)
{
	if(number >= 10000) print_byte('0' + (number / 10000));
	if(number >= 1000) print_byte('0' + ((number / 1000) % 10));
	if(number >= 100) print_byte('0' + ((number / 100) % 10));
	if(number >= 10) print_byte('0' + ((number / 10) % 10));
	print_byte('0' + (number % 10));
}

void print_number(uint16_t number)
{
    print_number_nospace(number);
   	print_byte(' ');
 
}

const char hex_table[] = 
{
	'0', '1', '2', '3', '4', '5', '6', '7', 
	'8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
};

void print_hex2(uint8_t number)
{
	print_byte(hex_table[(number >> 4) & 0xf]);
	print_byte(hex_table[number & 0xf]);
	print_byte(' ');
}

void print_bin_nospace(uint8_t number)
{
	print_byte((number & 0x80) ? '1' : '0');
	print_byte((number & 0x40) ? '1' : '0');
	print_byte((number & 0x20) ? '1' : '0');
	print_byte((number & 0x10) ? '1' : '0');
	print_byte((number & 0x8) ? '1' : '0');
	print_byte((number & 0x4) ? '1' : '0');
	print_byte((number & 0x2) ? '1' : '0');
	print_byte((number & 0x1) ? '1' : '0');
}








#else // ENABLE_DEBUG


#define print_text(x) ;
#define print_hex2(x) ;
#define print_number(x) ;
#define print_number_nospace(x) ;
#define print_byte(x) ;








#endif // !ENABLE_DEBUG

void falling_edge();


void get_timeout()
{
	if(ABS((int16_t)ir_time - (int16_t)23987) < IR_MARGIN)
	{
		print_byte('.');
	}
}

void get_code()
{
	if(ir_size < CODE_SIZE)
	{
		ir_buffer[ir_size++] = ir_time;
		
// search for the code
		if(ir_size >= CODE_SIZE)
		{
//			print_text("got code\n");

			
			uint8_t i;
			uint8_t j;
			uint8_t got_it = 0;
			for(j = 0; j < sizeof(ir_codes) / sizeof(ir_code_t); j++)
			{
				const ir_code_t *code = &ir_codes[j];
				const int16_t *data = code->data;
				uint8_t failed = 0;
				
				for(i = 0; i < CODE_SIZE; i++)
				{
					if(ABS(data[i] - ir_buffer[i]) > IR_MARGIN)
					{
// 						print_text("failed at i=");
// 						print_number(i);
// 						print_text("j=");
// 						print_number(j);
// 						print_text("data=");
// 						print_number(data[i]);
// 						print_text("buffer=");
// 						print_number(ir_buffer[i]);
// 						print_byte('\n');
						
						failed = 1;
						break;
					}
				}
				
				
				if(!failed)
				{
					got_it = 1;
					print_text("IR code: ");
					print_number(code->value);
					print_byte('\n');
					ir_state2 = get_timeout;
					break;
				}
			}
		}
	}
}


// wait for rising edge
void rising_edge()
{
	if(got_ir_int)
	{
        got_ir_int = 0;
		INTCON2bits.INTEDG3 = 0; // interrupt on falling edge
		ir_state = falling_edge;
		ir_state2();
		
	}
}


// wait for falling edge
void falling_edge()
{
	if(got_ir_int)
	{
        got_ir_int = 0;

		INTCON2bits.INTEDG3 = 1; // interrupt on rising edge
		ir_state = rising_edge;
		
        if(first_edge)
        {
            first_edge = 0;
        }
        else
        {
 			ir_state2();
       
//            print_number_nospace(ir_time);
//            print_text(", ");
        }
	}
}


void interrupt isr()
{
    uint8_t interrupt_done = 0;
    
    while(!interrupt_done)
    {
        interrupt_done = 1;
        
        if(PIR1bits.RCIF)
        {
            PIR1bits.RCIF = 0;
            serial_in = RCREG;
            have_serial = 1;
			interrupt_done = 0;
        }
        
        if(PIR1bits.TMR2IF)
        {
            PIR1bits.TMR2IF = 0;
            time++;
			interrupt_done = 0;
        }
        
		if(INTCON3bits.INT3IF)
		{
			INTCON3bits.INT3IF = 0;
			got_ir_int = 1;
			ir_time = TMR0L;
			ir_time |= ((uint16_t)TMR0H) << 8;
			TMR0H = 0;
			TMR0L = 0;
			interrupt_done = 0;
		}
    }
    
    
}


void main()
{
    
    ADCON1 = 0xff; // all digital
    DEBUG_TRIS = 0; // output
    DEBUG_LAT = 1;
    
    // initialize serial port
    TXSTA = 0x24;
    RCSTA = 0x90;
    BAUDCTL = 0x08;
    SPBRGH = BAUD_CODE >> 8;
    SPBRG = BAUD_CODE & 0xff;
    PIR1bits.RCIF = 0;
    PIE1bits.RCIE = 1;
	
    
	// IR interrupt
	INTCON2bits.INTEDG3 = 0; // interrupt on falling edge
	INTCON3bits.INT3IE = 1;
	INTCON3bits.INT3IF = 0;
	ir_state = falling_edge;
	ir_state2 = get_code;
	ir_size = 0;
    first_edge = 1;
    
	
	// IR timer
	T0CON = 0x83;   // 1 cycle every 4ms
	INTCONbits.TMR0IF = 0;
	
	
	
    // the mane timer
    T2CON = 0x3f; // 16x prescaler 8x postscaler
    PR2 = 125; // period
    PIR1bits.TMR2IF = 0;
    PIE1bits.TMR2IE = 1;
    
    // enable all interrupts
    INTCONbits.PEIE = 1;
    INTCONbits.GIE = 1;
    
    // wait a while
    uint16_t i;
    for(i = 0; i < 32768; i++)
    {
        ClrWdt();
    }
	
	
	print_text("Welcome to Heroineclock 2\n");
/*
 * 	print_number(sizeof(power_data) / 2);
 * 	print_number(sizeof(volume_up_data) / 2);
 * 	print_number(sizeof(volume_dn_data) / 2);
 * 	print_number(sizeof(next_track_data) / 2);
 * 	print_number(sizeof(prev_track_data) / 2);
 * 	print_number(sizeof(number1_data) / 2);
 * 	print_number(sizeof(number2_data) / 2);
 * 	print_number(sizeof(number3_data) / 2);
 */
 	print_text("\n");
   
    while(1)
    {
        ClrWdt();

        if(have_serial)
		{
			have_serial = 0;
		}
        
		uint16_t test_time = TMR0L;
		test_time |= ((uint16_t)TMR0H) << 8;
// IR timed out
		if(test_time > 27500 &&
			!first_edge)
		{
            print_text("IR timed out\n");
			INTCON2bits.INTEDG3 = 0; // interrupt on falling edge
			ir_state = falling_edge;
			TMR0H = 0;
			TMR0L = 0;
            first_edge = 1;
			ir_state2 = get_code;
			ir_size = 0;
		}

		ir_state();

		
        
#ifdef ENABLE_DEBUG
        // send a UART char
        if(uart_size > 0 && PIR1bits.TXIF)
        {
            PIR1bits.TXIF = 0;
            TXREG = uart_buffer[uart_position2++];
			uart_size--;
			if(uart_position2 >= UART_BUFSIZE)
			{
				uart_position2 = 0;
			}
        }
#endif
    }
    
    
}









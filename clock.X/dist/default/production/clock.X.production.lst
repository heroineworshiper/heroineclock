

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Mar 28 09:28:26 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F6585
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           ; Version 1.41
    56                           ; Generated 25/01/2017 GMT
    57                           ; 
    58                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F6585 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     
    90                           	psect	idataCOMRAM
    91  001B2E                     __pidataCOMRAM:
    92                           	opt stack 0
    93                           
    94                           ;initializer for _first_edge
    95  001B2E  01                 	db	1
    96                           
    97                           ;initializer for _alarm_sounding
    98  001B2F  01                 	db	1
    99                           
   100                           ;initializer for _alarm_hours
   101  001B30  0C                 	db	12
   102                           
   103                           ;initializer for _colon
   104  001B31  01                 	db	1
   105                           
   106                           ;initializer for _hours
   107  001B32  0C                 	db	12
   108                           
   109                           	psect	mediumconst
   110  00B95E                     __pmediumconst:
   111                           	opt stack 0
   112  00B95E  00                 	db	0
   113  00B95F                     _freqs:
   114                           	opt stack 0
   115  00B95F  4AA7               	dw	19111
   116  00B961  4676               	dw	18038
   117  00B963  4282               	dw	17026
   118  00B965  3EC6               	dw	16070
   119  00B967  3B40               	dw	15168
   120  00B969  37ED               	dw	14317
   121  00B96B  34C9               	dw	13513
   122  00B96D  31D3               	dw	12755
   123  00B96F  2F07               	dw	12039
   124  00B971  2C63               	dw	11363
   125  00B973  29E5               	dw	10725
   126  00B975  278B               	dw	10123
   127  00B977  2553               	dw	9555
   128  00B979  233B               	dw	9019
   129  00B97B  2141               	dw	8513
   130  00B97D  1F63               	dw	8035
   131  00B97F  1DA0               	dw	7584
   132  00B981  1BF6               	dw	7158
   133  00B983  1A64               	dw	6756
   134  00B985  18E9               	dw	6377
   135  00B987  1783               	dw	6019
   136  00B989  1631               	dw	5681
   137  00B98B  14F2               	dw	5362
   138  00B98D  13C5               	dw	5061
   139  00B98F  12A9               	dw	4777
   140  00B991  119D               	dw	4509
   141  00B993  10A0               	dw	4256
   142  00B995  0FB1               	dw	4017
   143  00B997  0ED0               	dw	3792
   144  00B999  0DFB               	dw	3579
   145  00B99B  0D32               	dw	3378
   146  00B99D  0C74               	dw	3188
   147  00B99F  0BC1               	dw	3009
   148  00B9A1  0B18               	dw	2840
   149  00B9A3  0A79               	dw	2681
   150  00B9A5  09E2               	dw	2530
   151  00B9A7  0954               	dw	2388
   152  00B9A9                     __end_of_freqs:
   153                           	opt stack 0
   154  00B9A9                     _hex_table:
   155                           	opt stack 0
   156  00B9A9  30                 	db	48
   157  00B9AA  31                 	db	49
   158  00B9AB  32                 	db	50
   159  00B9AC  33                 	db	51
   160  00B9AD  34                 	db	52
   161  00B9AE  35                 	db	53
   162  00B9AF  36                 	db	54
   163  00B9B0  37                 	db	55
   164  00B9B1  38                 	db	56
   165  00B9B2  39                 	db	57
   166  00B9B3  61                 	db	97
   167  00B9B4  62                 	db	98
   168  00B9B5  63                 	db	99
   169  00B9B6  64                 	db	100
   170  00B9B7  65                 	db	101
   171  00B9B8  66                 	db	102
   172  00B9B9                     __end_of_hex_table:
   173                           	opt stack 0
   174  00B9B9                     _number3_data:
   175                           	opt stack 0
   176  00B9B9  057C               	dw	1404
   177  00B9BB  02B9               	dw	697
   178  00B9BD  0073               	dw	115
   179  00B9BF  003A               	dw	58
   180  00B9C1  0072               	dw	114
   181  00B9C3  00EC               	dw	236
   182  00B9C5  0074               	dw	116
   183  00B9C7  0039               	dw	57
   184  00B9C9  0071               	dw	113
   185  00B9CB  00EC               	dw	236
   186  00B9CD  006F               	dw	111
   187  00B9CF  00EF               	dw	239
   188  00B9D1  0070               	dw	112
   189  00B9D3  00F0               	dw	240
   190  00B9D5  006F               	dw	111
   191  00B9D7  00EC               	dw	236
   192  00B9D9  0070               	dw	112
   193  00B9DB  0040               	dw	64
   194  00B9DD  006C               	dw	108
   195  00B9DF  00F2               	dw	242
   196  00B9E1  006C               	dw	108
   197  00B9E3  0041               	dw	65
   198  00B9E5  006C               	dw	108
   199  00B9E7  00F2               	dw	242
   200  00B9E9  006C               	dw	108
   201  00B9EB  0040               	dw	64
   202  00B9ED  006A               	dw	106
   203  00B9EF  0043               	dw	67
   204  00B9F1  0069               	dw	105
   205  00B9F3  0044               	dw	68
   206  00B9F5  0068               	dw	104
   207  00B9F7  0044               	dw	68
   208  00B9F9  0068               	dw	104
   209  00B9FB  00F5               	dw	245
   210  00B9FD  006B               	dw	107
   211  00B9FF  0042               	dw	66
   212  00BA01  0068               	dw	104
   213  00BA03  0045               	dw	69
   214  00BA05  006A               	dw	106
   215  00BA07  0042               	dw	66
   216  00BA09  0068               	dw	104
   217  00BA0B  00F6               	dw	246
   218  00BA0D  006C               	dw	108
   219  00BA0F  00F2               	dw	242
   220  00BA11  0069               	dw	105
   221  00BA13  0044               	dw	68
   222  00BA15  006A               	dw	106
   223  00BA17  0043               	dw	67
   224  00BA19  006B               	dw	107
   225  00BA1B  0042               	dw	66
   226  00BA1D  006B               	dw	107
   227  00BA1F  00F3               	dw	243
   228  00BA21  0068               	dw	104
   229  00BA23  00F6               	dw	246
   230  00BA25  0068               	dw	104
   231  00BA27  00F6               	dw	246
   232  00BA29  0069               	dw	105
   233  00BA2B  0044               	dw	68
   234  00BA2D  006A               	dw	106
   235  00BA2F  0043               	dw	67
   236  00BA31  0068               	dw	104
   237  00BA33  00F6               	dw	246
   238  00BA35  0068               	dw	104
   239  00BA37  00F6               	dw	246
   240  00BA39  0067               	dw	103
   241  00BA3B  00F7               	dw	247
   242  00BA3D  0067               	dw	103
   243  00BA3F  1835               	dw	6197
   244  00BA41  056E               	dw	1390
   245  00BA43  0147               	dw	327
   246  00BA45  0067               	dw	103
   247  00BA47                     __end_of_number3_data:
   248                           	opt stack 0
   249  00BA47                     _number2_data:
   250                           	opt stack 0
   251  00BA47  057A               	dw	1402
   252  00BA49  02BA               	dw	698
   253  00BA4B  0077               	dw	119
   254  00BA4D  0035               	dw	53
   255  00BA4F  0074               	dw	116
   256  00BA51  00ED               	dw	237
   257  00BA53  0070               	dw	112
   258  00BA55  003A               	dw	58
   259  00BA57  0073               	dw	115
   260  00BA59  00EE               	dw	238
   261  00BA5B  0070               	dw	112
   262  00BA5D  00EA               	dw	234
   263  00BA5F  006F               	dw	111
   264  00BA61  00F2               	dw	242
   265  00BA63  006D               	dw	109
   266  00BA65  00F0               	dw	240
   267  00BA67  0070               	dw	112
   268  00BA69  003D               	dw	61
   269  00BA6B  0070               	dw	112
   270  00BA6D  00EE               	dw	238
   271  00BA6F  006C               	dw	108
   272  00BA71  0041               	dw	65
   273  00BA73  006F               	dw	111
   274  00BA75  00EE               	dw	238
   275  00BA77  006D               	dw	109
   276  00BA79  0040               	dw	64
   277  00BA7B  006C               	dw	108
   278  00BA7D  0041               	dw	65
   279  00BA7F  006C               	dw	108
   280  00BA81  0041               	dw	65
   281  00BA83  006B               	dw	107
   282  00BA85  0041               	dw	65
   283  00BA87  006B               	dw	107
   284  00BA89  00F2               	dw	242
   285  00BA8B  006B               	dw	107
   286  00BA8D  0042               	dw	66
   287  00BA8F  0069               	dw	105
   288  00BA91  00F4               	dw	244
   289  00BA93  0069               	dw	105
   290  00BA95  00F5               	dw	245
   291  00BA97  006C               	dw	108
   292  00BA99  0041               	dw	65
   293  00BA9B  006C               	dw	108
   294  00BA9D  00F2               	dw	242
   295  00BA9F  006B               	dw	107
   296  00BAA1  0042               	dw	66
   297  00BAA3  006B               	dw	107
   298  00BAA5  0042               	dw	66
   299  00BAA7  006B               	dw	107
   300  00BAA9  0042               	dw	66
   301  00BAAB  006B               	dw	107
   302  00BAAD  00F3               	dw	243
   303  00BAAF  006B               	dw	107
   304  00BAB1  0042               	dw	66
   305  00BAB3  006A               	dw	106
   306  00BAB5  0043               	dw	67
   307  00BAB7  006A               	dw	106
   308  00BAB9  00F4               	dw	244
   309  00BABB  006A               	dw	106
   310  00BABD  0043               	dw	67
   311  00BABF  0068               	dw	104
   312  00BAC1  00F6               	dw	246
   313  00BAC3  006B               	dw	107
   314  00BAC5  00F3               	dw	243
   315  00BAC7  006B               	dw	107
   316  00BAC9  00F2               	dw	242
   317  00BACB  0068               	dw	104
   318  00BACD  1835               	dw	6197
   319  00BACF  056E               	dw	1390
   320  00BAD1  0148               	dw	328
   321  00BAD3  006B               	dw	107
   322  00BAD5                     __end_of_number2_data:
   323                           	opt stack 0
   324  00BAD5                     _number1_data:
   325                           	opt stack 0
   326  00BAD5  057C               	dw	1404
   327  00BAD7  02BB               	dw	699
   328  00BAD9  0070               	dw	112
   329  00BADB  003D               	dw	61
   330  00BADD  0070               	dw	112
   331  00BADF  00EE               	dw	238
   332  00BAE1  0071               	dw	113
   333  00BAE3  003B               	dw	59
   334  00BAE5  0071               	dw	113
   335  00BAE7  00ED               	dw	237
   336  00BAE9  006D               	dw	109
   337  00BAEB  00F1               	dw	241
   338  00BAED  006C               	dw	108
   339  00BAEF  00F2               	dw	242
   340  00BAF1  0072               	dw	114
   341  00BAF3  00EB               	dw	235
   342  00BAF5  006E               	dw	110
   343  00BAF7  003F               	dw	63
   344  00BAF9  006F               	dw	111
   345  00BAFB  00EE               	dw	238
   346  00BAFD  0070               	dw	112
   347  00BAFF  003E               	dw	62
   348  00BB01  006D               	dw	109
   349  00BB03  00F1               	dw	241
   350  00BB05  006D               	dw	109
   351  00BB07  0040               	dw	64
   352  00BB09  006C               	dw	108
   353  00BB0B  0041               	dw	65
   354  00BB0D  006C               	dw	108
   355  00BB0F  0041               	dw	65
   356  00BB11  006B               	dw	107
   357  00BB13  0042               	dw	66
   358  00BB15  006B               	dw	107
   359  00BB17  00F2               	dw	242
   360  00BB19  006B               	dw	107
   361  00BB1B  00F3               	dw	243
   362  00BB1D  006E               	dw	110
   363  00BB1F  003F               	dw	63
   364  00BB21  006F               	dw	111
   365  00BB23  00EE               	dw	238
   366  00BB25  006B               	dw	107
   367  00BB27  0042               	dw	66
   368  00BB29  006B               	dw	107
   369  00BB2B  00F3               	dw	243
   370  00BB2D  006B               	dw	107
   371  00BB2F  0042               	dw	66
   372  00BB31  0069               	dw	105
   373  00BB33  0044               	dw	68
   374  00BB35  006B               	dw	107
   375  00BB37  0042               	dw	66
   376  00BB39  006B               	dw	107
   377  00BB3B  0042               	dw	66
   378  00BB3D  006B               	dw	107
   379  00BB3F  00F3               	dw	243
   380  00BB41  006B               	dw	107
   381  00BB43  0042               	dw	66
   382  00BB45  0068               	dw	104
   383  00BB47  00F6               	dw	246
   384  00BB49  0069               	dw	105
   385  00BB4B  0045               	dw	69
   386  00BB4D  006B               	dw	107
   387  00BB4F  00F2               	dw	242
   388  00BB51  006B               	dw	107
   389  00BB53  00F2               	dw	242
   390  00BB55  0069               	dw	105
   391  00BB57  00F5               	dw	245
   392  00BB59  0068               	dw	104
   393  00BB5B  1835               	dw	6197
   394  00BB5D  056F               	dw	1391
   395  00BB5F  0146               	dw	326
   396  00BB61  006A               	dw	106
   397  00BB63                     __end_of_number1_data:
   398                           	opt stack 0
   399  00BB63                     _prev_track_data:
   400                           	opt stack 0
   401  00BB63  057C               	dw	1404
   402  00BB65  02BA               	dw	698
   403  00BB67  0073               	dw	115
   404  00BB69  003A               	dw	58
   405  00BB6B  0070               	dw	112
   406  00BB6D  00ED               	dw	237
   407  00BB6F  0076               	dw	118
   408  00BB71  0037               	dw	55
   409  00BB73  0073               	dw	115
   410  00BB75  00EB               	dw	235
   411  00BB77  0070               	dw	112
   412  00BB79  00F1               	dw	241
   413  00BB7B  006F               	dw	111
   414  00BB7D  00EC               	dw	236
   415  00BB7F  0073               	dw	115
   416  00BB81  00EB               	dw	235
   417  00BB83  0070               	dw	112
   418  00BB85  0040               	dw	64
   419  00BB87  006C               	dw	108
   420  00BB89  00F2               	dw	242
   421  00BB8B  006F               	dw	111
   422  00BB8D  003E               	dw	62
   423  00BB8F  006D               	dw	109
   424  00BB91  00F1               	dw	241
   425  00BB93  006F               	dw	111
   426  00BB95  003E               	dw	62
   427  00BB97  0070               	dw	112
   428  00BB99  003D               	dw	61
   429  00BB9B  006D               	dw	109
   430  00BB9D  0040               	dw	64
   431  00BB9F  006F               	dw	111
   432  00BBA1  003E               	dw	62
   433  00BBA3  0070               	dw	112
   434  00BBA5  00EE               	dw	238
   435  00BBA7  006C               	dw	108
   436  00BBA9  00F2               	dw	242
   437  00BBAB  006C               	dw	108
   438  00BBAD  00F2               	dw	242
   439  00BBAF  0069               	dw	105
   440  00BBB1  0044               	dw	68
   441  00BBB3  0069               	dw	105
   442  00BBB5  0045               	dw	69
   443  00BBB7  006A               	dw	106
   444  00BBB9  00F3               	dw	243
   445  00BBBB  006B               	dw	107
   446  00BBBD  0041               	dw	65
   447  00BBBF  0069               	dw	105
   448  00BBC1  00F5               	dw	245
   449  00BBC3  006B               	dw	107
   450  00BBC5  0042               	dw	66
   451  00BBC7  006B               	dw	107
   452  00BBC9  0042               	dw	66
   453  00BBCB  006B               	dw	107
   454  00BBCD  0042               	dw	66
   455  00BBCF  006A               	dw	106
   456  00BBD1  00F3               	dw	243
   457  00BBD3  006B               	dw	107
   458  00BBD5  00F3               	dw	243
   459  00BBD7  0069               	dw	105
   460  00BBD9  0044               	dw	68
   461  00BBDB  0068               	dw	104
   462  00BBDD  00F6               	dw	246
   463  00BBDF  0069               	dw	105
   464  00BBE1  0044               	dw	68
   465  00BBE3  0068               	dw	104
   466  00BBE5  00F6               	dw	246
   467  00BBE7  006A               	dw	106
   468  00BBE9  1832               	dw	6194
   469  00BBEB  056F               	dw	1391
   470  00BBED  0147               	dw	327
   471  00BBEF  0067               	dw	103
   472  00BBF1                     __end_of_prev_track_data:
   473                           	opt stack 0
   474  00BBF1                     _next_track_data:
   475                           	opt stack 0
   476  00BBF1  057C               	dw	1404
   477  00BBF3  02BA               	dw	698
   478  00BBF5  0075               	dw	117
   479  00BBF7  0039               	dw	57
   480  00BBF9  0073               	dw	115
   481  00BBFB  00EB               	dw	235
   482  00BBFD  0071               	dw	113
   483  00BBFF  003B               	dw	59
   484  00BC01  0072               	dw	114
   485  00BC03  00ED               	dw	237
   486  00BC05  0071               	dw	113
   487  00BC07  00EF               	dw	239
   488  00BC09  0070               	dw	112
   489  00BC0B  00EB               	dw	235
   490  00BC0D  0071               	dw	113
   491  00BC0F  00F0               	dw	240
   492  00BC11  0070               	dw	112
   493  00BC13  003C               	dw	60
   494  00BC15  006D               	dw	109
   495  00BC17  00F1               	dw	241
   496  00BC19  006F               	dw	111
   497  00BC1B  003E               	dw	62
   498  00BC1D  006E               	dw	110
   499  00BC1F  00F0               	dw	240
   500  00BC21  006D               	dw	109
   501  00BC23  0040               	dw	64
   502  00BC25  006C               	dw	108
   503  00BC27  0041               	dw	65
   504  00BC29  006C               	dw	108
   505  00BC2B  0041               	dw	65
   506  00BC2D  006D               	dw	109
   507  00BC2F  0040               	dw	64
   508  00BC31  006C               	dw	108
   509  00BC33  00F2               	dw	242
   510  00BC35  006C               	dw	108
   511  00BC37  0041               	dw	65
   512  00BC39  006D               	dw	109
   513  00BC3B  00F0               	dw	240
   514  00BC3D  006B               	dw	107
   515  00BC3F  0042               	dw	66
   516  00BC41  006B               	dw	107
   517  00BC43  0042               	dw	66
   518  00BC45  006B               	dw	107
   519  00BC47  00F2               	dw	242
   520  00BC49  0069               	dw	105
   521  00BC4B  0043               	dw	67
   522  00BC4D  006B               	dw	107
   523  00BC4F  00F3               	dw	243
   524  00BC51  006A               	dw	106
   525  00BC53  0044               	dw	68
   526  00BC55  0069               	dw	105
   527  00BC57  00F4               	dw	244
   528  00BC59  006B               	dw	107
   529  00BC5B  0041               	dw	65
   530  00BC5D  0069               	dw	105
   531  00BC5F  00F5               	dw	245
   532  00BC61  006B               	dw	107
   533  00BC63  00F2               	dw	242
   534  00BC65  0067               	dw	103
   535  00BC67  0046               	dw	70
   536  00BC69  0067               	dw	103
   537  00BC6B  00F7               	dw	247
   538  00BC6D  0068               	dw	104
   539  00BC6F  0045               	dw	69
   540  00BC71  0069               	dw	105
   541  00BC73  00F5               	dw	245
   542  00BC75  006B               	dw	107
   543  00BC77  1831               	dw	6193
   544  00BC79  0570               	dw	1392
   545  00BC7B  0146               	dw	326
   546  00BC7D  006A               	dw	106
   547  00BC7F                     __end_of_next_track_data:
   548                           	opt stack 0
   549  00BC7F                     _volume_dn_data:
   550                           	opt stack 0
   551  00BC7F  057E               	dw	1406
   552  00BC81  02B6               	dw	694
   553  00BC83  0076               	dw	118
   554  00BC85  003A               	dw	58
   555  00BC87  0071               	dw	113
   556  00BC89  00EC               	dw	236
   557  00BC8B  0073               	dw	115
   558  00BC8D  0039               	dw	57
   559  00BC8F  006E               	dw	110
   560  00BC91  00F0               	dw	240
   561  00BC93  0070               	dw	112
   562  00BC95  00EE               	dw	238
   563  00BC97  0070               	dw	112
   564  00BC99  00ED               	dw	237
   565  00BC9B  006D               	dw	109
   566  00BC9D  00F1               	dw	241
   567  00BC9F  006D               	dw	109
   568  00BCA1  0040               	dw	64
   569  00BCA3  006C               	dw	108
   570  00BCA5  00F2               	dw	242
   571  00BCA7  006E               	dw	110
   572  00BCA9  003F               	dw	63
   573  00BCAB  006F               	dw	111
   574  00BCAD  00EF               	dw	239
   575  00BCAF  006C               	dw	108
   576  00BCB1  0041               	dw	65
   577  00BCB3  006C               	dw	108
   578  00BCB5  0041               	dw	65
   579  00BCB7  006C               	dw	108
   580  00BCB9  0041               	dw	65
   581  00BCBB  006C               	dw	108
   582  00BCBD  0041               	dw	65
   583  00BCBF  006C               	dw	108
   584  00BCC1  00F2               	dw	242
   585  00BCC3  006F               	dw	111
   586  00BCC5  00EF               	dw	239
   587  00BCC7  006B               	dw	107
   588  00BCC9  00F3               	dw	243
   589  00BCCB  006C               	dw	108
   590  00BCCD  0041               	dw	65
   591  00BCCF  006B               	dw	107
   592  00BCD1  00F2               	dw	242
   593  00BCD3  006C               	dw	108
   594  00BCD5  00F1               	dw	241
   595  00BCD7  006B               	dw	107
   596  00BCD9  0042               	dw	66
   597  00BCDB  006B               	dw	107
   598  00BCDD  0042               	dw	66
   599  00BCDF  006B               	dw	107
   600  00BCE1  0042               	dw	66
   601  00BCE3  006B               	dw	107
   602  00BCE5  0042               	dw	66
   603  00BCE7  006B               	dw	107
   604  00BCE9  0042               	dw	66
   605  00BCEB  006B               	dw	107
   606  00BCED  00F3               	dw	243
   607  00BCEF  006B               	dw	107
   608  00BCF1  0042               	dw	66
   609  00BCF3  006B               	dw	107
   610  00BCF5  0042               	dw	66
   611  00BCF7  006B               	dw	107
   612  00BCF9  00F3               	dw	243
   613  00BCFB  0068               	dw	104
   614  00BCFD  00F6               	dw	246
   615  00BCFF  0068               	dw	104
   616  00BD01  00F6               	dw	246
   617  00BD03  006B               	dw	107
   618  00BD05  1831               	dw	6193
   619  00BD07  0572               	dw	1394
   620  00BD09  0143               	dw	323
   621  00BD0B  0068               	dw	104
   622  00BD0D                     __end_of_volume_dn_data:
   623                           	opt stack 0
   624  00BD0D                     _volume_up_data:
   625                           	opt stack 0
   626  00BD0D  057A               	dw	1402
   627  00BD0F  02BD               	dw	701
   628  00BD11  0071               	dw	113
   629  00BD13  003C               	dw	60
   630  00BD15  0072               	dw	114
   631  00BD17  00EC               	dw	236
   632  00BD19  0070               	dw	112
   633  00BD1B  003D               	dw	61
   634  00BD1D  006F               	dw	111
   635  00BD1F  00EF               	dw	239
   636  00BD21  0070               	dw	112
   637  00BD23  00ED               	dw	237
   638  00BD25  006E               	dw	110
   639  00BD27  00EF               	dw	239
   640  00BD29  0070               	dw	112
   641  00BD2B  00EE               	dw	238
   642  00BD2D  006F               	dw	111
   643  00BD2F  003D               	dw	61
   644  00BD31  006F               	dw	111
   645  00BD33  00EE               	dw	238
   646  00BD35  006C               	dw	108
   647  00BD37  0041               	dw	65
   648  00BD39  006B               	dw	107
   649  00BD3B  00F2               	dw	242
   650  00BD3D  006D               	dw	109
   651  00BD3F  0040               	dw	64
   652  00BD41  006B               	dw	107
   653  00BD43  0042               	dw	66
   654  00BD45  006C               	dw	108
   655  00BD47  0041               	dw	65
   656  00BD49  006C               	dw	108
   657  00BD4B  0041               	dw	65
   658  00BD4D  006B               	dw	107
   659  00BD4F  00F2               	dw	242
   660  00BD51  0069               	dw	105
   661  00BD53  0044               	dw	68
   662  00BD55  0069               	dw	105
   663  00BD57  00F5               	dw	245
   664  00BD59  006C               	dw	108
   665  00BD5B  0041               	dw	65
   666  00BD5D  006B               	dw	107
   667  00BD5F  00F2               	dw	242
   668  00BD61  006B               	dw	107
   669  00BD63  00F2               	dw	242
   670  00BD65  006B               	dw	107
   671  00BD67  0042               	dw	66
   672  00BD69  006A               	dw	106
   673  00BD6B  0043               	dw	67
   674  00BD6D  006B               	dw	107
   675  00BD6F  0042               	dw	66
   676  00BD71  006B               	dw	107
   677  00BD73  00F3               	dw	243
   678  00BD75  006B               	dw	107
   679  00BD77  0042               	dw	66
   680  00BD79  006B               	dw	107
   681  00BD7B  00F3               	dw	243
   682  00BD7D  006C               	dw	108
   683  00BD7F  0040               	dw	64
   684  00BD81  006A               	dw	106
   685  00BD83  0043               	dw	67
   686  00BD85  006B               	dw	107
   687  00BD87  00F2               	dw	242
   688  00BD89  006B               	dw	107
   689  00BD8B  00F3               	dw	243
   690  00BD8D  006B               	dw	107
   691  00BD8F  00F3               	dw	243
   692  00BD91  0067               	dw	103
   693  00BD93  1835               	dw	6197
   694  00BD95  056F               	dw	1391
   695  00BD97  0147               	dw	327
   696  00BD99  0069               	dw	105
   697  00BD9B                     __end_of_volume_up_data:
   698                           	opt stack 0
   699  00BD9B                     _power_data:
   700                           	opt stack 0
   701  00BD9B  0573               	dw	1395
   702  00BD9D  02C2               	dw	706
   703  00BD9F  006B               	dw	107
   704  00BDA1  0042               	dw	66
   705  00BDA3  006B               	dw	107
   706  00BDA5  00F3               	dw	243
   707  00BDA7  006B               	dw	107
   708  00BDA9  0042               	dw	66
   709  00BDAB  006B               	dw	107
   710  00BDAD  00F3               	dw	243
   711  00BDAF  006B               	dw	107
   712  00BDB1  00F3               	dw	243
   713  00BDB3  006B               	dw	107
   714  00BDB5  00F3               	dw	243
   715  00BDB7  006B               	dw	107
   716  00BDB9  00F3               	dw	243
   717  00BDBB  006B               	dw	107
   718  00BDBD  0042               	dw	66
   719  00BDBF  006B               	dw	107
   720  00BDC1  00F3               	dw	243
   721  00BDC3  006B               	dw	107
   722  00BDC5  0042               	dw	66
   723  00BDC7  006B               	dw	107
   724  00BDC9  00F6               	dw	246
   725  00BDCB  0068               	dw	104
   726  00BDCD  0045               	dw	69
   727  00BDCF  0068               	dw	104
   728  00BDD1  0045               	dw	69
   729  00BDD3  0068               	dw	104
   730  00BDD5  0045               	dw	69
   731  00BDD7  0068               	dw	104
   732  00BDD9  0046               	dw	70
   733  00BDDB  0068               	dw	104
   734  00BDDD  00F6               	dw	246
   735  00BDDF  0068               	dw	104
   736  00BDE1  00F6               	dw	246
   737  00BDE3  0067               	dw	103
   738  00BDE5  00F6               	dw	246
   739  00BDE7  0067               	dw	103
   740  00BDE9  00F6               	dw	246
   741  00BDEB  0067               	dw	103
   742  00BDED  00F6               	dw	246
   743  00BDEF  0067               	dw	103
   744  00BDF1  00F7               	dw	247
   745  00BDF3  0067               	dw	103
   746  00BDF5  0045               	dw	69
   747  00BDF7  0067               	dw	103
   748  00BDF9  0046               	dw	70
   749  00BDFB  0067               	dw	103
   750  00BDFD  0046               	dw	70
   751  00BDFF  0067               	dw	103
   752  00BE01  0046               	dw	70
   753  00BE03  0067               	dw	103
   754  00BE05  0045               	dw	69
   755  00BE07  0067               	dw	103
   756  00BE09  0046               	dw	70
   757  00BE0B  0067               	dw	103
   758  00BE0D  0046               	dw	70
   759  00BE0F  0067               	dw	103
   760  00BE11  0046               	dw	70
   761  00BE13  0067               	dw	103
   762  00BE15  00F7               	dw	247
   763  00BE17  0067               	dw	103
   764  00BE19  00F7               	dw	247
   765  00BE1B  0067               	dw	103
   766  00BE1D  00F7               	dw	247
   767  00BE1F  0067               	dw	103
   768  00BE21  1837               	dw	6199
   769  00BE23  056F               	dw	1391
   770  00BE25  0147               	dw	327
   771  00BE27  0067               	dw	103
   772  00BE29                     __end_of_power_data:
   773                           	opt stack 0
   774  00BE29                     _alarm_song:
   775                           	opt stack 0
   776  00BE29  00                 	db	0
   777  00BE2A  00                 	db	0
   778  00BE2B  0C                 	db	12
   779  00BE2C  1C                 	db	28
   780  00BE2D  07                 	db	7
   781  00BE2E  01                 	db	1
   782  00BE2F  10                 	db	16
   783  00BE30  1C                 	db	28
   784  00BE31  06                 	db	6
   785  00BE32  02                 	db	2
   786  00BE33  13                 	db	19
   787  00BE34  1C                 	db	28
   788  00BE35  06                 	db	6
   789  00BE36  00                 	db	0
   790  00BE37  17                 	db	23
   791  00BE38  1C                 	db	28
   792  00BE39  06                 	db	6
   793  00BE3A  01                 	db	1
   794  00BE3B  18                 	db	24
   795  00BE3C  1C                 	db	28
   796  00BE3D  06                 	db	6
   797  00BE3E  00                 	db	0
   798  00BE3F  17                 	db	23
   799  00BE40  1C                 	db	28
   800  00BE41  06                 	db	6
   801  00BE42  02                 	db	2
   802  00BE43  13                 	db	19
   803  00BE44  1C                 	db	28
   804  00BE45  06                 	db	6
   805  00BE46  01                 	db	1
   806  00BE47  10                 	db	16
   807  00BE48  1C                 	db	28
   808  00BE49  06                 	db	6
   809  00BE4A  00                 	db	0
   810  00BE4B  0C                 	db	12
   811  00BE4C  1C                 	db	28
   812  00BE4D  06                 	db	6
   813  00BE4E  01                 	db	1
   814  00BE4F  10                 	db	16
   815  00BE50  1C                 	db	28
   816  00BE51  06                 	db	6
   817  00BE52  02                 	db	2
   818  00BE53  13                 	db	19
   819  00BE54  1C                 	db	28
   820  00BE55  06                 	db	6
   821  00BE56  00                 	db	0
   822  00BE57  17                 	db	23
   823  00BE58  1C                 	db	28
   824  00BE59  06                 	db	6
   825  00BE5A  01                 	db	1
   826  00BE5B  18                 	db	24
   827  00BE5C  1C                 	db	28
   828  00BE5D  06                 	db	6
   829  00BE5E  00                 	db	0
   830  00BE5F  17                 	db	23
   831  00BE60  1C                 	db	28
   832  00BE61  06                 	db	6
   833  00BE62  02                 	db	2
   834  00BE63  13                 	db	19
   835  00BE64  1C                 	db	28
   836  00BE65  06                 	db	6
   837  00BE66  01                 	db	1
   838  00BE67  10                 	db	16
   839  00BE68  1C                 	db	28
   840  00BE69  06                 	db	6
   841  00BE6A  00                 	db	0
   842  00BE6B  0C                 	db	12
   843  00BE6C  1C                 	db	28
   844  00BE6D  FF                 	db	255
   845  00BE6E  FF                 	db	255
   846  00BE6F  FF                 	db	255
   847  00BE70  FF                 	db	255
   848  00BE71                     __end_of_alarm_song:
   849                           	opt stack 0
   850  00BE71                     _led_masks4:
   851                           	opt stack 0
   852  00BE71  00                 	db	0
   853  00BE72  A4                 	db	164
   854  00BE73  04                 	db	4
   855  00BE74  06                 	db	6
   856  00BE75  00                 	db	0
   857  00BE76  00                 	db	0
   858  00BE77  00                 	db	0
   859  00BE78  06                 	db	6
   860  00BE79  00                 	db	0
   861  00BE7A  64                 	db	100
   862  00BE7B  04                 	db	4
   863  00BE7C  02                 	db	2
   864  00BE7D  00                 	db	0
   865  00BE7E  44                 	db	68
   866  00BE7F  04                 	db	4
   867  00BE80  06                 	db	6
   868  00BE81  00                 	db	0
   869  00BE82  C0                 	db	192
   870  00BE83  00                 	db	0
   871  00BE84  06                 	db	6
   872  00BE85  00                 	db	0
   873  00BE86  C4                 	db	196
   874  00BE87  04                 	db	4
   875  00BE88  04                 	db	4
   876  00BE89  00                 	db	0
   877  00BE8A  E4                 	db	228
   878  00BE8B  04                 	db	4
   879  00BE8C  04                 	db	4
   880  00BE8D  00                 	db	0
   881  00BE8E  00                 	db	0
   882  00BE8F  04                 	db	4
   883  00BE90  06                 	db	6
   884  00BE91  00                 	db	0
   885  00BE92  E4                 	db	228
   886  00BE93  04                 	db	4
   887  00BE94  06                 	db	6
   888  00BE95  00                 	db	0
   889  00BE96  C4                 	db	196
   890  00BE97  04                 	db	4
   891  00BE98  06                 	db	6
   892  00BE99                     __end_of_led_masks4:
   893                           	opt stack 0
   894  00BE99                     _led_masks3:
   895                           	opt stack 0
   896  00BE99  00                 	db	0
   897  00BE9A  10                 	db	16
   898  00BE9B  4B                 	db	75
   899  00BE9C  01                 	db	1
   900  00BE9D  00                 	db	0
   901  00BE9E  00                 	db	0
   902  00BE9F  03                 	db	3
   903  00BEA0  00                 	db	0
   904  00BEA1  00                 	db	0
   905  00BEA2  10                 	db	16
   906  00BEA3  CA                 	db	202
   907  00BEA4  00                 	db	0
   908  00BEA5  00                 	db	0
   909  00BEA6  10                 	db	16
   910  00BEA7  8B                 	db	139
   911  00BEA8  00                 	db	0
   912  00BEA9  00                 	db	0
   913  00BEAA  00                 	db	0
   914  00BEAB  83                 	db	131
   915  00BEAC  01                 	db	1
   916  00BEAD  00                 	db	0
   917  00BEAE  10                 	db	16
   918  00BEAF  89                 	db	137
   919  00BEB0  01                 	db	1
   920  00BEB1  00                 	db	0
   921  00BEB2  10                 	db	16
   922  00BEB3  C9                 	db	201
   923  00BEB4  01                 	db	1
   924  00BEB5  00                 	db	0
   925  00BEB6  00                 	db	0
   926  00BEB7  0B                 	db	11
   927  00BEB8  00                 	db	0
   928  00BEB9  00                 	db	0
   929  00BEBA  10                 	db	16
   930  00BEBB  CB                 	db	203
   931  00BEBC  01                 	db	1
   932  00BEBD  00                 	db	0
   933  00BEBE  10                 	db	16
   934  00BEBF  8B                 	db	139
   935  00BEC0  01                 	db	1
   936  00BEC1                     __end_of_led_masks3:
   937                           	opt stack 0
   938  00BEC1                     _led_masks2:
   939                           	opt stack 0
   940  00BEC1  6A                 	db	106
   941  00BEC2  02                 	db	2
   942  00BEC3  10                 	db	16
   943  00BEC4  00                 	db	0
   944  00BEC5  20                 	db	32
   945  00BEC6  00                 	db	0
   946  00BEC7  10                 	db	16
   947  00BEC8  00                 	db	0
   948  00BEC9  0B                 	db	11
   949  00BECA  02                 	db	2
   950  00BECB  10                 	db	16
   951  00BECC  00                 	db	0
   952  00BECD  29                 	db	41
   953  00BECE  02                 	db	2
   954  00BECF  10                 	db	16
   955  00BED0  00                 	db	0
   956  00BED1  61                 	db	97
   957  00BED2  00                 	db	0
   958  00BED3  10                 	db	16
   959  00BED4  00                 	db	0
   960  00BED5  69                 	db	105
   961  00BED6  02                 	db	2
   962  00BED7  00                 	db	0
   963  00BED8  00                 	db	0
   964  00BED9  6B                 	db	107
   965  00BEDA  02                 	db	2
   966  00BEDB  00                 	db	0
   967  00BEDC  00                 	db	0
   968  00BEDD  28                 	db	40
   969  00BEDE  00                 	db	0
   970  00BEDF  10                 	db	16
   971  00BEE0  00                 	db	0
   972  00BEE1  6B                 	db	107
   973  00BEE2  02                 	db	2
   974  00BEE3  10                 	db	16
   975  00BEE4  00                 	db	0
   976  00BEE5  69                 	db	105
   977  00BEE6  02                 	db	2
   978  00BEE7  10                 	db	16
   979  00BEE8  00                 	db	0
   980  00BEE9                     __end_of_led_masks2:
   981                           	opt stack 0
   982  00BEE9                     _alarm_on_tone:
   983                           	opt stack 0
   984  00BEE9  00                 	db	0
   985  00BEEA  00                 	db	0
   986  00BEEB  24                 	db	36
   987  00BEEC  1C                 	db	28
   988  00BEED  03                 	db	3
   989  00BEEE  01                 	db	1
   990  00BEEF  23                 	db	35
   991  00BEF0  1C                 	db	28
   992  00BEF1  03                 	db	3
   993  00BEF2  02                 	db	2
   994  00BEF3  20                 	db	32
   995  00BEF4  1C                 	db	28
   996  00BEF5  03                 	db	3
   997  00BEF6  00                 	db	0
   998  00BEF7  1F                 	db	31
   999  00BEF8  1C                 	db	28
  1000  00BEF9  03                 	db	3
  1001  00BEFA  01                 	db	1
  1002  00BEFB  1D                 	db	29
  1003  00BEFC  1C                 	db	28
  1004  00BEFD  03                 	db	3
  1005  00BEFE  02                 	db	2
  1006  00BEFF  1B                 	db	27
  1007  00BF00  1C                 	db	28
  1008  00BF01  03                 	db	3
  1009  00BF02  00                 	db	0
  1010  00BF03  1A                 	db	26
  1011  00BF04  1C                 	db	28
  1012  00BF05  03                 	db	3
  1013  00BF06  01                 	db	1
  1014  00BF07  18                 	db	24
  1015  00BF08  1C                 	db	28
  1016  00BF09  FF                 	db	255
  1017  00BF0A  FF                 	db	255
  1018  00BF0B  FF                 	db	255
  1019  00BF0C  FF                 	db	255
  1020  00BF0D                     __end_of_alarm_on_tone:
  1021                           	opt stack 0
  1022  00BF0D                     _alarm_off_tone:
  1023                           	opt stack 0
  1024  00BF0D  00                 	db	0
  1025  00BF0E  00                 	db	0
  1026  00BF0F  18                 	db	24
  1027  00BF10  1C                 	db	28
  1028  00BF11  03                 	db	3
  1029  00BF12  01                 	db	1
  1030  00BF13  1A                 	db	26
  1031  00BF14  1C                 	db	28
  1032  00BF15  03                 	db	3
  1033  00BF16  02                 	db	2
  1034  00BF17  1B                 	db	27
  1035  00BF18  1C                 	db	28
  1036  00BF19  03                 	db	3
  1037  00BF1A  00                 	db	0
  1038  00BF1B  1D                 	db	29
  1039  00BF1C  1C                 	db	28
  1040  00BF1D  03                 	db	3
  1041  00BF1E  01                 	db	1
  1042  00BF1F  1F                 	db	31
  1043  00BF20  1C                 	db	28
  1044  00BF21  03                 	db	3
  1045  00BF22  02                 	db	2
  1046  00BF23  20                 	db	32
  1047  00BF24  1C                 	db	28
  1048  00BF25  03                 	db	3
  1049  00BF26  00                 	db	0
  1050  00BF27  23                 	db	35
  1051  00BF28  1C                 	db	28
  1052  00BF29  03                 	db	3
  1053  00BF2A  01                 	db	1
  1054  00BF2B  24                 	db	36
  1055  00BF2C  1C                 	db	28
  1056  00BF2D  FF                 	db	255
  1057  00BF2E  FF                 	db	255
  1058  00BF2F  FF                 	db	255
  1059  00BF30  FF                 	db	255
  1060  00BF31                     __end_of_alarm_off_tone:
  1061                           	opt stack 0
  1062  00BF31                     _ir_codes:
  1063                           	opt stack 0
  1064  00BF31  9B                 	db	low _power_data
  1065  00BF32  BD                 	db	high _power_data
  1066  00BF33  47                 	db	71
  1067  00BF34  00                 	db	0
  1068  00BF35  0D                 	db	low _volume_up_data
  1069  00BF36  BD                 	db	high _volume_up_data
  1070  00BF37  47                 	db	71
  1071  00BF38  01                 	db	1
  1072  00BF39  7F                 	db	low _volume_dn_data
  1073  00BF3A  BC                 	db	high _volume_dn_data
  1074  00BF3B  47                 	db	71
  1075  00BF3C  02                 	db	2
  1076  00BF3D  F1                 	db	low _next_track_data
  1077  00BF3E  BB                 	db	high _next_track_data
  1078  00BF3F  47                 	db	71
  1079  00BF40  03                 	db	3
  1080  00BF41  63                 	db	low _prev_track_data
  1081  00BF42  BB                 	db	high _prev_track_data
  1082  00BF43  47                 	db	71
  1083  00BF44  04                 	db	4
  1084  00BF45  D5                 	db	low _number1_data
  1085  00BF46  BA                 	db	high _number1_data
  1086  00BF47  47                 	db	71
  1087  00BF48  05                 	db	5
  1088  00BF49  47                 	db	low _number2_data
  1089  00BF4A  BA                 	db	high _number2_data
  1090  00BF4B  47                 	db	71
  1091  00BF4C  06                 	db	6
  1092  00BF4D  B9                 	db	low _number3_data
  1093  00BF4E  B9                 	db	high _number3_data
  1094  00BF4F  47                 	db	71
  1095  00BF50  07                 	db	7
  1096  00BF51                     __end_of_ir_codes:
  1097                           	opt stack 0
  1098  00BF51                     _set_time_tone2:
  1099                           	opt stack 0
  1100  00BF51  00                 	db	0
  1101  00BF52  00                 	db	0
  1102  00BF53  24                 	db	36
  1103  00BF54  1C                 	db	28
  1104  00BF55  03                 	db	3
  1105  00BF56  01                 	db	1
  1106  00BF57  1F                 	db	31
  1107  00BF58  1C                 	db	28
  1108  00BF59  03                 	db	3
  1109  00BF5A  02                 	db	2
  1110  00BF5B  1C                 	db	28
  1111  00BF5C  1C                 	db	28
  1112  00BF5D  03                 	db	3
  1113  00BF5E  00                 	db	0
  1114  00BF5F  18                 	db	24
  1115  00BF60  1C                 	db	28
  1116  00BF61  FF                 	db	255
  1117  00BF62  FF                 	db	255
  1118  00BF63  FF                 	db	255
  1119  00BF64  FF                 	db	255
  1120  00BF65                     __end_of_set_time_tone2:
  1121                           	opt stack 0
  1122  00BF65                     _set_time_tone1:
  1123                           	opt stack 0
  1124  00BF65  00                 	db	0
  1125  00BF66  00                 	db	0
  1126  00BF67  18                 	db	24
  1127  00BF68  1C                 	db	28
  1128  00BF69  03                 	db	3
  1129  00BF6A  01                 	db	1
  1130  00BF6B  1C                 	db	28
  1131  00BF6C  1C                 	db	28
  1132  00BF6D  03                 	db	3
  1133  00BF6E  02                 	db	2
  1134  00BF6F  1F                 	db	31
  1135  00BF70  1C                 	db	28
  1136  00BF71  03                 	db	3
  1137  00BF72  00                 	db	0
  1138  00BF73  24                 	db	36
  1139  00BF74  1C                 	db	28
  1140  00BF75  FF                 	db	255
  1141  00BF76  FF                 	db	255
  1142  00BF77  FF                 	db	255
  1143  00BF78  FF                 	db	255
  1144  00BF79                     __end_of_set_time_tone1:
  1145                           	opt stack 0
  1146  00BF79                     _set_alarm_tone2:
  1147                           	opt stack 0
  1148  00BF79  00                 	db	0
  1149  00BF7A  00                 	db	0
  1150  00BF7B  24                 	db	36
  1151  00BF7C  1C                 	db	28
  1152  00BF7D  03                 	db	3
  1153  00BF7E  01                 	db	1
  1154  00BF7F  1E                 	db	30
  1155  00BF80  1C                 	db	28
  1156  00BF81  03                 	db	3
  1157  00BF82  02                 	db	2
  1158  00BF83  1B                 	db	27
  1159  00BF84  1C                 	db	28
  1160  00BF85  03                 	db	3
  1161  00BF86  00                 	db	0
  1162  00BF87  18                 	db	24
  1163  00BF88  1C                 	db	28
  1164  00BF89  FF                 	db	255
  1165  00BF8A  FF                 	db	255
  1166  00BF8B  FF                 	db	255
  1167  00BF8C  FF                 	db	255
  1168  00BF8D                     __end_of_set_alarm_tone2:
  1169                           	opt stack 0
  1170  00BF8D                     _set_alarm_tone1:
  1171                           	opt stack 0
  1172  00BF8D  00                 	db	0
  1173  00BF8E  00                 	db	0
  1174  00BF8F  18                 	db	24
  1175  00BF90  1C                 	db	28
  1176  00BF91  03                 	db	3
  1177  00BF92  01                 	db	1
  1178  00BF93  1B                 	db	27
  1179  00BF94  1C                 	db	28
  1180  00BF95  03                 	db	3
  1181  00BF96  02                 	db	2
  1182  00BF97  1E                 	db	30
  1183  00BF98  1C                 	db	28
  1184  00BF99  03                 	db	3
  1185  00BF9A  00                 	db	0
  1186  00BF9B  24                 	db	36
  1187  00BF9C  1C                 	db	28
  1188  00BF9D  FF                 	db	255
  1189  00BF9E  FF                 	db	255
  1190  00BF9F  FF                 	db	255
  1191  00BFA0  FF                 	db	255
  1192  00BFA1                     __end_of_set_alarm_tone1:
  1193                           	opt stack 0
  1194  00BFA1                     _dn_tone:
  1195                           	opt stack 0
  1196  00BFA1  00                 	db	0
  1197  00BFA2  00                 	db	0
  1198  00BFA3  24                 	db	36
  1199  00BFA4  1C                 	db	28
  1200  00BFA5  03                 	db	3
  1201  00BFA6  01                 	db	1
  1202  00BFA7  18                 	db	24
  1203  00BFA8  1C                 	db	28
  1204  00BFA9  FF                 	db	255
  1205  00BFAA  FF                 	db	255
  1206  00BFAB  FF                 	db	255
  1207  00BFAC  FF                 	db	255
  1208  00BFAD                     __end_of_dn_tone:
  1209                           	opt stack 0
  1210  00BFAD                     _up_tone:
  1211                           	opt stack 0
  1212  00BFAD  00                 	db	0
  1213  00BFAE  00                 	db	0
  1214  00BFAF  18                 	db	24
  1215  00BFB0  1C                 	db	28
  1216  00BFB1  03                 	db	3
  1217  00BFB2  01                 	db	1
  1218  00BFB3  24                 	db	36
  1219  00BFB4  1C                 	db	28
  1220  00BFB5  FF                 	db	255
  1221  00BFB6  FF                 	db	255
  1222  00BFB7  FF                 	db	255
  1223  00BFB8  FF                 	db	255
  1224  00BFB9                     __end_of_up_tone:
  1225                           	opt stack 0
  1226  00BFB9                     _test_tone:
  1227                           	opt stack 0
  1228  00BFB9  00                 	db	0
  1229  00BFBA  00                 	db	0
  1230  00BFBB  21                 	db	33
  1231  00BFBC  2A                 	db	42
  1232  00BFBD  00                 	db	0
  1233  00BFBE  01                 	db	1
  1234  00BFBF  24                 	db	36
  1235  00BFC0  2A                 	db	42
  1236  00BFC1  FF                 	db	255
  1237  00BFC2  FF                 	db	255
  1238  00BFC3  FF                 	db	255
  1239  00BFC4  FF                 	db	255
  1240  00BFC5                     __end_of_test_tone:
  1241                           	opt stack 0
  1242  00BFC5                     STR_3:
  1243                           
  1244                           ; BSR set to: 0
  1245  00BFC5  57                 	db	87	;'W'
  1246  00BFC6  65                 	db	101	;'e'
  1247  00BFC7  6C                 	db	108	;'l'
  1248  00BFC8  63                 	db	99	;'c'
  1249  00BFC9  6F                 	db	111	;'o'
  1250  00BFCA  6D                 	db	109	;'m'
  1251  00BFCB  65                 	db	101	;'e'
  1252  00BFCC  20                 	db	32
  1253  00BFCD  74                 	db	116	;'t'
  1254  00BFCE  6F                 	db	111	;'o'
  1255  00BFCF  20                 	db	32
  1256  00BFD0  48                 	db	72	;'H'
  1257  00BFD1  65                 	db	101	;'e'
  1258  00BFD2  72                 	db	114	;'r'
  1259  00BFD3  6F                 	db	111	;'o'
  1260  00BFD4  69                 	db	105	;'i'
  1261  00BFD5  6E                 	db	110	;'n'
  1262  00BFD6  65                 	db	101	;'e'
  1263  00BFD7  63                 	db	99	;'c'
  1264  00BFD8  6C                 	db	108	;'l'
  1265  00BFD9  6F                 	db	111	;'o'
  1266  00BFDA  63                 	db	99	;'c'
  1267  00BFDB  6B                 	db	107	;'k'
  1268  00BFDC  20                 	db	32
  1269  00BFDD  32                 	db	50	;'2'
  1270  00BFDE  0A                 	db	10
  1271  00BFDF  00                 	db	0
  1272  00BFE0                     STR_5:
  1273                           
  1274                           ; BSR set to: 0
  1275  00BFE0  49                 	db	73	;'I'
  1276  00BFE1  52                 	db	82	;'R'
  1277  00BFE2  20                 	db	32
  1278  00BFE3  74                 	db	116	;'t'
  1279  00BFE4  69                 	db	105	;'i'
  1280  00BFE5  6D                 	db	109	;'m'
  1281  00BFE6  65                 	db	101	;'e'
  1282  00BFE7  64                 	db	100	;'d'
  1283  00BFE8  20                 	db	32
  1284  00BFE9  6F                 	db	111	;'o'
  1285  00BFEA  75                 	db	117	;'u'
  1286  00BFEB  74                 	db	116	;'t'
  1287  00BFEC  0A                 	db	10
  1288  00BFED  00                 	db	0
  1289  00BFEE                     STR_1:
  1290                           
  1291                           ; BSR set to: 0
  1292  00BFEE  49                 	db	73	;'I'
  1293  00BFEF  52                 	db	82	;'R'
  1294  00BFF0  20                 	db	32
  1295  00BFF1  63                 	db	99	;'c'
  1296  00BFF2  6F                 	db	111	;'o'
  1297  00BFF3  64                 	db	100	;'d'
  1298  00BFF4  65                 	db	101	;'e'
  1299  00BFF5  3A                 	db	58	;':'
  1300  00BFF6  20                 	db	32
  1301  00BFF7  00                 	db	0
  1302  00BFF8                     STR_2:
  1303                           
  1304                           ; BSR set to: 0
  1305  00BFF8  65                 	db	101	;'e'
  1306  00BFF9  72                 	db	114	;'r'
  1307  00BFFA  72                 	db	114	;'r'
  1308  00BFFB  6F                 	db	111	;'o'
  1309  00BFFC  72                 	db	114	;'r'
  1310  00BFFD  3D                 	db	61	;'='
  1311  00BFFE  00                 	db	0
  1312  0000                     
  1313                           ; #config settings
  1314  00BFFF  00                 	db	0	; dummy byte at the end
  1315  0000                     
  1316                           	psect	nvCOMRAM
  1317  00004B                     __pnvCOMRAM:
  1318                           	opt stack 0
  1319  00004B                     _led_mask0:
  1320                           	opt stack 0
  1321  00004B                     	ds	1
  1322                           
  1323                           	psect	nvBANK0
  1324  000094                     __pnvBANK0:
  1325                           	opt stack 0
  1326  000094                     _osc3_period:
  1327                           	opt stack 0
  1328  000094                     	ds	2
  1329  000096                     _osc2_period:
  1330                           	opt stack 0
  1331  000096                     	ds	2
  1332  000098                     _osc1_period:
  1333                           	opt stack 0
  1334  000098                     	ds	2
  1335  00009A                     _osc3_volume:
  1336                           	opt stack 0
  1337  00009A                     	ds	1
  1338  00009B                     _osc2_volume:
  1339                           	opt stack 0
  1340  00009B                     	ds	1
  1341  00009C                     _osc1_volume:
  1342                           	opt stack 0
  1343  00009C                     	ds	1
  1344  0000                     _TXREG	set	4013
  1345  0000                     _PIR2bits	set	4001
  1346  0000                     _TRISAbits	set	3986
  1347  0000                     _TRISE	set	3990
  1348  0000                     _TRISFbits	set	3991
  1349  0000                     _TRISGbits	set	3992
  1350  0000                     _TRISCbits	set	3988
  1351  0000                     _CCP1CON	set	4029
  1352  0000                     _PR2	set	4043
  1353  0000                     _T2CON	set	4042
  1354  0000                     _CCP2CON	set	4026
  1355  0000                     _CCPR2L	set	4027
  1356  0000                     _CCPR2H	set	4028
  1357  0000                     _T1CON	set	4045
  1358  0000                     _INTCONbits	set	4082
  1359  0000                     _T0CON	set	4053
  1360  0000                     _INTCON2bits	set	4081
  1361  0000                     _PIE1bits	set	3997
  1362  0000                     _SPBRG	set	4015
  1363  0000                     _SPBRGH	set	3967
  1364  0000                     _BAUDCTL	set	3966
  1365  0000                     _RCSTA	set	4011
  1366  0000                     _TXSTA	set	4012
  1367  0000                     _LATDbits	set	3980
  1368  0000                     _TRISDbits	set	3989
  1369  0000                     _ADCON1	set	4033
  1370  0000                     _TMR0H	set	4055
  1371  0000                     _TMR0L	set	4054
  1372  0000                     _INTCON3bits	set	4080
  1373  0000                     _CCPR1L	set	4030
  1374  0000                     _PIR1bits	set	3998
  1375  0000                     _LATGbits	set	3983
  1376  0000                     _LATFbits	set	3982
  1377  0000                     _LATEbits	set	3981
  1378  0000                     _LATCbits	set	3979
  1379  0000                     _LATAbits	set	3977
  1380                           
  1381                           	psect	cinit
  1382  001776                     __pcinit:
  1383                           	opt stack 0
  1384  001776                     start_initialization:
  1385                           	opt stack 0
  1386  001776                     __initialization:
  1387                           	opt stack 0
  1388                           
  1389                           ; Initialize objects allocated to COMRAM (5 bytes)
  1390                           ; load TBLPTR registers with __pidataCOMRAM
  1391  001776  0E2E               	movlw	low __pidataCOMRAM
  1392  001778  6EF6               	movwf	tblptrl,c
  1393  00177A  0E1B               	movlw	high __pidataCOMRAM
  1394  00177C  6EF7               	movwf	tblptrh,c
  1395  00177E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1396  001780  6EF8               	movwf	tblptru,c
  1397  001782  EE00  F046         	lfsr	0,__pdataCOMRAM
  1398  001786  EE10 F005          	lfsr	1,5
  1399  00178A                     copy_data0:
  1400  00178A  0009               	tblrd		*+
  1401  00178C  CFF5 FFEE          	movff	tablat,postinc0
  1402  001790  50E5               	movf	postdec1,w,c
  1403  001792  50E1               	movf	fsr1l,w,c
  1404  001794  E1FA               	bnz	copy_data0
  1405                           
  1406                           ; Clear objects allocated to BIGRAM (1024 bytes)
  1407  001796  EE00  F09D         	lfsr	0,__pbssBIGRAM
  1408  00179A  EE14 F000          	lfsr	1,1024
  1409  00179E                     clear_0:
  1410  00179E  6AEE               	clrf	postinc0,c
  1411  0017A0  50E5               	movf	postdec1,w,c
  1412  0017A2  50E1               	movf	fsr1l,w,c
  1413  0017A4  E1FC               	bnz	clear_0
  1414  0017A6  50E2               	movf	fsr1h,w,c
  1415  0017A8  E1FA               	bnz	clear_0
  1416                           
  1417                           ; Clear objects allocated to BANK0 (33 bytes)
  1418  0017AA  EE00  F060         	lfsr	0,__pbssBANK0
  1419  0017AE  0E21               	movlw	33
  1420  0017B0                     clear_1:
  1421  0017B0  6AEE               	clrf	postinc0,c
  1422  0017B2  06E8               	decf	wreg,f,c
  1423  0017B4  E1FD               	bnz	clear_1
  1424                           
  1425                           ; Clear objects allocated to COMRAM (24 bytes)
  1426  0017B6  EE00  F02E         	lfsr	0,__pbssCOMRAM
  1427  0017BA  0E18               	movlw	24
  1428  0017BC                     clear_2:
  1429  0017BC  6AEE               	clrf	postinc0,c
  1430  0017BE  06E8               	decf	wreg,f,c
  1431  0017C0  E1FD               	bnz	clear_2
  1432  0017C2                     end_of_initialization:
  1433                           	opt stack 0
  1434  0017C2                     __end_of__initialization:
  1435                           	opt stack 0
  1436  0017C2  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1437  0017C4  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1438  0017C6  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1439  0017C8  6EF8               	movwf	tblptru,c
  1440  0017CA  0100               	movlb	0
  1441  0017CC  EF54  F004         	goto	_main	;jump to C main() function
  1442                           tblptru	equ	0xFF8
  1443                           tblptrh	equ	0xFF7
  1444                           tblptrl	equ	0xFF6
  1445                           tablat	equ	0xFF5
  1446                           postinc0	equ	0xFEE
  1447                           wreg	equ	0xFE8
  1448                           postdec1	equ	0xFE5
  1449                           fsr1h	equ	0xFE2
  1450                           fsr1l	equ	0xFE1
  1451                           
  1452                           	psect	bssCOMRAM
  1453  00002E                     __pbssCOMRAM:
  1454                           	opt stack 0
  1455  00002E                     _song_ptr:
  1456                           	opt stack 0
  1457  00002E                     	ds	3
  1458  000031                     _got_ir_int:
  1459                           	opt stack 0
  1460  000031                     	ds	1
  1461  000032                     _have_ir:
  1462                           	opt stack 0
  1463  000032                     	ds	1
  1464  000033                     _ir_size:
  1465                           	opt stack 0
  1466  000033                     	ds	1
  1467  000034                     _led_mask3:
  1468                           	opt stack 0
  1469  000034                     	ds	1
  1470  000035                     _led_mask2:
  1471                           	opt stack 0
  1472  000035                     	ds	1
  1473  000036                     _led_mask1:
  1474                           	opt stack 0
  1475  000036                     	ds	1
  1476  000037                     _alarm_time:
  1477                           	opt stack 0
  1478  000037                     	ds	1
  1479  000038                     _alarm_ampm:
  1480                           	opt stack 0
  1481  000038                     	ds	1
  1482  000039                     _alarm_minutes:
  1483                           	opt stack 0
  1484  000039                     	ds	1
  1485  00003A                     _repeat_counter:
  1486                           	opt stack 0
  1487  00003A                     	ds	1
  1488  00003B                     _repeating:
  1489                           	opt stack 0
  1490  00003B                     	ds	1
  1491  00003C                     _mode:
  1492                           	opt stack 0
  1493  00003C                     	ds	1
  1494  00003D                     _alarm:
  1495                           	opt stack 0
  1496  00003D                     	ds	1
  1497  00003E                     _ampm:
  1498                           	opt stack 0
  1499  00003E                     	ds	1
  1500  00003F                     _minutes:
  1501                           	opt stack 0
  1502  00003F                     	ds	1
  1503  000040                     _seconds:
  1504                           	opt stack 0
  1505  000040                     	ds	1
  1506  000041                     _time_hz:
  1507                           	opt stack 0
  1508  000041                     	ds	1
  1509  000042                     _display_flash:
  1510                           	opt stack 0
  1511  000042                     	ds	1
  1512  000043                     _song_delay:
  1513                           	opt stack 0
  1514  000043                     	ds	1
  1515  000044                     _song_counter:
  1516                           	opt stack 0
  1517  000044                     	ds	1
  1518  000045                     _next_duty:
  1519                           	opt stack 0
  1520  000045                     	ds	1
  1521                           tblptru	equ	0xFF8
  1522                           tblptrh	equ	0xFF7
  1523                           tblptrl	equ	0xFF6
  1524                           tablat	equ	0xFF5
  1525                           postinc0	equ	0xFEE
  1526                           wreg	equ	0xFE8
  1527                           postdec1	equ	0xFE5
  1528                           fsr1h	equ	0xFE2
  1529                           fsr1l	equ	0xFE1
  1530                           
  1531                           	psect	dataCOMRAM
  1532  000046                     __pdataCOMRAM:
  1533                           	opt stack 0
  1534  000046                     _first_edge:
  1535                           	opt stack 0
  1536  000046                     	ds	1
  1537  000047                     _alarm_sounding:
  1538                           	opt stack 0
  1539  000047                     	ds	1
  1540  000048                     _alarm_hours:
  1541                           	opt stack 0
  1542  000048                     	ds	1
  1543  000049                     _colon:
  1544                           	opt stack 0
  1545  000049                     	ds	1
  1546  00004A                     _hours:
  1547                           	opt stack 0
  1548  00004A                     	ds	1
  1549                           tblptru	equ	0xFF8
  1550                           tblptrh	equ	0xFF7
  1551                           tblptrl	equ	0xFF6
  1552                           tablat	equ	0xFF5
  1553                           postinc0	equ	0xFEE
  1554                           wreg	equ	0xFE8
  1555                           postdec1	equ	0xFE5
  1556                           fsr1h	equ	0xFE2
  1557                           fsr1l	equ	0xFE1
  1558                           
  1559                           	psect	bssBANK0
  1560  000060                     __pbssBANK0:
  1561                           	opt stack 0
  1562  000060                     _ir_code_failed:
  1563                           	opt stack 0
  1564  000060                     	ds	8
  1565  000068                     _ir_time2:
  1566                           	opt stack 0
  1567  000068                     	ds	2
  1568  00006A                     _ir_time:
  1569                           	opt stack 0
  1570  00006A                     	ds	2
  1571  00006C                     _crystal_time:
  1572                           	opt stack 0
  1573  00006C                     	ds	2
  1574  00006E                     _osc3_time:
  1575                           	opt stack 0
  1576  00006E                     	ds	2
  1577  000070                     _osc2_time:
  1578                           	opt stack 0
  1579  000070                     	ds	2
  1580  000072                     _osc1_time:
  1581                           	opt stack 0
  1582  000072                     	ds	2
  1583  000074                     _powerdown_count:
  1584                           	opt stack 0
  1585  000074                     	ds	2
  1586  000076                     _decay_count:
  1587                           	opt stack 0
  1588  000076                     	ds	2
  1589  000078                     _uart_position2:
  1590                           	opt stack 0
  1591  000078                     	ds	2
  1592  00007A                     _uart_position1:
  1593                           	opt stack 0
  1594  00007A                     	ds	2
  1595  00007C                     _uart_size:
  1596                           	opt stack 0
  1597  00007C                     	ds	2
  1598  00007E                     _interrupt_done:
  1599                           	opt stack 0
  1600  00007E                     	ds	1
  1601  00007F                     _ir_code:
  1602                           	opt stack 0
  1603  00007F                     	ds	1
  1604  000080                     _need_audio:
  1605                           	opt stack 0
  1606  000080                     	ds	1
  1607                           tblptru	equ	0xFF8
  1608                           tblptrh	equ	0xFF7
  1609                           tblptrl	equ	0xFF6
  1610                           tablat	equ	0xFF5
  1611                           postinc0	equ	0xFEE
  1612                           wreg	equ	0xFE8
  1613                           postdec1	equ	0xFE5
  1614                           fsr1h	equ	0xFE2
  1615                           fsr1l	equ	0xFE1
  1616                           
  1617                           	psect	bssBIGRAM
  1618  00009D                     __pbssBIGRAM:
  1619                           	opt stack 0
  1620  00009D                     _uart_buffer:
  1621                           	opt stack 0
  1622  00009D                     	ds	1024
  1623                           tblptru	equ	0xFF8
  1624                           tblptrh	equ	0xFF7
  1625                           tblptrl	equ	0xFF6
  1626                           tablat	equ	0xFF5
  1627                           postinc0	equ	0xFEE
  1628                           wreg	equ	0xFE8
  1629                           postdec1	equ	0xFE5
  1630                           fsr1h	equ	0xFE2
  1631                           fsr1l	equ	0xFE1
  1632                           
  1633                           	psect	cstackBANK0
  1634  000081                     __pcstackBANK0:
  1635                           	opt stack 0
  1636  000081                     handle_ir@failed:
  1637                           	opt stack 0
  1638                           
  1639                           ; 1 bytes @ 0x0
  1640  000081                     	ds	1
  1641  000082                     handle_ir@code_size:
  1642                           	opt stack 0
  1643                           
  1644                           ; 1 bytes @ 0x1
  1645  000082                     	ds	1
  1646  000083                     handle_ir@got_it:
  1647                           	opt stack 0
  1648                           
  1649                           ; 1 bytes @ 0x2
  1650  000083                     	ds	1
  1651  000084                     handle_ir@ir_error:
  1652                           	opt stack 0
  1653                           
  1654                           ; 2 bytes @ 0x3
  1655  000084                     	ds	2
  1656  000086                     handle_ir@data:
  1657                           	opt stack 0
  1658                           
  1659                           ; 2 bytes @ 0x5
  1660  000086                     	ds	2
  1661  000088                     handle_ir@error:
  1662                           	opt stack 0
  1663                           
  1664                           ; 2 bytes @ 0x7
  1665  000088                     	ds	2
  1666  00008A                     handle_ir@i:
  1667                           	opt stack 0
  1668                           
  1669                           ; 1 bytes @ 0x9
  1670  00008A                     	ds	1
  1671  00008B                     handle_ir@i_916:
  1672                           	opt stack 0
  1673                           
  1674                           ; 1 bytes @ 0xA
  1675  00008B                     	ds	1
  1676  00008C                     handle_ir@code:
  1677                           	opt stack 0
  1678                           
  1679                           ; 2 bytes @ 0xB
  1680  00008C                     	ds	2
  1681  00008E                     handle_ir@j:
  1682                           	opt stack 0
  1683                           
  1684                           ; 1 bytes @ 0xD
  1685  00008E                     	ds	1
  1686  00008F                     main@test_time:
  1687                           	opt stack 0
  1688                           
  1689                           ; 2 bytes @ 0xE
  1690  00008F                     	ds	2
  1691  000091                     main@i:
  1692                           	opt stack 0
  1693                           
  1694                           ; 2 bytes @ 0x10
  1695  000091                     	ds	2
  1696  000093                     main@i_1023:
  1697                           	opt stack 0
  1698                           
  1699                           ; 1 bytes @ 0x12
  1700  000093                     	ds	1
  1701                           tblptru	equ	0xFF8
  1702                           tblptrh	equ	0xFF7
  1703                           tblptrl	equ	0xFF6
  1704                           tablat	equ	0xFF5
  1705                           postinc0	equ	0xFEE
  1706                           wreg	equ	0xFE8
  1707                           postdec1	equ	0xFE5
  1708                           fsr1h	equ	0xFE2
  1709                           fsr1l	equ	0xFE1
  1710                           
  1711                           	psect	cstackCOMRAM
  1712  000001                     __pcstackCOMRAM:
  1713                           	opt stack 0
  1714  000001                     ??_handle_audio:
  1715  000001                     
  1716                           ; 1 bytes @ 0x0
  1717  000001                     	ds	2
  1718  000003                     handle_audio@amplitude:
  1719                           	opt stack 0
  1720                           
  1721                           ; 1 bytes @ 0x2
  1722  000003                     	ds	1
  1723  000004                     ??_isr:
  1724                           
  1725                           ; 1 bytes @ 0x3
  1726  000004                     	ds	16
  1727  000014                     ??_write_leds:
  1728  000014                     ?___awdiv:
  1729                           	opt stack 0
  1730  000014                     ?___lwdiv:
  1731                           	opt stack 0
  1732  000014                     print_byte@c:
  1733                           	opt stack 0
  1734  000014                     play_song@ptr:
  1735                           	opt stack 0
  1736  000014                     ___awdiv@dividend:
  1737                           	opt stack 0
  1738  000014                     ___lwdiv@dividend:
  1739                           	opt stack 0
  1740                           
  1741                           ; 2 bytes @ 0x13
  1742  000014                     	ds	1
  1743  000015                     print_text@s:
  1744                           	opt stack 0
  1745  000015                     _print_bin_nospace$802:
  1746                           	opt stack 0
  1747                           
  1748                           ; 2 bytes @ 0x14
  1749  000015                     	ds	1
  1750  000016                     ___awdiv@divisor:
  1751                           	opt stack 0
  1752  000016                     ___lwdiv@divisor:
  1753                           	opt stack 0
  1754                           
  1755                           ; 2 bytes @ 0x15
  1756  000016                     	ds	1
  1757  000017                     _print_bin_nospace$803:
  1758                           	opt stack 0
  1759                           
  1760                           ; 2 bytes @ 0x16
  1761  000017                     	ds	1
  1762  000018                     ___awdiv@counter:
  1763                           	opt stack 0
  1764  000018                     ___lwdiv@counter:
  1765                           	opt stack 0
  1766                           
  1767                           ; 1 bytes @ 0x17
  1768  000018                     	ds	1
  1769  000019                     ___awdiv@sign:
  1770                           	opt stack 0
  1771  000019                     _print_bin_nospace$804:
  1772                           	opt stack 0
  1773  000019                     ___lwdiv@quotient:
  1774                           	opt stack 0
  1775                           
  1776                           ; 2 bytes @ 0x18
  1777  000019                     	ds	1
  1778  00001A                     ___awdiv@quotient:
  1779                           	opt stack 0
  1780                           
  1781                           ; 2 bytes @ 0x19
  1782  00001A                     	ds	1
  1783  00001B                     ?___lwmod:
  1784                           	opt stack 0
  1785  00001B                     _print_bin_nospace$805:
  1786                           	opt stack 0
  1787  00001B                     ___lwmod@dividend:
  1788                           	opt stack 0
  1789                           
  1790                           ; 2 bytes @ 0x1A
  1791  00001B                     	ds	1
  1792  00001C                     ??_draw_time:
  1793  00001C                     ??_draw_alarm:
  1794                           
  1795                           ; 1 bytes @ 0x1B
  1796  00001C                     	ds	1
  1797  00001D                     _print_bin_nospace$806:
  1798                           	opt stack 0
  1799  00001D                     ___lwmod@divisor:
  1800                           	opt stack 0
  1801                           
  1802                           ; 2 bytes @ 0x1C
  1803  00001D                     	ds	1
  1804  00001E                     draw_time@hours10:
  1805                           	opt stack 0
  1806  00001E                     draw_alarm@hours10:
  1807                           	opt stack 0
  1808                           
  1809                           ; 1 bytes @ 0x1D
  1810  00001E                     	ds	1
  1811  00001F                     draw_time@minutes10:
  1812                           	opt stack 0
  1813  00001F                     draw_alarm@minutes10:
  1814                           	opt stack 0
  1815  00001F                     ___lwmod@counter:
  1816                           	opt stack 0
  1817  00001F                     _print_bin_nospace$807:
  1818                           	opt stack 0
  1819                           
  1820                           ; 2 bytes @ 0x1E
  1821  00001F                     	ds	1
  1822  000020                     print_number_nospace@number:
  1823                           	opt stack 0
  1824  000020                     draw_time@ptr:
  1825                           	opt stack 0
  1826  000020                     draw_alarm@ptr:
  1827                           	opt stack 0
  1828                           
  1829                           ; 2 bytes @ 0x1F
  1830  000020                     	ds	1
  1831  000021                     _print_bin_nospace$808:
  1832                           	opt stack 0
  1833                           
  1834                           ; 2 bytes @ 0x20
  1835  000021                     	ds	1
  1836  000022                     print_number@number:
  1837                           	opt stack 0
  1838                           
  1839                           ; 2 bytes @ 0x21
  1840  000022                     	ds	1
  1841  000023                     _print_bin_nospace$809:
  1842                           	opt stack 0
  1843                           
  1844                           ; 2 bytes @ 0x22
  1845  000023                     	ds	1
  1846  000024                     
  1847                           ; 1 bytes @ 0x23
  1848  000024                     	ds	1
  1849  000025                     print_bin_nospace@number:
  1850                           	opt stack 0
  1851                           
  1852                           ; 1 bytes @ 0x24
  1853  000025                     	ds	1
  1854  000026                     ??_handle_ir:
  1855                           
  1856                           ; 1 bytes @ 0x25
  1857  000026                     	ds	6
  1858  00002C                     ??_main:
  1859                           
  1860                           ; 1 bytes @ 0x2B
  1861  00002C                     	ds	2
  1862                           tblptru	equ	0xFF8
  1863                           tblptrh	equ	0xFF7
  1864                           tblptrl	equ	0xFF6
  1865                           tablat	equ	0xFF5
  1866                           postinc0	equ	0xFEE
  1867                           wreg	equ	0xFE8
  1868                           postdec1	equ	0xFE5
  1869                           fsr1h	equ	0xFE2
  1870                           fsr1l	equ	0xFE1
  1871                           
  1872 ;;
  1873 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1874 ;;
  1875 ;; *************** function _main *****************
  1876 ;; Defined at:
  1877 ;;		line 1665 in file "clock.c"
  1878 ;; Parameters:    Size  Location     Type
  1879 ;;		None
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;  i               1   18[BANK0 ] unsigned char 
  1882 ;;  test_time       2   14[BANK0 ] unsigned int 
  1883 ;;  i               2   16[BANK0 ] unsigned int 
  1884 ;; Return value:  Size  Location     Type
  1885 ;;                  1    wreg      void 
  1886 ;; Registers used:
  1887 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1888 ;; Tracked objects:
  1889 ;;		On entry : 0/0
  1890 ;;		On exit  : 0/0
  1891 ;;		Unchanged: 0/0
  1892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1894 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1895 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1896 ;;      Totals:         2       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1897 ;;Total ram usage:        7 bytes
  1898 ;; Hardware stack levels required when called:    7
  1899 ;; This function calls:
  1900 ;;		_draw_time
  1901 ;;		_handle_ir
  1902 ;;		_handle_repeat
  1903 ;;		_handle_time
  1904 ;;		_print_text
  1905 ;;		_start_alarm
  1906 ;; This function is called by:
  1907 ;;		Startup code after reset
  1908 ;; This function uses a non-reentrant model
  1909 ;;
  1910                           
  1911                           	psect	text0
  1912  0008A8                     __ptext0:
  1913                           	opt stack 0
  1914  0008A8                     _main:
  1915                           	opt stack 0
  1916  0008A8  FFFF               	dw	65535	; assembler added errata NOP
  1917                           
  1918                           ;clock.c: 1668: ADCON1 = 0xff;
  1919                           
  1920                           ; BSR set to: 0
  1921                           ;incstack = 0
  1922  0008AA  68C1               	setf	4033,c	;volatile
  1923                           
  1924                           ;clock.c: 1669: TRISDbits.TRISD7 = 0;
  1925  0008AC  9E95               	bcf	3989,7,c	;volatile
  1926                           
  1927                           ;clock.c: 1670: LATDbits.LATD7 = 1;
  1928  0008AE  8E8C               	bsf	3980,7,c	;volatile
  1929                           
  1930                           ;clock.c: 1673: TXSTA = 0x24;
  1931  0008B0  0E24               	movlw	36
  1932  0008B2  6EAC               	movwf	4012,c	;volatile
  1933                           
  1934                           ;clock.c: 1674: RCSTA = 0x80;
  1935  0008B4  0E80               	movlw	128
  1936  0008B6  6EAB               	movwf	4011,c	;volatile
  1937                           
  1938                           ;clock.c: 1675: BAUDCTL = 0x08;
  1939  0008B8  0E08               	movlw	8
  1940  0008BA  6E7E               	movwf	3966,c	;volatile
  1941                           
  1942                           ;clock.c: 1676: SPBRGH = 87 >> 8;
  1943  0008BC  0E00               	movlw	0
  1944  0008BE  6E7F               	movwf	3967,c	;volatile
  1945                           
  1946                           ;clock.c: 1677: SPBRG = 87 & 0xff;
  1947  0008C0  0E57               	movlw	87
  1948  0008C2  6EAF               	movwf	4015,c	;volatile
  1949                           
  1950                           ;clock.c: 1678: PIR1bits.RCIF = 0;
  1951  0008C4  9A9E               	bcf	3998,5,c	;volatile
  1952                           
  1953                           ;clock.c: 1679: PIE1bits.RCIE = 0;
  1954  0008C6  9A9D               	bcf	3997,5,c	;volatile
  1955                           
  1956                           ;clock.c: 1682: INTCON2bits.INTEDG3 = 0;
  1957  0008C8  96F1               	bcf	intcon2,3,c	;volatile
  1958                           
  1959                           ;clock.c: 1683: INTCON3bits.INT3IE = 1;
  1960  0008CA  8AF0               	bsf	intcon3,5,c	;volatile
  1961                           
  1962                           ;clock.c: 1684: INTCON3bits.INT3IF = 0;
  1963  0008CC  94F0               	bcf	intcon3,2,c	;volatile
  1964                           
  1965                           ;clock.c: 1685: ir_size = 0;
  1966  0008CE  0E00               	movlw	0
  1967  0008D0  6E33               	movwf	_ir_size,c
  1968                           
  1969                           ;clock.c: 1686: first_edge = 1;
  1970  0008D2  0E01               	movlw	1
  1971  0008D4  6E46               	movwf	_first_edge,c
  1972                           
  1973                           ;clock.c: 1690: T0CON = 0x85;
  1974  0008D6  0E85               	movlw	133
  1975  0008D8  6ED5               	movwf	4053,c	;volatile
  1976                           
  1977                           ;clock.c: 1691: INTCONbits.TMR0IF = 0;
  1978  0008DA  94F2               	bcf	intcon,2,c	;volatile
  1979                           
  1980                           ;clock.c: 1696: T1CON = 0xb1;
  1981  0008DC  0EB1               	movlw	177
  1982  0008DE  6ECD               	movwf	4045,c	;volatile
  1983                           
  1984                           ;clock.c: 1697: CCPR2H = (40000000 / 4 / 8 / 250 - 1) >> 8;
  1985  0008E0  0E13               	movlw	19
  1986  0008E2  6EBC               	movwf	4028,c	;volatile
  1987                           
  1988                           ;clock.c: 1698: CCPR2L = (40000000 / 4 / 8 / 250 - 1) & 0xff;
  1989  0008E4  0E87               	movlw	135
  1990  0008E6  6EBB               	movwf	4027,c	;volatile
  1991                           
  1992                           ;clock.c: 1699: CCP2CON = 0x0b;
  1993  0008E8  0E0B               	movlw	11
  1994  0008EA  6EBA               	movwf	4026,c	;volatile
  1995                           
  1996                           ;clock.c: 1705: osc1_period = freqs[29];
  1997  0008EC  0E99               	movlw	low (_freqs+58)
  1998  0008EE  6EF6               	movwf	tblptrl,c
  1999  0008F0  0EB9               	movlw	high (_freqs+58)
  2000  0008F2  6EF7               	movwf	tblptrh,c
  2001  0008F4                     	if	0	;tblptru may be non-zero
  2002  0008F4                     	endif
  2003  0008F4                     	if	0	;tblptru may be non-zero
  2004  0008F4                     	endif
  2005  0008F4  0009               	tblrd		*+
  2006  0008F6  FFFF               	dw	65535	; errata NOP
  2007  0008F8  CFF5 F098          	movff	tablat,_osc1_period
  2008  0008FC  000A               	tblrd		*-
  2009  0008FE  FFFF               	dw	65535	; errata NOP
  2010  000900  CFF5 F099          	movff	tablat,_osc1_period+1
  2011                           
  2012                           ;clock.c: 1706: osc2_period = freqs[33];
  2013  000904  0EA1               	movlw	low (_freqs+66)
  2014  000906  6EF6               	movwf	tblptrl,c
  2015  000908  0EB9               	movlw	high (_freqs+66)
  2016  00090A  6EF7               	movwf	tblptrh,c
  2017  00090C                     	if	0	;tblptru may be non-zero
  2018  00090C                     	endif
  2019  00090C                     	if	0	;tblptru may be non-zero
  2020  00090C                     	endif
  2021  00090C  0009               	tblrd		*+
  2022  00090E  FFFF               	dw	65535	; errata NOP
  2023  000910  CFF5 F096          	movff	tablat,_osc2_period
  2024  000914  000A               	tblrd		*-
  2025  000916  FFFF               	dw	65535	; errata NOP
  2026  000918  CFF5 F097          	movff	tablat,_osc2_period+1
  2027                           
  2028                           ;clock.c: 1707: osc3_period = freqs[36];
  2029  00091C  0EA7               	movlw	low (_freqs+72)
  2030  00091E  6EF6               	movwf	tblptrl,c
  2031  000920  0EB9               	movlw	high (_freqs+72)
  2032  000922  6EF7               	movwf	tblptrh,c
  2033  000924                     	if	0	;tblptru may be non-zero
  2034  000924                     	endif
  2035  000924                     	if	0	;tblptru may be non-zero
  2036  000924                     	endif
  2037  000924  0009               	tblrd		*+
  2038  000926  FFFF               	dw	65535	; errata NOP
  2039  000928  CFF5 F094          	movff	tablat,_osc3_period
  2040  00092C  000A               	tblrd		*-
  2041  00092E  FFFF               	dw	65535	; errata NOP
  2042  000930  CFF5 F095          	movff	tablat,_osc3_period+1
  2043                           
  2044                           ;clock.c: 1708: osc1_volume = (0xff / 3) / 3;
  2045  000934  0E1C               	movlw	28
  2046  000936  0100               	movlb	0	; () banked
  2047  000938  6F9C               	movwf	_osc1_volume& (0+255),b
  2048                           
  2049                           ; BSR set to: 0
  2050                           ;clock.c: 1709: osc2_volume = (0xff / 3) / 3;
  2051  00093A  0E1C               	movlw	28
  2052  00093C  0100               	movlb	0	; () banked
  2053  00093E  6F9B               	movwf	_osc2_volume& (0+255),b
  2054                           
  2055                           ; BSR set to: 0
  2056                           ;clock.c: 1710: osc3_volume = (0xff / 3) / 3;
  2057  000940  0E1C               	movlw	28
  2058  000942  0100               	movlb	0	; () banked
  2059  000944  6F9A               	movwf	_osc3_volume& (0+255),b
  2060                           
  2061                           ; BSR set to: 0
  2062                           ;clock.c: 1711: T2CON = 0x1c;
  2063  000946  0E1C               	movlw	28
  2064  000948  6ECA               	movwf	4042,c	;volatile
  2065                           
  2066                           ; BSR set to: 0
  2067                           ;clock.c: 1712: PR2 = 0xff;
  2068  00094A  68CB               	setf	4043,c	;volatile
  2069                           
  2070                           ; BSR set to: 0
  2071                           ;clock.c: 1713: CCP1CON = 0x0c;
  2072  00094C  0E0C               	movlw	12
  2073  00094E  6EBD               	movwf	4029,c	;volatile
  2074                           
  2075                           ; BSR set to: 0
  2076                           ;clock.c: 1714: CCPR1L = 0x00;
  2077  000950  0E00               	movlw	0
  2078  000952  6EBE               	movwf	4030,c	;volatile
  2079                           
  2080                           ; BSR set to: 0
  2081                           ;clock.c: 1715: TRISCbits.TRISC2 = 0;
  2082  000954  9494               	bcf	3988,2,c	;volatile
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;clock.c: 1716: PIE1bits.TMR2IE = 1;
  2086  000956  829D               	bsf	3997,1,c	;volatile
  2087                           
  2088                           ; BSR set to: 0
  2089                           ;clock.c: 1721: TRISGbits.TRISG0 = 0;
  2090  000958  9098               	bcf	3992,0,c	;volatile
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;clock.c: 1722: TRISGbits.TRISG1 = 0;
  2094  00095A  9298               	bcf	3992,1,c	;volatile
  2095                           
  2096                           ; BSR set to: 0
  2097                           ;clock.c: 1723: TRISFbits.TRISF0 = 0;
  2098  00095C  9097               	bcf	3991,0,c	;volatile
  2099                           
  2100                           ; BSR set to: 0
  2101                           ;clock.c: 1724: TRISFbits.TRISF1 = 0;
  2102  00095E  9297               	bcf	3991,1,c	;volatile
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;clock.c: 1725: TRISFbits.TRISF2 = 0;
  2106  000960  9497               	bcf	3991,2,c	;volatile
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;clock.c: 1726: TRISFbits.TRISF3 = 0;
  2110  000962  9697               	bcf	3991,3,c	;volatile
  2111                           
  2112                           ; BSR set to: 0
  2113                           ;clock.c: 1727: TRISFbits.TRISF4 = 0;
  2114  000964  9897               	bcf	3991,4,c	;volatile
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;clock.c: 1728: TRISFbits.TRISF5 = 0;
  2118  000966  9A97               	bcf	3991,5,c	;volatile
  2119                           
  2120                           ; BSR set to: 0
  2121                           ;clock.c: 1729: TRISFbits.TRISF6 = 0;
  2122  000968  9C97               	bcf	3991,6,c	;volatile
  2123                           
  2124                           ; BSR set to: 0
  2125                           ;clock.c: 1730: TRISE = 0;
  2126  00096A  0E00               	movlw	0
  2127  00096C  6E96               	movwf	3990,c	;volatile
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;clock.c: 1731: TRISCbits.TRISC0 = 0;
  2131  00096E  9094               	bcf	3988,0,c	;volatile
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;clock.c: 1732: TRISCbits.TRISC1 = 0;
  2135  000970  9294               	bcf	3988,1,c	;volatile
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;clock.c: 1733: TRISCbits.TRISC3 = 0;
  2139  000972  9694               	bcf	3988,3,c	;volatile
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;clock.c: 1734: TRISCbits.TRISC4 = 0;
  2143  000974  9894               	bcf	3988,4,c	;volatile
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;clock.c: 1735: TRISCbits.TRISC5 = 0;
  2147  000976  9A94               	bcf	3988,5,c	;volatile
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;clock.c: 1736: TRISAbits.TRISA0 = 0;
  2151  000978  9092               	bcf	3986,0,c	;volatile
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;clock.c: 1737: TRISAbits.TRISA1 = 0;
  2155  00097A  9292               	bcf	3986,1,c	;volatile
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;clock.c: 1738: TRISAbits.TRISA2 = 0;
  2159  00097C  9492               	bcf	3986,2,c	;volatile
  2160                           
  2161                           ; BSR set to: 0
  2162                           ;clock.c: 1739: TRISAbits.TRISA3 = 0;
  2163  00097E  9692               	bcf	3986,3,c	;volatile
  2164                           
  2165                           ; BSR set to: 0
  2166                           ;clock.c: 1740: TRISAbits.TRISA5 = 0;
  2167  000980  9A92               	bcf	3986,5,c	;volatile
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;clock.c: 1742: led_mask0 = 0x1;
  2171  000982  0E01               	movlw	1
  2172  000984  6E4B               	movwf	_led_mask0,c
  2173                           
  2174                           ; BSR set to: 0
  2175                           ;clock.c: 1743: draw_time();
  2176  000986  EC95  F006         	call	_draw_time	;wreg free
  2177                           
  2178                           ;clock.c: 1748: INTCONbits.PEIE = 1;
  2179  00098A  8CF2               	bsf	intcon,6,c	;volatile
  2180                           
  2181                           ;clock.c: 1749: INTCONbits.GIE = 1;
  2182  00098C  8EF2               	bsf	intcon,7,c	;volatile
  2183                           
  2184                           ;clock.c: 1752: uint16_t i;
  2185                           ;clock.c: 1753: for(i = 0; i < 32768; i++)
  2186  00098E  0E00               	movlw	0
  2187  000990  0100               	movlb	0	; () banked
  2188  000992  6F92               	movwf	(main@i+1)& (0+255),b
  2189  000994  0E00               	movlw	0
  2190  000996  6F91               	movwf	main@i& (0+255),b
  2191  000998                     l4267:
  2192  000998  FFFF               	dw	65535	; assembler added errata NOP
  2193                           
  2194                           ; BSR set to: 0
  2195  00099A  0E80               	movlw	128
  2196  00099C  0100               	movlb	0	; () banked
  2197  00099E  5D92               	subwf	(main@i+1)& (0+255),w,b
  2198  0009A0  B0D8               	btfsc	status,0,c
  2199  0009A2  D005               	goto	l4275
  2200                           
  2201                           ; BSR set to: 0
  2202                           
  2203                           ; BSR set to: 0
  2204  0009A4  0004               	clrwdt		;# 
  2205  0009A6  0100               	movlb	0	; () banked
  2206  0009A8  4B91               	infsnz	main@i& (0+255),f,b
  2207  0009AA  2B92               	incf	(main@i+1)& (0+255),f,b
  2208  0009AC  D7F5               	goto	l4267
  2209  0009AE                     l4275:
  2210  0009AE  FFFF               	dw	65535	; assembler added errata NOP
  2211                           
  2212                           ; BSR set to: 0
  2213                           ;clock.c: 1756: }
  2214                           ;clock.c: 1759: print_text("Welcome to Heroineclock 2\n");
  2215  0009B0  0EC5               	movlw	low STR_3
  2216  0009B2  6E15               	movwf	print_text@s,c
  2217  0009B4  0EBF               	movlw	high STR_3
  2218  0009B6  6E16               	movwf	print_text@s+1,c
  2219  0009B8  EC7F  F00C         	call	_print_text	;wreg free
  2220                           
  2221                           ;clock.c: 1775: print_text("\n");
  2222  0009BC  0EDE               	movlw	low (STR_3+25)
  2223  0009BE  6E15               	movwf	print_text@s,c
  2224  0009C0  0EBF               	movlw	high (STR_3+25)
  2225  0009C2  6E16               	movwf	print_text@s+1,c
  2226  0009C4  EC7F  F00C         	call	_print_text	;wreg free
  2227  0009C8                     l522:
  2228  0009C8  FFFF               	dw	65535	; assembler added errata NOP
  2229  0009CA  0004               	clrwdt		;# 
  2230                           
  2231                           ;clock.c: 1787: uint16_t test_time = TMR0L;
  2232  0009CC  CFD6 F08F          	movff	4054,main@test_time	;volatile
  2233  0009D0  0100               	movlb	0	; () banked
  2234  0009D2  6B90               	clrf	(main@test_time+1)& (0+255),b
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;clock.c: 1788: test_time |= ((uint16_t)TMR0H) << 8;
  2238  0009D4  50D7               	movf	4055,w,c	;volatile
  2239  0009D6  6E2D               	movwf	(??_main+1)& (0+255),c
  2240  0009D8  6A2C               	clrf	??_main& (0+255),c
  2241  0009DA  502C               	movf	??_main,w,c
  2242  0009DC  0100               	movlb	0	; () banked
  2243  0009DE  138F               	iorwf	main@test_time& (0+255),f,b
  2244  0009E0  502D               	movf	??_main+1,w,c
  2245  0009E2  0100               	movlb	0	; () banked
  2246  0009E4  1390               	iorwf	(main@test_time+1)& (0+255),f,b
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;clock.c: 1790: if(test_time > 16000 &&
  2250                           ;clock.c: 1791: !first_edge)
  2251  0009E6  0E81               	movlw	129
  2252  0009E8  0100               	movlb	0	; () banked
  2253  0009EA  5D8F               	subwf	main@test_time& (0+255),w,b
  2254  0009EC  0E3E               	movlw	62
  2255  0009EE  0100               	movlb	0	; () banked
  2256  0009F0  5990               	subwfb	(main@test_time+1)& (0+255),w,b
  2257  0009F2  A0D8               	btfss	status,0,c
  2258  0009F4  D02F               	goto	l523
  2259                           
  2260                           ; BSR set to: 0
  2261  0009F6  5046               	movf	_first_edge,w,c
  2262  0009F8  A4D8               	btfss	status,2,c
  2263  0009FA  D02C               	goto	l523
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;clock.c: 1792: {
  2267                           ;clock.c: 1793: print_text("IR timed out\n");
  2268  0009FC  0EE0               	movlw	low STR_5
  2269  0009FE  6E15               	movwf	print_text@s,c
  2270  000A00  0EBF               	movlw	high STR_5
  2271  000A02  6E16               	movwf	print_text@s+1,c
  2272  000A04  EC7F  F00C         	call	_print_text	;wreg free
  2273                           
  2274                           ;clock.c: 1796: INTCONbits.GIE = 0;
  2275  000A08  9EF2               	bcf	intcon,7,c	;volatile
  2276                           
  2277                           ;clock.c: 1797: INTCON2bits.INTEDG3 = 0;
  2278  000A0A  96F1               	bcf	intcon2,3,c	;volatile
  2279                           
  2280                           ;clock.c: 1798: TMR0H = 0;
  2281  000A0C  0E00               	movlw	0
  2282  000A0E  6ED7               	movwf	4055,c	;volatile
  2283                           
  2284                           ;clock.c: 1799: TMR0L = 0;
  2285  000A10  0E00               	movlw	0
  2286  000A12  6ED6               	movwf	4054,c	;volatile
  2287                           
  2288                           ;clock.c: 1800: INTCONbits.GIE = 1;
  2289  000A14  8EF2               	bsf	intcon,7,c	;volatile
  2290                           
  2291                           ;clock.c: 1802: uint8_t i;
  2292                           ;clock.c: 1803: ir_size = 0;
  2293  000A16  0E00               	movlw	0
  2294  000A18  6E33               	movwf	_ir_size,c
  2295                           
  2296                           ;clock.c: 1804: for(i = 0; i < (sizeof(ir_codes) / sizeof(ir_code_t)); i++)
  2297  000A1A  0E00               	movlw	0
  2298  000A1C  0100               	movlb	0	; () banked
  2299  000A1E  6F93               	movwf	main@i_1023& (0+255),b
  2300  000A20                     l4301:
  2301  000A20  FFFF               	dw	65535	; assembler added errata NOP
  2302                           
  2303                           ; BSR set to: 0
  2304  000A22  0E07               	movlw	7
  2305  000A24  0100               	movlb	0	; () banked
  2306  000A26  6593               	cpfsgt	main@i_1023& (0+255),b
  2307  000A28  D001               	goto	l4305
  2308  000A2A  D00F               	goto	l4311
  2309  000A2C                     l4305:
  2310  000A2C  FFFF               	dw	65535	; assembler added errata NOP
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;clock.c: 1805: {
  2314                           ;clock.c: 1806: ir_code_failed[i] = 0;
  2315  000A2E  0100               	movlb	0	; () banked
  2316  000A30  5193               	movf	main@i_1023& (0+255),w,b
  2317  000A32  0D01               	mullw	1
  2318  000A34  0E60               	movlw	low _ir_code_failed
  2319  000A36  24F3               	addwf	prodl,w,c
  2320  000A38  6ED9               	movwf	fsr2l,c
  2321  000A3A  0E00               	movlw	high _ir_code_failed
  2322  000A3C  20F4               	addwfc	prodh,w,c
  2323  000A3E  6EDA               	movwf	fsr2h,c
  2324  000A40  0E00               	movlw	0
  2325  000A42  6EDF               	movwf	indf2,c
  2326                           
  2327                           ; BSR set to: 0
  2328  000A44  0100               	movlb	0	; () banked
  2329  000A46  2B93               	incf	main@i_1023& (0+255),f,b
  2330  000A48  D7EB               	goto	l4301
  2331  000A4A                     l4311:
  2332  000A4A  FFFF               	dw	65535	; assembler added errata NOP
  2333                           
  2334                           ; BSR set to: 0
  2335                           ;clock.c: 1807: }
  2336                           ;clock.c: 1808: first_edge = 1;
  2337  000A4C  0E01               	movlw	1
  2338  000A4E  6E46               	movwf	_first_edge,c
  2339                           
  2340                           ;clock.c: 1809: have_ir = 0;
  2341  000A50  0E00               	movlw	0
  2342  000A52  6E32               	movwf	_have_ir,c
  2343  000A54                     l523:
  2344  000A54  FFFF               	dw	65535	; assembler added errata NOP
  2345                           
  2346                           ; BSR set to: 0
  2347                           ;clock.c: 1810: }
  2348                           ;clock.c: 1812: if(got_ir_int)
  2349  000A56  5031               	movf	_got_ir_int,w,c	;volatile
  2350  000A58  B4D8               	btfsc	status,2,c
  2351  000A5A  D01F               	goto	l4325
  2352                           
  2353                           ; BSR set to: 0
  2354                           ;clock.c: 1813: {
  2355                           ;clock.c: 1814: got_ir_int = 0;
  2356  000A5C  0E00               	movlw	0
  2357  000A5E  6E31               	movwf	_got_ir_int,c	;volatile
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;clock.c: 1816: INTCON2bits.INTEDG3 = !INTCON2bits.INTEDG3;
  2361  000A60  B6F1               	btfsc	intcon2,3,c	;volatile
  2362  000A62  D003               	goto	u5930
  2363  000A64  6A2C               	clrf	??_main& (0+255),c
  2364  000A66  2A2C               	incf	??_main& (0+255),f,c
  2365  000A68  D002               	goto	u5948
  2366  000A6A                     u5930:
  2367  000A6A  FFFF               	dw	65535	; assembler added errata NOP
  2368  000A6C  6A2C               	clrf	??_main& (0+255),c
  2369  000A6E                     u5948:
  2370  000A6E  FFFF               	dw	65535	; assembler added errata NOP
  2371  000A70  462C               	rlncf	??_main,f,c
  2372  000A72  462C               	rlncf	??_main,f,c
  2373  000A74  462C               	rlncf	??_main,f,c
  2374  000A76  50F1               	movf	intcon2,w,c	;volatile
  2375  000A78  182C               	xorwf	??_main,w,c
  2376  000A7A  0BF7               	andlw	-9
  2377  000A7C  182C               	xorwf	??_main,w,c
  2378  000A7E  6EF1               	movwf	intcon2,c	;volatile
  2379                           
  2380                           ;clock.c: 1817: ir_time = ir_time2;
  2381  000A80  C068  F06A         	movff	_ir_time2,_ir_time	;volatile
  2382  000A84  C069  F06B         	movff	_ir_time2+1,_ir_time+1	;volatile
  2383                           
  2384                           ;clock.c: 1818: if(first_edge)
  2385  000A88  5046               	movf	_first_edge,w,c
  2386  000A8A  B4D8               	btfsc	status,2,c
  2387  000A8C  D003               	goto	l4323
  2388                           
  2389                           ;clock.c: 1819: {
  2390                           ;clock.c: 1820: first_edge = 0;
  2391  000A8E  0E00               	movlw	0
  2392  000A90  6E46               	movwf	_first_edge,c
  2393                           
  2394                           ;clock.c: 1821: }
  2395  000A92  D003               	goto	l4325
  2396  000A94                     l4323:
  2397  000A94  FFFF               	dw	65535	; assembler added errata NOP
  2398                           
  2399                           ;clock.c: 1822: else
  2400                           ;clock.c: 1823: {
  2401                           ;clock.c: 1824: handle_ir();
  2402  000A96  EC6F  F000         	call	_handle_ir	;wreg free
  2403  000A9A                     l4325:
  2404  000A9A  FFFF               	dw	65535	; assembler added errata NOP
  2405                           
  2406                           ;clock.c: 1825: }
  2407                           ;clock.c: 1826: }
  2408                           ;clock.c: 1833: if(PIR2bits.CCP2IF)
  2409  000A9C  A0A1               	btfss	4001,0,c	;volatile
  2410  000A9E  D02D               	goto	l4353
  2411                           
  2412                           ;clock.c: 1834: {
  2413                           ;clock.c: 1835: PIR2bits.CCP2IF = 0;
  2414  000AA0  90A1               	bcf	4001,0,c	;volatile
  2415                           
  2416                           ;clock.c: 1838: crystal_time++;
  2417  000AA2  0100               	movlb	0	; () banked
  2418  000AA4  4B6C               	infsnz	_crystal_time& (0+255),f,b
  2419  000AA6  2B6D               	incf	(_crystal_time+1)& (0+255),f,b
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;clock.c: 1840: if(crystal_time == 10300)
  2423  000AA8  0E3C               	movlw	60
  2424  000AAA  0100               	movlb	0	; () banked
  2425  000AAC  196C               	xorwf	_crystal_time& (0+255),w,b
  2426  000AAE  E10C               	bnz	l4337
  2427  000AB0  0E28               	movlw	40
  2428  000AB2  0100               	movlb	0	; () banked
  2429  000AB4  196D               	xorwf	(_crystal_time+1)& (0+255),w,b
  2430  000AB6  A4D8               	btfss	status,2,c
  2431  000AB8  D007               	goto	l4337
  2432                           
  2433                           ; BSR set to: 0
  2434                           ;clock.c: 1841: {
  2435                           ;clock.c: 1842: crystal_time = 0;
  2436  000ABA  0E00               	movlw	0
  2437  000ABC  0100               	movlb	0	; () banked
  2438  000ABE  6F6D               	movwf	(_crystal_time+1)& (0+255),b
  2439  000AC0  0E00               	movlw	0
  2440  000AC2  6F6C               	movwf	_crystal_time& (0+255),b
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;clock.c: 1843: handle_time();
  2444  000AC4  EC41  F00A         	call	_handle_time	;wreg free
  2445  000AC8                     l4337:
  2446  000AC8  FFFF               	dw	65535	; assembler added errata NOP
  2447                           
  2448                           ;clock.c: 1844: }
  2449                           ;clock.c: 1847: handle_time();
  2450  000ACA  EC41  F00A         	call	_handle_time	;wreg free
  2451                           
  2452                           ;clock.c: 1848: if(repeating)
  2453  000ACE  503B               	movf	_repeating,w,c
  2454  000AD0  A4D8               	btfss	status,2,c
  2455                           
  2456                           ;clock.c: 1849: {
  2457                           ;clock.c: 1850: handle_repeat();
  2458  000AD2  EC58  F00B         	call	_handle_repeat	;wreg free
  2459                           
  2460                           ;clock.c: 1851: }
  2461                           ;clock.c: 1854: if(alarm &&
  2462                           ;clock.c: 1855: !alarm_sounding &&
  2463                           ;clock.c: 1856: hours == alarm_hours &&
  2464                           ;clock.c: 1857: minutes == alarm_minutes &&
  2465                           ;clock.c: 1858: seconds == 0)
  2466  000AD6  503D               	movf	_alarm,w,c
  2467  000AD8  B4D8               	btfsc	status,2,c
  2468  000ADA  D00F               	goto	l4353
  2469  000ADC  5047               	movf	_alarm_sounding,w,c
  2470  000ADE  A4D8               	btfss	status,2,c
  2471  000AE0  D00C               	goto	l4353
  2472  000AE2  5048               	movf	_alarm_hours,w,c
  2473  000AE4  184A               	xorwf	_hours,w,c
  2474  000AE6  A4D8               	btfss	status,2,c
  2475  000AE8  D008               	goto	l4353
  2476  000AEA  5039               	movf	_alarm_minutes,w,c
  2477  000AEC  183F               	xorwf	_minutes,w,c
  2478  000AEE  A4D8               	btfss	status,2,c
  2479  000AF0  D004               	goto	l4353
  2480  000AF2  5040               	movf	_seconds,w,c
  2481  000AF4  B4D8               	btfsc	status,2,c
  2482                           
  2483                           ;clock.c: 1859: {
  2484                           ;clock.c: 1860: start_alarm();
  2485  000AF6  EC83  F00D         	call	_start_alarm	;wreg free
  2486  000AFA                     l4353:
  2487  000AFA  FFFF               	dw	65535	; assembler added errata NOP
  2488                           
  2489                           ;clock.c: 1861: }
  2490                           ;clock.c: 1863: }
  2491                           ;clock.c: 1877: if(uart_size > 0 && PIR1bits.TXIF)
  2492  000AFC  0100               	movlb	0	; () banked
  2493  000AFE  517C               	movf	_uart_size& (0+255),w,b
  2494  000B00  0100               	movlb	0	; () banked
  2495  000B02  117D               	iorwf	(_uart_size+1)& (0+255),w,b
  2496  000B04  A4D8               	btfss	status,2,c
  2497                           
  2498                           ; BSR set to: 0
  2499  000B06  A89E               	btfss	3998,4,c	;volatile
  2500  000B08  D75F               	goto	l522
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;clock.c: 1878: {
  2504                           ;clock.c: 1879: PIR1bits.TXIF = 0;
  2505  000B0A  989E               	bcf	3998,4,c	;volatile
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;clock.c: 1880: TXREG = uart_buffer[uart_position2++];
  2509  000B0C  0E9D               	movlw	low _uart_buffer
  2510  000B0E  0100               	movlb	0	; () banked
  2511  000B10  2578               	addwf	_uart_position2& (0+255),w,b
  2512  000B12  6ED9               	movwf	fsr2l,c
  2513  000B14  0E00               	movlw	high _uart_buffer
  2514  000B16  0100               	movlb	0	; () banked
  2515  000B18  2179               	addwfc	(_uart_position2+1)& (0+255),w,b
  2516  000B1A  6EDA               	movwf	fsr2h,c
  2517  000B1C  50DF               	movf	indf2,w,c
  2518  000B1E  6EAD               	movwf	4013,c	;volatile
  2519                           
  2520                           ; BSR set to: 0
  2521  000B20  0100               	movlb	0	; () banked
  2522  000B22  4B78               	infsnz	_uart_position2& (0+255),f,b
  2523  000B24  2B79               	incf	(_uart_position2+1)& (0+255),f,b
  2524                           
  2525                           ; BSR set to: 0
  2526                           ;clock.c: 1881: uart_size--;
  2527  000B26  0100               	movlb	0	; () banked
  2528  000B28  077C               	decf	_uart_size& (0+255),f,b
  2529  000B2A  A0D8               	btfss	status,0,c
  2530  000B2C  077D               	decf	(_uart_size+1)& (0+255),f,b
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;clock.c: 1882: if(uart_position2 >= 1024)
  2534  000B2E  0E04               	movlw	4
  2535  000B30  0100               	movlb	0	; () banked
  2536  000B32  5D79               	subwf	(_uart_position2+1)& (0+255),w,b
  2537  000B34  A0D8               	btfss	status,0,c
  2538  000B36  D748               	goto	l522
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;clock.c: 1883: {
  2542                           ;clock.c: 1884: uart_position2 = 0;
  2543  000B38  0E00               	movlw	0
  2544  000B3A  0100               	movlb	0	; () banked
  2545  000B3C  6F79               	movwf	(_uart_position2+1)& (0+255),b
  2546  000B3E  0E00               	movlw	0
  2547  000B40  6F78               	movwf	_uart_position2& (0+255),b
  2548                           
  2549                           ; BSR set to: 0
  2550                           
  2551                           ; BSR set to: 0
  2552                           
  2553                           ; BSR set to: 0
  2554  000B42  D742               	goto	l522
  2555  000B44                     __end_of_main:
  2556                           	opt stack 0
  2557                           tblptru	equ	0xFF8
  2558                           tblptrh	equ	0xFF7
  2559                           tblptrl	equ	0xFF6
  2560                           tablat	equ	0xFF5
  2561                           prodh	equ	0xFF4
  2562                           prodl	equ	0xFF3
  2563                           intcon	equ	0xFF2
  2564                           intcon2	equ	0xFF1
  2565                           intcon3	equ	0xFF0
  2566                           postinc0	equ	0xFEE
  2567                           wreg	equ	0xFE8
  2568                           postdec1	equ	0xFE5
  2569                           fsr1h	equ	0xFE2
  2570                           fsr1l	equ	0xFE1
  2571                           indf2	equ	0xFDF
  2572                           fsr2h	equ	0xFDA
  2573                           fsr2l	equ	0xFD9
  2574                           status	equ	0xFD8
  2575                           
  2576 ;; *************** function _start_alarm *****************
  2577 ;; Defined at:
  2578 ;;		line 1602 in file "clock.c"
  2579 ;; Parameters:    Size  Location     Type
  2580 ;;		None
  2581 ;; Auto vars:     Size  Location     Type
  2582 ;;		None
  2583 ;; Return value:  Size  Location     Type
  2584 ;;                  1    wreg      void 
  2585 ;; Registers used:
  2586 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2587 ;; Tracked objects:
  2588 ;;		On entry : 0/0
  2589 ;;		On exit  : 0/0
  2590 ;;		Unchanged: 0/0
  2591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2596 ;;Total ram usage:        0 bytes
  2597 ;; Hardware stack levels used:    1
  2598 ;; Hardware stack levels required when called:    4
  2599 ;; This function calls:
  2600 ;;		_play_song
  2601 ;; This function is called by:
  2602 ;;		_main
  2603 ;; This function uses a non-reentrant model
  2604 ;;
  2605                           
  2606                           	psect	text1
  2607  001B06                     __ptext1:
  2608                           	opt stack 0
  2609  001B06                     _start_alarm:
  2610                           	opt stack 0
  2611  001B06  FFFF               	dw	65535	; assembler added errata NOP
  2612                           
  2613                           ;clock.c: 1604: alarm_sounding = 1;
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;incstack = 0
  2617  001B08  0E01               	movlw	1
  2618  001B0A  6E47               	movwf	_alarm_sounding,c
  2619                           
  2620                           ;clock.c: 1605: play_song(alarm_song);
  2621  001B0C  0E29               	movlw	low _alarm_song
  2622  001B0E  6E14               	movwf	play_song@ptr,c
  2623  001B10  0EBE               	movlw	high _alarm_song
  2624  001B12  6E15               	movwf	play_song@ptr+1,c
  2625  001B14  EC2C  F00D         	call	_play_song	;wreg free
  2626  001B18  0012               	return		;funcret
  2627  001B1A  FFFF               	dw	65535	; errata NOP
  2628  001B1C                     __end_of_start_alarm:
  2629                           	opt stack 0
  2630                           tblptru	equ	0xFF8
  2631                           tblptrh	equ	0xFF7
  2632                           tblptrl	equ	0xFF6
  2633                           tablat	equ	0xFF5
  2634                           prodh	equ	0xFF4
  2635                           prodl	equ	0xFF3
  2636                           intcon	equ	0xFF2
  2637                           intcon2	equ	0xFF1
  2638                           intcon3	equ	0xFF0
  2639                           postinc0	equ	0xFEE
  2640                           wreg	equ	0xFE8
  2641                           postdec1	equ	0xFE5
  2642                           fsr1h	equ	0xFE2
  2643                           fsr1l	equ	0xFE1
  2644                           indf2	equ	0xFDF
  2645                           fsr2h	equ	0xFDA
  2646                           fsr2l	equ	0xFD9
  2647                           status	equ	0xFD8
  2648                           
  2649 ;; *************** function _handle_time *****************
  2650 ;; Defined at:
  2651 ;;		line 1519 in file "clock.c"
  2652 ;; Parameters:    Size  Location     Type
  2653 ;;		None
  2654 ;; Auto vars:     Size  Location     Type
  2655 ;;		None
  2656 ;; Return value:  Size  Location     Type
  2657 ;;                  1    wreg      void 
  2658 ;; Registers used:
  2659 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2660 ;; Tracked objects:
  2661 ;;		On entry : 0/0
  2662 ;;		On exit  : 0/0
  2663 ;;		Unchanged: 0/0
  2664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2669 ;;Total ram usage:        0 bytes
  2670 ;; Hardware stack levels used:    1
  2671 ;; Hardware stack levels required when called:    4
  2672 ;; This function calls:
  2673 ;;		_draw_time
  2674 ;;		_handle_song
  2675 ;; This function is called by:
  2676 ;;		_main
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680                           	psect	text2
  2681  001482                     __ptext2:
  2682                           	opt stack 0
  2683  001482                     _handle_time:
  2684                           	opt stack 0
  2685  001482  FFFF               	dw	65535	; assembler added errata NOP
  2686                           
  2687                           ;clock.c: 1524: time_hz++;
  2688                           
  2689                           ;incstack = 0
  2690  001484  2A41               	incf	_time_hz,f,c
  2691                           
  2692                           ;clock.c: 1525: if(time_hz == 250)
  2693  001486  0EFA               	movlw	250
  2694  001488  1841               	xorwf	_time_hz,w,c
  2695  00148A  A4D8               	btfss	status,2,c
  2696  00148C  D029               	goto	l491
  2697                           
  2698                           ;clock.c: 1526: {
  2699                           ;clock.c: 1527: time_hz = 0;
  2700  00148E  0E00               	movlw	0
  2701  001490  6E41               	movwf	_time_hz,c
  2702                           
  2703                           ;clock.c: 1528: seconds++;
  2704  001492  2A40               	incf	_seconds,f,c
  2705                           
  2706                           ;clock.c: 1529: if(seconds == 60)
  2707  001494  0E3C               	movlw	60
  2708  001496  1840               	xorwf	_seconds,w,c
  2709  001498  A4D8               	btfss	status,2,c
  2710  00149A  D01E               	goto	l492
  2711                           
  2712                           ;clock.c: 1530: {
  2713                           ;clock.c: 1531: seconds = 0;
  2714  00149C  0E00               	movlw	0
  2715  00149E  6E40               	movwf	_seconds,c
  2716                           
  2717                           ;clock.c: 1532: minutes++;
  2718  0014A0  2A3F               	incf	_minutes,f,c
  2719                           
  2720                           ;clock.c: 1533: if(minutes == 60)
  2721  0014A2  0E3C               	movlw	60
  2722  0014A4  183F               	xorwf	_minutes,w,c
  2723  0014A6  A4D8               	btfss	status,2,c
  2724  0014A8  D017               	goto	l492
  2725                           
  2726                           ;clock.c: 1534: {
  2727                           ;clock.c: 1535: minutes = 0;
  2728  0014AA  0E00               	movlw	0
  2729  0014AC  6E3F               	movwf	_minutes,c
  2730                           
  2731                           ;clock.c: 1536: hours++;
  2732  0014AE  2A4A               	incf	_hours,f,c
  2733                           
  2734                           ;clock.c: 1537: if(hours == 12)
  2735  0014B0  0E0C               	movlw	12
  2736  0014B2  184A               	xorwf	_hours,w,c
  2737  0014B4  A4D8               	btfss	status,2,c
  2738  0014B6  D00A               	goto	l4141
  2739                           
  2740                           ;clock.c: 1538: {
  2741                           ;clock.c: 1539: ampm = !ampm;
  2742  0014B8  503E               	movf	_ampm,w,c
  2743  0014BA  A4D8               	btfss	status,2,c
  2744  0014BC  D002               	goto	u5750
  2745  0014BE  0E01               	movlw	1
  2746  0014C0  D002               	goto	u5760
  2747  0014C2                     u5750:
  2748  0014C2  FFFF               	dw	65535	; assembler added errata NOP
  2749  0014C4  0E00               	movlw	0
  2750  0014C6                     u5760:
  2751  0014C6  FFFF               	dw	65535	; assembler added errata NOP
  2752  0014C8  6E3E               	movwf	_ampm,c
  2753                           
  2754                           ;clock.c: 1540: }
  2755  0014CA  D006               	goto	l492
  2756  0014CC                     l4141:
  2757  0014CC  FFFF               	dw	65535	; assembler added errata NOP
  2758                           
  2759                           ;clock.c: 1541: else
  2760                           ;clock.c: 1542: if(hours >= 13)
  2761  0014CE  0E0C               	movlw	12
  2762  0014D0  644A               	cpfsgt	_hours,c
  2763  0014D2  D002               	goto	l492
  2764                           
  2765                           ;clock.c: 1543: {
  2766                           ;clock.c: 1544: hours = 1;
  2767  0014D4  0E01               	movlw	1
  2768  0014D6  6E4A               	movwf	_hours,c
  2769  0014D8                     l492:
  2770  0014D8  FFFF               	dw	65535	; assembler added errata NOP
  2771                           
  2772                           ;clock.c: 1545: }
  2773                           ;clock.c: 1546: }
  2774                           ;clock.c: 1547: }
  2775                           ;clock.c: 1549: if(alarm_sounding)
  2776  0014DA  5047               	movf	_alarm_sounding,w,c
  2777  0014DC  A4D8               	btfss	status,2,c
  2778                           
  2779                           ;clock.c: 1550: {
  2780                           ;clock.c: 1551: alarm_time++;
  2781  0014DE  2A37               	incf	_alarm_time,f,c
  2782  0014E0                     l491:
  2783  0014E0  FFFF               	dw	65535	; assembler added errata NOP
  2784                           
  2785                           ;clock.c: 1552: }
  2786                           ;clock.c: 1554: }
  2787                           ;clock.c: 1556: display_flash++;
  2788  0014E2  2A42               	incf	_display_flash,f,c
  2789                           
  2790                           ;clock.c: 1557: if(display_flash == 250 / 2)
  2791  0014E4  0E7D               	movlw	125
  2792  0014E6  1842               	xorwf	_display_flash,w,c
  2793  0014E8  A4D8               	btfss	status,2,c
  2794  0014EA  D014               	goto	l4155
  2795                           
  2796                           ;clock.c: 1558: {
  2797                           ;clock.c: 1559: display_flash = 0;
  2798  0014EC  0E00               	movlw	0
  2799  0014EE  6E42               	movwf	_display_flash,c
  2800                           
  2801                           ;clock.c: 1560: colon = !colon;
  2802  0014F0  5049               	movf	_colon,w,c
  2803  0014F2  A4D8               	btfss	status,2,c
  2804  0014F4  D002               	goto	u5800
  2805  0014F6  0E01               	movlw	1
  2806  0014F8  D002               	goto	u5810
  2807  0014FA                     u5800:
  2808  0014FA  FFFF               	dw	65535	; assembler added errata NOP
  2809  0014FC  0E00               	movlw	0
  2810  0014FE                     u5810:
  2811  0014FE  FFFF               	dw	65535	; assembler added errata NOP
  2812  001500  6E49               	movwf	_colon,c
  2813                           
  2814                           ;clock.c: 1561: if(mode == 0 || mode == 1)
  2815  001502  503C               	movf	_mode,w,c
  2816  001504  B4D8               	btfsc	status,2,c
  2817  001506  D003               	goto	l4153
  2818  001508  043C               	decf	_mode,w,c
  2819  00150A  A4D8               	btfss	status,2,c
  2820  00150C  D003               	bra	l4155
  2821  00150E                     l4153:
  2822  00150E  FFFF               	dw	65535	; assembler added errata NOP
  2823                           
  2824                           ;clock.c: 1562: {
  2825                           ;clock.c: 1563: draw_time();
  2826  001510  EC95  F006         	call	_draw_time	;wreg free
  2827  001514                     l4155:
  2828  001514  FFFF               	dw	65535	; assembler added errata NOP
  2829                           
  2830                           ;clock.c: 1564: }
  2831                           ;clock.c: 1565: }
  2832                           ;clock.c: 1589: if(song_ptr)
  2833  001516  502E               	movf	_song_ptr,w,c
  2834  001518  102F               	iorwf	_song_ptr+1,w,c
  2835  00151A  1030               	iorwf	_song_ptr+2,w,c
  2836  00151C  B4D8               	btfsc	status,2,c
  2837  00151E  D009               	goto	l504
  2838                           
  2839                           ;clock.c: 1590: {
  2840                           ;clock.c: 1591: song_counter++;
  2841  001520  2A44               	incf	_song_counter,f,c
  2842                           
  2843                           ;clock.c: 1592: if(song_counter >= 10)
  2844  001522  0E09               	movlw	9
  2845  001524  6444               	cpfsgt	_song_counter,c
  2846  001526  D005               	goto	l504
  2847                           
  2848                           ;clock.c: 1593: {
  2849                           ;clock.c: 1594: song_counter = 0;
  2850  001528  0E00               	movlw	0
  2851  00152A  6E44               	movwf	_song_counter,c
  2852                           
  2853                           ;clock.c: 1595: song_delay++;
  2854  00152C  2A43               	incf	_song_delay,f,c
  2855                           
  2856                           ;clock.c: 1596: handle_song();
  2857  00152E  ECA2  F005         	call	_handle_song	;wreg free
  2858  001532                     l504:
  2859  001532  FFFF               	dw	65535	; assembler added errata NOP
  2860  001534  0012               	return		;funcret
  2861  001536  FFFF               	dw	65535	; errata NOP
  2862  001538                     __end_of_handle_time:
  2863                           	opt stack 0
  2864                           tblptru	equ	0xFF8
  2865                           tblptrh	equ	0xFF7
  2866                           tblptrl	equ	0xFF6
  2867                           tablat	equ	0xFF5
  2868                           prodh	equ	0xFF4
  2869                           prodl	equ	0xFF3
  2870                           intcon	equ	0xFF2
  2871                           intcon2	equ	0xFF1
  2872                           intcon3	equ	0xFF0
  2873                           postinc0	equ	0xFEE
  2874                           wreg	equ	0xFE8
  2875                           postdec1	equ	0xFE5
  2876                           fsr1h	equ	0xFE2
  2877                           fsr1l	equ	0xFE1
  2878                           indf2	equ	0xFDF
  2879                           fsr2h	equ	0xFDA
  2880                           fsr2l	equ	0xFD9
  2881                           status	equ	0xFD8
  2882                           
  2883 ;; *************** function _handle_repeat *****************
  2884 ;; Defined at:
  2885 ;;		line 1124 in file "clock.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;		None
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;		None
  2890 ;; Return value:  Size  Location     Type
  2891 ;;                  1    wreg      void 
  2892 ;; Registers used:
  2893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2894 ;; Tracked objects:
  2895 ;;		On entry : 0/0
  2896 ;;		On exit  : 0/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2903 ;;Total ram usage:        0 bytes
  2904 ;; Hardware stack levels used:    1
  2905 ;; Hardware stack levels required when called:    6
  2906 ;; This function calls:
  2907 ;;		_do_hour_down
  2908 ;;		_do_hour_up
  2909 ;;		_do_minute_down
  2910 ;;		_do_minute_up
  2911 ;; This function is called by:
  2912 ;;		_main
  2913 ;; This function uses a non-reentrant model
  2914 ;;
  2915                           
  2916                           	psect	text3
  2917  0016B0                     __ptext3:
  2918                           	opt stack 0
  2919  0016B0                     _handle_repeat:
  2920                           	opt stack 0
  2921  0016B0  FFFF               	dw	65535	; assembler added errata NOP
  2922                           
  2923                           ;clock.c: 1126: if(!have_ir)
  2924                           
  2925                           ;incstack = 0
  2926  0016B2  5032               	movf	_have_ir,w,c
  2927  0016B4  A4D8               	btfss	status,2,c
  2928  0016B6  D005               	goto	l3917
  2929                           
  2930                           ;clock.c: 1127: {
  2931                           ;clock.c: 1128: repeating = 0;
  2932  0016B8  0E00               	movlw	0
  2933  0016BA  6E3B               	movwf	_repeating,c
  2934                           
  2935                           ;clock.c: 1129: repeat_counter = 0;
  2936  0016BC  0E00               	movlw	0
  2937  0016BE  6E3A               	movwf	_repeat_counter,c
  2938                           
  2939                           ;clock.c: 1130: }
  2940  0016C0  D027               	goto	l418
  2941  0016C2                     l3917:
  2942  0016C2  FFFF               	dw	65535	; assembler added errata NOP
  2943                           
  2944                           ;clock.c: 1131: else
  2945                           ;clock.c: 1132: {
  2946                           ;clock.c: 1133: repeat_counter--;
  2947  0016C4  063A               	decf	_repeat_counter,f,c
  2948                           
  2949                           ;clock.c: 1134: if(repeat_counter == 0)
  2950  0016C6  503A               	movf	_repeat_counter,w,c
  2951  0016C8  A4D8               	btfss	status,2,c
  2952  0016CA  D022               	goto	l418
  2953                           
  2954                           ;clock.c: 1135: {
  2955                           ;clock.c: 1136: repeat_counter = 250 / 4;
  2956  0016CC  0E3E               	movlw	62
  2957  0016CE  6E3A               	movwf	_repeat_counter,c
  2958                           
  2959                           ;clock.c: 1137: switch(ir_code)
  2960  0016D0  D010               	goto	l3933
  2961  0016D2                     l3923:
  2962  0016D2  FFFF               	dw	65535	; assembler added errata NOP
  2963                           
  2964                           ;clock.c: 1140: do_hour_up();
  2965  0016D4  ECE8  F00A         	call	_do_hour_up	;wreg free
  2966                           
  2967                           ;clock.c: 1141: break;
  2968  0016D8  D01B               	goto	l418
  2969  0016DA                     l3925:
  2970  0016DA  FFFF               	dw	65535	; assembler added errata NOP
  2971                           
  2972                           ;clock.c: 1144: do_hour_down();
  2973  0016DC  EC20  F00B         	call	_do_hour_down	;wreg free
  2974                           
  2975                           ;clock.c: 1145: break;
  2976  0016E0  D017               	goto	l418
  2977  0016E2                     l3927:
  2978  0016E2  FFFF               	dw	65535	; assembler added errata NOP
  2979                           
  2980                           ;clock.c: 1149: do_minute_up();
  2981  0016E4  EC3E  F00D         	call	_do_minute_up	;wreg free
  2982                           
  2983                           ;clock.c: 1150: break;
  2984  0016E8  D013               	goto	l418
  2985  0016EA                     l3929:
  2986  0016EA  FFFF               	dw	65535	; assembler added errata NOP
  2987                           
  2988                           ;clock.c: 1153: do_minute_down();
  2989  0016EC  EC4E  F00D         	call	_do_minute_down	;wreg free
  2990                           
  2991                           ;clock.c: 1155: }
  2992                           
  2993                           ;clock.c: 1154: break;
  2994  0016F0  D00F               	goto	l418
  2995  0016F2                     l3933:
  2996  0016F2  FFFF               	dw	65535	; assembler added errata NOP
  2997  0016F4  0100               	movlb	0	; () banked
  2998  0016F6  517F               	movf	_ir_code& (0+255),w,b
  2999                           
  3000                           ; Switch size 1, requested type "space"
  3001                           ; Number of cases is 4, Range of values is 1 to 4
  3002                           ; switch strategies available:
  3003                           ; Name         Instructions Cycles
  3004                           ; simple_byte           13     7 (average)
  3005                           ;	Chosen strategy is simple_byte
  3006  0016F8  0A01               	xorlw	1	; case 1
  3007  0016FA  B4D8               	btfsc	status,2,c
  3008  0016FC  D7EA               	goto	l3923
  3009  0016FE  0A03               	xorlw	3	; case 2
  3010  001700  B4D8               	btfsc	status,2,c
  3011  001702  D7EB               	goto	l3925
  3012  001704  0A01               	xorlw	1	; case 3
  3013  001706  B4D8               	btfsc	status,2,c
  3014  001708  D7EC               	goto	l3927
  3015  00170A  0A07               	xorlw	7	; case 4
  3016  00170C  B4D8               	btfsc	status,2,c
  3017  00170E  D7ED               	goto	l3929
  3018  001710                     l418:
  3019  001710  FFFF               	dw	65535	; assembler added errata NOP
  3020  001712  0012               	return		;funcret
  3021  001714  FFFF               	dw	65535	; errata NOP
  3022  001716                     __end_of_handle_repeat:
  3023                           	opt stack 0
  3024                           tblptru	equ	0xFF8
  3025                           tblptrh	equ	0xFF7
  3026                           tblptrl	equ	0xFF6
  3027                           tablat	equ	0xFF5
  3028                           prodh	equ	0xFF4
  3029                           prodl	equ	0xFF3
  3030                           intcon	equ	0xFF2
  3031                           intcon2	equ	0xFF1
  3032                           intcon3	equ	0xFF0
  3033                           postinc0	equ	0xFEE
  3034                           wreg	equ	0xFE8
  3035                           postdec1	equ	0xFE5
  3036                           fsr1h	equ	0xFE2
  3037                           fsr1l	equ	0xFE1
  3038                           indf2	equ	0xFDF
  3039                           fsr2h	equ	0xFDA
  3040                           fsr2l	equ	0xFD9
  3041                           status	equ	0xFD8
  3042                           
  3043 ;; *************** function _handle_ir *****************
  3044 ;; Defined at:
  3045 ;;		line 1160 in file "clock.c"
  3046 ;; Parameters:    Size  Location     Type
  3047 ;;		None
  3048 ;; Auto vars:     Size  Location     Type
  3049 ;;  code            2   11[BANK0 ] PTR const struct .
  3050 ;;		 -> ir_codes(32), 
  3051 ;;  error           2    7[BANK0 ] int 
  3052 ;;  data            2    5[BANK0 ] PTR const int 
  3053 ;;		 -> number3_data(142), number2_data(142), number1_data(142), prev_track_data(142), 
  3054 ;;		 -> next_track_data(142), volume_dn_data(142), volume_up_data(142), power_data(142), 
  3055 ;;  code_size       1    1[BANK0 ] const unsigned char 
  3056 ;;  failed          1    0[BANK0 ] unsigned char 
  3057 ;;  i               1   10[BANK0 ] unsigned char 
  3058 ;;  ir_error        2    3[BANK0 ] unsigned int 
  3059 ;;  j               1   13[BANK0 ] unsigned char 
  3060 ;;  i               1    9[BANK0 ] unsigned char 
  3061 ;;  got_it          1    2[BANK0 ] unsigned char 
  3062 ;; Return value:  Size  Location     Type
  3063 ;;                  1    wreg      void 
  3064 ;; Registers used:
  3065 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3066 ;; Tracked objects:
  3067 ;;		On entry : 0/0
  3068 ;;		On exit  : 0/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3072 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3073 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3074 ;;      Totals:         6      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3075 ;;Total ram usage:       20 bytes
  3076 ;; Hardware stack levels used:    1
  3077 ;; Hardware stack levels required when called:    6
  3078 ;; This function calls:
  3079 ;;		_do_hour_down
  3080 ;;		_do_hour_up
  3081 ;;		_do_minute_down
  3082 ;;		_do_minute_up
  3083 ;;		_draw_alarm
  3084 ;;		_draw_test
  3085 ;;		_draw_time
  3086 ;;		_play_song
  3087 ;;		_print_byte
  3088 ;;		_print_number
  3089 ;;		_print_text
  3090 ;;		_stop_song
  3091 ;; This function is called by:
  3092 ;;		_main
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096                           	psect	text4
  3097  0000DE                     __ptext4:
  3098                           	opt stack 0
  3099  0000DE                     _handle_ir:
  3100                           	opt stack 0
  3101  0000DE  FFFF               	dw	65535	; assembler added errata NOP
  3102                           
  3103                           ;clock.c: 1167: uint16_t ir_error = 0;
  3104                           
  3105                           ;incstack = 0
  3106  0000E0  0E00               	movlw	0
  3107  0000E2  0100               	movlb	0	; () banked
  3108  0000E4  6F85               	movwf	(handle_ir@ir_error+1)& (0+255),b
  3109  0000E6  0E00               	movlw	0
  3110  0000E8  6F84               	movwf	handle_ir@ir_error& (0+255),b
  3111                           
  3112                           ;clock.c: 1170: uint8_t i, j;
  3113                           ;clock.c: 1172: uint8_t got_it = 0;
  3114  0000EA  0E00               	movlw	0
  3115  0000EC  0100               	movlb	0	; () banked
  3116  0000EE  6F83               	movwf	handle_ir@got_it& (0+255),b
  3117                           
  3118                           ;clock.c: 1173: for(j = 0; j < sizeof(ir_codes) / sizeof(ir_code_t); j++)
  3119  0000F0  0E00               	movlw	0
  3120  0000F2  0100               	movlb	0	; () banked
  3121  0000F4  6F8E               	movwf	handle_ir@j& (0+255),b
  3122  0000F6                     l3937:
  3123  0000F6  FFFF               	dw	65535	; assembler added errata NOP
  3124                           
  3125                           ; BSR set to: 0
  3126  0000F8  0E07               	movlw	7
  3127  0000FA  0100               	movlb	0	; () banked
  3128  0000FC  658E               	cpfsgt	handle_ir@j& (0+255),b
  3129  0000FE  D001               	goto	l3941
  3130  000100  D234               	goto	l4103
  3131  000102                     l3941:
  3132  000102  FFFF               	dw	65535	; assembler added errata NOP
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;clock.c: 1175: {
  3136                           ;clock.c: 1177: if(!ir_code_failed[j])
  3137  000104  0100               	movlb	0	; () banked
  3138  000106  518E               	movf	handle_ir@j& (0+255),w,b
  3139  000108  0D01               	mullw	1
  3140  00010A  0E60               	movlw	low _ir_code_failed
  3141  00010C  24F3               	addwf	prodl,w,c
  3142  00010E  6ED9               	movwf	fsr2l,c
  3143  000110  0E00               	movlw	high _ir_code_failed
  3144  000112  20F4               	addwfc	prodh,w,c
  3145  000114  6EDA               	movwf	fsr2h,c
  3146  000116  50DF               	movf	indf2,w,c
  3147  000118  A4D8               	btfss	status,2,c
  3148  00011A  D223               	goto	l4099
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;clock.c: 1178: {
  3152                           ;clock.c: 1179: const ir_code_t *code = &ir_codes[j];
  3153  00011C  0100               	movlb	0	; () banked
  3154  00011E  518E               	movf	handle_ir@j& (0+255),w,b
  3155  000120  0D04               	mullw	4
  3156  000122  0E31               	movlw	low _ir_codes
  3157  000124  24F3               	addwf	prodl,w,c
  3158  000126  0100               	movlb	0	; () banked
  3159  000128  6F8C               	movwf	handle_ir@code& (0+255),b
  3160  00012A  0EBF               	movlw	high _ir_codes
  3161  00012C  20F4               	addwfc	prodh,w,c
  3162  00012E  0100               	movlb	0	; () banked
  3163  000130  6F8D               	movwf	(handle_ir@code+1)& (0+255),b
  3164                           
  3165                           ; BSR set to: 0
  3166                           ;clock.c: 1180: const int16_t *data = code->data;
  3167  000132  C08C  FFF6         	movff	handle_ir@code,tblptrl
  3168  000136  C08D  FFF7         	movff	handle_ir@code+1,tblptrh
  3169  00013A                     	if	0	;tblptru may be non-zero
  3170  00013A                     	endif
  3171  00013A                     	if	0	;tblptru may be non-zero
  3172  00013A                     	endif
  3173  00013A  0009               	tblrd		*+
  3174  00013C  FFFF               	dw	65535	; errata NOP
  3175  00013E  CFF5 F086          	movff	tablat,handle_ir@data
  3176  000142  000A               	tblrd		*-
  3177  000144  FFFF               	dw	65535	; errata NOP
  3178  000146  CFF5 F087          	movff	tablat,handle_ir@data+1
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;clock.c: 1181: const uint8_t code_size = code->size;
  3182  00014A  0E02               	movlw	2
  3183  00014C  0100               	movlb	0	; () banked
  3184  00014E  258C               	addwf	handle_ir@code& (0+255),w,b
  3185  000150  6E26               	movwf	??_handle_ir& (0+255),c
  3186  000152  0E00               	movlw	0
  3187  000154  0100               	movlb	0	; () banked
  3188  000156  218D               	addwfc	(handle_ir@code+1)& (0+255),w,b
  3189  000158  6E27               	movwf	(??_handle_ir+1)& (0+255),c
  3190  00015A  C026  FFF6         	movff	??_handle_ir,tblptrl
  3191  00015E  C027  FFF7         	movff	??_handle_ir+1,tblptrh
  3192  000162                     	if	0	;tblptru may be non-zero
  3193  000162                     	endif
  3194  000162                     	if	0	;tblptru may be non-zero
  3195  000162                     	endif
  3196  000162  0008               	tblrd		*
  3197  000164  FFFF               	dw	65535	; errata NOP
  3198  000166  CFF5 F082          	movff	tablat,handle_ir@code_size
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;clock.c: 1182: uint8_t failed = 0;
  3202  00016A  0E00               	movlw	0
  3203  00016C  0100               	movlb	0	; () banked
  3204  00016E  6F81               	movwf	handle_ir@failed& (0+255),b
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;clock.c: 1183: ir_error = 0;
  3208  000170  0E00               	movlw	0
  3209  000172  0100               	movlb	0	; () banked
  3210  000174  6F85               	movwf	(handle_ir@ir_error+1)& (0+255),b
  3211  000176  0E00               	movlw	0
  3212  000178  6F84               	movwf	handle_ir@ir_error& (0+255),b
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;clock.c: 1186: int16_t error = ((data[ir_size] - ir_time) < 0 ? (-(data[ir_size] - ir_t
      +                          ime)) : (data[ir_size] - ir_time));
  3216  00017A  5033               	movf	_ir_size,w,c
  3217  00017C  0D02               	mullw	2
  3218  00017E  C086  F026         	movff	handle_ir@data,??_handle_ir
  3219  000182  C087  F027         	movff	handle_ir@data+1,??_handle_ir+1
  3220  000186  50F3               	movf	prodl,w,c
  3221  000188  2626               	addwf	??_handle_ir,f,c
  3222  00018A  50F4               	movf	prodh,w,c
  3223  00018C  2227               	addwfc	??_handle_ir+1,f,c
  3224  00018E  C026  FFF6         	movff	??_handle_ir,tblptrl
  3225  000192  C027  FFF7         	movff	??_handle_ir+1,tblptrh
  3226  000196                     	if	0	;tblptru may be non-zero
  3227  000196                     	endif
  3228  000196                     	if	0	;tblptru may be non-zero
  3229  000196                     	endif
  3230  000196  0009               	tblrd		*+
  3231  000198  FFFF               	dw	65535	; errata NOP
  3232  00019A  CFF5 F028          	movff	tablat,??_handle_ir+2
  3233  00019E  0009               	tblrd		*+
  3234  0001A0  FFFF               	dw	65535	; errata NOP
  3235  0001A2  CFF5 F029          	movff	tablat,??_handle_ir+3
  3236  0001A6  C06A  F02A         	movff	_ir_time,??_handle_ir+4
  3237  0001AA  C06B  F02B         	movff	_ir_time+1,??_handle_ir+5
  3238  0001AE  1E2A               	comf	??_handle_ir+4,f,c
  3239  0001B0  1E2B               	comf	??_handle_ir+5,f,c
  3240  0001B2  4A2A               	infsnz	??_handle_ir+4,f,c
  3241  0001B4  2A2B               	incf	??_handle_ir+5,f,c
  3242  0001B6  5028               	movf	??_handle_ir+2,w,c
  3243  0001B8  262A               	addwf	??_handle_ir+4,f,c
  3244  0001BA  5029               	movf	??_handle_ir+3,w,c
  3245  0001BC  222B               	addwfc	??_handle_ir+5,f,c
  3246  0001BE  BE2B               	btfsc	??_handle_ir+5,7,c
  3247  0001C0  D027               	goto	l3957
  3248                           
  3249                           ; BSR set to: 0
  3250  0001C2  5033               	movf	_ir_size,w,c
  3251  0001C4  0D02               	mullw	2
  3252  0001C6  C086  F026         	movff	handle_ir@data,??_handle_ir
  3253  0001CA  C087  F027         	movff	handle_ir@data+1,??_handle_ir+1
  3254  0001CE  50F3               	movf	prodl,w,c
  3255  0001D0  2626               	addwf	??_handle_ir,f,c
  3256  0001D2  50F4               	movf	prodh,w,c
  3257  0001D4  2227               	addwfc	??_handle_ir+1,f,c
  3258  0001D6  C026  FFF6         	movff	??_handle_ir,tblptrl
  3259  0001DA  C027  FFF7         	movff	??_handle_ir+1,tblptrh
  3260  0001DE                     	if	0	;tblptru may be non-zero
  3261  0001DE                     	endif
  3262  0001DE                     	if	0	;tblptru may be non-zero
  3263  0001DE                     	endif
  3264  0001DE  0009               	tblrd		*+
  3265  0001E0  FFFF               	dw	65535	; errata NOP
  3266  0001E2  CFF5 F028          	movff	tablat,??_handle_ir+2
  3267  0001E6  0009               	tblrd		*+
  3268  0001E8  FFFF               	dw	65535	; errata NOP
  3269  0001EA  CFF5 F029          	movff	tablat,??_handle_ir+3
  3270  0001EE  C06A  F02A         	movff	_ir_time,??_handle_ir+4
  3271  0001F2  C06B  F02B         	movff	_ir_time+1,??_handle_ir+5
  3272  0001F6  1E2A               	comf	??_handle_ir+4,f,c
  3273  0001F8  1E2B               	comf	??_handle_ir+5,f,c
  3274  0001FA  4A2A               	infsnz	??_handle_ir+4,f,c
  3275  0001FC  2A2B               	incf	??_handle_ir+5,f,c
  3276  0001FE  5028               	movf	??_handle_ir+2,w,c
  3277  000200  242A               	addwf	??_handle_ir+4,w,c
  3278  000202  0100               	movlb	0	; () banked
  3279  000204  6F88               	movwf	handle_ir@error& (0+255),b
  3280  000206  5029               	movf	??_handle_ir+3,w,c
  3281  000208  202B               	addwfc	??_handle_ir+5,w,c
  3282  00020A  0100               	movlb	0	; () banked
  3283  00020C  6F89               	movwf	(handle_ir@error+1)& (0+255),b
  3284  00020E  D02B               	goto	l3959
  3285  000210                     l3957:
  3286  000210  FFFF               	dw	65535	; assembler added errata NOP
  3287                           
  3288                           ; BSR set to: 0
  3289  000212  5033               	movf	_ir_size,w,c
  3290  000214  0D02               	mullw	2
  3291  000216  C086  F026         	movff	handle_ir@data,??_handle_ir
  3292  00021A  C087  F027         	movff	handle_ir@data+1,??_handle_ir+1
  3293  00021E  50F3               	movf	prodl,w,c
  3294  000220  2626               	addwf	??_handle_ir,f,c
  3295  000222  50F4               	movf	prodh,w,c
  3296  000224  2227               	addwfc	??_handle_ir+1,f,c
  3297  000226  C026  FFF6         	movff	??_handle_ir,tblptrl
  3298  00022A  C027  FFF7         	movff	??_handle_ir+1,tblptrh
  3299  00022E                     	if	0	;tblptru may be non-zero
  3300  00022E                     	endif
  3301  00022E                     	if	0	;tblptru may be non-zero
  3302  00022E                     	endif
  3303  00022E  0009               	tblrd		*+
  3304  000230  FFFF               	dw	65535	; errata NOP
  3305  000232  CFF5 F028          	movff	tablat,??_handle_ir+2
  3306  000236  0009               	tblrd		*+
  3307  000238  FFFF               	dw	65535	; errata NOP
  3308  00023A  CFF5 F029          	movff	tablat,??_handle_ir+3
  3309  00023E  C06A  F02A         	movff	_ir_time,??_handle_ir+4
  3310  000242  C06B  F02B         	movff	_ir_time+1,??_handle_ir+5
  3311  000246  1E2A               	comf	??_handle_ir+4,f,c
  3312  000248  1E2B               	comf	??_handle_ir+5,f,c
  3313  00024A  4A2A               	infsnz	??_handle_ir+4,f,c
  3314  00024C  2A2B               	incf	??_handle_ir+5,f,c
  3315  00024E  5028               	movf	??_handle_ir+2,w,c
  3316  000250  262A               	addwf	??_handle_ir+4,f,c
  3317  000252  5029               	movf	??_handle_ir+3,w,c
  3318  000254  222B               	addwfc	??_handle_ir+5,f,c
  3319  000256  1E2A               	comf	??_handle_ir+4,f,c
  3320  000258  1E2B               	comf	??_handle_ir+5,f,c
  3321  00025A  4A2A               	infsnz	??_handle_ir+4,f,c
  3322  00025C  2A2B               	incf	??_handle_ir+5,f,c
  3323  00025E  C02A  F088         	movff	??_handle_ir+4,handle_ir@error
  3324  000262  C02B  F089         	movff	??_handle_ir+5,handle_ir@error+1
  3325  000266                     l3959:
  3326  000266  FFFF               	dw	65535	; assembler added errata NOP
  3327                           
  3328                           ; BSR set to: 0
  3329                           ;clock.c: 1187: if(error > ir_error)
  3330  000268  0100               	movlb	0	; () banked
  3331  00026A  5188               	movf	handle_ir@error& (0+255),w,b
  3332  00026C  0100               	movlb	0	; () banked
  3333  00026E  5D84               	subwf	handle_ir@ir_error& (0+255),w,b
  3334  000270  0100               	movlb	0	; () banked
  3335  000272  5189               	movf	(handle_ir@error+1)& (0+255),w,b
  3336  000274  0100               	movlb	0	; () banked
  3337  000276  5985               	subwfb	(handle_ir@ir_error+1)& (0+255),w,b
  3338  000278  B0D8               	btfsc	status,0,c
  3339  00027A  D004               	goto	l3963
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;clock.c: 1188: {
  3343                           ;clock.c: 1189: ir_error = error;
  3344  00027C  C088  F084         	movff	handle_ir@error,handle_ir@ir_error
  3345  000280  C089  F085         	movff	handle_ir@error+1,handle_ir@ir_error+1
  3346  000284                     l3963:
  3347  000284  FFFF               	dw	65535	; assembler added errata NOP
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;clock.c: 1190: }
  3351                           ;clock.c: 1193: if(error > 16)
  3352  000286  0100               	movlb	0	; () banked
  3353  000288  BF89               	btfsc	(handle_ir@error+1)& (0+255),7,b
  3354  00028A  D014               	goto	l3967
  3355  00028C  0100               	movlb	0	; () banked
  3356  00028E  5189               	movf	(handle_ir@error+1)& (0+255),w,b
  3357  000290  E105               	bnz	u5520
  3358  000292  0E11               	movlw	17
  3359  000294  0100               	movlb	0	; () banked
  3360  000296  5D88               	subwf	handle_ir@error& (0+255),w,b
  3361  000298  A0D8               	btfss	status,0,c
  3362  00029A  D00C               	goto	l3967
  3363  00029C                     u5520:
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;clock.c: 1194: {
  3367                           ;clock.c: 1207: ir_code_failed[j] = 1;
  3368  00029C  0100               	movlb	0	; () banked
  3369  00029E  518E               	movf	handle_ir@j& (0+255),w,b
  3370  0002A0  0D01               	mullw	1
  3371  0002A2  0E60               	movlw	low _ir_code_failed
  3372  0002A4  24F3               	addwf	prodl,w,c
  3373  0002A6  6ED9               	movwf	fsr2l,c
  3374  0002A8  0E00               	movlw	high _ir_code_failed
  3375  0002AA  20F4               	addwfc	prodh,w,c
  3376  0002AC  6EDA               	movwf	fsr2h,c
  3377  0002AE  0E01               	movlw	1
  3378  0002B0  6EDF               	movwf	indf2,c
  3379                           
  3380                           ;clock.c: 1208: }
  3381  0002B2  D157               	goto	l4099
  3382  0002B4                     l3967:
  3383  0002B4  FFFF               	dw	65535	; assembler added errata NOP
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;clock.c: 1209: else
  3387                           ;clock.c: 1211: {
  3388                           ;clock.c: 1212: ir_size++;
  3389  0002B6  2A33               	incf	_ir_size,f,c
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;clock.c: 1215: if(ir_size >= code_size)
  3393  0002B8  0100               	movlb	0	; () banked
  3394  0002BA  5182               	movf	handle_ir@code_size& (0+255),w,b
  3395  0002BC  5C33               	subwf	_ir_size,w,c
  3396  0002BE  A0D8               	btfss	status,0,c
  3397  0002C0  D14B               	goto	l4097
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;clock.c: 1216: {
  3401                           ;clock.c: 1218: ir_size = 0;
  3402  0002C2  0E00               	movlw	0
  3403  0002C4  6E33               	movwf	_ir_size,c
  3404                           
  3405                           ;clock.c: 1219: for(i = 0; i < (sizeof(ir_codes) / sizeof(ir_code_t)); i++)
  3406  0002C6  0E00               	movlw	0
  3407  0002C8  0100               	movlb	0	; () banked
  3408  0002CA  6F8A               	movwf	handle_ir@i& (0+255),b
  3409  0002CC                     l3973:
  3410  0002CC  FFFF               	dw	65535	; assembler added errata NOP
  3411                           
  3412                           ; BSR set to: 0
  3413  0002CE  0E07               	movlw	7
  3414  0002D0  0100               	movlb	0	; () banked
  3415  0002D2  658A               	cpfsgt	handle_ir@i& (0+255),b
  3416  0002D4  D001               	goto	l3977
  3417  0002D6  D00F               	goto	l3983
  3418  0002D8                     l3977:
  3419  0002D8  FFFF               	dw	65535	; assembler added errata NOP
  3420                           
  3421                           ; BSR set to: 0
  3422                           ;clock.c: 1220: {
  3423                           ;clock.c: 1221: ir_code_failed[i] = 0;
  3424  0002DA  0100               	movlb	0	; () banked
  3425  0002DC  518A               	movf	handle_ir@i& (0+255),w,b
  3426  0002DE  0D01               	mullw	1
  3427  0002E0  0E60               	movlw	low _ir_code_failed
  3428  0002E2  24F3               	addwf	prodl,w,c
  3429  0002E4  6ED9               	movwf	fsr2l,c
  3430  0002E6  0E00               	movlw	high _ir_code_failed
  3431  0002E8  20F4               	addwfc	prodh,w,c
  3432  0002EA  6EDA               	movwf	fsr2h,c
  3433  0002EC  0E00               	movlw	0
  3434  0002EE  6EDF               	movwf	indf2,c
  3435                           
  3436                           ; BSR set to: 0
  3437  0002F0  0100               	movlb	0	; () banked
  3438  0002F2  2B8A               	incf	handle_ir@i& (0+255),f,b
  3439  0002F4  D7EB               	goto	l3973
  3440  0002F6                     l3983:
  3441  0002F6  FFFF               	dw	65535	; assembler added errata NOP
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;clock.c: 1222: }
  3445                           ;clock.c: 1224: have_ir = 1;
  3446  0002F8  0E01               	movlw	1
  3447  0002FA  6E32               	movwf	_have_ir,c
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;clock.c: 1225: ir_code = code->value;
  3451  0002FC  0E03               	movlw	3
  3452  0002FE  0100               	movlb	0	; () banked
  3453  000300  258C               	addwf	handle_ir@code& (0+255),w,b
  3454  000302  6E26               	movwf	??_handle_ir& (0+255),c
  3455  000304  0E00               	movlw	0
  3456  000306  0100               	movlb	0	; () banked
  3457  000308  218D               	addwfc	(handle_ir@code+1)& (0+255),w,b
  3458  00030A  6E27               	movwf	(??_handle_ir+1)& (0+255),c
  3459  00030C  C026  FFF6         	movff	??_handle_ir,tblptrl
  3460  000310  C027  FFF7         	movff	??_handle_ir+1,tblptrh
  3461  000314                     	if	0	;tblptru may be non-zero
  3462  000314                     	endif
  3463  000314                     	if	0	;tblptru may be non-zero
  3464  000314                     	endif
  3465  000314  0008               	tblrd		*
  3466  000316  FFFF               	dw	65535	; errata NOP
  3467  000318  CFF5 F07F          	movff	tablat,_ir_code
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;clock.c: 1226: print_text("IR code: ");
  3471  00031C  0EEE               	movlw	low STR_1
  3472  00031E  6E15               	movwf	print_text@s,c
  3473  000320  0EBF               	movlw	high STR_1
  3474  000322  6E16               	movwf	print_text@s+1,c
  3475  000324  EC7F  F00C         	call	_print_text	;wreg free
  3476                           
  3477                           ;clock.c: 1227: print_number(code->value);
  3478  000328  0E03               	movlw	3
  3479  00032A  0100               	movlb	0	; () banked
  3480  00032C  258C               	addwf	handle_ir@code& (0+255),w,b
  3481  00032E  6E26               	movwf	??_handle_ir& (0+255),c
  3482  000330  0E00               	movlw	0
  3483  000332  0100               	movlb	0	; () banked
  3484  000334  218D               	addwfc	(handle_ir@code+1)& (0+255),w,b
  3485  000336  6E27               	movwf	(??_handle_ir+1)& (0+255),c
  3486  000338  C026  FFF6         	movff	??_handle_ir,tblptrl
  3487  00033C  C027  FFF7         	movff	??_handle_ir+1,tblptrh
  3488  000340                     	if	0	;tblptru may be non-zero
  3489  000340                     	endif
  3490  000340                     	if	0	;tblptru may be non-zero
  3491  000340                     	endif
  3492  000340  0008               	tblrd		*
  3493  000342  FFFF               	dw	65535	; errata NOP
  3494  000344  50F5               	movf	tablat,w,c
  3495  000346  6E22               	movwf	print_number@number,c
  3496  000348  6A23               	clrf	print_number@number+1,c
  3497  00034A  EC6B  F00D         	call	_print_number	;wreg free
  3498                           
  3499                           ;clock.c: 1228: print_text("error=");
  3500  00034E  0EF8               	movlw	low STR_2
  3501  000350  6E15               	movwf	print_text@s,c
  3502  000352  0EBF               	movlw	high STR_2
  3503  000354  6E16               	movwf	print_text@s+1,c
  3504  000356  EC7F  F00C         	call	_print_text	;wreg free
  3505                           
  3506                           ;clock.c: 1229: print_number(ir_error);
  3507  00035A  C084  F022         	movff	handle_ir@ir_error,print_number@number
  3508  00035E  C085  F023         	movff	handle_ir@ir_error+1,print_number@number+1
  3509  000362  EC6B  F00D         	call	_print_number	;wreg free
  3510                           
  3511                           ;clock.c: 1230: print_byte('\n');
  3512  000366  0E0A               	movlw	10
  3513  000368  EC5B  F00C         	call	_print_byte
  3514                           
  3515                           ;clock.c: 1233: switch(code->value)
  3516  00036C  D0CD               	goto	l4095
  3517  00036E                     l3997:
  3518  00036E  FFFF               	dw	65535	; assembler added errata NOP
  3519                           
  3520                           ;clock.c: 1236: alarm = !alarm;
  3521  000370  503D               	movf	_alarm,w,c
  3522  000372  A4D8               	btfss	status,2,c
  3523  000374  D002               	goto	u5560
  3524  000376  0E01               	movlw	1
  3525  000378  D002               	goto	u5570
  3526  00037A                     u5560:
  3527  00037A  FFFF               	dw	65535	; assembler added errata NOP
  3528  00037C  0E00               	movlw	0
  3529  00037E                     u5570:
  3530  00037E  FFFF               	dw	65535	; assembler added errata NOP
  3531  000380  6E3D               	movwf	_alarm,c
  3532                           
  3533                           ;clock.c: 1237: if(mode == 0 || mode == 1)
  3534  000382  503C               	movf	_mode,w,c
  3535  000384  B4D8               	btfsc	status,2,c
  3536  000386  D003               	goto	l4001
  3537  000388  043C               	decf	_mode,w,c
  3538  00038A  A4D8               	btfss	status,2,c
  3539  00038C  D003               	bra	L10
  3540  00038E                     l4001:
  3541  00038E  FFFF               	dw	65535	; assembler added errata NOP
  3542                           
  3543                           ;clock.c: 1238: {
  3544                           ;clock.c: 1239: draw_time();
  3545  000390  EC95  F006         	call	_draw_time	;wreg free
  3546  000394                     L10:
  3547                           
  3548                           ;clock.c: 1240: }
  3549                           ;clock.c: 1243: if(alarm_sounding)
  3550  000394  5047               	movf	_alarm_sounding,w,c
  3551  000396  B4D8               	btfsc	status,2,c
  3552  000398  D007               	goto	l4011
  3553                           
  3554                           ;clock.c: 1244: {
  3555                           ;clock.c: 1245: stop_song();
  3556  00039A  EC1A  F00D         	call	_stop_song	;wreg free
  3557                           
  3558                           ;clock.c: 1246: alarm_sounding = 0;
  3559  00039E  0E00               	movlw	0
  3560  0003A0  6E47               	movwf	_alarm_sounding,c
  3561                           
  3562                           ;clock.c: 1247: alarm_time = 0;
  3563  0003A2  0E00               	movlw	0
  3564  0003A4  6E37               	movwf	_alarm_time,c
  3565                           
  3566                           ;clock.c: 1248: }
  3567  0003A6  D0D8               	goto	l4097
  3568  0003A8                     l4011:
  3569  0003A8  FFFF               	dw	65535	; assembler added errata NOP
  3570                           
  3571                           ;clock.c: 1249: else
  3572                           ;clock.c: 1250: {
  3573                           ;clock.c: 1251: if(alarm)
  3574  0003AA  503D               	movf	_alarm,w,c
  3575  0003AC  B4D8               	btfsc	status,2,c
  3576  0003AE  D007               	goto	l4015
  3577                           
  3578                           ;clock.c: 1252: {
  3579                           ;clock.c: 1253: play_song(alarm_on_tone);
  3580  0003B0  0EE9               	movlw	low _alarm_on_tone
  3581  0003B2  6E14               	movwf	play_song@ptr,c
  3582  0003B4  0EBE               	movlw	high _alarm_on_tone
  3583  0003B6  6E15               	movwf	play_song@ptr+1,c
  3584  0003B8  EC2C  F00D         	call	_play_song	;wreg free
  3585                           
  3586                           ;clock.c: 1254: }
  3587  0003BC  D0CD               	goto	l4097
  3588  0003BE                     l4015:
  3589  0003BE  FFFF               	dw	65535	; assembler added errata NOP
  3590                           
  3591                           ;clock.c: 1255: else
  3592                           ;clock.c: 1256: {
  3593                           ;clock.c: 1257: play_song(alarm_off_tone);
  3594  0003C0  0E0D               	movlw	low _alarm_off_tone
  3595  0003C2  6E14               	movwf	play_song@ptr,c
  3596  0003C4  0EBF               	movlw	high _alarm_off_tone
  3597  0003C6  6E15               	movwf	play_song@ptr+1,c
  3598  0003C8  EC2C  F00D         	call	_play_song	;wreg free
  3599                           
  3600                           ;clock.c: 1258: }
  3601                           ;clock.c: 1259: }
  3602                           ;clock.c: 1260: break;
  3603  0003CC  D0C5               	goto	l4097
  3604  0003CE                     l4017:
  3605  0003CE  FFFF               	dw	65535	; assembler added errata NOP
  3606                           
  3607                           ;clock.c: 1264: if(mode == 2)
  3608  0003D0  0E02               	movlw	2
  3609  0003D2  183C               	xorwf	_mode,w,c
  3610  0003D4  A4D8               	btfss	status,2,c
  3611  0003D6  D00B               	goto	l4025
  3612                           
  3613                           ;clock.c: 1265: {
  3614                           ;clock.c: 1266: mode = 0;
  3615  0003D8  0E00               	movlw	0
  3616  0003DA  6E3C               	movwf	_mode,c
  3617                           
  3618                           ;clock.c: 1267: play_song(set_alarm_tone2);
  3619  0003DC  0E79               	movlw	low _set_alarm_tone2
  3620  0003DE  6E14               	movwf	play_song@ptr,c
  3621  0003E0  0EBF               	movlw	high _set_alarm_tone2
  3622  0003E2  6E15               	movwf	play_song@ptr+1,c
  3623  0003E4  EC2C  F00D         	call	_play_song	;wreg free
  3624                           
  3625                           ;clock.c: 1268: draw_time();
  3626  0003E8  EC95  F006         	call	_draw_time	;wreg free
  3627                           
  3628                           ;clock.c: 1269: }
  3629  0003EC  D0B5               	goto	l4097
  3630  0003EE                     l4025:
  3631  0003EE  FFFF               	dw	65535	; assembler added errata NOP
  3632                           
  3633                           ;clock.c: 1270: else
  3634                           ;clock.c: 1271: {
  3635                           ;clock.c: 1272: mode = 2;
  3636  0003F0  0E02               	movlw	2
  3637  0003F2  6E3C               	movwf	_mode,c
  3638                           
  3639                           ;clock.c: 1273: play_song(set_alarm_tone1);
  3640  0003F4  0E8D               	movlw	low _set_alarm_tone1
  3641  0003F6  6E14               	movwf	play_song@ptr,c
  3642  0003F8  0EBF               	movlw	high _set_alarm_tone1
  3643  0003FA  6E15               	movwf	play_song@ptr+1,c
  3644  0003FC  EC2C  F00D         	call	_play_song	;wreg free
  3645                           
  3646                           ;clock.c: 1274: draw_alarm();
  3647  000400  EC64  F008         	call	_draw_alarm	;wreg free
  3648                           
  3649                           ;clock.c: 1275: }
  3650                           ;clock.c: 1276: break;
  3651  000404  D0A9               	goto	l4097
  3652  000406                     l4031:
  3653  000406  FFFF               	dw	65535	; assembler added errata NOP
  3654                           
  3655                           ;clock.c: 1280: if(mode == 1)
  3656  000408  043C               	decf	_mode,w,c
  3657  00040A  A4D8               	btfss	status,2,c
  3658  00040C  D00B               	goto	l4039
  3659                           
  3660                           ;clock.c: 1281: {
  3661                           ;clock.c: 1282: mode = 0;
  3662  00040E  0E00               	movlw	0
  3663  000410  6E3C               	movwf	_mode,c
  3664                           
  3665                           ;clock.c: 1283: play_song(set_time_tone2);
  3666  000412  0E51               	movlw	low _set_time_tone2
  3667  000414  6E14               	movwf	play_song@ptr,c
  3668  000416  0EBF               	movlw	high _set_time_tone2
  3669  000418  6E15               	movwf	play_song@ptr+1,c
  3670  00041A  EC2C  F00D         	call	_play_song	;wreg free
  3671                           
  3672                           ;clock.c: 1284: draw_time();
  3673  00041E  EC95  F006         	call	_draw_time	;wreg free
  3674                           
  3675                           ;clock.c: 1285: }
  3676  000422  D09A               	goto	l4097
  3677  000424                     l4039:
  3678  000424  FFFF               	dw	65535	; assembler added errata NOP
  3679                           
  3680                           ;clock.c: 1286: else
  3681                           ;clock.c: 1287: {
  3682                           ;clock.c: 1288: mode = 1;
  3683  000426  0E01               	movlw	1
  3684  000428  6E3C               	movwf	_mode,c
  3685                           
  3686                           ;clock.c: 1289: play_song(set_time_tone1);
  3687  00042A  0E65               	movlw	low _set_time_tone1
  3688  00042C  6E14               	movwf	play_song@ptr,c
  3689  00042E  0EBF               	movlw	high _set_time_tone1
  3690  000430  6E15               	movwf	play_song@ptr+1,c
  3691  000432  EC2C  F00D         	call	_play_song	;wreg free
  3692                           
  3693                           ;clock.c: 1290: draw_time();
  3694  000436  EC95  F006         	call	_draw_time	;wreg free
  3695                           
  3696                           ;clock.c: 1291: }
  3697                           ;clock.c: 1292: break;
  3698  00043A  D08E               	goto	l4097
  3699  00043C                     l4045:
  3700  00043C  FFFF               	dw	65535	; assembler added errata NOP
  3701                           
  3702                           ;clock.c: 1296: play_song(test_tone);
  3703  00043E  0EB9               	movlw	low _test_tone
  3704  000440  6E14               	movwf	play_song@ptr,c
  3705  000442  0EBF               	movlw	high _test_tone
  3706  000444  6E15               	movwf	play_song@ptr+1,c
  3707  000446  EC2C  F00D         	call	_play_song	;wreg free
  3708                           
  3709                           ;clock.c: 1297: if(mode == 3)
  3710  00044A  0E03               	movlw	3
  3711  00044C  183C               	xorwf	_mode,w,c
  3712  00044E  A4D8               	btfss	status,2,c
  3713  000450  D005               	goto	l4053
  3714                           
  3715                           ;clock.c: 1298: {
  3716                           ;clock.c: 1299: mode = 0;
  3717  000452  0E00               	movlw	0
  3718  000454  6E3C               	movwf	_mode,c
  3719                           
  3720                           ;clock.c: 1300: draw_time();
  3721  000456  EC95  F006         	call	_draw_time	;wreg free
  3722                           
  3723                           ;clock.c: 1301: }
  3724  00045A  D07E               	goto	l4097
  3725  00045C                     l4053:
  3726  00045C  FFFF               	dw	65535	; assembler added errata NOP
  3727                           
  3728                           ;clock.c: 1302: else
  3729                           ;clock.c: 1303: {
  3730                           ;clock.c: 1304: mode = 3;
  3731  00045E  0E03               	movlw	3
  3732  000460  6E3C               	movwf	_mode,c
  3733                           
  3734                           ;clock.c: 1305: draw_test();
  3735  000462  EC8E  F00D         	call	_draw_test	;wreg free
  3736                           
  3737                           ;clock.c: 1306: }
  3738                           ;clock.c: 1307: break;
  3739  000466  D078               	goto	l4097
  3740  000468                     l4057:
  3741  000468  FFFF               	dw	65535	; assembler added errata NOP
  3742                           
  3743                           ;clock.c: 1311: do_hour_up();
  3744  00046A  ECE8  F00A         	call	_do_hour_up	;wreg free
  3745                           
  3746                           ;clock.c: 1312: repeat_counter = 250 / 2;
  3747  00046E  0E7D               	movlw	125
  3748  000470  6E3A               	movwf	_repeat_counter,c
  3749                           
  3750                           ;clock.c: 1313: repeating = 1;
  3751  000472  0E01               	movlw	1
  3752  000474  6E3B               	movwf	_repeating,c
  3753                           
  3754                           ;clock.c: 1314: play_song(up_tone);
  3755  000476  0EAD               	movlw	low _up_tone
  3756  000478  6E14               	movwf	play_song@ptr,c
  3757  00047A  0EBF               	movlw	high _up_tone
  3758  00047C  6E15               	movwf	play_song@ptr+1,c
  3759  00047E  EC2C  F00D         	call	_play_song	;wreg free
  3760                           
  3761                           ;clock.c: 1315: break;
  3762  000482  D06A               	goto	l4097
  3763  000484                     l4065:
  3764  000484  FFFF               	dw	65535	; assembler added errata NOP
  3765                           
  3766                           ;clock.c: 1318: do_hour_down();
  3767  000486  EC20  F00B         	call	_do_hour_down	;wreg free
  3768                           
  3769                           ;clock.c: 1319: repeat_counter = 250 / 2;
  3770  00048A  0E7D               	movlw	125
  3771  00048C  6E3A               	movwf	_repeat_counter,c
  3772                           
  3773                           ;clock.c: 1320: repeating = 1;
  3774  00048E  0E01               	movlw	1
  3775  000490  6E3B               	movwf	_repeating,c
  3776                           
  3777                           ;clock.c: 1321: play_song(dn_tone);
  3778  000492  0EA1               	movlw	low _dn_tone
  3779  000494  6E14               	movwf	play_song@ptr,c
  3780  000496  0EBF               	movlw	high _dn_tone
  3781  000498  6E15               	movwf	play_song@ptr+1,c
  3782  00049A  EC2C  F00D         	call	_play_song	;wreg free
  3783                           
  3784                           ;clock.c: 1322: break;
  3785  00049E  D05C               	goto	l4097
  3786  0004A0                     l4073:
  3787  0004A0  FFFF               	dw	65535	; assembler added errata NOP
  3788                           
  3789                           ;clock.c: 1326: if(mode == 3)
  3790  0004A2  0E03               	movlw	3
  3791  0004A4  183C               	xorwf	_mode,w,c
  3792  0004A6  A4D8               	btfss	status,2,c
  3793  0004A8  D007               	goto	l4077
  3794                           
  3795                           ;clock.c: 1327: {
  3796                           ;clock.c: 1328: play_song(alarm_song);
  3797  0004AA  0E29               	movlw	low _alarm_song
  3798  0004AC  6E14               	movwf	play_song@ptr,c
  3799  0004AE  0EBE               	movlw	high _alarm_song
  3800  0004B0  6E15               	movwf	play_song@ptr+1,c
  3801  0004B2  EC2C  F00D         	call	_play_song	;wreg free
  3802                           
  3803                           ;clock.c: 1329: }
  3804  0004B6  D050               	goto	l4097
  3805  0004B8                     l4077:
  3806  0004B8  FFFF               	dw	65535	; assembler added errata NOP
  3807                           
  3808                           ;clock.c: 1330: else
  3809                           ;clock.c: 1331: {
  3810                           ;clock.c: 1332: do_minute_up();
  3811  0004BA  EC3E  F00D         	call	_do_minute_up	;wreg free
  3812                           
  3813                           ;clock.c: 1333: repeat_counter = 250 / 2;
  3814  0004BE  0E7D               	movlw	125
  3815  0004C0  6E3A               	movwf	_repeat_counter,c
  3816                           
  3817                           ;clock.c: 1334: repeating = 1;
  3818  0004C2  0E01               	movlw	1
  3819  0004C4  6E3B               	movwf	_repeating,c
  3820                           
  3821                           ;clock.c: 1335: play_song(up_tone);
  3822  0004C6  0EAD               	movlw	low _up_tone
  3823  0004C8  6E14               	movwf	play_song@ptr,c
  3824  0004CA  0EBF               	movlw	high _up_tone
  3825  0004CC  6E15               	movwf	play_song@ptr+1,c
  3826  0004CE  EC2C  F00D         	call	_play_song	;wreg free
  3827                           
  3828                           ;clock.c: 1336: }
  3829                           ;clock.c: 1337: break;
  3830  0004D2  D042               	goto	l4097
  3831  0004D4                     l4083:
  3832  0004D4  FFFF               	dw	65535	; assembler added errata NOP
  3833                           
  3834                           ;clock.c: 1340: if(mode == 3)
  3835  0004D6  0E03               	movlw	3
  3836  0004D8  183C               	xorwf	_mode,w,c
  3837  0004DA  A4D8               	btfss	status,2,c
  3838  0004DC  D007               	goto	l4087
  3839                           
  3840                           ;clock.c: 1341: {
  3841                           ;clock.c: 1342: play_song(alarm_song);
  3842  0004DE  0E29               	movlw	low _alarm_song
  3843  0004E0  6E14               	movwf	play_song@ptr,c
  3844  0004E2  0EBE               	movlw	high _alarm_song
  3845  0004E4  6E15               	movwf	play_song@ptr+1,c
  3846  0004E6  EC2C  F00D         	call	_play_song	;wreg free
  3847                           
  3848                           ;clock.c: 1343: }
  3849  0004EA  D036               	goto	l4097
  3850  0004EC                     l4087:
  3851  0004EC  FFFF               	dw	65535	; assembler added errata NOP
  3852                           
  3853                           ;clock.c: 1344: else
  3854                           ;clock.c: 1345: {
  3855                           ;clock.c: 1346: do_minute_down();
  3856  0004EE  EC4E  F00D         	call	_do_minute_down	;wreg free
  3857                           
  3858                           ;clock.c: 1347: repeat_counter = 250 / 2;
  3859  0004F2  0E7D               	movlw	125
  3860  0004F4  6E3A               	movwf	_repeat_counter,c
  3861                           
  3862                           ;clock.c: 1348: repeating = 1;
  3863  0004F6  0E01               	movlw	1
  3864  0004F8  6E3B               	movwf	_repeating,c
  3865                           
  3866                           ;clock.c: 1349: play_song(dn_tone);
  3867  0004FA  0EA1               	movlw	low _dn_tone
  3868  0004FC  6E14               	movwf	play_song@ptr,c
  3869  0004FE  0EBF               	movlw	high _dn_tone
  3870  000500  6E15               	movwf	play_song@ptr+1,c
  3871  000502  EC2C  F00D         	call	_play_song	;wreg free
  3872                           
  3873                           ;clock.c: 1352: }
  3874                           
  3875                           ;clock.c: 1350: }
  3876                           ;clock.c: 1351: break;
  3877  000506  D028               	goto	l4097
  3878  000508                     l4095:
  3879  000508  FFFF               	dw	65535	; assembler added errata NOP
  3880  00050A  0E03               	movlw	3
  3881  00050C  0100               	movlb	0	; () banked
  3882  00050E  258C               	addwf	handle_ir@code& (0+255),w,b
  3883  000510  6E26               	movwf	??_handle_ir& (0+255),c
  3884  000512  0E00               	movlw	0
  3885  000514  0100               	movlb	0	; () banked
  3886  000516  218D               	addwfc	(handle_ir@code+1)& (0+255),w,b
  3887  000518  6E27               	movwf	(??_handle_ir+1)& (0+255),c
  3888  00051A  C026  FFF6         	movff	??_handle_ir,tblptrl
  3889  00051E  C027  FFF7         	movff	??_handle_ir+1,tblptrh
  3890  000522                     	if	0	;tblptru may be non-zero
  3891  000522                     	endif
  3892  000522                     	if	0	;tblptru may be non-zero
  3893  000522                     	endif
  3894  000522  0008               	tblrd		*
  3895  000524  FFFF               	dw	65535	; errata NOP
  3896  000526  50F5               	movf	tablat,w,c
  3897                           
  3898                           ; Switch size 1, requested type "space"
  3899                           ; Number of cases is 8, Range of values is 0 to 7
  3900                           ; switch strategies available:
  3901                           ; Name         Instructions Cycles
  3902                           ; simple_byte           25    13 (average)
  3903                           ;	Chosen strategy is simple_byte
  3904  000528  0A00               	xorlw	0	; case 0
  3905  00052A  B4D8               	btfsc	status,2,c
  3906  00052C  D720               	goto	l3997
  3907  00052E  0A01               	xorlw	1	; case 1
  3908  000530  B4D8               	btfsc	status,2,c
  3909  000532  D79A               	goto	l4057
  3910  000534  0A03               	xorlw	3	; case 2
  3911  000536  B4D8               	btfsc	status,2,c
  3912  000538  D7A5               	goto	l4065
  3913  00053A  0A01               	xorlw	1	; case 3
  3914  00053C  B4D8               	btfsc	status,2,c
  3915  00053E  D7B0               	goto	l4073
  3916  000540  0A07               	xorlw	7	; case 4
  3917  000542  B4D8               	btfsc	status,2,c
  3918  000544  D7C7               	goto	l4083
  3919  000546  0A01               	xorlw	1	; case 5
  3920  000548  B4D8               	btfsc	status,2,c
  3921  00054A  D741               	goto	l4017
  3922  00054C  0A03               	xorlw	3	; case 6
  3923  00054E  B4D8               	btfsc	status,2,c
  3924  000550  D75A               	goto	l4031
  3925  000552  0A01               	xorlw	1	; case 7
  3926  000554  B4D8               	btfsc	status,2,c
  3927  000556  D772               	goto	l4045
  3928  000558                     l4097:
  3929  000558  FFFF               	dw	65535	; assembler added errata NOP
  3930                           
  3931                           ;clock.c: 1353: }
  3932                           ;clock.c: 1356: got_it = 1;
  3933  00055A  0E01               	movlw	1
  3934  00055C  0100               	movlb	0	; () banked
  3935  00055E  6F83               	movwf	handle_ir@got_it& (0+255),b
  3936                           
  3937                           ;clock.c: 1357: break;
  3938  000560  D004               	goto	l4103
  3939  000562                     l4099:
  3940  000562  FFFF               	dw	65535	; assembler added errata NOP
  3941                           
  3942                           ; BSR set to: 0
  3943  000564  0100               	movlb	0	; () banked
  3944  000566  2B8E               	incf	handle_ir@j& (0+255),f,b
  3945  000568  D5C6               	goto	l3937
  3946  00056A                     l4103:
  3947  00056A  FFFF               	dw	65535	; assembler added errata NOP
  3948                           
  3949                           ; BSR set to: 0
  3950                           ;clock.c: 1358: }
  3951                           ;clock.c: 1359: }
  3952                           ;clock.c: 1360: }
  3953                           ;clock.c: 1363: if(!got_it)
  3954  00056C  0100               	movlb	0	; () banked
  3955  00056E  5183               	movf	handle_ir@got_it& (0+255),w,b
  3956  000570  0100               	movlb	0	; () banked
  3957  000572  A4D8               	btfss	status,2,c
  3958  000574  D01A               	goto	l464
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;clock.c: 1364: {
  3962                           ;clock.c: 1366: uint8_t i;
  3963                           ;clock.c: 1367: ir_size = 0;
  3964  000576  0E00               	movlw	0
  3965  000578  6E33               	movwf	_ir_size,c
  3966                           
  3967                           ;clock.c: 1368: for(i = 0; i < (sizeof(ir_codes) / sizeof(ir_code_t)); i++)
  3968  00057A  0E00               	movlw	0
  3969  00057C  0100               	movlb	0	; () banked
  3970  00057E  6F8B               	movwf	handle_ir@i_916& (0+255),b
  3971  000580                     l4107:
  3972  000580  FFFF               	dw	65535	; assembler added errata NOP
  3973                           
  3974                           ; BSR set to: 0
  3975  000582  0E07               	movlw	7
  3976  000584  0100               	movlb	0	; () banked
  3977  000586  658B               	cpfsgt	handle_ir@i_916& (0+255),b
  3978  000588  D001               	goto	l4111
  3979  00058A  D00F               	goto	l464
  3980  00058C                     l4111:
  3981  00058C  FFFF               	dw	65535	; assembler added errata NOP
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;clock.c: 1369: {
  3985                           ;clock.c: 1370: ir_code_failed[i] = 0;
  3986  00058E  0100               	movlb	0	; () banked
  3987  000590  518B               	movf	handle_ir@i_916& (0+255),w,b
  3988  000592  0D01               	mullw	1
  3989  000594  0E60               	movlw	low _ir_code_failed
  3990  000596  24F3               	addwf	prodl,w,c
  3991  000598  6ED9               	movwf	fsr2l,c
  3992  00059A  0E00               	movlw	high _ir_code_failed
  3993  00059C  20F4               	addwfc	prodh,w,c
  3994  00059E  6EDA               	movwf	fsr2h,c
  3995  0005A0  0E00               	movlw	0
  3996  0005A2  6EDF               	movwf	indf2,c
  3997                           
  3998                           ; BSR set to: 0
  3999  0005A4  0100               	movlb	0	; () banked
  4000  0005A6  2B8B               	incf	handle_ir@i_916& (0+255),f,b
  4001  0005A8  D7EB               	goto	l4107
  4002  0005AA                     l464:
  4003  0005AA  FFFF               	dw	65535	; assembler added errata NOP
  4004                           
  4005                           ; BSR set to: 0
  4006  0005AC  0012               	return		;funcret
  4007  0005AE  FFFF               	dw	65535	; errata NOP
  4008  0005B0                     __end_of_handle_ir:
  4009                           	opt stack 0
  4010                           tblptru	equ	0xFF8
  4011                           tblptrh	equ	0xFF7
  4012                           tblptrl	equ	0xFF6
  4013                           tablat	equ	0xFF5
  4014                           prodh	equ	0xFF4
  4015                           prodl	equ	0xFF3
  4016                           intcon	equ	0xFF2
  4017                           intcon2	equ	0xFF1
  4018                           intcon3	equ	0xFF0
  4019                           postinc0	equ	0xFEE
  4020                           wreg	equ	0xFE8
  4021                           postdec1	equ	0xFE5
  4022                           fsr1h	equ	0xFE2
  4023                           fsr1l	equ	0xFE1
  4024                           indf2	equ	0xFDF
  4025                           fsr2h	equ	0xFDA
  4026                           fsr2l	equ	0xFD9
  4027                           status	equ	0xFD8
  4028                           
  4029 ;; *************** function _stop_song *****************
  4030 ;; Defined at:
  4031 ;;		line 772 in file "clock.c"
  4032 ;; Parameters:    Size  Location     Type
  4033 ;;		None
  4034 ;; Auto vars:     Size  Location     Type
  4035 ;;		None
  4036 ;; Return value:  Size  Location     Type
  4037 ;;                  1    wreg      void 
  4038 ;; Registers used:
  4039 ;;		wreg, status,2, status,0
  4040 ;; Tracked objects:
  4041 ;;		On entry : 0/0
  4042 ;;		On exit  : 0/0
  4043 ;;		Unchanged: 0/0
  4044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4049 ;;Total ram usage:        0 bytes
  4050 ;; Hardware stack levels used:    1
  4051 ;; Hardware stack levels required when called:    2
  4052 ;; This function calls:
  4053 ;;		Nothing
  4054 ;; This function is called by:
  4055 ;;		_handle_ir
  4056 ;; This function uses a non-reentrant model
  4057 ;;
  4058                           
  4059                           	psect	text5
  4060  001A34                     __ptext5:
  4061                           	opt stack 0
  4062  001A34                     _stop_song:
  4063                           	opt stack 0
  4064  001A34  FFFF               	dw	65535	; assembler added errata NOP
  4065                           
  4066                           ;clock.c: 774: osc1_volume = 0;
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;incstack = 0
  4070  001A36  0E00               	movlw	0
  4071  001A38  0100               	movlb	0	; () banked
  4072  001A3A  6F9C               	movwf	_osc1_volume& (0+255),b
  4073                           
  4074                           ;clock.c: 775: osc2_volume = 0;
  4075  001A3C  0E00               	movlw	0
  4076  001A3E  0100               	movlb	0	; () banked
  4077  001A40  6F9B               	movwf	_osc2_volume& (0+255),b
  4078                           
  4079                           ;clock.c: 776: osc3_volume = 0;
  4080  001A42  0E00               	movlw	0
  4081  001A44  0100               	movlb	0	; () banked
  4082  001A46  6F9A               	movwf	_osc3_volume& (0+255),b
  4083                           
  4084                           ; BSR set to: 0
  4085                           ;clock.c: 777: song_ptr = 0;
  4086  001A48  0E00               	movlw	0
  4087  001A4A  6E2E               	movwf	_song_ptr,c
  4088  001A4C  0E00               	movlw	0
  4089  001A4E  6E2F               	movwf	_song_ptr+1,c
  4090  001A50  0E00               	movlw	0
  4091  001A52  6E30               	movwf	_song_ptr+2,c
  4092                           
  4093                           ; BSR set to: 0
  4094  001A54  0012               	return		;funcret
  4095  001A56  FFFF               	dw	65535	; errata NOP
  4096  001A58                     __end_of_stop_song:
  4097                           	opt stack 0
  4098                           tblptru	equ	0xFF8
  4099                           tblptrh	equ	0xFF7
  4100                           tblptrl	equ	0xFF6
  4101                           tablat	equ	0xFF5
  4102                           prodh	equ	0xFF4
  4103                           prodl	equ	0xFF3
  4104                           intcon	equ	0xFF2
  4105                           intcon2	equ	0xFF1
  4106                           intcon3	equ	0xFF0
  4107                           postinc0	equ	0xFEE
  4108                           wreg	equ	0xFE8
  4109                           postdec1	equ	0xFE5
  4110                           fsr1h	equ	0xFE2
  4111                           fsr1l	equ	0xFE1
  4112                           indf2	equ	0xFDF
  4113                           fsr2h	equ	0xFDA
  4114                           fsr2l	equ	0xFD9
  4115                           status	equ	0xFD8
  4116                           
  4117 ;; *************** function _print_text *****************
  4118 ;; Defined at:
  4119 ;;		line 588 in file "clock.c"
  4120 ;; Parameters:    Size  Location     Type
  4121 ;;  s               2   20[COMRAM] PTR const unsigned char 
  4122 ;;		 -> STR_5(14), STR_4(2), STR_3(27), STR_2(7), 
  4123 ;;		 -> STR_1(10), 
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;		None
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  1    wreg      void 
  4128 ;; Registers used:
  4129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4135 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4138 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4139 ;;Total ram usage:        2 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:    3
  4142 ;; This function calls:
  4143 ;;		_print_byte
  4144 ;; This function is called by:
  4145 ;;		_handle_ir
  4146 ;;		_main
  4147 ;; This function uses a non-reentrant model
  4148 ;;
  4149                           
  4150                           	psect	text6
  4151  0018FE                     __ptext6:
  4152                           	opt stack 0
  4153  0018FE                     _print_text:
  4154                           	opt stack 0
  4155  0018FE  FFFF               	dw	65535	; assembler added errata NOP
  4156                           
  4157                           ;clock.c: 590: while(*s != 0)
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;incstack = 0
  4161  001900  D00C               	goto	l3795
  4162  001902                     l3791:
  4163  001902  FFFF               	dw	65535	; assembler added errata NOP
  4164                           
  4165                           ;clock.c: 591: {
  4166                           ;clock.c: 592: print_byte(*s);
  4167  001904  C015  FFF6         	movff	print_text@s,tblptrl
  4168  001908  C016  FFF7         	movff	print_text@s+1,tblptrh
  4169  00190C                     	if	0	;tblptru may be non-zero
  4170  00190C                     	endif
  4171  00190C                     	if	0	;tblptru may be non-zero
  4172  00190C                     	endif
  4173  00190C  0008               	tblrd		*
  4174  00190E  FFFF               	dw	65535	; errata NOP
  4175  001910  50F5               	movf	tablat,w,c
  4176  001912  EC5B  F00C         	call	_print_byte
  4177                           
  4178                           ;clock.c: 593: s++;
  4179  001916  4A15               	infsnz	print_text@s,f,c
  4180  001918  2A16               	incf	print_text@s+1,f,c
  4181  00191A                     l3795:
  4182  00191A  FFFF               	dw	65535	; assembler added errata NOP
  4183  00191C  C015  FFF6         	movff	print_text@s,tblptrl
  4184  001920  C016  FFF7         	movff	print_text@s+1,tblptrh
  4185  001924                     	if	0	;tblptru may be non-zero
  4186  001924                     	endif
  4187  001924                     	if	0	;tblptru may be non-zero
  4188  001924                     	endif
  4189  001924  0008               	tblrd		*
  4190  001926  FFFF               	dw	65535	; errata NOP
  4191  001928  50F5               	movf	tablat,w,c
  4192  00192A  0900               	iorlw	0
  4193  00192C  B4D8               	btfsc	status,2,c
  4194  00192E  0012               	return		;funcret
  4195  001930  FFFF               	dw	65535	; assembler added errata NOP
  4196  001932  D7E7               	goto	l3791
  4197  001934  FFFF               	dw	65535	; errata NOP
  4198  001936                     __end_of_print_text:
  4199                           	opt stack 0
  4200                           tblptru	equ	0xFF8
  4201                           tblptrh	equ	0xFF7
  4202                           tblptrl	equ	0xFF6
  4203                           tablat	equ	0xFF5
  4204                           prodh	equ	0xFF4
  4205                           prodl	equ	0xFF3
  4206                           intcon	equ	0xFF2
  4207                           intcon2	equ	0xFF1
  4208                           intcon3	equ	0xFF0
  4209                           postinc0	equ	0xFEE
  4210                           wreg	equ	0xFE8
  4211                           postdec1	equ	0xFE5
  4212                           fsr1h	equ	0xFE2
  4213                           fsr1l	equ	0xFE1
  4214                           indf2	equ	0xFDF
  4215                           fsr2h	equ	0xFDA
  4216                           fsr2l	equ	0xFD9
  4217                           status	equ	0xFD8
  4218                           
  4219 ;; *************** function _print_number *****************
  4220 ;; Defined at:
  4221 ;;		line 613 in file "clock.c"
  4222 ;; Parameters:    Size  Location     Type
  4223 ;;  number          2   33[COMRAM] unsigned int 
  4224 ;; Auto vars:     Size  Location     Type
  4225 ;;		None
  4226 ;; Return value:  Size  Location     Type
  4227 ;;                  1    wreg      void 
  4228 ;; Registers used:
  4229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4230 ;; Tracked objects:
  4231 ;;		On entry : 0/0
  4232 ;;		On exit  : 0/0
  4233 ;;		Unchanged: 0/0
  4234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4235 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4238 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4239 ;;Total ram usage:        2 bytes
  4240 ;; Hardware stack levels used:    1
  4241 ;; Hardware stack levels required when called:    4
  4242 ;; This function calls:
  4243 ;;		_print_byte
  4244 ;;		_print_number_nospace
  4245 ;; This function is called by:
  4246 ;;		_handle_ir
  4247 ;; This function uses a non-reentrant model
  4248 ;;
  4249                           
  4250                           	psect	text7
  4251  001AD6                     __ptext7:
  4252                           	opt stack 0
  4253  001AD6                     _print_number:
  4254                           	opt stack 0
  4255  001AD6  FFFF               	dw	65535	; assembler added errata NOP
  4256                           
  4257                           ;clock.c: 615: print_number_nospace(number);
  4258                           
  4259                           ;incstack = 0
  4260  001AD8  C022  F020         	movff	print_number@number,print_number_nospace@number
  4261  001ADC  C023  F021         	movff	print_number@number+1,print_number_nospace@number+1
  4262  001AE0  EC42  F009         	call	_print_number_nospace	;wreg free
  4263                           
  4264                           ;clock.c: 616: print_byte(' ');
  4265  001AE4  0E20               	movlw	32
  4266  001AE6  EC5B  F00C         	call	_print_byte
  4267  001AEA  0012               	return		;funcret
  4268  001AEC  FFFF               	dw	65535	; errata NOP
  4269  001AEE                     __end_of_print_number:
  4270                           	opt stack 0
  4271                           tblptru	equ	0xFF8
  4272                           tblptrh	equ	0xFF7
  4273                           tblptrl	equ	0xFF6
  4274                           tablat	equ	0xFF5
  4275                           prodh	equ	0xFF4
  4276                           prodl	equ	0xFF3
  4277                           intcon	equ	0xFF2
  4278                           intcon2	equ	0xFF1
  4279                           intcon3	equ	0xFF0
  4280                           postinc0	equ	0xFEE
  4281                           wreg	equ	0xFE8
  4282                           postdec1	equ	0xFE5
  4283                           fsr1h	equ	0xFE2
  4284                           fsr1l	equ	0xFE1
  4285                           indf2	equ	0xFDF
  4286                           fsr2h	equ	0xFDA
  4287                           fsr2l	equ	0xFD9
  4288                           status	equ	0xFD8
  4289                           
  4290 ;; *************** function _print_number_nospace *****************
  4291 ;; Defined at:
  4292 ;;		line 598 in file "clock.c"
  4293 ;; Parameters:    Size  Location     Type
  4294 ;;  number          2   31[COMRAM] unsigned int 
  4295 ;; Auto vars:     Size  Location     Type
  4296 ;;		None
  4297 ;; Return value:  Size  Location     Type
  4298 ;;                  1    wreg      void 
  4299 ;; Registers used:
  4300 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4301 ;; Tracked objects:
  4302 ;;		On entry : 0/0
  4303 ;;		On exit  : 0/0
  4304 ;;		Unchanged: 0/0
  4305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4306 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4309 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;Total ram usage:        2 bytes
  4311 ;; Hardware stack levels used:    1
  4312 ;; Hardware stack levels required when called:    3
  4313 ;; This function calls:
  4314 ;;		___lwdiv
  4315 ;;		___lwmod
  4316 ;;		_print_byte
  4317 ;; This function is called by:
  4318 ;;		_print_number
  4319 ;; This function uses a non-reentrant model
  4320 ;;
  4321                           
  4322                           	psect	text8
  4323  001284                     __ptext8:
  4324                           	opt stack 0
  4325  001284                     _print_number_nospace:
  4326                           	opt stack 0
  4327  001284  FFFF               	dw	65535	; assembler added errata NOP
  4328                           
  4329                           ;clock.c: 600: if(number >= 10000) print_byte('0' + (number / 10000));
  4330                           
  4331                           ;incstack = 0
  4332  001286  0E10               	movlw	16
  4333  001288  5C20               	subwf	print_number_nospace@number,w,c
  4334  00128A  0E27               	movlw	39
  4335  00128C  5821               	subwfb	print_number_nospace@number+1,w,c
  4336  00128E  A0D8               	btfss	status,0,c
  4337  001290  D00E               	goto	l3645
  4338  001292  C020  F014         	movff	print_number_nospace@number,___lwdiv@dividend
  4339  001296  C021  F015         	movff	print_number_nospace@number+1,___lwdiv@dividend+1
  4340  00129A  0E27               	movlw	39
  4341  00129C  6E17               	movwf	___lwdiv@divisor+1,c
  4342  00129E  0E10               	movlw	16
  4343  0012A0  6E16               	movwf	___lwdiv@divisor,c
  4344  0012A2  EC8B  F00B         	call	___lwdiv	;wreg free
  4345  0012A6  5014               	movf	?___lwdiv,w,c
  4346  0012A8  0F30               	addlw	48
  4347  0012AA  EC5B  F00C         	call	_print_byte
  4348  0012AE                     l3645:
  4349  0012AE  FFFF               	dw	65535	; assembler added errata NOP
  4350                           
  4351                           ;clock.c: 601: if(number >= 1000) print_byte('0' + ((number / 1000) % 10));
  4352  0012B0  0EE8               	movlw	232
  4353  0012B2  5C20               	subwf	print_number_nospace@number,w,c
  4354  0012B4  0E03               	movlw	3
  4355  0012B6  5821               	subwfb	print_number_nospace@number+1,w,c
  4356  0012B8  A0D8               	btfss	status,0,c
  4357  0012BA  D018               	goto	l3649
  4358  0012BC  0E03               	movlw	3
  4359  0012BE  6E17               	movwf	___lwdiv@divisor+1,c
  4360  0012C0  0EE8               	movlw	232
  4361  0012C2  6E16               	movwf	___lwdiv@divisor,c
  4362  0012C4  C020  F014         	movff	print_number_nospace@number,___lwdiv@dividend
  4363  0012C8  C021  F015         	movff	print_number_nospace@number+1,___lwdiv@dividend+1
  4364  0012CC  EC8B  F00B         	call	___lwdiv	;wreg free
  4365  0012D0  C014  F01B         	movff	?___lwdiv,___lwmod@dividend
  4366  0012D4  C015  F01C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4367  0012D8  0E00               	movlw	0
  4368  0012DA  6E1E               	movwf	___lwmod@divisor+1,c
  4369  0012DC  0E0A               	movlw	10
  4370  0012DE  6E1D               	movwf	___lwmod@divisor,c
  4371  0012E0  ECE8  F00B         	call	___lwmod	;wreg free
  4372  0012E4  501B               	movf	?___lwmod,w,c
  4373  0012E6  0F30               	addlw	48
  4374  0012E8  EC5B  F00C         	call	_print_byte
  4375  0012EC                     l3649:
  4376  0012EC  FFFF               	dw	65535	; assembler added errata NOP
  4377                           
  4378                           ;clock.c: 602: if(number >= 100) print_byte('0' + ((number / 100) % 10));
  4379  0012EE  5021               	movf	print_number_nospace@number+1,w,c
  4380  0012F0  E104               	bnz	u4970
  4381  0012F2  0E64               	movlw	100
  4382  0012F4  5C20               	subwf	print_number_nospace@number,w,c
  4383  0012F6  A0D8               	btfss	status,0,c
  4384  0012F8  D018               	goto	l3653
  4385  0012FA                     u4970:
  4386  0012FA  0E00               	movlw	0
  4387  0012FC  6E17               	movwf	___lwdiv@divisor+1,c
  4388  0012FE  0E64               	movlw	100
  4389  001300  6E16               	movwf	___lwdiv@divisor,c
  4390  001302  C020  F014         	movff	print_number_nospace@number,___lwdiv@dividend
  4391  001306  C021  F015         	movff	print_number_nospace@number+1,___lwdiv@dividend+1
  4392  00130A  EC8B  F00B         	call	___lwdiv	;wreg free
  4393  00130E  C014  F01B         	movff	?___lwdiv,___lwmod@dividend
  4394  001312  C015  F01C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4395  001316  0E00               	movlw	0
  4396  001318  6E1E               	movwf	___lwmod@divisor+1,c
  4397  00131A  0E0A               	movlw	10
  4398  00131C  6E1D               	movwf	___lwmod@divisor,c
  4399  00131E  ECE8  F00B         	call	___lwmod	;wreg free
  4400  001322  501B               	movf	?___lwmod,w,c
  4401  001324  0F30               	addlw	48
  4402  001326  EC5B  F00C         	call	_print_byte
  4403  00132A                     l3653:
  4404  00132A  FFFF               	dw	65535	; assembler added errata NOP
  4405                           
  4406                           ;clock.c: 603: if(number >= 10) print_byte('0' + ((number / 10) % 10));
  4407  00132C  5021               	movf	print_number_nospace@number+1,w,c
  4408  00132E  E104               	bnz	u4980
  4409  001330  0E0A               	movlw	10
  4410  001332  5C20               	subwf	print_number_nospace@number,w,c
  4411  001334  A0D8               	btfss	status,0,c
  4412  001336  D018               	goto	l233
  4413  001338                     u4980:
  4414  001338  0E00               	movlw	0
  4415  00133A  6E17               	movwf	___lwdiv@divisor+1,c
  4416  00133C  0E0A               	movlw	10
  4417  00133E  6E16               	movwf	___lwdiv@divisor,c
  4418  001340  C020  F014         	movff	print_number_nospace@number,___lwdiv@dividend
  4419  001344  C021  F015         	movff	print_number_nospace@number+1,___lwdiv@dividend+1
  4420  001348  EC8B  F00B         	call	___lwdiv	;wreg free
  4421  00134C  C014  F01B         	movff	?___lwdiv,___lwmod@dividend
  4422  001350  C015  F01C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4423  001354  0E00               	movlw	0
  4424  001356  6E1E               	movwf	___lwmod@divisor+1,c
  4425  001358  0E0A               	movlw	10
  4426  00135A  6E1D               	movwf	___lwmod@divisor,c
  4427  00135C  ECE8  F00B         	call	___lwmod	;wreg free
  4428  001360  501B               	movf	?___lwmod,w,c
  4429  001362  0F30               	addlw	48
  4430  001364  EC5B  F00C         	call	_print_byte
  4431  001368                     l233:
  4432  001368  FFFF               	dw	65535	; assembler added errata NOP
  4433                           
  4434                           ;clock.c: 604: print_byte('0' + (number % 10));
  4435  00136A  C020  F01B         	movff	print_number_nospace@number,___lwmod@dividend
  4436  00136E  C021  F01C         	movff	print_number_nospace@number+1,___lwmod@dividend+1
  4437  001372  0E00               	movlw	0
  4438  001374  6E1E               	movwf	___lwmod@divisor+1,c
  4439  001376  0E0A               	movlw	10
  4440  001378  6E1D               	movwf	___lwmod@divisor,c
  4441  00137A  ECE8  F00B         	call	___lwmod	;wreg free
  4442  00137E  501B               	movf	?___lwmod,w,c
  4443  001380  0F30               	addlw	48
  4444  001382  EC5B  F00C         	call	_print_byte
  4445  001386  0012               	return		;funcret
  4446  001388  FFFF               	dw	65535	; errata NOP
  4447  00138A                     __end_of_print_number_nospace:
  4448                           	opt stack 0
  4449                           tblptru	equ	0xFF8
  4450                           tblptrh	equ	0xFF7
  4451                           tblptrl	equ	0xFF6
  4452                           tablat	equ	0xFF5
  4453                           prodh	equ	0xFF4
  4454                           prodl	equ	0xFF3
  4455                           intcon	equ	0xFF2
  4456                           intcon2	equ	0xFF1
  4457                           intcon3	equ	0xFF0
  4458                           postinc0	equ	0xFEE
  4459                           wreg	equ	0xFE8
  4460                           postdec1	equ	0xFE5
  4461                           fsr1h	equ	0xFE2
  4462                           fsr1l	equ	0xFE1
  4463                           indf2	equ	0xFDF
  4464                           fsr2h	equ	0xFDA
  4465                           fsr2l	equ	0xFD9
  4466                           status	equ	0xFD8
  4467                           
  4468 ;; *************** function ___lwmod *****************
  4469 ;; Defined at:
  4470 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  4471 ;; Parameters:    Size  Location     Type
  4472 ;;  dividend        2   26[COMRAM] unsigned int 
  4473 ;;  divisor         2   28[COMRAM] unsigned int 
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;  counter         1   30[COMRAM] unsigned char 
  4476 ;; Return value:  Size  Location     Type
  4477 ;;                  2   26[COMRAM] unsigned int 
  4478 ;; Registers used:
  4479 ;;		wreg, status,2, status,0
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 0/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4485 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4486 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4488 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4489 ;;Total ram usage:        5 bytes
  4490 ;; Hardware stack levels used:    1
  4491 ;; Hardware stack levels required when called:    2
  4492 ;; This function calls:
  4493 ;;		Nothing
  4494 ;; This function is called by:
  4495 ;;		_print_number_nospace
  4496 ;; This function uses a non-reentrant model
  4497 ;;
  4498                           
  4499                           	psect	text9
  4500  0017D0                     __ptext9:
  4501                           	opt stack 0
  4502  0017D0                     ___lwmod:
  4503                           	opt stack 0
  4504  0017D0  FFFF               	dw	65535	; assembler added errata NOP
  4505                           
  4506                           ;incstack = 0
  4507  0017D2  501D               	movf	___lwmod@divisor,w,c
  4508  0017D4  101E               	iorwf	___lwmod@divisor+1,w,c
  4509  0017D6  B4D8               	btfsc	status,2,c
  4510  0017D8  D01C               	goto	l950
  4511  0017DA  0E01               	movlw	1
  4512  0017DC  6E1F               	movwf	___lwmod@counter,c
  4513  0017DE  D005               	goto	l3631
  4514  0017E0                     l3629:
  4515  0017E0  FFFF               	dw	65535	; assembler added errata NOP
  4516  0017E2  90D8               	bcf	status,0,c
  4517  0017E4  361D               	rlcf	___lwmod@divisor,f,c
  4518  0017E6  361E               	rlcf	___lwmod@divisor+1,f,c
  4519  0017E8  2A1F               	incf	___lwmod@counter,f,c
  4520  0017EA                     l3631:
  4521  0017EA  FFFF               	dw	65535	; assembler added errata NOP
  4522  0017EC  AE1E               	btfss	___lwmod@divisor+1,7,c
  4523  0017EE  D7F8               	goto	l3629
  4524  0017F0                     l3633:
  4525  0017F0  FFFF               	dw	65535	; assembler added errata NOP
  4526  0017F2  501D               	movf	___lwmod@divisor,w,c
  4527  0017F4  5C1B               	subwf	___lwmod@dividend,w,c
  4528  0017F6  501E               	movf	___lwmod@divisor+1,w,c
  4529  0017F8  581C               	subwfb	___lwmod@dividend+1,w,c
  4530  0017FA  A0D8               	btfss	status,0,c
  4531  0017FC  D004               	goto	l3637
  4532  0017FE  501D               	movf	___lwmod@divisor,w,c
  4533  001800  5E1B               	subwf	___lwmod@dividend,f,c
  4534  001802  501E               	movf	___lwmod@divisor+1,w,c
  4535  001804  5A1C               	subwfb	___lwmod@dividend+1,f,c
  4536  001806                     l3637:
  4537  001806  FFFF               	dw	65535	; assembler added errata NOP
  4538  001808  90D8               	bcf	status,0,c
  4539  00180A  321E               	rrcf	___lwmod@divisor+1,f,c
  4540  00180C  321D               	rrcf	___lwmod@divisor,f,c
  4541  00180E  2E1F               	decfsz	___lwmod@counter,f,c
  4542  001810  D7EF               	goto	l3633
  4543  001812                     l950:
  4544  001812  FFFF               	dw	65535	; assembler added errata NOP
  4545  001814  C01B  F01B         	movff	___lwmod@dividend,?___lwmod
  4546  001818  C01C  F01C         	movff	___lwmod@dividend+1,?___lwmod+1
  4547  00181C  0012               	return		;funcret
  4548  00181E  FFFF               	dw	65535	; errata NOP
  4549  001820                     __end_of___lwmod:
  4550                           	opt stack 0
  4551                           tblptru	equ	0xFF8
  4552                           tblptrh	equ	0xFF7
  4553                           tblptrl	equ	0xFF6
  4554                           tablat	equ	0xFF5
  4555                           prodh	equ	0xFF4
  4556                           prodl	equ	0xFF3
  4557                           intcon	equ	0xFF2
  4558                           intcon2	equ	0xFF1
  4559                           intcon3	equ	0xFF0
  4560                           postinc0	equ	0xFEE
  4561                           wreg	equ	0xFE8
  4562                           postdec1	equ	0xFE5
  4563                           fsr1h	equ	0xFE2
  4564                           fsr1l	equ	0xFE1
  4565                           indf2	equ	0xFDF
  4566                           fsr2h	equ	0xFDA
  4567                           fsr2l	equ	0xFD9
  4568                           status	equ	0xFD8
  4569                           
  4570 ;; *************** function ___lwdiv *****************
  4571 ;; Defined at:
  4572 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  4573 ;; Parameters:    Size  Location     Type
  4574 ;;  dividend        2   19[COMRAM] unsigned int 
  4575 ;;  divisor         2   21[COMRAM] unsigned int 
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;  quotient        2   24[COMRAM] unsigned int 
  4578 ;;  counter         1   23[COMRAM] unsigned char 
  4579 ;; Return value:  Size  Location     Type
  4580 ;;                  2   19[COMRAM] unsigned int 
  4581 ;; Registers used:
  4582 ;;		wreg, status,2, status,0
  4583 ;; Tracked objects:
  4584 ;;		On entry : 0/0
  4585 ;;		On exit  : 0/0
  4586 ;;		Unchanged: 0/0
  4587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4588 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4589 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4591 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4592 ;;Total ram usage:        7 bytes
  4593 ;; Hardware stack levels used:    1
  4594 ;; Hardware stack levels required when called:    2
  4595 ;; This function calls:
  4596 ;;		Nothing
  4597 ;; This function is called by:
  4598 ;;		_print_number_nospace
  4599 ;; This function uses a non-reentrant model
  4600 ;;
  4601                           
  4602                           	psect	text10
  4603  001716                     __ptext10:
  4604                           	opt stack 0
  4605  001716                     ___lwdiv:
  4606                           	opt stack 0
  4607  001716  FFFF               	dw	65535	; assembler added errata NOP
  4608                           
  4609                           ;incstack = 0
  4610  001718  0E00               	movlw	0
  4611  00171A  6E1A               	movwf	___lwdiv@quotient+1,c
  4612  00171C  0E00               	movlw	0
  4613  00171E  6E19               	movwf	___lwdiv@quotient,c
  4614  001720  5016               	movf	___lwdiv@divisor,w,c
  4615  001722  1017               	iorwf	___lwdiv@divisor+1,w,c
  4616  001724  B4D8               	btfsc	status,2,c
  4617  001726  D020               	goto	l940
  4618  001728  0E01               	movlw	1
  4619  00172A  6E18               	movwf	___lwdiv@counter,c
  4620  00172C  D005               	goto	l3611
  4621  00172E                     l3609:
  4622  00172E  FFFF               	dw	65535	; assembler added errata NOP
  4623  001730  90D8               	bcf	status,0,c
  4624  001732  3616               	rlcf	___lwdiv@divisor,f,c
  4625  001734  3617               	rlcf	___lwdiv@divisor+1,f,c
  4626  001736  2A18               	incf	___lwdiv@counter,f,c
  4627  001738                     l3611:
  4628  001738  FFFF               	dw	65535	; assembler added errata NOP
  4629  00173A  AE17               	btfss	___lwdiv@divisor+1,7,c
  4630  00173C  D7F8               	goto	l3609
  4631  00173E                     l3613:
  4632  00173E  FFFF               	dw	65535	; assembler added errata NOP
  4633  001740  90D8               	bcf	status,0,c
  4634  001742  3619               	rlcf	___lwdiv@quotient,f,c
  4635  001744  361A               	rlcf	___lwdiv@quotient+1,f,c
  4636  001746  5016               	movf	___lwdiv@divisor,w,c
  4637  001748  5C14               	subwf	___lwdiv@dividend,w,c
  4638  00174A  5017               	movf	___lwdiv@divisor+1,w,c
  4639  00174C  5815               	subwfb	___lwdiv@dividend+1,w,c
  4640  00174E  A0D8               	btfss	status,0,c
  4641  001750  D005               	goto	l3621
  4642  001752  5016               	movf	___lwdiv@divisor,w,c
  4643  001754  5E14               	subwf	___lwdiv@dividend,f,c
  4644  001756  5017               	movf	___lwdiv@divisor+1,w,c
  4645  001758  5A15               	subwfb	___lwdiv@dividend+1,f,c
  4646  00175A  8019               	bsf	___lwdiv@quotient,0,c
  4647  00175C                     l3621:
  4648  00175C  FFFF               	dw	65535	; assembler added errata NOP
  4649  00175E  90D8               	bcf	status,0,c
  4650  001760  3217               	rrcf	___lwdiv@divisor+1,f,c
  4651  001762  3216               	rrcf	___lwdiv@divisor,f,c
  4652  001764  2E18               	decfsz	___lwdiv@counter,f,c
  4653  001766  D7EB               	goto	l3613
  4654  001768                     l940:
  4655  001768  FFFF               	dw	65535	; assembler added errata NOP
  4656  00176A  C019  F014         	movff	___lwdiv@quotient,?___lwdiv
  4657  00176E  C01A  F015         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4658  001772  0012               	return		;funcret
  4659  001774  FFFF               	dw	65535	; errata NOP
  4660  001776                     __end_of___lwdiv:
  4661                           	opt stack 0
  4662                           tblptru	equ	0xFF8
  4663                           tblptrh	equ	0xFF7
  4664                           tblptrl	equ	0xFF6
  4665                           tablat	equ	0xFF5
  4666                           prodh	equ	0xFF4
  4667                           prodl	equ	0xFF3
  4668                           intcon	equ	0xFF2
  4669                           intcon2	equ	0xFF1
  4670                           intcon3	equ	0xFF0
  4671                           postinc0	equ	0xFEE
  4672                           wreg	equ	0xFE8
  4673                           postdec1	equ	0xFE5
  4674                           fsr1h	equ	0xFE2
  4675                           fsr1l	equ	0xFE1
  4676                           indf2	equ	0xFDF
  4677                           fsr2h	equ	0xFDA
  4678                           fsr2l	equ	0xFD9
  4679                           status	equ	0xFD8
  4680                           
  4681 ;; *************** function _play_song *****************
  4682 ;; Defined at:
  4683 ;;		line 781 in file "clock.c"
  4684 ;; Parameters:    Size  Location     Type
  4685 ;;  ptr             2   19[COMRAM] PTR const struct .
  4686 ;;		 -> alarm_song(72), dn_tone(12), up_tone(12), set_time_tone2(20), 
  4687 ;;		 -> set_time_tone1(20), set_alarm_tone2(20), set_alarm_tone1(20), alarm_on_tone(36), 
  4688 ;;		 -> alarm_off_tone(36), test_tone(12), 
  4689 ;; Auto vars:     Size  Location     Type
  4690 ;;		None
  4691 ;; Return value:  Size  Location     Type
  4692 ;;                  1    wreg      void 
  4693 ;; Registers used:
  4694 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4695 ;; Tracked objects:
  4696 ;;		On entry : 0/0
  4697 ;;		On exit  : 0/0
  4698 ;;		Unchanged: 0/0
  4699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4700 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4703 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4704 ;;Total ram usage:        2 bytes
  4705 ;; Hardware stack levels used:    1
  4706 ;; Hardware stack levels required when called:    3
  4707 ;; This function calls:
  4708 ;;		_handle_song
  4709 ;; This function is called by:
  4710 ;;		_handle_ir
  4711 ;;		_start_alarm
  4712 ;; This function uses a non-reentrant model
  4713 ;;
  4714                           
  4715                           	psect	text11
  4716  001A58                     __ptext11:
  4717                           	opt stack 0
  4718  001A58                     _play_song:
  4719                           	opt stack 0
  4720  001A58  FFFF               	dw	65535	; assembler added errata NOP
  4721                           
  4722                           ;clock.c: 783: song_ptr = ptr;
  4723                           
  4724                           ;incstack = 0
  4725  001A5A  C014  F02E         	movff	play_song@ptr,_song_ptr
  4726  001A5E  C015  F02F         	movff	play_song@ptr+1,_song_ptr+1
  4727  001A62  502E               	movf	_song_ptr,w,c
  4728  001A64  102F               	iorwf	_song_ptr+1,w,c
  4729  001A66  A4D8               	btfss	status,2,c
  4730  001A68  0E00               	movlw	low (__mediumconst shr (0+16))
  4731  001A6A  6E30               	movwf	_song_ptr+2,c
  4732                           
  4733                           ;clock.c: 784: song_counter = 0;
  4734  001A6C  0E00               	movlw	0
  4735  001A6E  6E44               	movwf	_song_counter,c
  4736                           
  4737                           ;clock.c: 785: song_delay = 0;
  4738  001A70  0E00               	movlw	0
  4739  001A72  6E43               	movwf	_song_delay,c
  4740                           
  4741                           ;clock.c: 786: handle_song();
  4742  001A74  ECA2  F005         	call	_handle_song	;wreg free
  4743  001A78  0012               	return		;funcret
  4744  001A7A  FFFF               	dw	65535	; errata NOP
  4745  001A7C                     __end_of_play_song:
  4746                           	opt stack 0
  4747                           tblptru	equ	0xFF8
  4748                           tblptrh	equ	0xFF7
  4749                           tblptrl	equ	0xFF6
  4750                           tablat	equ	0xFF5
  4751                           prodh	equ	0xFF4
  4752                           prodl	equ	0xFF3
  4753                           intcon	equ	0xFF2
  4754                           intcon2	equ	0xFF1
  4755                           intcon3	equ	0xFF0
  4756                           postinc0	equ	0xFEE
  4757                           wreg	equ	0xFE8
  4758                           postdec1	equ	0xFE5
  4759                           fsr1h	equ	0xFE2
  4760                           fsr1l	equ	0xFE1
  4761                           indf2	equ	0xFDF
  4762                           fsr2h	equ	0xFDA
  4763                           fsr2l	equ	0xFD9
  4764                           status	equ	0xFD8
  4765                           
  4766 ;; *************** function _handle_song *****************
  4767 ;; Defined at:
  4768 ;;		line 721 in file "clock.c"
  4769 ;; Parameters:    Size  Location     Type
  4770 ;;		None
  4771 ;; Auto vars:     Size  Location     Type
  4772 ;;		None
  4773 ;; Return value:  Size  Location     Type
  4774 ;;                  1    wreg      void 
  4775 ;; Registers used:
  4776 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4777 ;; Tracked objects:
  4778 ;;		On entry : 0/0
  4779 ;;		On exit  : 0/0
  4780 ;;		Unchanged: 0/0
  4781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4786 ;;Total ram usage:        0 bytes
  4787 ;; Hardware stack levels used:    1
  4788 ;; Hardware stack levels required when called:    2
  4789 ;; This function calls:
  4790 ;;		Nothing
  4791 ;; This function is called by:
  4792 ;;		_play_song
  4793 ;;		_handle_time
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797                           	psect	text12
  4798  000B44                     __ptext12:
  4799                           	opt stack 0
  4800  000B44                     _handle_song:
  4801                           	opt stack 0
  4802  000B44  FFFF               	dw	65535	; assembler added errata NOP
  4803  000B46  FFFF               	dw	65535	; assembler added errata NOP
  4804                           
  4805                           ;clock.c: 724: {
  4806                           ;clock.c: 725: if(song_delay >= song_ptr->delay)
  4807  000B48  C02E  FFF6         	movff	_song_ptr,tblptrl
  4808  000B4C  C02F  FFF7         	movff	_song_ptr+1,tblptrh
  4809  000B50  C030  FFF8         	movff	_song_ptr+2,tblptru
  4810  000B54  0009               	tblrd		*+
  4811  000B56  FFFF               	dw	65535	; errata NOP
  4812  000B58  50F5               	movf	tablat,w,c
  4813  000B5A  5C43               	subwf	_song_delay,w,c
  4814  000B5C  B0D8               	btfsc	status,0,c
  4815  000B5E  D07F               	goto	l3677
  4816  000B60  D0CF               	goto	l290
  4817  000B62                     l3663:
  4818  000B62  FFFF               	dw	65535	; assembler added errata NOP
  4819                           
  4820                           ;clock.c: 730: osc1_period = freqs[song_ptr->freq];
  4821  000B64  0E02               	movlw	2
  4822  000B66  242E               	addwf	_song_ptr,w,c
  4823  000B68  6EF6               	movwf	tblptrl,c
  4824  000B6A  0E00               	movlw	0
  4825  000B6C  202F               	addwfc	_song_ptr+1,w,c
  4826  000B6E  6EF7               	movwf	tblptrh,c
  4827  000B70  0E00               	movlw	0
  4828  000B72  2030               	addwfc	_song_ptr+2,w,c
  4829  000B74  6EF8               	movwf	tblptru,c
  4830  000B76  0008               	tblrd		*
  4831  000B78  FFFF               	dw	65535	; errata NOP
  4832  000B7A  50F5               	movf	tablat,w,c
  4833  000B7C  0D02               	mullw	2
  4834  000B7E  0E5F               	movlw	low _freqs
  4835  000B80  24F3               	addwf	prodl,w,c
  4836  000B82  6EF6               	movwf	tblptrl,c
  4837  000B84  0EB9               	movlw	high _freqs
  4838  000B86  20F4               	addwfc	prodh,w,c
  4839  000B88  6EF7               	movwf	tblptrh,c
  4840  000B8A                     	if	0	;There are less than 3 active tblptr bytes
  4841  000B8A                     	endif
  4842  000B8A  0009               	tblrd		*+
  4843  000B8C  FFFF               	dw	65535	; errata NOP
  4844  000B8E  CFF5 F098          	movff	tablat,_osc1_period
  4845  000B92  000A               	tblrd		*-
  4846  000B94  FFFF               	dw	65535	; errata NOP
  4847  000B96  CFF5 F099          	movff	tablat,_osc1_period+1
  4848                           
  4849                           ;clock.c: 731: osc1_volume = song_ptr->volume;
  4850  000B9A  0E03               	movlw	3
  4851  000B9C  242E               	addwf	_song_ptr,w,c
  4852  000B9E  6EF6               	movwf	tblptrl,c
  4853  000BA0  0E00               	movlw	0
  4854  000BA2  202F               	addwfc	_song_ptr+1,w,c
  4855  000BA4  6EF7               	movwf	tblptrh,c
  4856  000BA6  0E00               	movlw	0
  4857  000BA8  2030               	addwfc	_song_ptr+2,w,c
  4858  000BAA  6EF8               	movwf	tblptru,c
  4859  000BAC  0008               	tblrd		*
  4860  000BAE  FFFF               	dw	65535	; errata NOP
  4861  000BB0  CFF5 F09C          	movff	tablat,_osc1_volume
  4862                           
  4863                           ;clock.c: 732: break;
  4864  000BB4  D06A               	goto	l3679
  4865  000BB6                     l3667:
  4866  000BB6  FFFF               	dw	65535	; assembler added errata NOP
  4867                           
  4868                           ;clock.c: 734: osc2_period = freqs[song_ptr->freq];
  4869  000BB8  0E02               	movlw	2
  4870  000BBA  242E               	addwf	_song_ptr,w,c
  4871  000BBC  6EF6               	movwf	tblptrl,c
  4872  000BBE  0E00               	movlw	0
  4873  000BC0  202F               	addwfc	_song_ptr+1,w,c
  4874  000BC2  6EF7               	movwf	tblptrh,c
  4875  000BC4  0E00               	movlw	0
  4876  000BC6  2030               	addwfc	_song_ptr+2,w,c
  4877  000BC8  6EF8               	movwf	tblptru,c
  4878  000BCA  0008               	tblrd		*
  4879  000BCC  FFFF               	dw	65535	; errata NOP
  4880  000BCE  50F5               	movf	tablat,w,c
  4881  000BD0  0D02               	mullw	2
  4882  000BD2  0E5F               	movlw	low _freqs
  4883  000BD4  24F3               	addwf	prodl,w,c
  4884  000BD6  6EF6               	movwf	tblptrl,c
  4885  000BD8  0EB9               	movlw	high _freqs
  4886  000BDA  20F4               	addwfc	prodh,w,c
  4887  000BDC  6EF7               	movwf	tblptrh,c
  4888  000BDE                     	if	0	;There are less than 3 active tblptr bytes
  4889  000BDE                     	endif
  4890  000BDE  0009               	tblrd		*+
  4891  000BE0  FFFF               	dw	65535	; errata NOP
  4892  000BE2  CFF5 F096          	movff	tablat,_osc2_period
  4893  000BE6  000A               	tblrd		*-
  4894  000BE8  FFFF               	dw	65535	; errata NOP
  4895  000BEA  CFF5 F097          	movff	tablat,_osc2_period+1
  4896                           
  4897                           ;clock.c: 735: osc2_volume = song_ptr->volume;
  4898  000BEE  0E03               	movlw	3
  4899  000BF0  242E               	addwf	_song_ptr,w,c
  4900  000BF2  6EF6               	movwf	tblptrl,c
  4901  000BF4  0E00               	movlw	0
  4902  000BF6  202F               	addwfc	_song_ptr+1,w,c
  4903  000BF8  6EF7               	movwf	tblptrh,c
  4904  000BFA  0E00               	movlw	0
  4905  000BFC  2030               	addwfc	_song_ptr+2,w,c
  4906  000BFE  6EF8               	movwf	tblptru,c
  4907  000C00  0008               	tblrd		*
  4908  000C02  FFFF               	dw	65535	; errata NOP
  4909  000C04  CFF5 F09B          	movff	tablat,_osc2_volume
  4910                           
  4911                           ;clock.c: 736: break;
  4912  000C08  D040               	goto	l3679
  4913  000C0A                     l3671:
  4914  000C0A  FFFF               	dw	65535	; assembler added errata NOP
  4915                           
  4916                           ;clock.c: 738: osc3_period = freqs[song_ptr->freq];
  4917  000C0C  0E02               	movlw	2
  4918  000C0E  242E               	addwf	_song_ptr,w,c
  4919  000C10  6EF6               	movwf	tblptrl,c
  4920  000C12  0E00               	movlw	0
  4921  000C14  202F               	addwfc	_song_ptr+1,w,c
  4922  000C16  6EF7               	movwf	tblptrh,c
  4923  000C18  0E00               	movlw	0
  4924  000C1A  2030               	addwfc	_song_ptr+2,w,c
  4925  000C1C  6EF8               	movwf	tblptru,c
  4926  000C1E  0008               	tblrd		*
  4927  000C20  FFFF               	dw	65535	; errata NOP
  4928  000C22  50F5               	movf	tablat,w,c
  4929  000C24  0D02               	mullw	2
  4930  000C26  0E5F               	movlw	low _freqs
  4931  000C28  24F3               	addwf	prodl,w,c
  4932  000C2A  6EF6               	movwf	tblptrl,c
  4933  000C2C  0EB9               	movlw	high _freqs
  4934  000C2E  20F4               	addwfc	prodh,w,c
  4935  000C30  6EF7               	movwf	tblptrh,c
  4936  000C32                     	if	0	;There are less than 3 active tblptr bytes
  4937  000C32                     	endif
  4938  000C32  0009               	tblrd		*+
  4939  000C34  FFFF               	dw	65535	; errata NOP
  4940  000C36  CFF5 F094          	movff	tablat,_osc3_period
  4941  000C3A  000A               	tblrd		*-
  4942  000C3C  FFFF               	dw	65535	; errata NOP
  4943  000C3E  CFF5 F095          	movff	tablat,_osc3_period+1
  4944                           
  4945                           ;clock.c: 739: osc3_volume = song_ptr->volume;
  4946  000C42  0E03               	movlw	3
  4947  000C44  242E               	addwf	_song_ptr,w,c
  4948  000C46  6EF6               	movwf	tblptrl,c
  4949  000C48  0E00               	movlw	0
  4950  000C4A  202F               	addwfc	_song_ptr+1,w,c
  4951  000C4C  6EF7               	movwf	tblptrh,c
  4952  000C4E  0E00               	movlw	0
  4953  000C50  2030               	addwfc	_song_ptr+2,w,c
  4954  000C52  6EF8               	movwf	tblptru,c
  4955  000C54  0008               	tblrd		*
  4956  000C56  FFFF               	dw	65535	; errata NOP
  4957  000C58  CFF5 F09A          	movff	tablat,_osc3_volume
  4958                           
  4959                           ;clock.c: 741: }
  4960                           
  4961                           ;clock.c: 740: break;
  4962  000C5C  D016               	goto	l3679
  4963  000C5E                     l3677:
  4964  000C5E  FFFF               	dw	65535	; assembler added errata NOP
  4965  000C60  0E01               	movlw	1
  4966  000C62  242E               	addwf	_song_ptr,w,c
  4967  000C64  6EF6               	movwf	tblptrl,c
  4968  000C66  0E00               	movlw	0
  4969  000C68  202F               	addwfc	_song_ptr+1,w,c
  4970  000C6A  6EF7               	movwf	tblptrh,c
  4971  000C6C  0E00               	movlw	0
  4972  000C6E  2030               	addwfc	_song_ptr+2,w,c
  4973  000C70  6EF8               	movwf	tblptru,c
  4974  000C72  0008               	tblrd		*
  4975  000C74  FFFF               	dw	65535	; errata NOP
  4976  000C76  50F5               	movf	tablat,w,c
  4977                           
  4978                           ; Switch size 1, requested type "space"
  4979                           ; Number of cases is 3, Range of values is 0 to 2
  4980                           ; switch strategies available:
  4981                           ; Name         Instructions Cycles
  4982                           ; simple_byte           10     6 (average)
  4983                           ;	Chosen strategy is simple_byte
  4984  000C78  0A00               	xorlw	0	; case 0
  4985  000C7A  B4D8               	btfsc	status,2,c
  4986  000C7C  D772               	goto	l3663
  4987  000C7E  0A01               	xorlw	1	; case 1
  4988  000C80  B4D8               	btfsc	status,2,c
  4989  000C82  D799               	goto	l3667
  4990  000C84  0A03               	xorlw	3	; case 2
  4991  000C86  B4D8               	btfsc	status,2,c
  4992  000C88  D7C0               	goto	l3671
  4993  000C8A                     l3679:
  4994  000C8A  FFFF               	dw	65535	; assembler added errata NOP
  4995                           
  4996                           ;clock.c: 742: song_ptr++;
  4997  000C8C  0E04               	movlw	4
  4998  000C8E  262E               	addwf	_song_ptr,f,c
  4999  000C90  0E00               	movlw	0
  5000  000C92  222F               	addwfc	_song_ptr+1,f,c
  5001  000C94  0E00               	movlw	0
  5002  000C96  2230               	addwfc	_song_ptr+2,f,c
  5003                           
  5004                           ;clock.c: 743: song_delay = 0;
  5005  000C98  0E00               	movlw	0
  5006  000C9A  6E43               	movwf	_song_delay,c
  5007                           
  5008                           ;clock.c: 745: if(song_ptr->osc == 0xff)
  5009  000C9C  0E01               	movlw	1
  5010  000C9E  242E               	addwf	_song_ptr,w,c
  5011  000CA0  6EF6               	movwf	tblptrl,c
  5012  000CA2  0E00               	movlw	0
  5013  000CA4  202F               	addwfc	_song_ptr+1,w,c
  5014  000CA6  6EF7               	movwf	tblptrh,c
  5015  000CA8  0E00               	movlw	0
  5016  000CAA  2030               	addwfc	_song_ptr+2,w,c
  5017  000CAC  6EF8               	movwf	tblptru,c
  5018  000CAE  0008               	tblrd		*
  5019  000CB0  FFFF               	dw	65535	; errata NOP
  5020  000CB2  50F5               	movf	tablat,w,c
  5021  000CB4  0AFF               	xorlw	255
  5022  000CB6  A4D8               	btfss	status,2,c
  5023  000CB8  D023               	goto	l290
  5024                           
  5025                           ;clock.c: 746: {
  5026                           ;clock.c: 747: if(alarm_sounding)
  5027  000CBA  5047               	movf	_alarm_sounding,w,c
  5028  000CBC  B4D8               	btfsc	status,2,c
  5029  000CBE  D018               	goto	l3697
  5030                           
  5031                           ;clock.c: 748: {
  5032                           ;clock.c: 750: if(alarm_time > (4 * 60))
  5033  000CC0  0EF0               	movlw	240
  5034  000CC2  6437               	cpfsgt	_alarm_time,c
  5035  000CC4  D00B               	goto	l3695
  5036                           
  5037                           ;clock.c: 751: {
  5038                           ;clock.c: 752: song_ptr = 0;
  5039  000CC6  0E00               	movlw	0
  5040  000CC8  6E2E               	movwf	_song_ptr,c
  5041  000CCA  0E00               	movlw	0
  5042  000CCC  6E2F               	movwf	_song_ptr+1,c
  5043  000CCE  0E00               	movlw	0
  5044  000CD0  6E30               	movwf	_song_ptr+2,c
  5045                           
  5046                           ;clock.c: 753: alarm_sounding = 0;
  5047  000CD2  0E00               	movlw	0
  5048  000CD4  6E47               	movwf	_alarm_sounding,c
  5049                           
  5050                           ;clock.c: 754: alarm_time = 0;
  5051  000CD6  0E00               	movlw	0
  5052  000CD8  6E37               	movwf	_alarm_time,c
  5053                           
  5054                           ;clock.c: 755: }
  5055  000CDA  D012               	goto	l290
  5056  000CDC                     l3695:
  5057  000CDC  FFFF               	dw	65535	; assembler added errata NOP
  5058                           
  5059                           ;clock.c: 756: else
  5060                           ;clock.c: 757: {
  5061                           ;clock.c: 758: song_ptr = alarm_song;
  5062  000CDE  0E29               	movlw	low _alarm_song
  5063  000CE0  6E2E               	movwf	_song_ptr,c
  5064  000CE2  0EBE               	movlw	high _alarm_song
  5065  000CE4  6E2F               	movwf	_song_ptr+1,c
  5066  000CE6  502E               	movf	_song_ptr,w,c
  5067  000CE8  102F               	iorwf	_song_ptr+1,w,c
  5068  000CEA  A4D8               	btfss	status,2,c
  5069  000CEC  0E00               	movlw	low (__mediumconst shr (0+16))
  5070  000CEE  D006               	goto	L1
  5071  000CF0                     l3697:
  5072  000CF0  FFFF               	dw	65535	; assembler added errata NOP
  5073                           
  5074                           ;clock.c: 761: else
  5075                           ;clock.c: 762: {
  5076                           ;clock.c: 763: song_ptr = 0;
  5077  000CF2  0E00               	movlw	0
  5078  000CF4  6E2E               	movwf	_song_ptr,c
  5079  000CF6  0E00               	movlw	0
  5080  000CF8  6E2F               	movwf	_song_ptr+1,c
  5081  000CFA  0E00               	movlw	0
  5082  000CFC                     L1:
  5083  000CFC  FFFF               	dw	65535	; assembler added errata NOP
  5084  000CFE  6E30               	movwf	_song_ptr+2,c
  5085  000D00                     l290:
  5086  000D00  FFFF               	dw	65535	; assembler added errata NOP
  5087                           
  5088                           ;clock.c: 764: }
  5089                           ;clock.c: 765: }
  5090                           ;clock.c: 766: }
  5091                           ;clock.c: 767: } while(song_ptr && song_ptr->delay == 0);
  5092  000D02  502E               	movf	_song_ptr,w,c
  5093  000D04  102F               	iorwf	_song_ptr+1,w,c
  5094  000D06  1030               	iorwf	_song_ptr+2,w,c
  5095  000D08  B4D8               	btfsc	status,2,c
  5096  000D0A  D00C               	goto	l304
  5097  000D0C  C02E  FFF6         	movff	_song_ptr,tblptrl
  5098  000D10  C02F  FFF7         	movff	_song_ptr+1,tblptrh
  5099  000D14  C030  FFF8         	movff	_song_ptr+2,tblptru
  5100  000D18  0008               	tblrd		*
  5101  000D1A  FFFF               	dw	65535	; errata NOP
  5102  000D1C  50F5               	movf	tablat,w,c
  5103  000D1E  0900               	iorlw	0
  5104  000D20  B4D8               	btfsc	status,2,c
  5105  000D22  D711               	goto	l3659
  5106  000D24                     l304:
  5107  000D24  FFFF               	dw	65535	; assembler added errata NOP
  5108  000D26  0012               	return		;funcret
  5109  000D28  FFFF               	dw	65535	; errata NOP
  5110  000D2A                     __end_of_handle_song:
  5111                           	opt stack 0
  5112                           tblptru	equ	0xFF8
  5113                           tblptrh	equ	0xFF7
  5114                           tblptrl	equ	0xFF6
  5115                           tablat	equ	0xFF5
  5116                           prodh	equ	0xFF4
  5117                           prodl	equ	0xFF3
  5118                           intcon	equ	0xFF2
  5119                           intcon2	equ	0xFF1
  5120                           intcon3	equ	0xFF0
  5121                           postinc0	equ	0xFEE
  5122                           wreg	equ	0xFE8
  5123                           postdec1	equ	0xFE5
  5124                           fsr1h	equ	0xFE2
  5125                           fsr1l	equ	0xFE1
  5126                           indf2	equ	0xFDF
  5127                           fsr2h	equ	0xFDA
  5128                           fsr2l	equ	0xFD9
  5129                           status	equ	0xFD8
  5130                           
  5131 ;; *************** function _draw_test *****************
  5132 ;; Defined at:
  5133 ;;		line 899 in file "clock.c"
  5134 ;; Parameters:    Size  Location     Type
  5135 ;;		None
  5136 ;; Auto vars:     Size  Location     Type
  5137 ;;		None
  5138 ;; Return value:  Size  Location     Type
  5139 ;;                  1    wreg      void 
  5140 ;; Registers used:
  5141 ;;		wreg, status,2, status,0, cstack
  5142 ;; Tracked objects:
  5143 ;;		On entry : 0/0
  5144 ;;		On exit  : 0/0
  5145 ;;		Unchanged: 0/0
  5146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5151 ;;Total ram usage:        0 bytes
  5152 ;; Hardware stack levels used:    1
  5153 ;; Hardware stack levels required when called:    3
  5154 ;; This function calls:
  5155 ;;		_write_leds
  5156 ;; This function is called by:
  5157 ;;		_handle_ir
  5158 ;; This function uses a non-reentrant model
  5159 ;;
  5160                           
  5161                           	psect	text13
  5162  001B1C                     __ptext13:
  5163                           	opt stack 0
  5164  001B1C                     _draw_test:
  5165                           	opt stack 0
  5166  001B1C  FFFF               	dw	65535	; assembler added errata NOP
  5167                           
  5168                           ;clock.c: 901: led_mask3 = 0xff;
  5169                           
  5170                           ;incstack = 0
  5171  001B1E  6834               	setf	_led_mask3,c
  5172                           
  5173                           ;clock.c: 902: led_mask2 = 0xff;
  5174  001B20  6835               	setf	_led_mask2,c
  5175                           
  5176                           ;clock.c: 903: led_mask1 = 0xff;
  5177  001B22  6836               	setf	_led_mask1,c
  5178                           
  5179                           ;clock.c: 904: led_mask0 = 0xff;
  5180  001B24  684B               	setf	_led_mask0,c
  5181                           
  5182                           ;clock.c: 905: write_leds();
  5183  001B26  ECD8  F002         	call	_write_leds	;wreg free
  5184  001B2A  0012               	return		;funcret
  5185  001B2C  FFFF               	dw	65535	; errata NOP
  5186  001B2E                     __end_of_draw_test:
  5187                           	opt stack 0
  5188                           tblptru	equ	0xFF8
  5189                           tblptrh	equ	0xFF7
  5190                           tblptrl	equ	0xFF6
  5191                           tablat	equ	0xFF5
  5192                           prodh	equ	0xFF4
  5193                           prodl	equ	0xFF3
  5194                           intcon	equ	0xFF2
  5195                           intcon2	equ	0xFF1
  5196                           intcon3	equ	0xFF0
  5197                           postinc0	equ	0xFEE
  5198                           wreg	equ	0xFE8
  5199                           postdec1	equ	0xFE5
  5200                           fsr1h	equ	0xFE2
  5201                           fsr1l	equ	0xFE1
  5202                           indf2	equ	0xFDF
  5203                           fsr2h	equ	0xFDA
  5204                           fsr2l	equ	0xFD9
  5205                           status	equ	0xFD8
  5206                           
  5207 ;; *************** function _do_minute_up *****************
  5208 ;; Defined at:
  5209 ;;		line 1098 in file "clock.c"
  5210 ;; Parameters:    Size  Location     Type
  5211 ;;		None
  5212 ;; Auto vars:     Size  Location     Type
  5213 ;;		None
  5214 ;; Return value:  Size  Location     Type
  5215 ;;                  1    wreg      void 
  5216 ;; Registers used:
  5217 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5218 ;; Tracked objects:
  5219 ;;		On entry : 0/0
  5220 ;;		On exit  : 0/0
  5221 ;;		Unchanged: 0/0
  5222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5227 ;;Total ram usage:        0 bytes
  5228 ;; Hardware stack levels used:    1
  5229 ;; Hardware stack levels required when called:    5
  5230 ;; This function calls:
  5231 ;;		_increment_alarm_minutes
  5232 ;;		_increment_time_minutes
  5233 ;; This function is called by:
  5234 ;;		_handle_repeat
  5235 ;;		_handle_ir
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           	psect	text14
  5240  001A7C                     __ptext14:
  5241                           	opt stack 0
  5242  001A7C                     _do_minute_up:
  5243                           	opt stack 0
  5244  001A7C  FFFF               	dw	65535	; assembler added errata NOP
  5245                           
  5246                           ;clock.c: 1100: if(mode == 1)
  5247                           
  5248                           ;incstack = 0
  5249  001A7E  043C               	decf	_mode,w,c
  5250  001A80  A4D8               	btfss	status,2,c
  5251  001A82  D003               	goto	l3901
  5252                           
  5253                           ;clock.c: 1101: {
  5254                           ;clock.c: 1102: increment_time_minutes();
  5255  001A84  ECEB  F00C         	call	_increment_time_minutes	;wreg free
  5256                           
  5257                           ;clock.c: 1103: }
  5258  001A88  D006               	goto	l400
  5259  001A8A                     l3901:
  5260  001A8A  FFFF               	dw	65535	; assembler added errata NOP
  5261                           
  5262                           ;clock.c: 1104: else
  5263                           ;clock.c: 1105: if(mode == 2)
  5264  001A8C  0E02               	movlw	2
  5265  001A8E  183C               	xorwf	_mode,w,c
  5266  001A90  B4D8               	btfsc	status,2,c
  5267                           
  5268                           ;clock.c: 1106: {
  5269                           ;clock.c: 1107: increment_alarm_minutes();
  5270  001A92  EC5E  F00D         	call	_increment_alarm_minutes	;wreg free
  5271  001A96                     l400:
  5272  001A96  FFFF               	dw	65535	; assembler added errata NOP
  5273  001A98  0012               	return		;funcret
  5274  001A9A  FFFF               	dw	65535	; errata NOP
  5275  001A9C                     __end_of_do_minute_up:
  5276                           	opt stack 0
  5277                           tblptru	equ	0xFF8
  5278                           tblptrh	equ	0xFF7
  5279                           tblptrl	equ	0xFF6
  5280                           tablat	equ	0xFF5
  5281                           prodh	equ	0xFF4
  5282                           prodl	equ	0xFF3
  5283                           intcon	equ	0xFF2
  5284                           intcon2	equ	0xFF1
  5285                           intcon3	equ	0xFF0
  5286                           postinc0	equ	0xFEE
  5287                           wreg	equ	0xFE8
  5288                           postdec1	equ	0xFE5
  5289                           fsr1h	equ	0xFE2
  5290                           fsr1l	equ	0xFE1
  5291                           indf2	equ	0xFDF
  5292                           fsr2h	equ	0xFDA
  5293                           fsr2l	equ	0xFD9
  5294                           status	equ	0xFD8
  5295                           
  5296 ;; *************** function _increment_time_minutes *****************
  5297 ;; Defined at:
  5298 ;;		line 909 in file "clock.c"
  5299 ;; Parameters:    Size  Location     Type
  5300 ;;		None
  5301 ;; Auto vars:     Size  Location     Type
  5302 ;;		None
  5303 ;; Return value:  Size  Location     Type
  5304 ;;                  1    wreg      void 
  5305 ;; Registers used:
  5306 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5307 ;; Tracked objects:
  5308 ;;		On entry : 0/0
  5309 ;;		On exit  : 0/0
  5310 ;;		Unchanged: 0/0
  5311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5316 ;;Total ram usage:        0 bytes
  5317 ;; Hardware stack levels used:    1
  5318 ;; Hardware stack levels required when called:    4
  5319 ;; This function calls:
  5320 ;;		_draw_time
  5321 ;; This function is called by:
  5322 ;;		_do_minute_up
  5323 ;; This function uses a non-reentrant model
  5324 ;;
  5325                           
  5326                           	psect	text15
  5327  0019D6                     __ptext15:
  5328                           	opt stack 0
  5329  0019D6                     _increment_time_minutes:
  5330                           	opt stack 0
  5331  0019D6  FFFF               	dw	65535	; assembler added errata NOP
  5332                           
  5333                           ;clock.c: 911: crystal_time = 0;
  5334                           
  5335                           ;incstack = 0
  5336  0019D8  0E00               	movlw	0
  5337  0019DA  0100               	movlb	0	; () banked
  5338  0019DC  6F6D               	movwf	(_crystal_time+1)& (0+255),b
  5339  0019DE  0E00               	movlw	0
  5340  0019E0  6F6C               	movwf	_crystal_time& (0+255),b
  5341                           
  5342                           ;clock.c: 912: display_flash = 0;
  5343  0019E2  0E00               	movlw	0
  5344  0019E4  6E42               	movwf	_display_flash,c
  5345                           
  5346                           ;clock.c: 913: time_hz = 0;
  5347  0019E6  0E00               	movlw	0
  5348  0019E8  6E41               	movwf	_time_hz,c
  5349                           
  5350                           ;clock.c: 914: seconds = 0;
  5351  0019EA  0E00               	movlw	0
  5352  0019EC  6E40               	movwf	_seconds,c
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;clock.c: 915: minutes++;
  5356  0019EE  2A3F               	incf	_minutes,f,c
  5357                           
  5358                           ; BSR set to: 0
  5359                           ;clock.c: 916: if(minutes == 60)
  5360  0019F0  0E3C               	movlw	60
  5361  0019F2  183F               	xorwf	_minutes,w,c
  5362  0019F4  A4D8               	btfss	status,2,c
  5363  0019F6  D002               	goto	l3709
  5364                           
  5365                           ; BSR set to: 0
  5366                           ;clock.c: 917: {
  5367                           ;clock.c: 918: minutes = 0;
  5368  0019F8  0E00               	movlw	0
  5369  0019FA  6E3F               	movwf	_minutes,c
  5370  0019FC                     l3709:
  5371  0019FC  FFFF               	dw	65535	; assembler added errata NOP
  5372                           
  5373                           ; BSR set to: 0
  5374                           ;clock.c: 919: }
  5375                           ;clock.c: 920: draw_time();
  5376  0019FE  EC95  F006         	call	_draw_time	;wreg free
  5377  001A02  0012               	return		;funcret
  5378  001A04  FFFF               	dw	65535	; errata NOP
  5379  001A06                     __end_of_increment_time_minutes:
  5380                           	opt stack 0
  5381                           tblptru	equ	0xFF8
  5382                           tblptrh	equ	0xFF7
  5383                           tblptrl	equ	0xFF6
  5384                           tablat	equ	0xFF5
  5385                           prodh	equ	0xFF4
  5386                           prodl	equ	0xFF3
  5387                           intcon	equ	0xFF2
  5388                           intcon2	equ	0xFF1
  5389                           intcon3	equ	0xFF0
  5390                           postinc0	equ	0xFEE
  5391                           wreg	equ	0xFE8
  5392                           postdec1	equ	0xFE5
  5393                           fsr1h	equ	0xFE2
  5394                           fsr1l	equ	0xFE1
  5395                           indf2	equ	0xFDF
  5396                           fsr2h	equ	0xFDA
  5397                           fsr2l	equ	0xFD9
  5398                           status	equ	0xFD8
  5399                           
  5400 ;; *************** function _increment_alarm_minutes *****************
  5401 ;; Defined at:
  5402 ;;		line 923 in file "clock.c"
  5403 ;; Parameters:    Size  Location     Type
  5404 ;;		None
  5405 ;; Auto vars:     Size  Location     Type
  5406 ;;		None
  5407 ;; Return value:  Size  Location     Type
  5408 ;;                  1    wreg      void 
  5409 ;; Registers used:
  5410 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5411 ;; Tracked objects:
  5412 ;;		On entry : 0/0
  5413 ;;		On exit  : 0/0
  5414 ;;		Unchanged: 0/0
  5415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5420 ;;Total ram usage:        0 bytes
  5421 ;; Hardware stack levels used:    1
  5422 ;; Hardware stack levels required when called:    4
  5423 ;; This function calls:
  5424 ;;		_draw_alarm
  5425 ;; This function is called by:
  5426 ;;		_do_minute_up
  5427 ;; This function uses a non-reentrant model
  5428 ;;
  5429                           
  5430                           	psect	text16
  5431  001ABC                     __ptext16:
  5432                           	opt stack 0
  5433  001ABC                     _increment_alarm_minutes:
  5434                           	opt stack 0
  5435  001ABC  FFFF               	dw	65535	; assembler added errata NOP
  5436                           
  5437                           ;clock.c: 925: alarm_minutes++;
  5438                           
  5439                           ;incstack = 0
  5440  001ABE  2A39               	incf	_alarm_minutes,f,c
  5441                           
  5442                           ;clock.c: 926: if(alarm_minutes == 60)
  5443  001AC0  0E3C               	movlw	60
  5444  001AC2  1839               	xorwf	_alarm_minutes,w,c
  5445  001AC4  A4D8               	btfss	status,2,c
  5446  001AC6  D002               	goto	l3717
  5447                           
  5448                           ;clock.c: 927: {
  5449                           ;clock.c: 928: alarm_minutes = 0;
  5450  001AC8  0E00               	movlw	0
  5451  001ACA  6E39               	movwf	_alarm_minutes,c
  5452  001ACC                     l3717:
  5453  001ACC  FFFF               	dw	65535	; assembler added errata NOP
  5454                           
  5455                           ;clock.c: 929: }
  5456                           ;clock.c: 930: draw_alarm();
  5457  001ACE  EC64  F008         	call	_draw_alarm	;wreg free
  5458  001AD2  0012               	return		;funcret
  5459  001AD4  FFFF               	dw	65535	; errata NOP
  5460  001AD6                     __end_of_increment_alarm_minutes:
  5461                           	opt stack 0
  5462                           tblptru	equ	0xFF8
  5463                           tblptrh	equ	0xFF7
  5464                           tblptrl	equ	0xFF6
  5465                           tablat	equ	0xFF5
  5466                           prodh	equ	0xFF4
  5467                           prodl	equ	0xFF3
  5468                           intcon	equ	0xFF2
  5469                           intcon2	equ	0xFF1
  5470                           intcon3	equ	0xFF0
  5471                           postinc0	equ	0xFEE
  5472                           wreg	equ	0xFE8
  5473                           postdec1	equ	0xFE5
  5474                           fsr1h	equ	0xFE2
  5475                           fsr1l	equ	0xFE1
  5476                           indf2	equ	0xFDF
  5477                           fsr2h	equ	0xFDA
  5478                           fsr2l	equ	0xFD9
  5479                           status	equ	0xFD8
  5480                           
  5481 ;; *************** function _do_minute_down *****************
  5482 ;; Defined at:
  5483 ;;		line 1111 in file "clock.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;		None
  5486 ;; Auto vars:     Size  Location     Type
  5487 ;;		None
  5488 ;; Return value:  Size  Location     Type
  5489 ;;                  1    wreg      void 
  5490 ;; Registers used:
  5491 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5492 ;; Tracked objects:
  5493 ;;		On entry : 0/0
  5494 ;;		On exit  : 0/0
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5501 ;;Total ram usage:        0 bytes
  5502 ;; Hardware stack levels used:    1
  5503 ;; Hardware stack levels required when called:    5
  5504 ;; This function calls:
  5505 ;;		_decrement_alarm_minutes
  5506 ;;		_decrement_time_minutes
  5507 ;; This function is called by:
  5508 ;;		_handle_repeat
  5509 ;;		_handle_ir
  5510 ;; This function uses a non-reentrant model
  5511 ;;
  5512                           
  5513                           	psect	text17
  5514  001A9C                     __ptext17:
  5515                           	opt stack 0
  5516  001A9C                     _do_minute_down:
  5517                           	opt stack 0
  5518  001A9C  FFFF               	dw	65535	; assembler added errata NOP
  5519                           
  5520                           ;clock.c: 1113: if(mode == 1)
  5521                           
  5522                           ;incstack = 0
  5523  001A9E  043C               	decf	_mode,w,c
  5524  001AA0  A4D8               	btfss	status,2,c
  5525  001AA2  D003               	goto	l3909
  5526                           
  5527                           ;clock.c: 1114: {
  5528                           ;clock.c: 1115: decrement_time_minutes();
  5529  001AA4  EC03  F00D         	call	_decrement_time_minutes	;wreg free
  5530                           
  5531                           ;clock.c: 1116: }
  5532  001AA8  D006               	goto	l406
  5533  001AAA                     l3909:
  5534  001AAA  FFFF               	dw	65535	; assembler added errata NOP
  5535                           
  5536                           ;clock.c: 1117: else
  5537                           ;clock.c: 1118: if(mode == 2)
  5538  001AAC  0E02               	movlw	2
  5539  001AAE  183C               	xorwf	_mode,w,c
  5540  001AB0  B4D8               	btfsc	status,2,c
  5541                           
  5542                           ;clock.c: 1119: {
  5543                           ;clock.c: 1120: decrement_alarm_minutes();
  5544  001AB2  EC77  F00D         	call	_decrement_alarm_minutes	;wreg free
  5545  001AB6                     l406:
  5546  001AB6  FFFF               	dw	65535	; assembler added errata NOP
  5547  001AB8  0012               	return		;funcret
  5548  001ABA  FFFF               	dw	65535	; errata NOP
  5549  001ABC                     __end_of_do_minute_down:
  5550                           	opt stack 0
  5551                           tblptru	equ	0xFF8
  5552                           tblptrh	equ	0xFF7
  5553                           tblptrl	equ	0xFF6
  5554                           tablat	equ	0xFF5
  5555                           prodh	equ	0xFF4
  5556                           prodl	equ	0xFF3
  5557                           intcon	equ	0xFF2
  5558                           intcon2	equ	0xFF1
  5559                           intcon3	equ	0xFF0
  5560                           postinc0	equ	0xFEE
  5561                           wreg	equ	0xFE8
  5562                           postdec1	equ	0xFE5
  5563                           fsr1h	equ	0xFE2
  5564                           fsr1l	equ	0xFE1
  5565                           indf2	equ	0xFDF
  5566                           fsr2h	equ	0xFDA
  5567                           fsr2l	equ	0xFD9
  5568                           status	equ	0xFD8
  5569                           
  5570 ;; *************** function _decrement_time_minutes *****************
  5571 ;; Defined at:
  5572 ;;		line 933 in file "clock.c"
  5573 ;; Parameters:    Size  Location     Type
  5574 ;;		None
  5575 ;; Auto vars:     Size  Location     Type
  5576 ;;		None
  5577 ;; Return value:  Size  Location     Type
  5578 ;;                  1    wreg      void 
  5579 ;; Registers used:
  5580 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5581 ;; Tracked objects:
  5582 ;;		On entry : 0/0
  5583 ;;		On exit  : 0/0
  5584 ;;		Unchanged: 0/0
  5585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5590 ;;Total ram usage:        0 bytes
  5591 ;; Hardware stack levels used:    1
  5592 ;; Hardware stack levels required when called:    4
  5593 ;; This function calls:
  5594 ;;		_draw_time
  5595 ;; This function is called by:
  5596 ;;		_do_minute_down
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600                           	psect	text18
  5601  001A06                     __ptext18:
  5602                           	opt stack 0
  5603  001A06                     _decrement_time_minutes:
  5604                           	opt stack 0
  5605  001A06  FFFF               	dw	65535	; assembler added errata NOP
  5606                           
  5607                           ;clock.c: 935: crystal_time = 0;
  5608                           
  5609                           ;incstack = 0
  5610  001A08  0E00               	movlw	0
  5611  001A0A  0100               	movlb	0	; () banked
  5612  001A0C  6F6D               	movwf	(_crystal_time+1)& (0+255),b
  5613  001A0E  0E00               	movlw	0
  5614  001A10  6F6C               	movwf	_crystal_time& (0+255),b
  5615                           
  5616                           ;clock.c: 936: display_flash = 0;
  5617  001A12  0E00               	movlw	0
  5618  001A14  6E42               	movwf	_display_flash,c
  5619                           
  5620                           ;clock.c: 937: time_hz = 0;
  5621  001A16  0E00               	movlw	0
  5622  001A18  6E41               	movwf	_time_hz,c
  5623                           
  5624                           ;clock.c: 938: seconds = 0;
  5625  001A1A  0E00               	movlw	0
  5626  001A1C  6E40               	movwf	_seconds,c
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;clock.c: 939: minutes--;
  5630  001A1E  063F               	decf	_minutes,f,c
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;clock.c: 940: if(minutes == 0xff)
  5634  001A20  283F               	incf	_minutes,w,c
  5635  001A22  A4D8               	btfss	status,2,c
  5636  001A24  D002               	goto	l3727
  5637                           
  5638                           ; BSR set to: 0
  5639                           ;clock.c: 941: {
  5640                           ;clock.c: 942: minutes = 59;
  5641  001A26  0E3B               	movlw	59
  5642  001A28  6E3F               	movwf	_minutes,c
  5643  001A2A                     l3727:
  5644  001A2A  FFFF               	dw	65535	; assembler added errata NOP
  5645                           
  5646                           ; BSR set to: 0
  5647                           ;clock.c: 943: }
  5648                           ;clock.c: 944: draw_time();
  5649  001A2C  EC95  F006         	call	_draw_time	;wreg free
  5650  001A30  0012               	return		;funcret
  5651  001A32  FFFF               	dw	65535	; errata NOP
  5652  001A34                     __end_of_decrement_time_minutes:
  5653                           	opt stack 0
  5654                           tblptru	equ	0xFF8
  5655                           tblptrh	equ	0xFF7
  5656                           tblptrl	equ	0xFF6
  5657                           tablat	equ	0xFF5
  5658                           prodh	equ	0xFF4
  5659                           prodl	equ	0xFF3
  5660                           intcon	equ	0xFF2
  5661                           intcon2	equ	0xFF1
  5662                           intcon3	equ	0xFF0
  5663                           postinc0	equ	0xFEE
  5664                           wreg	equ	0xFE8
  5665                           postdec1	equ	0xFE5
  5666                           fsr1h	equ	0xFE2
  5667                           fsr1l	equ	0xFE1
  5668                           indf2	equ	0xFDF
  5669                           fsr2h	equ	0xFDA
  5670                           fsr2l	equ	0xFD9
  5671                           status	equ	0xFD8
  5672                           
  5673 ;; *************** function _decrement_alarm_minutes *****************
  5674 ;; Defined at:
  5675 ;;		line 947 in file "clock.c"
  5676 ;; Parameters:    Size  Location     Type
  5677 ;;		None
  5678 ;; Auto vars:     Size  Location     Type
  5679 ;;		None
  5680 ;; Return value:  Size  Location     Type
  5681 ;;                  1    wreg      void 
  5682 ;; Registers used:
  5683 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5684 ;; Tracked objects:
  5685 ;;		On entry : 0/0
  5686 ;;		On exit  : 0/0
  5687 ;;		Unchanged: 0/0
  5688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5693 ;;Total ram usage:        0 bytes
  5694 ;; Hardware stack levels used:    1
  5695 ;; Hardware stack levels required when called:    4
  5696 ;; This function calls:
  5697 ;;		_draw_alarm
  5698 ;; This function is called by:
  5699 ;;		_do_minute_down
  5700 ;; This function uses a non-reentrant model
  5701 ;;
  5702                           
  5703                           	psect	text19
  5704  001AEE                     __ptext19:
  5705                           	opt stack 0
  5706  001AEE                     _decrement_alarm_minutes:
  5707                           	opt stack 0
  5708  001AEE  FFFF               	dw	65535	; assembler added errata NOP
  5709                           
  5710                           ;clock.c: 949: alarm_minutes--;
  5711                           
  5712                           ;incstack = 0
  5713  001AF0  0639               	decf	_alarm_minutes,f,c
  5714                           
  5715                           ;clock.c: 950: if(alarm_minutes == 0xff)
  5716  001AF2  2839               	incf	_alarm_minutes,w,c
  5717  001AF4  A4D8               	btfss	status,2,c
  5718  001AF6  D002               	goto	l3735
  5719                           
  5720                           ;clock.c: 951: {
  5721                           ;clock.c: 952: alarm_minutes = 59;
  5722  001AF8  0E3B               	movlw	59
  5723  001AFA  6E39               	movwf	_alarm_minutes,c
  5724  001AFC                     l3735:
  5725  001AFC  FFFF               	dw	65535	; assembler added errata NOP
  5726                           
  5727                           ;clock.c: 953: }
  5728                           ;clock.c: 954: draw_alarm();
  5729  001AFE  EC64  F008         	call	_draw_alarm	;wreg free
  5730  001B02  0012               	return		;funcret
  5731  001B04  FFFF               	dw	65535	; errata NOP
  5732  001B06                     __end_of_decrement_alarm_minutes:
  5733                           	opt stack 0
  5734                           tblptru	equ	0xFF8
  5735                           tblptrh	equ	0xFF7
  5736                           tblptrl	equ	0xFF6
  5737                           tablat	equ	0xFF5
  5738                           prodh	equ	0xFF4
  5739                           prodl	equ	0xFF3
  5740                           intcon	equ	0xFF2
  5741                           intcon2	equ	0xFF1
  5742                           intcon3	equ	0xFF0
  5743                           postinc0	equ	0xFEE
  5744                           wreg	equ	0xFE8
  5745                           postdec1	equ	0xFE5
  5746                           fsr1h	equ	0xFE2
  5747                           fsr1l	equ	0xFE1
  5748                           indf2	equ	0xFDF
  5749                           fsr2h	equ	0xFDA
  5750                           fsr2l	equ	0xFD9
  5751                           status	equ	0xFD8
  5752                           
  5753 ;; *************** function _do_hour_up *****************
  5754 ;; Defined at:
  5755 ;;		line 1022 in file "clock.c"
  5756 ;; Parameters:    Size  Location     Type
  5757 ;;		None
  5758 ;; Auto vars:     Size  Location     Type
  5759 ;;		None
  5760 ;; Return value:  Size  Location     Type
  5761 ;;                  1    wreg      void 
  5762 ;; Registers used:
  5763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5764 ;; Tracked objects:
  5765 ;;		On entry : 0/0
  5766 ;;		On exit  : 0/0
  5767 ;;		Unchanged: 0/0
  5768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5773 ;;Total ram usage:        0 bytes
  5774 ;; Hardware stack levels used:    1
  5775 ;; Hardware stack levels required when called:    5
  5776 ;; This function calls:
  5777 ;;		_dump_leds
  5778 ;;		_increment_alarm_hours
  5779 ;;		_increment_time_hours
  5780 ;;		_write_leds
  5781 ;; This function is called by:
  5782 ;;		_handle_repeat
  5783 ;;		_handle_ir
  5784 ;; This function uses a non-reentrant model
  5785 ;;
  5786                           
  5787                           	psect	text20
  5788  0015D0                     __ptext20:
  5789                           	opt stack 0
  5790  0015D0                     _do_hour_up:
  5791                           	opt stack 0
  5792  0015D0  FFFF               	dw	65535	; assembler added errata NOP
  5793                           
  5794                           ;clock.c: 1024: if(mode == 3)
  5795                           
  5796                           ;incstack = 0
  5797  0015D2  0E03               	movlw	3
  5798  0015D4  183C               	xorwf	_mode,w,c
  5799  0015D6  A4D8               	btfss	status,2,c
  5800  0015D8  D023               	goto	l3849
  5801                           
  5802                           ;clock.c: 1025: {
  5803                           ;clock.c: 1026: if(led_mask0 == 0xff)
  5804  0015DA  284B               	incf	_led_mask0,w,c
  5805  0015DC  A4D8               	btfss	status,2,c
  5806  0015DE  D009               	goto	l3821
  5807                           
  5808                           ;clock.c: 1027: {
  5809                           ;clock.c: 1028: led_mask0 = 0x01;
  5810  0015E0  0E01               	movlw	1
  5811  0015E2  6E4B               	movwf	_led_mask0,c
  5812                           
  5813                           ;clock.c: 1029: led_mask1 = 0x00;
  5814  0015E4  0E00               	movlw	0
  5815  0015E6  6E36               	movwf	_led_mask1,c
  5816                           
  5817                           ;clock.c: 1030: led_mask2 = 0x00;
  5818  0015E8  0E00               	movlw	0
  5819  0015EA  6E35               	movwf	_led_mask2,c
  5820                           
  5821                           ;clock.c: 1031: led_mask3 = 0x00;
  5822  0015EC  0E00               	movlw	0
  5823  0015EE  6E34               	movwf	_led_mask3,c
  5824                           
  5825                           ;clock.c: 1032: }
  5826  0015F0  D013               	goto	l3847
  5827  0015F2                     l3821:
  5828  0015F2  FFFF               	dw	65535	; assembler added errata NOP
  5829                           
  5830                           ;clock.c: 1033: else
  5831                           ;clock.c: 1034: {
  5832                           ;clock.c: 1035: led_mask3 <<= 1;
  5833  0015F4  90D8               	bcf	status,0,c
  5834  0015F6  3634               	rlcf	_led_mask3,f,c
  5835                           
  5836                           ;clock.c: 1036: if((led_mask2 & 0x80)) led_mask3 |= 0x1;
  5837  0015F8  BE35               	btfsc	_led_mask2,7,c
  5838  0015FA  8034               	bsf	_led_mask3,0,c
  5839                           
  5840                           ;clock.c: 1037: led_mask2 <<= 1;
  5841  0015FC  90D8               	bcf	status,0,c
  5842  0015FE  3635               	rlcf	_led_mask2,f,c
  5843                           
  5844                           ;clock.c: 1038: if((led_mask1 & 0x80)) led_mask2 |= 0x1;
  5845  001600  BE36               	btfsc	_led_mask1,7,c
  5846  001602  8035               	bsf	_led_mask2,0,c
  5847                           
  5848                           ;clock.c: 1039: led_mask1 <<= 1;
  5849  001604  90D8               	bcf	status,0,c
  5850  001606  3636               	rlcf	_led_mask1,f,c
  5851                           
  5852                           ;clock.c: 1040: if((led_mask0 & 0x80)) led_mask1 |= 0x1;
  5853  001608  BE4B               	btfsc	_led_mask0,7,c
  5854  00160A  8036               	bsf	_led_mask1,0,c
  5855                           
  5856                           ;clock.c: 1041: led_mask0 <<= 1;
  5857  00160C  90D8               	bcf	status,0,c
  5858  00160E  364B               	rlcf	_led_mask0,f,c
  5859                           
  5860                           ;clock.c: 1042: if((led_mask3 & 0x08)) led_mask0 |= 0x1;
  5861  001610  B634               	btfsc	_led_mask3,3,c
  5862  001612  804B               	bsf	_led_mask0,0,c
  5863                           
  5864                           ;clock.c: 1043: write_leds();
  5865  001614  ECD8  F002         	call	_write_leds	;wreg free
  5866  001618                     l3847:
  5867  001618  FFFF               	dw	65535	; assembler added errata NOP
  5868                           
  5869                           ;clock.c: 1044: }
  5870                           ;clock.c: 1045: dump_leds();
  5871  00161A  ECB6  F00C         	call	_dump_leds	;wreg free
  5872                           
  5873                           ;clock.c: 1046: }
  5874  00161E  D00D               	goto	l380
  5875  001620                     l3849:
  5876  001620  FFFF               	dw	65535	; assembler added errata NOP
  5877                           
  5878                           ;clock.c: 1047: else
  5879                           ;clock.c: 1048: if(mode == 1)
  5880  001622  043C               	decf	_mode,w,c
  5881  001624  A4D8               	btfss	status,2,c
  5882  001626  D003               	goto	l3853
  5883                           
  5884                           ;clock.c: 1049: {
  5885                           ;clock.c: 1050: increment_time_hours();
  5886  001628  EC10  F00C         	call	_increment_time_hours	;wreg free
  5887                           
  5888                           ;clock.c: 1051: }
  5889  00162C  D006               	goto	l380
  5890  00162E                     l3853:
  5891  00162E  FFFF               	dw	65535	; assembler added errata NOP
  5892                           
  5893                           ;clock.c: 1052: else
  5894                           ;clock.c: 1053: if(mode == 2)
  5895  001630  0E02               	movlw	2
  5896  001632  183C               	xorwf	_mode,w,c
  5897  001634  B4D8               	btfsc	status,2,c
  5898                           
  5899                           ;clock.c: 1054: {
  5900                           ;clock.c: 1055: increment_alarm_hours();
  5901  001636  EC9B  F00C         	call	_increment_alarm_hours	;wreg free
  5902  00163A                     l380:
  5903  00163A  FFFF               	dw	65535	; assembler added errata NOP
  5904  00163C  0012               	return		;funcret
  5905  00163E  FFFF               	dw	65535	; errata NOP
  5906  001640                     __end_of_do_hour_up:
  5907                           	opt stack 0
  5908                           tblptru	equ	0xFF8
  5909                           tblptrh	equ	0xFF7
  5910                           tblptrl	equ	0xFF6
  5911                           tablat	equ	0xFF5
  5912                           prodh	equ	0xFF4
  5913                           prodl	equ	0xFF3
  5914                           intcon	equ	0xFF2
  5915                           intcon2	equ	0xFF1
  5916                           intcon3	equ	0xFF0
  5917                           postinc0	equ	0xFEE
  5918                           wreg	equ	0xFE8
  5919                           postdec1	equ	0xFE5
  5920                           fsr1h	equ	0xFE2
  5921                           fsr1l	equ	0xFE1
  5922                           indf2	equ	0xFDF
  5923                           fsr2h	equ	0xFDA
  5924                           fsr2l	equ	0xFD9
  5925                           status	equ	0xFD8
  5926                           
  5927 ;; *************** function _increment_time_hours *****************
  5928 ;; Defined at:
  5929 ;;		line 957 in file "clock.c"
  5930 ;; Parameters:    Size  Location     Type
  5931 ;;		None
  5932 ;; Auto vars:     Size  Location     Type
  5933 ;;		None
  5934 ;; Return value:  Size  Location     Type
  5935 ;;                  1    wreg      void 
  5936 ;; Registers used:
  5937 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5938 ;; Tracked objects:
  5939 ;;		On entry : 0/0
  5940 ;;		On exit  : 0/0
  5941 ;;		Unchanged: 0/0
  5942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5947 ;;Total ram usage:        0 bytes
  5948 ;; Hardware stack levels used:    1
  5949 ;; Hardware stack levels required when called:    4
  5950 ;; This function calls:
  5951 ;;		_draw_time
  5952 ;; This function is called by:
  5953 ;;		_do_hour_up
  5954 ;; This function uses a non-reentrant model
  5955 ;;
  5956                           
  5957                           	psect	text21
  5958  001820                     __ptext21:
  5959                           	opt stack 0
  5960  001820                     _increment_time_hours:
  5961                           	opt stack 0
  5962  001820  FFFF               	dw	65535	; assembler added errata NOP
  5963                           
  5964                           ;clock.c: 959: crystal_time = 0;
  5965                           
  5966                           ;incstack = 0
  5967  001822  0E00               	movlw	0
  5968  001824  0100               	movlb	0	; () banked
  5969  001826  6F6D               	movwf	(_crystal_time+1)& (0+255),b
  5970  001828  0E00               	movlw	0
  5971  00182A  6F6C               	movwf	_crystal_time& (0+255),b
  5972                           
  5973                           ;clock.c: 960: display_flash = 0;
  5974  00182C  0E00               	movlw	0
  5975  00182E  6E42               	movwf	_display_flash,c
  5976                           
  5977                           ;clock.c: 961: time_hz = 0;
  5978  001830  0E00               	movlw	0
  5979  001832  6E41               	movwf	_time_hz,c
  5980                           
  5981                           ;clock.c: 962: seconds = 0;
  5982  001834  0E00               	movlw	0
  5983  001836  6E40               	movwf	_seconds,c
  5984                           
  5985                           ; BSR set to: 0
  5986                           ;clock.c: 963: hours++;
  5987  001838  2A4A               	incf	_hours,f,c
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;clock.c: 964: if(hours == 12)
  5991  00183A  0E0C               	movlw	12
  5992  00183C  184A               	xorwf	_hours,w,c
  5993  00183E  A4D8               	btfss	status,2,c
  5994  001840  D009               	goto	l3745
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;clock.c: 965: {
  5998                           ;clock.c: 966: ampm = !ampm;
  5999  001842  503E               	movf	_ampm,w,c
  6000  001844  A4D8               	btfss	status,2,c
  6001  001846  D002               	goto	u5100
  6002  001848  0E01               	movlw	1
  6003  00184A  D002               	goto	u5110
  6004  00184C                     u5100:
  6005  00184C  FFFF               	dw	65535	; assembler added errata NOP
  6006  00184E  0E00               	movlw	0
  6007  001850                     u5110:
  6008  001850  FFFF               	dw	65535	; assembler added errata NOP
  6009  001852  6E3E               	movwf	_ampm,c
  6010  001854                     l3745:
  6011  001854  FFFF               	dw	65535	; assembler added errata NOP
  6012                           
  6013                           ; BSR set to: 0
  6014                           ;clock.c: 967: }
  6015                           ;clock.c: 968: if(hours == 13)
  6016  001856  0E0D               	movlw	13
  6017  001858  184A               	xorwf	_hours,w,c
  6018  00185A  A4D8               	btfss	status,2,c
  6019  00185C  D002               	goto	l3749
  6020                           
  6021                           ; BSR set to: 0
  6022                           ;clock.c: 969: {
  6023                           ;clock.c: 970: hours = 1;
  6024  00185E  0E01               	movlw	1
  6025  001860  6E4A               	movwf	_hours,c
  6026  001862                     l3749:
  6027  001862  FFFF               	dw	65535	; assembler added errata NOP
  6028                           
  6029                           ; BSR set to: 0
  6030                           ;clock.c: 971: }
  6031                           ;clock.c: 972: draw_time();
  6032  001864  EC95  F006         	call	_draw_time	;wreg free
  6033  001868  0012               	return		;funcret
  6034  00186A  FFFF               	dw	65535	; errata NOP
  6035  00186C                     __end_of_increment_time_hours:
  6036                           	opt stack 0
  6037                           tblptru	equ	0xFF8
  6038                           tblptrh	equ	0xFF7
  6039                           tblptrl	equ	0xFF6
  6040                           tablat	equ	0xFF5
  6041                           prodh	equ	0xFF4
  6042                           prodl	equ	0xFF3
  6043                           intcon	equ	0xFF2
  6044                           intcon2	equ	0xFF1
  6045                           intcon3	equ	0xFF0
  6046                           postinc0	equ	0xFEE
  6047                           wreg	equ	0xFE8
  6048                           postdec1	equ	0xFE5
  6049                           fsr1h	equ	0xFE2
  6050                           fsr1l	equ	0xFE1
  6051                           indf2	equ	0xFDF
  6052                           fsr2h	equ	0xFDA
  6053                           fsr2l	equ	0xFD9
  6054                           status	equ	0xFD8
  6055                           
  6056 ;; *************** function _increment_alarm_hours *****************
  6057 ;; Defined at:
  6058 ;;		line 975 in file "clock.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;		None
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;		None
  6063 ;; Return value:  Size  Location     Type
  6064 ;;                  1    wreg      void 
  6065 ;; Registers used:
  6066 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6067 ;; Tracked objects:
  6068 ;;		On entry : 0/0
  6069 ;;		On exit  : 0/0
  6070 ;;		Unchanged: 0/0
  6071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6076 ;;Total ram usage:        0 bytes
  6077 ;; Hardware stack levels used:    1
  6078 ;; Hardware stack levels required when called:    4
  6079 ;; This function calls:
  6080 ;;		_draw_alarm
  6081 ;; This function is called by:
  6082 ;;		_do_hour_up
  6083 ;; This function uses a non-reentrant model
  6084 ;;
  6085                           
  6086                           	psect	text22
  6087  001936                     __ptext22:
  6088                           	opt stack 0
  6089  001936                     _increment_alarm_hours:
  6090                           	opt stack 0
  6091  001936  FFFF               	dw	65535	; assembler added errata NOP
  6092                           
  6093                           ;clock.c: 977: alarm_hours++;
  6094                           
  6095                           ;incstack = 0
  6096  001938  2A48               	incf	_alarm_hours,f,c
  6097                           
  6098                           ;clock.c: 978: if(alarm_hours == 12)
  6099  00193A  0E0C               	movlw	12
  6100  00193C  1848               	xorwf	_alarm_hours,w,c
  6101  00193E  A4D8               	btfss	status,2,c
  6102  001940  D009               	goto	l3757
  6103                           
  6104                           ;clock.c: 979: {
  6105                           ;clock.c: 980: alarm_ampm = !alarm_ampm;
  6106  001942  5038               	movf	_alarm_ampm,w,c
  6107  001944  A4D8               	btfss	status,2,c
  6108  001946  D002               	goto	u5140
  6109  001948  0E01               	movlw	1
  6110  00194A  D002               	goto	u5150
  6111  00194C                     u5140:
  6112  00194C  FFFF               	dw	65535	; assembler added errata NOP
  6113  00194E  0E00               	movlw	0
  6114  001950                     u5150:
  6115  001950  FFFF               	dw	65535	; assembler added errata NOP
  6116  001952  6E38               	movwf	_alarm_ampm,c
  6117  001954                     l3757:
  6118  001954  FFFF               	dw	65535	; assembler added errata NOP
  6119                           
  6120                           ;clock.c: 981: }
  6121                           ;clock.c: 982: if(alarm_hours == 13)
  6122  001956  0E0D               	movlw	13
  6123  001958  1848               	xorwf	_alarm_hours,w,c
  6124  00195A  A4D8               	btfss	status,2,c
  6125  00195C  D002               	goto	l3761
  6126                           
  6127                           ;clock.c: 983: {
  6128                           ;clock.c: 984: alarm_hours = 1;
  6129  00195E  0E01               	movlw	1
  6130  001960  6E48               	movwf	_alarm_hours,c
  6131  001962                     l3761:
  6132  001962  FFFF               	dw	65535	; assembler added errata NOP
  6133                           
  6134                           ;clock.c: 985: }
  6135                           ;clock.c: 987: draw_alarm();
  6136  001964  EC64  F008         	call	_draw_alarm	;wreg free
  6137  001968  0012               	return		;funcret
  6138  00196A  FFFF               	dw	65535	; errata NOP
  6139  00196C                     __end_of_increment_alarm_hours:
  6140                           	opt stack 0
  6141                           tblptru	equ	0xFF8
  6142                           tblptrh	equ	0xFF7
  6143                           tblptrl	equ	0xFF6
  6144                           tablat	equ	0xFF5
  6145                           prodh	equ	0xFF4
  6146                           prodl	equ	0xFF3
  6147                           intcon	equ	0xFF2
  6148                           intcon2	equ	0xFF1
  6149                           intcon3	equ	0xFF0
  6150                           postinc0	equ	0xFEE
  6151                           wreg	equ	0xFE8
  6152                           postdec1	equ	0xFE5
  6153                           fsr1h	equ	0xFE2
  6154                           fsr1l	equ	0xFE1
  6155                           indf2	equ	0xFDF
  6156                           fsr2h	equ	0xFDA
  6157                           fsr2l	equ	0xFD9
  6158                           status	equ	0xFD8
  6159                           
  6160 ;; *************** function _do_hour_down *****************
  6161 ;; Defined at:
  6162 ;;		line 1060 in file "clock.c"
  6163 ;; Parameters:    Size  Location     Type
  6164 ;;		None
  6165 ;; Auto vars:     Size  Location     Type
  6166 ;;		None
  6167 ;; Return value:  Size  Location     Type
  6168 ;;                  1    wreg      void 
  6169 ;; Registers used:
  6170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6171 ;; Tracked objects:
  6172 ;;		On entry : 0/0
  6173 ;;		On exit  : 0/0
  6174 ;;		Unchanged: 0/0
  6175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6180 ;;Total ram usage:        0 bytes
  6181 ;; Hardware stack levels used:    1
  6182 ;; Hardware stack levels required when called:    5
  6183 ;; This function calls:
  6184 ;;		_decrement_alarm_hours
  6185 ;;		_decrement_time_hours
  6186 ;;		_dump_leds
  6187 ;;		_write_leds
  6188 ;; This function is called by:
  6189 ;;		_handle_repeat
  6190 ;;		_handle_ir
  6191 ;; This function uses a non-reentrant model
  6192 ;;
  6193                           
  6194                           	psect	text23
  6195  001640                     __ptext23:
  6196                           	opt stack 0
  6197  001640                     _do_hour_down:
  6198                           	opt stack 0
  6199  001640  FFFF               	dw	65535	; assembler added errata NOP
  6200                           
  6201                           ;clock.c: 1062: if(mode == 3)
  6202                           
  6203                           ;incstack = 0
  6204  001642  0E03               	movlw	3
  6205  001644  183C               	xorwf	_mode,w,c
  6206  001646  A4D8               	btfss	status,2,c
  6207  001648  D023               	goto	l3889
  6208                           
  6209                           ;clock.c: 1063: {
  6210                           ;clock.c: 1064: if(led_mask0 == 0xff)
  6211  00164A  284B               	incf	_led_mask0,w,c
  6212  00164C  A4D8               	btfss	status,2,c
  6213  00164E  D009               	goto	l384
  6214                           
  6215                           ;clock.c: 1065: {
  6216                           ;clock.c: 1066: led_mask0 = 0x01;
  6217  001650  0E01               	movlw	1
  6218  001652  6E4B               	movwf	_led_mask0,c
  6219                           
  6220                           ;clock.c: 1067: led_mask1 = 0x00;
  6221  001654  0E00               	movlw	0
  6222  001656  6E36               	movwf	_led_mask1,c
  6223                           
  6224                           ;clock.c: 1068: led_mask2 = 0x00;
  6225  001658  0E00               	movlw	0
  6226  00165A  6E35               	movwf	_led_mask2,c
  6227                           
  6228                           ;clock.c: 1069: led_mask3 = 0x00;
  6229  00165C  0E00               	movlw	0
  6230  00165E  6E34               	movwf	_led_mask3,c
  6231                           
  6232                           ;clock.c: 1070: }
  6233  001660  D013               	goto	l3887
  6234  001662                     l384:
  6235  001662  FFFF               	dw	65535	; assembler added errata NOP
  6236                           
  6237                           ;clock.c: 1071: else
  6238                           ;clock.c: 1072: {
  6239                           ;clock.c: 1073: if((led_mask0 & 0x01)) led_mask3 |= 0x08;
  6240  001664  B04B               	btfsc	_led_mask0,0,c
  6241  001666  8634               	bsf	_led_mask3,3,c
  6242                           
  6243                           ;clock.c: 1074: led_mask0 >>= 1;
  6244  001668  90D8               	bcf	status,0,c
  6245  00166A  324B               	rrcf	_led_mask0,f,c
  6246                           
  6247                           ;clock.c: 1075: if((led_mask1 & 0x01)) led_mask0 |= 0x80;
  6248  00166C  B036               	btfsc	_led_mask1,0,c
  6249  00166E  8E4B               	bsf	_led_mask0,7,c
  6250                           
  6251                           ;clock.c: 1076: led_mask1 >>= 1;
  6252  001670  90D8               	bcf	status,0,c
  6253  001672  3236               	rrcf	_led_mask1,f,c
  6254                           
  6255                           ;clock.c: 1077: if((led_mask2 & 0x01)) led_mask1 |= 0x80;
  6256  001674  B035               	btfsc	_led_mask2,0,c
  6257  001676  8E36               	bsf	_led_mask1,7,c
  6258                           
  6259                           ;clock.c: 1078: led_mask2 >>= 1;
  6260  001678  90D8               	bcf	status,0,c
  6261  00167A  3235               	rrcf	_led_mask2,f,c
  6262                           
  6263                           ;clock.c: 1079: if((led_mask3 & 0x01)) led_mask2 |= 0x80;
  6264  00167C  B034               	btfsc	_led_mask3,0,c
  6265  00167E  8E35               	bsf	_led_mask2,7,c
  6266                           
  6267                           ;clock.c: 1080: led_mask3 >>= 1;
  6268  001680  90D8               	bcf	status,0,c
  6269  001682  3234               	rrcf	_led_mask3,f,c
  6270                           
  6271                           ;clock.c: 1081: write_leds();
  6272  001684  ECD8  F002         	call	_write_leds	;wreg free
  6273  001688                     l3887:
  6274  001688  FFFF               	dw	65535	; assembler added errata NOP
  6275                           
  6276                           ;clock.c: 1082: }
  6277                           ;clock.c: 1083: dump_leds();
  6278  00168A  ECB6  F00C         	call	_dump_leds	;wreg free
  6279                           
  6280                           ;clock.c: 1084: }
  6281  00168E  D00D               	goto	l394
  6282  001690                     l3889:
  6283  001690  FFFF               	dw	65535	; assembler added errata NOP
  6284                           
  6285                           ;clock.c: 1085: else
  6286                           ;clock.c: 1086: if(mode == 1)
  6287  001692  043C               	decf	_mode,w,c
  6288  001694  A4D8               	btfss	status,2,c
  6289  001696  D003               	goto	l3893
  6290                           
  6291                           ;clock.c: 1087: {
  6292                           ;clock.c: 1088: decrement_time_hours();
  6293  001698  EC36  F00C         	call	_decrement_time_hours	;wreg free
  6294                           
  6295                           ;clock.c: 1089: }
  6296  00169C  D006               	goto	l394
  6297  00169E                     l3893:
  6298  00169E  FFFF               	dw	65535	; assembler added errata NOP
  6299                           
  6300                           ;clock.c: 1090: else
  6301                           ;clock.c: 1091: if(mode == 2)
  6302  0016A0  0E02               	movlw	2
  6303  0016A2  183C               	xorwf	_mode,w,c
  6304  0016A4  B4D8               	btfsc	status,2,c
  6305                           
  6306                           ;clock.c: 1092: {
  6307                           ;clock.c: 1093: decrement_alarm_hours();
  6308  0016A6  ECD1  F00C         	call	_decrement_alarm_hours	;wreg free
  6309  0016AA                     l394:
  6310  0016AA  FFFF               	dw	65535	; assembler added errata NOP
  6311  0016AC  0012               	return		;funcret
  6312  0016AE  FFFF               	dw	65535	; errata NOP
  6313  0016B0                     __end_of_do_hour_down:
  6314                           	opt stack 0
  6315                           tblptru	equ	0xFF8
  6316                           tblptrh	equ	0xFF7
  6317                           tblptrl	equ	0xFF6
  6318                           tablat	equ	0xFF5
  6319                           prodh	equ	0xFF4
  6320                           prodl	equ	0xFF3
  6321                           intcon	equ	0xFF2
  6322                           intcon2	equ	0xFF1
  6323                           intcon3	equ	0xFF0
  6324                           postinc0	equ	0xFEE
  6325                           wreg	equ	0xFE8
  6326                           postdec1	equ	0xFE5
  6327                           fsr1h	equ	0xFE2
  6328                           fsr1l	equ	0xFE1
  6329                           indf2	equ	0xFDF
  6330                           fsr2h	equ	0xFDA
  6331                           fsr2l	equ	0xFD9
  6332                           status	equ	0xFD8
  6333                           
  6334 ;; *************** function _dump_leds *****************
  6335 ;; Defined at:
  6336 ;;		line 672 in file "clock.c"
  6337 ;; Parameters:    Size  Location     Type
  6338 ;;		None
  6339 ;; Auto vars:     Size  Location     Type
  6340 ;;		None
  6341 ;; Return value:  Size  Location     Type
  6342 ;;                  1    wreg      void 
  6343 ;; Registers used:
  6344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6345 ;; Tracked objects:
  6346 ;;		On entry : 0/0
  6347 ;;		On exit  : 0/0
  6348 ;;		Unchanged: 0/0
  6349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6354 ;;Total ram usage:        0 bytes
  6355 ;; Hardware stack levels used:    1
  6356 ;; Hardware stack levels required when called:    4
  6357 ;; This function calls:
  6358 ;;		_print_bin_nospace
  6359 ;;		_print_byte
  6360 ;; This function is called by:
  6361 ;;		_do_hour_up
  6362 ;;		_do_hour_down
  6363 ;; This function uses a non-reentrant model
  6364 ;;
  6365                           
  6366                           	psect	text24
  6367  00196C                     __ptext24:
  6368                           	opt stack 0
  6369  00196C                     _dump_leds:
  6370                           	opt stack 0
  6371  00196C  FFFF               	dw	65535	; assembler added errata NOP
  6372                           
  6373                           ;clock.c: 674: print_bin_nospace(led_mask0);
  6374                           
  6375                           ;incstack = 0
  6376  00196E  504B               	movf	_led_mask0,w,c
  6377  001970  ECC5  F009         	call	_print_bin_nospace
  6378                           
  6379                           ;clock.c: 675: print_byte(' ');
  6380  001974  0E20               	movlw	32
  6381  001976  EC5B  F00C         	call	_print_byte
  6382                           
  6383                           ;clock.c: 676: print_bin_nospace(led_mask1);
  6384  00197A  5036               	movf	_led_mask1,w,c
  6385  00197C  ECC5  F009         	call	_print_bin_nospace
  6386                           
  6387                           ;clock.c: 677: print_byte(' ');
  6388  001980  0E20               	movlw	32
  6389  001982  EC5B  F00C         	call	_print_byte
  6390                           
  6391                           ;clock.c: 678: print_bin_nospace(led_mask2);
  6392  001986  5035               	movf	_led_mask2,w,c
  6393  001988  ECC5  F009         	call	_print_bin_nospace
  6394                           
  6395                           ;clock.c: 679: print_byte(' ');
  6396  00198C  0E20               	movlw	32
  6397  00198E  EC5B  F00C         	call	_print_byte
  6398                           
  6399                           ;clock.c: 680: print_bin_nospace(led_mask3);
  6400  001992  5034               	movf	_led_mask3,w,c
  6401  001994  ECC5  F009         	call	_print_bin_nospace
  6402                           
  6403                           ;clock.c: 681: print_byte('\n');
  6404  001998  0E0A               	movlw	10
  6405  00199A  EC5B  F00C         	call	_print_byte
  6406  00199E  0012               	return		;funcret
  6407  0019A0  FFFF               	dw	65535	; errata NOP
  6408  0019A2                     __end_of_dump_leds:
  6409                           	opt stack 0
  6410                           tblptru	equ	0xFF8
  6411                           tblptrh	equ	0xFF7
  6412                           tblptrl	equ	0xFF6
  6413                           tablat	equ	0xFF5
  6414                           prodh	equ	0xFF4
  6415                           prodl	equ	0xFF3
  6416                           intcon	equ	0xFF2
  6417                           intcon2	equ	0xFF1
  6418                           intcon3	equ	0xFF0
  6419                           postinc0	equ	0xFEE
  6420                           wreg	equ	0xFE8
  6421                           postdec1	equ	0xFE5
  6422                           fsr1h	equ	0xFE2
  6423                           fsr1l	equ	0xFE1
  6424                           indf2	equ	0xFDF
  6425                           fsr2h	equ	0xFDA
  6426                           fsr2l	equ	0xFD9
  6427                           status	equ	0xFD8
  6428                           
  6429 ;; *************** function _print_bin_nospace *****************
  6430 ;; Defined at:
  6431 ;;		line 633 in file "clock.c"
  6432 ;; Parameters:    Size  Location     Type
  6433 ;;  number          1    wreg     unsigned char 
  6434 ;; Auto vars:     Size  Location     Type
  6435 ;;  number          1   36[COMRAM] unsigned char 
  6436 ;; Return value:  Size  Location     Type
  6437 ;;                  1    wreg      void 
  6438 ;; Registers used:
  6439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6440 ;; Tracked objects:
  6441 ;;		On entry : 0/0
  6442 ;;		On exit  : 0/0
  6443 ;;		Unchanged: 0/0
  6444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6446 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6448 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;Total ram usage:       17 bytes
  6450 ;; Hardware stack levels used:    1
  6451 ;; Hardware stack levels required when called:    3
  6452 ;; This function calls:
  6453 ;;		_print_byte
  6454 ;; This function is called by:
  6455 ;;		_dump_leds
  6456 ;; This function uses a non-reentrant model
  6457 ;;
  6458                           
  6459                           	psect	text25
  6460  00138A                     __ptext25:
  6461                           	opt stack 0
  6462  00138A                     _print_bin_nospace:
  6463                           	opt stack 0
  6464  00138A  FFFF               	dw	65535	; assembler added errata NOP
  6465                           
  6466                           ;incstack = 0
  6467                           ;print_bin_nospace@number stored from wreg
  6468  00138C  6E25               	movwf	print_bin_nospace@number,c
  6469                           
  6470                           ;clock.c: 635: print_byte((number & 0x80) ? '1' : '0');
  6471  00138E  BE25               	btfsc	print_bin_nospace@number,7,c
  6472  001390  D004               	goto	l3421
  6473  001392  0E00               	movlw	0
  6474  001394  6E16               	movwf	_print_bin_nospace$802+1,c
  6475  001396  0E30               	movlw	48
  6476  001398  D004               	goto	L2
  6477  00139A                     l3421:
  6478  00139A  FFFF               	dw	65535	; assembler added errata NOP
  6479  00139C  0E00               	movlw	0
  6480  00139E  6E16               	movwf	_print_bin_nospace$802+1,c
  6481  0013A0  0E31               	movlw	49
  6482  0013A2                     L2:
  6483  0013A2  FFFF               	dw	65535	; assembler added errata NOP
  6484  0013A4  6E15               	movwf	_print_bin_nospace$802,c
  6485  0013A6  5015               	movf	_print_bin_nospace$802,w,c
  6486  0013A8  EC5B  F00C         	call	_print_byte
  6487                           
  6488                           ;clock.c: 636: print_byte((number & 0x40) ? '1' : '0');
  6489  0013AC  BC25               	btfsc	print_bin_nospace@number,6,c
  6490  0013AE  D004               	goto	l3429
  6491  0013B0  0E00               	movlw	0
  6492  0013B2  6E18               	movwf	_print_bin_nospace$803+1,c
  6493  0013B4  0E30               	movlw	48
  6494  0013B6  D004               	goto	L3
  6495  0013B8                     l3429:
  6496  0013B8  FFFF               	dw	65535	; assembler added errata NOP
  6497  0013BA  0E00               	movlw	0
  6498  0013BC  6E18               	movwf	_print_bin_nospace$803+1,c
  6499  0013BE  0E31               	movlw	49
  6500  0013C0                     L3:
  6501  0013C0  FFFF               	dw	65535	; assembler added errata NOP
  6502  0013C2  6E17               	movwf	_print_bin_nospace$803,c
  6503  0013C4  5017               	movf	_print_bin_nospace$803,w,c
  6504  0013C6  EC5B  F00C         	call	_print_byte
  6505                           
  6506                           ;clock.c: 637: print_byte((number & 0x20) ? '1' : '0');
  6507  0013CA  BA25               	btfsc	print_bin_nospace@number,5,c
  6508  0013CC  D004               	goto	l3437
  6509  0013CE  0E00               	movlw	0
  6510  0013D0  6E1A               	movwf	_print_bin_nospace$804+1,c
  6511  0013D2  0E30               	movlw	48
  6512  0013D4  D004               	goto	L4
  6513  0013D6                     l3437:
  6514  0013D6  FFFF               	dw	65535	; assembler added errata NOP
  6515  0013D8  0E00               	movlw	0
  6516  0013DA  6E1A               	movwf	_print_bin_nospace$804+1,c
  6517  0013DC  0E31               	movlw	49
  6518  0013DE                     L4:
  6519  0013DE  FFFF               	dw	65535	; assembler added errata NOP
  6520  0013E0  6E19               	movwf	_print_bin_nospace$804,c
  6521  0013E2  5019               	movf	_print_bin_nospace$804,w,c
  6522  0013E4  EC5B  F00C         	call	_print_byte
  6523                           
  6524                           ;clock.c: 638: print_byte((number & 0x10) ? '1' : '0');
  6525  0013E8  B825               	btfsc	print_bin_nospace@number,4,c
  6526  0013EA  D004               	goto	l3445
  6527  0013EC  0E00               	movlw	0
  6528  0013EE  6E1C               	movwf	_print_bin_nospace$805+1,c
  6529  0013F0  0E30               	movlw	48
  6530  0013F2  D004               	goto	L5
  6531  0013F4                     l3445:
  6532  0013F4  FFFF               	dw	65535	; assembler added errata NOP
  6533  0013F6  0E00               	movlw	0
  6534  0013F8  6E1C               	movwf	_print_bin_nospace$805+1,c
  6535  0013FA  0E31               	movlw	49
  6536  0013FC                     L5:
  6537  0013FC  FFFF               	dw	65535	; assembler added errata NOP
  6538  0013FE  6E1B               	movwf	_print_bin_nospace$805,c
  6539  001400  501B               	movf	_print_bin_nospace$805,w,c
  6540  001402  EC5B  F00C         	call	_print_byte
  6541                           
  6542                           ;clock.c: 639: print_byte((number & 0x8) ? '1' : '0');
  6543  001406  B625               	btfsc	print_bin_nospace@number,3,c
  6544  001408  D004               	goto	l3453
  6545  00140A  0E00               	movlw	0
  6546  00140C  6E1E               	movwf	_print_bin_nospace$806+1,c
  6547  00140E  0E30               	movlw	48
  6548  001410  D004               	goto	L6
  6549  001412                     l3453:
  6550  001412  FFFF               	dw	65535	; assembler added errata NOP
  6551  001414  0E00               	movlw	0
  6552  001416  6E1E               	movwf	_print_bin_nospace$806+1,c
  6553  001418  0E31               	movlw	49
  6554  00141A                     L6:
  6555  00141A  FFFF               	dw	65535	; assembler added errata NOP
  6556  00141C  6E1D               	movwf	_print_bin_nospace$806,c
  6557  00141E  501D               	movf	_print_bin_nospace$806,w,c
  6558  001420  EC5B  F00C         	call	_print_byte
  6559                           
  6560                           ;clock.c: 640: print_byte((number & 0x4) ? '1' : '0');
  6561  001424  B425               	btfsc	print_bin_nospace@number,2,c
  6562  001426  D004               	goto	l3461
  6563  001428  0E00               	movlw	0
  6564  00142A  6E20               	movwf	_print_bin_nospace$807+1,c
  6565  00142C  0E30               	movlw	48
  6566  00142E  D004               	goto	L7
  6567  001430                     l3461:
  6568  001430  FFFF               	dw	65535	; assembler added errata NOP
  6569  001432  0E00               	movlw	0
  6570  001434  6E20               	movwf	_print_bin_nospace$807+1,c
  6571  001436  0E31               	movlw	49
  6572  001438                     L7:
  6573  001438  FFFF               	dw	65535	; assembler added errata NOP
  6574  00143A  6E1F               	movwf	_print_bin_nospace$807,c
  6575  00143C  501F               	movf	_print_bin_nospace$807,w,c
  6576  00143E  EC5B  F00C         	call	_print_byte
  6577                           
  6578                           ;clock.c: 641: print_byte((number & 0x2) ? '1' : '0');
  6579  001442  B225               	btfsc	print_bin_nospace@number,1,c
  6580  001444  D004               	goto	l3469
  6581  001446  0E00               	movlw	0
  6582  001448  6E22               	movwf	_print_bin_nospace$808+1,c
  6583  00144A  0E30               	movlw	48
  6584  00144C  D004               	goto	L8
  6585  00144E                     l3469:
  6586  00144E  FFFF               	dw	65535	; assembler added errata NOP
  6587  001450  0E00               	movlw	0
  6588  001452  6E22               	movwf	_print_bin_nospace$808+1,c
  6589  001454  0E31               	movlw	49
  6590  001456                     L8:
  6591  001456  FFFF               	dw	65535	; assembler added errata NOP
  6592  001458  6E21               	movwf	_print_bin_nospace$808,c
  6593  00145A  5021               	movf	_print_bin_nospace$808,w,c
  6594  00145C  EC5B  F00C         	call	_print_byte
  6595                           
  6596                           ;clock.c: 642: print_byte((number & 0x1) ? '1' : '0');
  6597  001460  B025               	btfsc	print_bin_nospace@number,0,c
  6598  001462  D004               	goto	l3477
  6599  001464  0E00               	movlw	0
  6600  001466  6E24               	movwf	_print_bin_nospace$809+1,c
  6601  001468  0E30               	movlw	48
  6602  00146A  D004               	goto	L9
  6603  00146C                     l3477:
  6604  00146C  FFFF               	dw	65535	; assembler added errata NOP
  6605  00146E  0E00               	movlw	0
  6606  001470  6E24               	movwf	_print_bin_nospace$809+1,c
  6607  001472  0E31               	movlw	49
  6608  001474                     L9:
  6609  001474  FFFF               	dw	65535	; assembler added errata NOP
  6610  001476  6E23               	movwf	_print_bin_nospace$809,c
  6611  001478  5023               	movf	_print_bin_nospace$809,w,c
  6612  00147A  EC5B  F00C         	call	_print_byte
  6613  00147E  0012               	return		;funcret
  6614  001480  FFFF               	dw	65535	; errata NOP
  6615  001482                     __end_of_print_bin_nospace:
  6616                           	opt stack 0
  6617                           tblptru	equ	0xFF8
  6618                           tblptrh	equ	0xFF7
  6619                           tblptrl	equ	0xFF6
  6620                           tablat	equ	0xFF5
  6621                           prodh	equ	0xFF4
  6622                           prodl	equ	0xFF3
  6623                           intcon	equ	0xFF2
  6624                           intcon2	equ	0xFF1
  6625                           intcon3	equ	0xFF0
  6626                           postinc0	equ	0xFEE
  6627                           wreg	equ	0xFE8
  6628                           postdec1	equ	0xFE5
  6629                           fsr1h	equ	0xFE2
  6630                           fsr1l	equ	0xFE1
  6631                           indf2	equ	0xFDF
  6632                           fsr2h	equ	0xFDA
  6633                           fsr2l	equ	0xFD9
  6634                           status	equ	0xFD8
  6635                           
  6636 ;; *************** function _print_byte *****************
  6637 ;; Defined at:
  6638 ;;		line 575 in file "clock.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;  c               1    wreg     unsigned char 
  6641 ;; Auto vars:     Size  Location     Type
  6642 ;;  c               1   19[COMRAM] unsigned char 
  6643 ;; Return value:  Size  Location     Type
  6644 ;;                  1    wreg      void 
  6645 ;; Registers used:
  6646 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6647 ;; Tracked objects:
  6648 ;;		On entry : 0/0
  6649 ;;		On exit  : 0/0
  6650 ;;		Unchanged: 0/0
  6651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6653 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6656 ;;Total ram usage:        1 bytes
  6657 ;; Hardware stack levels used:    1
  6658 ;; Hardware stack levels required when called:    2
  6659 ;; This function calls:
  6660 ;;		Nothing
  6661 ;; This function is called by:
  6662 ;;		_print_text
  6663 ;;		_print_number_nospace
  6664 ;;		_print_number
  6665 ;;		_print_bin_nospace
  6666 ;;		_dump_leds
  6667 ;;		_handle_ir
  6668 ;;		_print_number2
  6669 ;;		_print_hex2
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           	psect	text26
  6674  0018B6                     __ptext26:
  6675                           	opt stack 0
  6676  0018B6                     _print_byte:
  6677                           	opt stack 0
  6678  0018B6  FFFF               	dw	65535	; assembler added errata NOP
  6679                           
  6680                           ;incstack = 0
  6681                           ;print_byte@c stored from wreg
  6682  0018B8  6E14               	movwf	print_byte@c,c
  6683                           
  6684                           ;clock.c: 577: if(uart_size < 1024)
  6685  0018BA  0E04               	movlw	4
  6686  0018BC  0100               	movlb	0	; () banked
  6687  0018BE  5D7D               	subwf	(_uart_size+1)& (0+255),w,b
  6688  0018C0  B0D8               	btfsc	status,0,c
  6689  0018C2  D01A               	goto	l221
  6690                           
  6691                           ; BSR set to: 0
  6692                           ;clock.c: 578: {
  6693                           ;clock.c: 579: uart_buffer[uart_position1++] = c;
  6694  0018C4  0E9D               	movlw	low _uart_buffer
  6695  0018C6  0100               	movlb	0	; () banked
  6696  0018C8  257A               	addwf	_uart_position1& (0+255),w,b
  6697  0018CA  6ED9               	movwf	fsr2l,c
  6698  0018CC  0E00               	movlw	high _uart_buffer
  6699  0018CE  0100               	movlb	0	; () banked
  6700  0018D0  217B               	addwfc	(_uart_position1+1)& (0+255),w,b
  6701  0018D2  6EDA               	movwf	fsr2h,c
  6702  0018D4  C014  FFDF         	movff	print_byte@c,indf2
  6703                           
  6704                           ; BSR set to: 0
  6705  0018D8  0100               	movlb	0	; () banked
  6706  0018DA  4B7A               	infsnz	_uart_position1& (0+255),f,b
  6707  0018DC  2B7B               	incf	(_uart_position1+1)& (0+255),f,b
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;clock.c: 580: uart_size++;
  6711  0018DE  0100               	movlb	0	; () banked
  6712  0018E0  4B7C               	infsnz	_uart_size& (0+255),f,b
  6713  0018E2  2B7D               	incf	(_uart_size+1)& (0+255),f,b
  6714                           
  6715                           ; BSR set to: 0
  6716                           ;clock.c: 581: if(uart_position1 >= 1024)
  6717  0018E4  0E04               	movlw	4
  6718  0018E6  0100               	movlb	0	; () banked
  6719  0018E8  5D7B               	subwf	(_uart_position1+1)& (0+255),w,b
  6720  0018EA  A0D8               	btfss	status,0,c
  6721  0018EC  D005               	goto	l221
  6722                           
  6723                           ; BSR set to: 0
  6724                           ;clock.c: 582: {
  6725                           ;clock.c: 583: uart_position1 = 0;
  6726  0018EE  0E00               	movlw	0
  6727  0018F0  0100               	movlb	0	; () banked
  6728  0018F2  6F7B               	movwf	(_uart_position1+1)& (0+255),b
  6729  0018F4  0E00               	movlw	0
  6730  0018F6  6F7A               	movwf	_uart_position1& (0+255),b
  6731  0018F8                     l221:
  6732  0018F8  FFFF               	dw	65535	; assembler added errata NOP
  6733                           
  6734                           ; BSR set to: 0
  6735  0018FA  0012               	return		;funcret
  6736  0018FC  FFFF               	dw	65535	; errata NOP
  6737  0018FE                     __end_of_print_byte:
  6738                           	opt stack 0
  6739                           tblptru	equ	0xFF8
  6740                           tblptrh	equ	0xFF7
  6741                           tblptrl	equ	0xFF6
  6742                           tablat	equ	0xFF5
  6743                           prodh	equ	0xFF4
  6744                           prodl	equ	0xFF3
  6745                           intcon	equ	0xFF2
  6746                           intcon2	equ	0xFF1
  6747                           intcon3	equ	0xFF0
  6748                           postinc0	equ	0xFEE
  6749                           wreg	equ	0xFE8
  6750                           postdec1	equ	0xFE5
  6751                           fsr1h	equ	0xFE2
  6752                           fsr1l	equ	0xFE1
  6753                           indf2	equ	0xFDF
  6754                           fsr2h	equ	0xFDA
  6755                           fsr2l	equ	0xFD9
  6756                           status	equ	0xFD8
  6757                           
  6758 ;; *************** function _decrement_time_hours *****************
  6759 ;; Defined at:
  6760 ;;		line 990 in file "clock.c"
  6761 ;; Parameters:    Size  Location     Type
  6762 ;;		None
  6763 ;; Auto vars:     Size  Location     Type
  6764 ;;		None
  6765 ;; Return value:  Size  Location     Type
  6766 ;;                  1    wreg      void 
  6767 ;; Registers used:
  6768 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6769 ;; Tracked objects:
  6770 ;;		On entry : 0/0
  6771 ;;		On exit  : 0/0
  6772 ;;		Unchanged: 0/0
  6773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6778 ;;Total ram usage:        0 bytes
  6779 ;; Hardware stack levels used:    1
  6780 ;; Hardware stack levels required when called:    4
  6781 ;; This function calls:
  6782 ;;		_draw_time
  6783 ;; This function is called by:
  6784 ;;		_do_hour_down
  6785 ;; This function uses a non-reentrant model
  6786 ;;
  6787                           
  6788                           	psect	text27
  6789  00186C                     __ptext27:
  6790                           	opt stack 0
  6791  00186C                     _decrement_time_hours:
  6792                           	opt stack 0
  6793  00186C  FFFF               	dw	65535	; assembler added errata NOP
  6794                           
  6795                           ;clock.c: 992: crystal_time = 0;
  6796                           
  6797                           ; BSR set to: 0
  6798                           ;incstack = 0
  6799  00186E  0E00               	movlw	0
  6800  001870  0100               	movlb	0	; () banked
  6801  001872  6F6D               	movwf	(_crystal_time+1)& (0+255),b
  6802  001874  0E00               	movlw	0
  6803  001876  6F6C               	movwf	_crystal_time& (0+255),b
  6804                           
  6805                           ;clock.c: 993: display_flash = 0;
  6806  001878  0E00               	movlw	0
  6807  00187A  6E42               	movwf	_display_flash,c
  6808                           
  6809                           ;clock.c: 994: time_hz = 0;
  6810  00187C  0E00               	movlw	0
  6811  00187E  6E41               	movwf	_time_hz,c
  6812                           
  6813                           ;clock.c: 995: seconds = 0;
  6814  001880  0E00               	movlw	0
  6815  001882  6E40               	movwf	_seconds,c
  6816                           
  6817                           ; BSR set to: 0
  6818                           ;clock.c: 996: hours--;
  6819  001884  064A               	decf	_hours,f,c
  6820                           
  6821                           ; BSR set to: 0
  6822                           ;clock.c: 997: if(hours == 0)
  6823  001886  504A               	movf	_hours,w,c
  6824  001888  A4D8               	btfss	status,2,c
  6825  00188A  D002               	goto	l3771
  6826                           
  6827                           ; BSR set to: 0
  6828                           ;clock.c: 998: {
  6829                           ;clock.c: 999: hours = 12;
  6830  00188C  0E0C               	movlw	12
  6831  00188E  6E4A               	movwf	_hours,c
  6832  001890                     l3771:
  6833  001890  FFFF               	dw	65535	; assembler added errata NOP
  6834                           
  6835                           ; BSR set to: 0
  6836                           ;clock.c: 1000: }
  6837                           ;clock.c: 1001: if(hours == 11)
  6838  001892  0E0B               	movlw	11
  6839  001894  184A               	xorwf	_hours,w,c
  6840  001896  A4D8               	btfss	status,2,c
  6841  001898  D009               	goto	l3775
  6842                           
  6843                           ; BSR set to: 0
  6844                           ;clock.c: 1002: {
  6845                           ;clock.c: 1003: ampm = !ampm;
  6846  00189A  503E               	movf	_ampm,w,c
  6847  00189C  A4D8               	btfss	status,2,c
  6848  00189E  D002               	goto	u5190
  6849  0018A0  0E01               	movlw	1
  6850  0018A2  D002               	goto	u5200
  6851  0018A4                     u5190:
  6852  0018A4  FFFF               	dw	65535	; assembler added errata NOP
  6853  0018A6  0E00               	movlw	0
  6854  0018A8                     u5200:
  6855  0018A8  FFFF               	dw	65535	; assembler added errata NOP
  6856  0018AA  6E3E               	movwf	_ampm,c
  6857  0018AC                     l3775:
  6858  0018AC  FFFF               	dw	65535	; assembler added errata NOP
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;clock.c: 1004: }
  6862                           ;clock.c: 1005: draw_time();
  6863  0018AE  EC95  F006         	call	_draw_time	;wreg free
  6864  0018B2  0012               	return		;funcret
  6865  0018B4  FFFF               	dw	65535	; errata NOP
  6866  0018B6                     __end_of_decrement_time_hours:
  6867                           	opt stack 0
  6868                           tblptru	equ	0xFF8
  6869                           tblptrh	equ	0xFF7
  6870                           tblptrl	equ	0xFF6
  6871                           tablat	equ	0xFF5
  6872                           prodh	equ	0xFF4
  6873                           prodl	equ	0xFF3
  6874                           intcon	equ	0xFF2
  6875                           intcon2	equ	0xFF1
  6876                           intcon3	equ	0xFF0
  6877                           postinc0	equ	0xFEE
  6878                           wreg	equ	0xFE8
  6879                           postdec1	equ	0xFE5
  6880                           fsr1h	equ	0xFE2
  6881                           fsr1l	equ	0xFE1
  6882                           indf2	equ	0xFDF
  6883                           fsr2h	equ	0xFDA
  6884                           fsr2l	equ	0xFD9
  6885                           status	equ	0xFD8
  6886                           
  6887 ;; *************** function _draw_time *****************
  6888 ;; Defined at:
  6889 ;;		line 790 in file "clock.c"
  6890 ;; Parameters:    Size  Location     Type
  6891 ;;		None
  6892 ;; Auto vars:     Size  Location     Type
  6893 ;;  ptr             2   31[COMRAM] PTR const unsigned char 
  6894 ;;		 -> led_masks4(40), led_masks3(40), led_masks2(40), 
  6895 ;;  minutes10       1   30[COMRAM] unsigned char 
  6896 ;;  hours10         1   29[COMRAM] unsigned char 
  6897 ;; Return value:  Size  Location     Type
  6898 ;;                  1    wreg      void 
  6899 ;; Registers used:
  6900 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6901 ;; Tracked objects:
  6902 ;;		On entry : 0/0
  6903 ;;		On exit  : 0/0
  6904 ;;		Unchanged: 0/0
  6905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6907 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6908 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6909 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6910 ;;Total ram usage:        6 bytes
  6911 ;; Hardware stack levels used:    1
  6912 ;; Hardware stack levels required when called:    3
  6913 ;; This function calls:
  6914 ;;		___awdiv
  6915 ;;		_write_leds
  6916 ;; This function is called by:
  6917 ;;		_increment_time_minutes
  6918 ;;		_decrement_time_minutes
  6919 ;;		_increment_time_hours
  6920 ;;		_decrement_time_hours
  6921 ;;		_handle_ir
  6922 ;;		_handle_time
  6923 ;;		_main
  6924 ;; This function uses a non-reentrant model
  6925 ;;
  6926                           
  6927                           	psect	text28
  6928  000D2A                     __ptext28:
  6929                           	opt stack 0
  6930  000D2A                     _draw_time:
  6931                           	opt stack 0
  6932  000D2A  FFFF               	dw	65535	; assembler added errata NOP
  6933                           
  6934                           ;clock.c: 793: led_mask0 = 0;
  6935                           
  6936                           ;incstack = 0
  6937  000D2C  0E00               	movlw	0
  6938  000D2E  6E4B               	movwf	_led_mask0,c
  6939                           
  6940                           ;clock.c: 794: led_mask1 = 0;
  6941  000D30  0E00               	movlw	0
  6942  000D32  6E36               	movwf	_led_mask1,c
  6943                           
  6944                           ;clock.c: 795: led_mask2 = 0;
  6945  000D34  0E00               	movlw	0
  6946  000D36  6E35               	movwf	_led_mask2,c
  6947                           
  6948                           ;clock.c: 796: led_mask3 = 0;
  6949  000D38  0E00               	movlw	0
  6950  000D3A  6E34               	movwf	_led_mask3,c
  6951                           
  6952                           ;clock.c: 799: uint8_t hours10 = hours;
  6953  000D3C  C04A  F01E         	movff	_hours,draw_time@hours10
  6954                           
  6955                           ;clock.c: 800: if(hours > 9)
  6956  000D40  0E09               	movlw	9
  6957  000D42  644A               	cpfsgt	_hours,c
  6958  000D44  D004               	goto	l3491
  6959                           
  6960                           ;clock.c: 801: {
  6961                           ;clock.c: 802: hours10 -= 10;
  6962  000D46  0E0A               	movlw	10
  6963  000D48  5E1E               	subwf	draw_time@hours10,f,c
  6964                           
  6965                           ;clock.c: 803: led_mask0 = 0b00010100;
  6966  000D4A  0E14               	movlw	20
  6967  000D4C  6E4B               	movwf	_led_mask0,c
  6968  000D4E                     l3491:
  6969  000D4E  FFFF               	dw	65535	; assembler added errata NOP
  6970                           
  6971                           ;clock.c: 804: }
  6972                           ;clock.c: 806: const uint8_t *ptr = &led_masks2[hours10];
  6973  000D50  501E               	movf	draw_time@hours10,w,c
  6974  000D52  0D04               	mullw	4
  6975  000D54  0EC1               	movlw	low _led_masks2
  6976  000D56  24F3               	addwf	prodl,w,c
  6977  000D58  6E20               	movwf	draw_time@ptr,c
  6978  000D5A  0EBE               	movlw	high _led_masks2
  6979  000D5C  20F4               	addwfc	prodh,w,c
  6980  000D5E  6E21               	movwf	draw_time@ptr+1,c
  6981                           
  6982                           ;clock.c: 807: led_mask0 |= ptr[0];
  6983  000D60  C020  FFF6         	movff	draw_time@ptr,tblptrl
  6984  000D64  C021  FFF7         	movff	draw_time@ptr+1,tblptrh
  6985  000D68                     	if	0	;tblptru may be non-zero
  6986  000D68                     	endif
  6987  000D68                     	if	0	;tblptru may be non-zero
  6988  000D68                     	endif
  6989  000D68  0008               	tblrd		*
  6990  000D6A  FFFF               	dw	65535	; errata NOP
  6991  000D6C  50F5               	movf	tablat,w,c
  6992  000D6E  124B               	iorwf	_led_mask0,f,c
  6993                           
  6994                           ;clock.c: 808: led_mask1 |= ptr[1];
  6995  000D70  0E01               	movlw	1
  6996  000D72  2420               	addwf	draw_time@ptr,w,c
  6997  000D74  6E1C               	movwf	??_draw_time& (0+255),c
  6998  000D76  0E00               	movlw	0
  6999  000D78  2021               	addwfc	draw_time@ptr+1,w,c
  7000  000D7A  6E1D               	movwf	(??_draw_time+1)& (0+255),c
  7001  000D7C  C01C  FFF6         	movff	??_draw_time,tblptrl
  7002  000D80  C01D  FFF7         	movff	??_draw_time+1,tblptrh
  7003  000D84                     	if	0	;tblptru may be non-zero
  7004  000D84                     	endif
  7005  000D84                     	if	0	;tblptru may be non-zero
  7006  000D84                     	endif
  7007  000D84  0008               	tblrd		*
  7008  000D86  FFFF               	dw	65535	; errata NOP
  7009  000D88  50F5               	movf	tablat,w,c
  7010  000D8A  1236               	iorwf	_led_mask1,f,c
  7011                           
  7012                           ;clock.c: 809: led_mask2 |= ptr[2];
  7013  000D8C  0E02               	movlw	2
  7014  000D8E  2420               	addwf	draw_time@ptr,w,c
  7015  000D90  6E1C               	movwf	??_draw_time& (0+255),c
  7016  000D92  0E00               	movlw	0
  7017  000D94  2021               	addwfc	draw_time@ptr+1,w,c
  7018  000D96  6E1D               	movwf	(??_draw_time+1)& (0+255),c
  7019  000D98  C01C  FFF6         	movff	??_draw_time,tblptrl
  7020  000D9C  C01D  FFF7         	movff	??_draw_time+1,tblptrh
  7021  000DA0                     	if	0	;tblptru may be non-zero
  7022  000DA0                     	endif
  7023  000DA0                     	if	0	;tblptru may be non-zero
  7024  000DA0                     	endif
  7025  000DA0  0008               	tblrd		*
  7026  000DA2  FFFF               	dw	65535	; errata NOP
  7027  000DA4  50F5               	movf	tablat,w,c
  7028  000DA6  1235               	iorwf	_led_mask2,f,c
  7029                           
  7030                           ;clock.c: 810: led_mask3 |= ptr[3];
  7031  000DA8  0E03               	movlw	3
  7032  000DAA  2420               	addwf	draw_time@ptr,w,c
  7033  000DAC  6E1C               	movwf	??_draw_time& (0+255),c
  7034  000DAE  0E00               	movlw	0
  7035  000DB0  2021               	addwfc	draw_time@ptr+1,w,c
  7036  000DB2  6E1D               	movwf	(??_draw_time+1)& (0+255),c
  7037  000DB4  C01C  FFF6         	movff	??_draw_time,tblptrl
  7038  000DB8  C01D  FFF7         	movff	??_draw_time+1,tblptrh
  7039  000DBC                     	if	0	;tblptru may be non-zero
  7040  000DBC                     	endif
  7041  000DBC                     	if	0	;tblptru may be non-zero
  7042  000DBC                     	endif
  7043  000DBC  0008               	tblrd		*
  7044  000DBE  FFFF               	dw	65535	; errata NOP
  7045  000DC0  50F5               	movf	tablat,w,c
  7046  000DC2  1234               	iorwf	_led_mask3,f,c
  7047                           
  7048                           ;clock.c: 812: uint8_t minutes10 = minutes / 10;
  7049  000DC4  C03F  F014         	movff	_minutes,___awdiv@dividend
  7050  000DC8  6A15               	clrf	___awdiv@dividend+1,c
  7051  000DCA  0E00               	movlw	0
  7052  000DCC  6E17               	movwf	___awdiv@divisor+1,c
  7053  000DCE  0E0A               	movlw	10
  7054  000DD0  6E16               	movwf	___awdiv@divisor,c
  7055  000DD2  EC9C  F00A         	call	___awdiv	;wreg free
  7056  000DD6  5014               	movf	?___awdiv,w,c
  7057  000DD8  6E1F               	movwf	draw_time@minutes10,c
  7058                           
  7059                           ;clock.c: 813: ptr = &led_masks3[minutes10];
  7060  000DDA  501F               	movf	draw_time@minutes10,w,c
  7061  000DDC  0D04               	mullw	4
  7062  000DDE  0E99               	movlw	low _led_masks3
  7063  000DE0  24F3               	addwf	prodl,w,c
  7064  000DE2  6E20               	movwf	draw_time@ptr,c
  7065  000DE4  0EBE               	movlw	high _led_masks3
  7066  000DE6  20F4               	addwfc	prodh,w,c
  7067  000DE8  6E21               	movwf	draw_time@ptr+1,c
  7068                           
  7069                           ;clock.c: 814: led_mask0 |= ptr[0];
  7070  000DEA  C020  FFF6         	movff	draw_time@ptr,tblptrl
  7071  000DEE  C021  FFF7         	movff	draw_time@ptr+1,tblptrh
  7072  000DF2                     	if	0	;tblptru may be non-zero
  7073  000DF2                     	endif
  7074  000DF2                     	if	0	;tblptru may be non-zero
  7075  000DF2                     	endif
  7076  000DF2  0008               	tblrd		*
  7077  000DF4  FFFF               	dw	65535	; errata NOP
  7078  000DF6  50F5               	movf	tablat,w,c
  7079  000DF8  124B               	iorwf	_led_mask0,f,c
  7080                           
  7081                           ;clock.c: 815: led_mask1 |= ptr[1];
  7082  000DFA  0E01               	movlw	1
  7083  000DFC  2420               	addwf	draw_time@ptr,w,c
  7084  000DFE  6E1C               	movwf	??_draw_time& (0+255),c
  7085  000E00  0E00               	movlw	0
  7086  000E02  2021               	addwfc	draw_time@ptr+1,w,c
  7087  000E04  6E1D               	movwf	(??_draw_time+1)& (0+255),c
  7088  000E06  C01C  FFF6         	movff	??_draw_time,tblptrl
  7089  000E0A  C01D  FFF7         	movff	??_draw_time+1,tblptrh
  7090  000E0E                     	if	0	;tblptru may be non-zero
  7091  000E0E                     	endif
  7092  000E0E                     	if	0	;tblptru may be non-zero
  7093  000E0E                     	endif
  7094  000E0E  0008               	tblrd		*
  7095  000E10  FFFF               	dw	65535	; errata NOP
  7096  000E12  50F5               	movf	tablat,w,c
  7097  000E14  1236               	iorwf	_led_mask1,f,c
  7098                           
  7099                           ;clock.c: 816: led_mask2 |= ptr[2];
  7100  000E16  0E02               	movlw	2
  7101  000E18  2420               	addwf	draw_time@ptr,w,c
  7102  000E1A  6E1C               	movwf	??_draw_time& (0+255),c
  7103  000E1C  0E00               	movlw	0
  7104  000E1E  2021               	addwfc	draw_time@ptr+1,w,c
  7105  000E20  6E1D               	movwf	(??_draw_time+1)& (0+255),c
  7106  000E22  C01C  FFF6         	movff	??_draw_time,tblptrl
  7107  000E26  C01D  FFF7         	movff	??_draw_time+1,tblptrh
  7108  000E2A                     	if	0	;tblptru may be non-zero
  7109  000E2A                     	endif
  7110  000E2A                     	if	0	;tblptru may be non-zero
  7111  000E2A                     	endif
  7112  000E2A  0008               	tblrd		*
  7113  000E2C  FFFF               	dw	65535	; errata NOP
  7114  000E2E  50F5               	movf	tablat,w,c
  7115  000E30  1235               	iorwf	_led_mask2,f,c
  7116                           
  7117                           ;clock.c: 817: led_mask3 |= ptr[3];
  7118  000E32  0E03               	movlw	3
  7119  000E34  2420               	addwf	draw_time@ptr,w,c
  7120  000E36  6E1C               	movwf	??_draw_time& (0+255),c
  7121  000E38  0E00               	movlw	0
  7122  000E3A  2021               	addwfc	draw_time@ptr+1,w,c
  7123  000E3C  6E1D               	movwf	(??_draw_time+1)& (0+255),c
  7124  000E3E  C01C  FFF6         	movff	??_draw_time,tblptrl
  7125  000E42  C01D  FFF7         	movff	??_draw_time+1,tblptrh
  7126  000E46                     	if	0	;tblptru may be non-zero
  7127  000E46                     	endif
  7128  000E46                     	if	0	;tblptru may be non-zero
  7129  000E46                     	endif
  7130  000E46  0008               	tblrd		*
  7131  000E48  FFFF               	dw	65535	; errata NOP
  7132  000E4A  50F5               	movf	tablat,w,c
  7133  000E4C  1234               	iorwf	_led_mask3,f,c
  7134                           
  7135                           ;clock.c: 819: minutes10 = minutes - minutes10 * 10;
  7136  000E4E  501F               	movf	draw_time@minutes10,w,c
  7137  000E50  0D0A               	mullw	10
  7138  000E52  50F3               	movf	prodl,w,c
  7139  000E54  0800               	sublw	0
  7140  000E56  243F               	addwf	_minutes,w,c
  7141  000E58  6E1F               	movwf	draw_time@minutes10,c
  7142                           
  7143                           ;clock.c: 820: ptr = &led_masks4[minutes10];
  7144  000E5A  501F               	movf	draw_time@minutes10,w,c
  7145  000E5C  0D04               	mullw	4
  7146  000E5E  0E71               	movlw	low _led_masks4
  7147  000E60  24F3               	addwf	prodl,w,c
  7148  000E62  6E20               	movwf	draw_time@ptr,c
  7149  000E64  0EBE               	movlw	high _led_masks4
  7150  000E66  20F4               	addwfc	prodh,w,c
  7151  000E68  6E21               	movwf	draw_time@ptr+1,c
  7152                           
  7153                           ;clock.c: 821: led_mask0 |= ptr[0];
  7154  000E6A  C020  FFF6         	movff	draw_time@ptr,tblptrl
  7155  000E6E  C021  FFF7         	movff	draw_time@ptr+1,tblptrh
  7156  000E72                     	if	0	;tblptru may be non-zero
  7157  000E72                     	endif
  7158  000E72                     	if	0	;tblptru may be non-zero
  7159  000E72                     	endif
  7160  000E72  0008               	tblrd		*
  7161  000E74  FFFF               	dw	65535	; errata NOP
  7162  000E76  50F5               	movf	tablat,w,c
  7163  000E78  124B               	iorwf	_led_mask0,f,c
  7164                           
  7165                           ;clock.c: 822: led_mask1 |= ptr[1];
  7166  000E7A  0E01               	movlw	1
  7167  000E7C  2420               	addwf	draw_time@ptr,w,c
  7168  000E7E  6E1C               	movwf	??_draw_time& (0+255),c
  7169  000E80  0E00               	movlw	0
  7170  000E82  2021               	addwfc	draw_time@ptr+1,w,c
  7171  000E84  6E1D               	movwf	(??_draw_time+1)& (0+255),c
  7172  000E86  C01C  FFF6         	movff	??_draw_time,tblptrl
  7173  000E8A  C01D  FFF7         	movff	??_draw_time+1,tblptrh
  7174  000E8E                     	if	0	;tblptru may be non-zero
  7175  000E8E                     	endif
  7176  000E8E                     	if	0	;tblptru may be non-zero
  7177  000E8E                     	endif
  7178  000E8E  0008               	tblrd		*
  7179  000E90  FFFF               	dw	65535	; errata NOP
  7180  000E92  50F5               	movf	tablat,w,c
  7181  000E94  1236               	iorwf	_led_mask1,f,c
  7182                           
  7183                           ;clock.c: 823: led_mask2 |= ptr[2];
  7184  000E96  0E02               	movlw	2
  7185  000E98  2420               	addwf	draw_time@ptr,w,c
  7186  000E9A  6E1C               	movwf	??_draw_time& (0+255),c
  7187  000E9C  0E00               	movlw	0
  7188  000E9E  2021               	addwfc	draw_time@ptr+1,w,c
  7189  000EA0  6E1D               	movwf	(??_draw_time+1)& (0+255),c
  7190  000EA2  C01C  FFF6         	movff	??_draw_time,tblptrl
  7191  000EA6  C01D  FFF7         	movff	??_draw_time+1,tblptrh
  7192  000EAA                     	if	0	;tblptru may be non-zero
  7193  000EAA                     	endif
  7194  000EAA                     	if	0	;tblptru may be non-zero
  7195  000EAA                     	endif
  7196  000EAA  0008               	tblrd		*
  7197  000EAC  FFFF               	dw	65535	; errata NOP
  7198  000EAE  50F5               	movf	tablat,w,c
  7199  000EB0  1235               	iorwf	_led_mask2,f,c
  7200                           
  7201                           ;clock.c: 824: led_mask3 |= ptr[3];
  7202  000EB2  0E03               	movlw	3
  7203  000EB4  2420               	addwf	draw_time@ptr,w,c
  7204  000EB6  6E1C               	movwf	??_draw_time& (0+255),c
  7205  000EB8  0E00               	movlw	0
  7206  000EBA  2021               	addwfc	draw_time@ptr+1,w,c
  7207  000EBC  6E1D               	movwf	(??_draw_time+1)& (0+255),c
  7208  000EBE  C01C  FFF6         	movff	??_draw_time,tblptrl
  7209  000EC2  C01D  FFF7         	movff	??_draw_time+1,tblptrh
  7210  000EC6                     	if	0	;tblptru may be non-zero
  7211  000EC6                     	endif
  7212  000EC6                     	if	0	;tblptru may be non-zero
  7213  000EC6                     	endif
  7214  000EC6  0008               	tblrd		*
  7215  000EC8  FFFF               	dw	65535	; errata NOP
  7216  000ECA  50F5               	movf	tablat,w,c
  7217  000ECC  1234               	iorwf	_led_mask3,f,c
  7218                           
  7219                           ;clock.c: 826: if(colon || mode == 1)
  7220  000ECE  5049               	movf	_colon,w,c
  7221  000ED0  A4D8               	btfss	status,2,c
  7222  000ED2  D003               	goto	l3529
  7223  000ED4  043C               	decf	_mode,w,c
  7224  000ED6  A4D8               	btfss	status,2,c
  7225  000ED8  D003               	goto	l3531
  7226  000EDA                     l3529:
  7227  000EDA  FFFF               	dw	65535	; assembler added errata NOP
  7228                           
  7229                           ;clock.c: 827: {
  7230                           ;clock.c: 828: led_mask1 |= 0b00001000;
  7231  000EDC  8636               	bsf	_led_mask1,3,c
  7232                           
  7233                           ;clock.c: 829: led_mask2 |= 0b00100000;
  7234  000EDE  8A35               	bsf	_led_mask2,5,c
  7235  000EE0                     l3531:
  7236  000EE0  FFFF               	dw	65535	; assembler added errata NOP
  7237                           
  7238                           ;clock.c: 830: }
  7239                           ;clock.c: 832: if(ampm)
  7240  000EE2  503E               	movf	_ampm,w,c
  7241  000EE4  A4D8               	btfss	status,2,c
  7242                           
  7243                           ;clock.c: 833: {
  7244                           ;clock.c: 834: led_mask0 |= 0b10000000;
  7245  000EE6  8E4B               	bsf	_led_mask0,7,c
  7246                           
  7247                           ;clock.c: 835: }
  7248                           ;clock.c: 837: if((alarm || mode == 2) && mode != 1)
  7249  000EE8  503D               	movf	_alarm,w,c
  7250  000EEA  A4D8               	btfss	status,2,c
  7251  000EEC  D004               	goto	l3539
  7252  000EEE  0E02               	movlw	2
  7253  000EF0  183C               	xorwf	_mode,w,c
  7254  000EF2  A4D8               	btfss	status,2,c
  7255  000EF4  D004               	goto	l3543
  7256  000EF6                     l3539:
  7257  000EF6  FFFF               	dw	65535	; assembler added errata NOP
  7258  000EF8  043C               	decf	_mode,w,c
  7259  000EFA  A4D8               	btfss	status,2,c
  7260                           
  7261                           ;clock.c: 838: {
  7262                           ;clock.c: 839: led_mask1 |= 0b00000001;
  7263  000EFC  8036               	bsf	_led_mask1,0,c
  7264  000EFE                     l3543:
  7265  000EFE  FFFF               	dw	65535	; assembler added errata NOP
  7266                           
  7267                           ;clock.c: 840: }
  7268                           ;clock.c: 842: write_leds();
  7269  000F00  ECD8  F002         	call	_write_leds	;wreg free
  7270  000F04  0012               	return		;funcret
  7271  000F06  FFFF               	dw	65535	; errata NOP
  7272  000F08                     __end_of_draw_time:
  7273                           	opt stack 0
  7274                           tblptru	equ	0xFF8
  7275                           tblptrh	equ	0xFF7
  7276                           tblptrl	equ	0xFF6
  7277                           tablat	equ	0xFF5
  7278                           prodh	equ	0xFF4
  7279                           prodl	equ	0xFF3
  7280                           intcon	equ	0xFF2
  7281                           intcon2	equ	0xFF1
  7282                           intcon3	equ	0xFF0
  7283                           postinc0	equ	0xFEE
  7284                           wreg	equ	0xFE8
  7285                           postdec1	equ	0xFE5
  7286                           fsr1h	equ	0xFE2
  7287                           fsr1l	equ	0xFE1
  7288                           indf2	equ	0xFDF
  7289                           fsr2h	equ	0xFDA
  7290                           fsr2l	equ	0xFD9
  7291                           status	equ	0xFD8
  7292                           
  7293 ;; *************** function _decrement_alarm_hours *****************
  7294 ;; Defined at:
  7295 ;;		line 1008 in file "clock.c"
  7296 ;; Parameters:    Size  Location     Type
  7297 ;;		None
  7298 ;; Auto vars:     Size  Location     Type
  7299 ;;		None
  7300 ;; Return value:  Size  Location     Type
  7301 ;;                  1    wreg      void 
  7302 ;; Registers used:
  7303 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7304 ;; Tracked objects:
  7305 ;;		On entry : 0/0
  7306 ;;		On exit  : 0/0
  7307 ;;		Unchanged: 0/0
  7308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7313 ;;Total ram usage:        0 bytes
  7314 ;; Hardware stack levels used:    1
  7315 ;; Hardware stack levels required when called:    4
  7316 ;; This function calls:
  7317 ;;		_draw_alarm
  7318 ;; This function is called by:
  7319 ;;		_do_hour_down
  7320 ;; This function uses a non-reentrant model
  7321 ;;
  7322                           
  7323                           	psect	text29
  7324  0019A2                     __ptext29:
  7325                           	opt stack 0
  7326  0019A2                     _decrement_alarm_hours:
  7327                           	opt stack 0
  7328  0019A2  FFFF               	dw	65535	; assembler added errata NOP
  7329                           
  7330                           ;clock.c: 1010: alarm_hours--;
  7331                           
  7332                           ;incstack = 0
  7333  0019A4  0648               	decf	_alarm_hours,f,c
  7334                           
  7335                           ;clock.c: 1011: if(alarm_hours == 0)
  7336  0019A6  5048               	movf	_alarm_hours,w,c
  7337  0019A8  A4D8               	btfss	status,2,c
  7338  0019AA  D002               	goto	l3783
  7339                           
  7340                           ;clock.c: 1012: {
  7341                           ;clock.c: 1013: alarm_hours = 12;
  7342  0019AC  0E0C               	movlw	12
  7343  0019AE  6E48               	movwf	_alarm_hours,c
  7344  0019B0                     l3783:
  7345  0019B0  FFFF               	dw	65535	; assembler added errata NOP
  7346                           
  7347                           ;clock.c: 1014: }
  7348                           ;clock.c: 1015: if(alarm_hours == 11)
  7349  0019B2  0E0B               	movlw	11
  7350  0019B4  1848               	xorwf	_alarm_hours,w,c
  7351  0019B6  A4D8               	btfss	status,2,c
  7352  0019B8  D009               	goto	l3787
  7353                           
  7354                           ;clock.c: 1016: {
  7355                           ;clock.c: 1017: alarm_ampm = !alarm_ampm;
  7356  0019BA  5038               	movf	_alarm_ampm,w,c
  7357  0019BC  A4D8               	btfss	status,2,c
  7358  0019BE  D002               	goto	u5230
  7359  0019C0  0E01               	movlw	1
  7360  0019C2  D002               	goto	u5240
  7361  0019C4                     u5230:
  7362  0019C4  FFFF               	dw	65535	; assembler added errata NOP
  7363  0019C6  0E00               	movlw	0
  7364  0019C8                     u5240:
  7365  0019C8  FFFF               	dw	65535	; assembler added errata NOP
  7366  0019CA  6E38               	movwf	_alarm_ampm,c
  7367  0019CC                     l3787:
  7368  0019CC  FFFF               	dw	65535	; assembler added errata NOP
  7369                           
  7370                           ;clock.c: 1018: }
  7371                           ;clock.c: 1019: draw_alarm();
  7372  0019CE  EC64  F008         	call	_draw_alarm	;wreg free
  7373  0019D2  0012               	return		;funcret
  7374  0019D4  FFFF               	dw	65535	; errata NOP
  7375  0019D6                     __end_of_decrement_alarm_hours:
  7376                           	opt stack 0
  7377                           tblptru	equ	0xFF8
  7378                           tblptrh	equ	0xFF7
  7379                           tblptrl	equ	0xFF6
  7380                           tablat	equ	0xFF5
  7381                           prodh	equ	0xFF4
  7382                           prodl	equ	0xFF3
  7383                           intcon	equ	0xFF2
  7384                           intcon2	equ	0xFF1
  7385                           intcon3	equ	0xFF0
  7386                           postinc0	equ	0xFEE
  7387                           wreg	equ	0xFE8
  7388                           postdec1	equ	0xFE5
  7389                           fsr1h	equ	0xFE2
  7390                           fsr1l	equ	0xFE1
  7391                           indf2	equ	0xFDF
  7392                           fsr2h	equ	0xFDA
  7393                           fsr2l	equ	0xFD9
  7394                           status	equ	0xFD8
  7395                           
  7396 ;; *************** function _draw_alarm *****************
  7397 ;; Defined at:
  7398 ;;		line 847 in file "clock.c"
  7399 ;; Parameters:    Size  Location     Type
  7400 ;;		None
  7401 ;; Auto vars:     Size  Location     Type
  7402 ;;  ptr             2   31[COMRAM] PTR const unsigned char 
  7403 ;;		 -> led_masks4(40), led_masks3(40), led_masks2(40), 
  7404 ;;  minutes10       1   30[COMRAM] unsigned char 
  7405 ;;  hours10         1   29[COMRAM] unsigned char 
  7406 ;; Return value:  Size  Location     Type
  7407 ;;                  1    wreg      void 
  7408 ;; Registers used:
  7409 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7410 ;; Tracked objects:
  7411 ;;		On entry : 0/0
  7412 ;;		On exit  : 0/0
  7413 ;;		Unchanged: 0/0
  7414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7416 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7417 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7418 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7419 ;;Total ram usage:        6 bytes
  7420 ;; Hardware stack levels used:    1
  7421 ;; Hardware stack levels required when called:    3
  7422 ;; This function calls:
  7423 ;;		___awdiv
  7424 ;;		_write_leds
  7425 ;; This function is called by:
  7426 ;;		_increment_alarm_minutes
  7427 ;;		_decrement_alarm_minutes
  7428 ;;		_increment_alarm_hours
  7429 ;;		_decrement_alarm_hours
  7430 ;;		_handle_ir
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434                           	psect	text30
  7435  0010C8                     __ptext30:
  7436                           	opt stack 0
  7437  0010C8                     _draw_alarm:
  7438                           	opt stack 0
  7439  0010C8  FFFF               	dw	65535	; assembler added errata NOP
  7440                           
  7441                           ;clock.c: 850: led_mask0 = 0;
  7442                           
  7443                           ;incstack = 0
  7444  0010CA  0E00               	movlw	0
  7445  0010CC  6E4B               	movwf	_led_mask0,c
  7446                           
  7447                           ;clock.c: 851: led_mask1 = 0;
  7448  0010CE  0E00               	movlw	0
  7449  0010D0  6E36               	movwf	_led_mask1,c
  7450                           
  7451                           ;clock.c: 852: led_mask2 = 0;
  7452  0010D2  0E00               	movlw	0
  7453  0010D4  6E35               	movwf	_led_mask2,c
  7454                           
  7455                           ;clock.c: 853: led_mask3 = 0;
  7456  0010D6  0E00               	movlw	0
  7457  0010D8  6E34               	movwf	_led_mask3,c
  7458                           
  7459                           ;clock.c: 856: uint8_t hours10 = alarm_hours;
  7460  0010DA  C048  F01E         	movff	_alarm_hours,draw_alarm@hours10
  7461                           
  7462                           ;clock.c: 857: if(alarm_hours > 9)
  7463  0010DE  0E09               	movlw	9
  7464  0010E0  6448               	cpfsgt	_alarm_hours,c
  7465  0010E2  D004               	goto	l3555
  7466                           
  7467                           ;clock.c: 858: {
  7468                           ;clock.c: 859: hours10 -= 10;
  7469  0010E4  0E0A               	movlw	10
  7470  0010E6  5E1E               	subwf	draw_alarm@hours10,f,c
  7471                           
  7472                           ;clock.c: 860: led_mask0 = 0b00010100;
  7473  0010E8  0E14               	movlw	20
  7474  0010EA  6E4B               	movwf	_led_mask0,c
  7475  0010EC                     l3555:
  7476  0010EC  FFFF               	dw	65535	; assembler added errata NOP
  7477                           
  7478                           ;clock.c: 861: }
  7479                           ;clock.c: 863: const uint8_t *ptr = &led_masks2[hours10];
  7480  0010EE  501E               	movf	draw_alarm@hours10,w,c
  7481  0010F0  0D04               	mullw	4
  7482  0010F2  0EC1               	movlw	low _led_masks2
  7483  0010F4  24F3               	addwf	prodl,w,c
  7484  0010F6  6E20               	movwf	draw_alarm@ptr,c
  7485  0010F8  0EBE               	movlw	high _led_masks2
  7486  0010FA  20F4               	addwfc	prodh,w,c
  7487  0010FC  6E21               	movwf	draw_alarm@ptr+1,c
  7488                           
  7489                           ;clock.c: 864: led_mask0 |= ptr[0];
  7490  0010FE  C020  FFF6         	movff	draw_alarm@ptr,tblptrl
  7491  001102  C021  FFF7         	movff	draw_alarm@ptr+1,tblptrh
  7492  001106                     	if	0	;tblptru may be non-zero
  7493  001106                     	endif
  7494  001106                     	if	0	;tblptru may be non-zero
  7495  001106                     	endif
  7496  001106  0008               	tblrd		*
  7497  001108  FFFF               	dw	65535	; errata NOP
  7498  00110A  50F5               	movf	tablat,w,c
  7499  00110C  124B               	iorwf	_led_mask0,f,c
  7500                           
  7501                           ;clock.c: 865: led_mask1 |= ptr[1];
  7502  00110E  0E01               	movlw	1
  7503  001110  2420               	addwf	draw_alarm@ptr,w,c
  7504  001112  6E1C               	movwf	??_draw_alarm& (0+255),c
  7505  001114  0E00               	movlw	0
  7506  001116  2021               	addwfc	draw_alarm@ptr+1,w,c
  7507  001118  6E1D               	movwf	(??_draw_alarm+1)& (0+255),c
  7508  00111A  C01C  FFF6         	movff	??_draw_alarm,tblptrl
  7509  00111E  C01D  FFF7         	movff	??_draw_alarm+1,tblptrh
  7510  001122                     	if	0	;tblptru may be non-zero
  7511  001122                     	endif
  7512  001122                     	if	0	;tblptru may be non-zero
  7513  001122                     	endif
  7514  001122  0008               	tblrd		*
  7515  001124  FFFF               	dw	65535	; errata NOP
  7516  001126  50F5               	movf	tablat,w,c
  7517  001128  1236               	iorwf	_led_mask1,f,c
  7518                           
  7519                           ;clock.c: 866: led_mask2 |= ptr[2];
  7520  00112A  0E02               	movlw	2
  7521  00112C  2420               	addwf	draw_alarm@ptr,w,c
  7522  00112E  6E1C               	movwf	??_draw_alarm& (0+255),c
  7523  001130  0E00               	movlw	0
  7524  001132  2021               	addwfc	draw_alarm@ptr+1,w,c
  7525  001134  6E1D               	movwf	(??_draw_alarm+1)& (0+255),c
  7526  001136  C01C  FFF6         	movff	??_draw_alarm,tblptrl
  7527  00113A  C01D  FFF7         	movff	??_draw_alarm+1,tblptrh
  7528  00113E                     	if	0	;tblptru may be non-zero
  7529  00113E                     	endif
  7530  00113E                     	if	0	;tblptru may be non-zero
  7531  00113E                     	endif
  7532  00113E  0008               	tblrd		*
  7533  001140  FFFF               	dw	65535	; errata NOP
  7534  001142  50F5               	movf	tablat,w,c
  7535  001144  1235               	iorwf	_led_mask2,f,c
  7536                           
  7537                           ;clock.c: 867: led_mask3 |= ptr[3];
  7538  001146  0E03               	movlw	3
  7539  001148  2420               	addwf	draw_alarm@ptr,w,c
  7540  00114A  6E1C               	movwf	??_draw_alarm& (0+255),c
  7541  00114C  0E00               	movlw	0
  7542  00114E  2021               	addwfc	draw_alarm@ptr+1,w,c
  7543  001150  6E1D               	movwf	(??_draw_alarm+1)& (0+255),c
  7544  001152  C01C  FFF6         	movff	??_draw_alarm,tblptrl
  7545  001156  C01D  FFF7         	movff	??_draw_alarm+1,tblptrh
  7546  00115A                     	if	0	;tblptru may be non-zero
  7547  00115A                     	endif
  7548  00115A                     	if	0	;tblptru may be non-zero
  7549  00115A                     	endif
  7550  00115A  0008               	tblrd		*
  7551  00115C  FFFF               	dw	65535	; errata NOP
  7552  00115E  50F5               	movf	tablat,w,c
  7553  001160  1234               	iorwf	_led_mask3,f,c
  7554                           
  7555                           ;clock.c: 869: uint8_t minutes10 = alarm_minutes / 10;
  7556  001162  C039  F014         	movff	_alarm_minutes,___awdiv@dividend
  7557  001166  6A15               	clrf	___awdiv@dividend+1,c
  7558  001168  0E00               	movlw	0
  7559  00116A  6E17               	movwf	___awdiv@divisor+1,c
  7560  00116C  0E0A               	movlw	10
  7561  00116E  6E16               	movwf	___awdiv@divisor,c
  7562  001170  EC9C  F00A         	call	___awdiv	;wreg free
  7563  001174  5014               	movf	?___awdiv,w,c
  7564  001176  6E1F               	movwf	draw_alarm@minutes10,c
  7565                           
  7566                           ;clock.c: 870: ptr = &led_masks3[minutes10];
  7567  001178  501F               	movf	draw_alarm@minutes10,w,c
  7568  00117A  0D04               	mullw	4
  7569  00117C  0E99               	movlw	low _led_masks3
  7570  00117E  24F3               	addwf	prodl,w,c
  7571  001180  6E20               	movwf	draw_alarm@ptr,c
  7572  001182  0EBE               	movlw	high _led_masks3
  7573  001184  20F4               	addwfc	prodh,w,c
  7574  001186  6E21               	movwf	draw_alarm@ptr+1,c
  7575                           
  7576                           ;clock.c: 871: led_mask0 |= ptr[0];
  7577  001188  C020  FFF6         	movff	draw_alarm@ptr,tblptrl
  7578  00118C  C021  FFF7         	movff	draw_alarm@ptr+1,tblptrh
  7579  001190                     	if	0	;tblptru may be non-zero
  7580  001190                     	endif
  7581  001190                     	if	0	;tblptru may be non-zero
  7582  001190                     	endif
  7583  001190  0008               	tblrd		*
  7584  001192  FFFF               	dw	65535	; errata NOP
  7585  001194  50F5               	movf	tablat,w,c
  7586  001196  124B               	iorwf	_led_mask0,f,c
  7587                           
  7588                           ;clock.c: 872: led_mask1 |= ptr[1];
  7589  001198  0E01               	movlw	1
  7590  00119A  2420               	addwf	draw_alarm@ptr,w,c
  7591  00119C  6E1C               	movwf	??_draw_alarm& (0+255),c
  7592  00119E  0E00               	movlw	0
  7593  0011A0  2021               	addwfc	draw_alarm@ptr+1,w,c
  7594  0011A2  6E1D               	movwf	(??_draw_alarm+1)& (0+255),c
  7595  0011A4  C01C  FFF6         	movff	??_draw_alarm,tblptrl
  7596  0011A8  C01D  FFF7         	movff	??_draw_alarm+1,tblptrh
  7597  0011AC                     	if	0	;tblptru may be non-zero
  7598  0011AC                     	endif
  7599  0011AC                     	if	0	;tblptru may be non-zero
  7600  0011AC                     	endif
  7601  0011AC  0008               	tblrd		*
  7602  0011AE  FFFF               	dw	65535	; errata NOP
  7603  0011B0  50F5               	movf	tablat,w,c
  7604  0011B2  1236               	iorwf	_led_mask1,f,c
  7605                           
  7606                           ;clock.c: 873: led_mask2 |= ptr[2];
  7607  0011B4  0E02               	movlw	2
  7608  0011B6  2420               	addwf	draw_alarm@ptr,w,c
  7609  0011B8  6E1C               	movwf	??_draw_alarm& (0+255),c
  7610  0011BA  0E00               	movlw	0
  7611  0011BC  2021               	addwfc	draw_alarm@ptr+1,w,c
  7612  0011BE  6E1D               	movwf	(??_draw_alarm+1)& (0+255),c
  7613  0011C0  C01C  FFF6         	movff	??_draw_alarm,tblptrl
  7614  0011C4  C01D  FFF7         	movff	??_draw_alarm+1,tblptrh
  7615  0011C8                     	if	0	;tblptru may be non-zero
  7616  0011C8                     	endif
  7617  0011C8                     	if	0	;tblptru may be non-zero
  7618  0011C8                     	endif
  7619  0011C8  0008               	tblrd		*
  7620  0011CA  FFFF               	dw	65535	; errata NOP
  7621  0011CC  50F5               	movf	tablat,w,c
  7622  0011CE  1235               	iorwf	_led_mask2,f,c
  7623                           
  7624                           ;clock.c: 874: led_mask3 |= ptr[3];
  7625  0011D0  0E03               	movlw	3
  7626  0011D2  2420               	addwf	draw_alarm@ptr,w,c
  7627  0011D4  6E1C               	movwf	??_draw_alarm& (0+255),c
  7628  0011D6  0E00               	movlw	0
  7629  0011D8  2021               	addwfc	draw_alarm@ptr+1,w,c
  7630  0011DA  6E1D               	movwf	(??_draw_alarm+1)& (0+255),c
  7631  0011DC  C01C  FFF6         	movff	??_draw_alarm,tblptrl
  7632  0011E0  C01D  FFF7         	movff	??_draw_alarm+1,tblptrh
  7633  0011E4                     	if	0	;tblptru may be non-zero
  7634  0011E4                     	endif
  7635  0011E4                     	if	0	;tblptru may be non-zero
  7636  0011E4                     	endif
  7637  0011E4  0008               	tblrd		*
  7638  0011E6  FFFF               	dw	65535	; errata NOP
  7639  0011E8  50F5               	movf	tablat,w,c
  7640  0011EA  1234               	iorwf	_led_mask3,f,c
  7641                           
  7642                           ;clock.c: 876: minutes10 = alarm_minutes - minutes10 * 10;
  7643  0011EC  501F               	movf	draw_alarm@minutes10,w,c
  7644  0011EE  0D0A               	mullw	10
  7645  0011F0  50F3               	movf	prodl,w,c
  7646  0011F2  0800               	sublw	0
  7647  0011F4  2439               	addwf	_alarm_minutes,w,c
  7648  0011F6  6E1F               	movwf	draw_alarm@minutes10,c
  7649                           
  7650                           ;clock.c: 877: ptr = &led_masks4[minutes10];
  7651  0011F8  501F               	movf	draw_alarm@minutes10,w,c
  7652  0011FA  0D04               	mullw	4
  7653  0011FC  0E71               	movlw	low _led_masks4
  7654  0011FE  24F3               	addwf	prodl,w,c
  7655  001200  6E20               	movwf	draw_alarm@ptr,c
  7656  001202  0EBE               	movlw	high _led_masks4
  7657  001204  20F4               	addwfc	prodh,w,c
  7658  001206  6E21               	movwf	draw_alarm@ptr+1,c
  7659                           
  7660                           ;clock.c: 878: led_mask0 |= ptr[0];
  7661  001208  C020  FFF6         	movff	draw_alarm@ptr,tblptrl
  7662  00120C  C021  FFF7         	movff	draw_alarm@ptr+1,tblptrh
  7663  001210                     	if	0	;tblptru may be non-zero
  7664  001210                     	endif
  7665  001210                     	if	0	;tblptru may be non-zero
  7666  001210                     	endif
  7667  001210  0008               	tblrd		*
  7668  001212  FFFF               	dw	65535	; errata NOP
  7669  001214  50F5               	movf	tablat,w,c
  7670  001216  124B               	iorwf	_led_mask0,f,c
  7671                           
  7672                           ;clock.c: 879: led_mask1 |= ptr[1];
  7673  001218  0E01               	movlw	1
  7674  00121A  2420               	addwf	draw_alarm@ptr,w,c
  7675  00121C  6E1C               	movwf	??_draw_alarm& (0+255),c
  7676  00121E  0E00               	movlw	0
  7677  001220  2021               	addwfc	draw_alarm@ptr+1,w,c
  7678  001222  6E1D               	movwf	(??_draw_alarm+1)& (0+255),c
  7679  001224  C01C  FFF6         	movff	??_draw_alarm,tblptrl
  7680  001228  C01D  FFF7         	movff	??_draw_alarm+1,tblptrh
  7681  00122C                     	if	0	;tblptru may be non-zero
  7682  00122C                     	endif
  7683  00122C                     	if	0	;tblptru may be non-zero
  7684  00122C                     	endif
  7685  00122C  0008               	tblrd		*
  7686  00122E  FFFF               	dw	65535	; errata NOP
  7687  001230  50F5               	movf	tablat,w,c
  7688  001232  1236               	iorwf	_led_mask1,f,c
  7689                           
  7690                           ;clock.c: 880: led_mask2 |= ptr[2];
  7691  001234  0E02               	movlw	2
  7692  001236  2420               	addwf	draw_alarm@ptr,w,c
  7693  001238  6E1C               	movwf	??_draw_alarm& (0+255),c
  7694  00123A  0E00               	movlw	0
  7695  00123C  2021               	addwfc	draw_alarm@ptr+1,w,c
  7696  00123E  6E1D               	movwf	(??_draw_alarm+1)& (0+255),c
  7697  001240  C01C  FFF6         	movff	??_draw_alarm,tblptrl
  7698  001244  C01D  FFF7         	movff	??_draw_alarm+1,tblptrh
  7699  001248                     	if	0	;tblptru may be non-zero
  7700  001248                     	endif
  7701  001248                     	if	0	;tblptru may be non-zero
  7702  001248                     	endif
  7703  001248  0008               	tblrd		*
  7704  00124A  FFFF               	dw	65535	; errata NOP
  7705  00124C  50F5               	movf	tablat,w,c
  7706  00124E  1235               	iorwf	_led_mask2,f,c
  7707                           
  7708                           ;clock.c: 881: led_mask3 |= ptr[3];
  7709  001250  0E03               	movlw	3
  7710  001252  2420               	addwf	draw_alarm@ptr,w,c
  7711  001254  6E1C               	movwf	??_draw_alarm& (0+255),c
  7712  001256  0E00               	movlw	0
  7713  001258  2021               	addwfc	draw_alarm@ptr+1,w,c
  7714  00125A  6E1D               	movwf	(??_draw_alarm+1)& (0+255),c
  7715  00125C  C01C  FFF6         	movff	??_draw_alarm,tblptrl
  7716  001260  C01D  FFF7         	movff	??_draw_alarm+1,tblptrh
  7717  001264                     	if	0	;tblptru may be non-zero
  7718  001264                     	endif
  7719  001264                     	if	0	;tblptru may be non-zero
  7720  001264                     	endif
  7721  001264  0008               	tblrd		*
  7722  001266  FFFF               	dw	65535	; errata NOP
  7723  001268  50F5               	movf	tablat,w,c
  7724  00126A  1234               	iorwf	_led_mask3,f,c
  7725                           
  7726                           ;clock.c: 883: led_mask1 |= 0b00001000;
  7727  00126C  8636               	bsf	_led_mask1,3,c
  7728                           
  7729                           ;clock.c: 884: led_mask2 |= 0b00100000;
  7730  00126E  8A35               	bsf	_led_mask2,5,c
  7731                           
  7732                           ;clock.c: 886: if(alarm_ampm)
  7733  001270  5038               	movf	_alarm_ampm,w,c
  7734  001272  A4D8               	btfss	status,2,c
  7735                           
  7736                           ;clock.c: 887: {
  7737                           ;clock.c: 888: led_mask0 |= 0b10000000;
  7738  001274  8E4B               	bsf	_led_mask0,7,c
  7739                           
  7740                           ;clock.c: 889: }
  7741                           ;clock.c: 891: if(alarm)
  7742  001276  503D               	movf	_alarm,w,c
  7743  001278  A4D8               	btfss	status,2,c
  7744                           
  7745                           ;clock.c: 892: {
  7746                           ;clock.c: 893: led_mask1 |= 0b00000001;
  7747  00127A  8036               	bsf	_led_mask1,0,c
  7748                           
  7749                           ;clock.c: 894: }
  7750                           ;clock.c: 896: write_leds();
  7751  00127C  ECD8  F002         	call	_write_leds	;wreg free
  7752  001280  0012               	return		;funcret
  7753  001282  FFFF               	dw	65535	; errata NOP
  7754  001284                     __end_of_draw_alarm:
  7755                           	opt stack 0
  7756                           tblptru	equ	0xFF8
  7757                           tblptrh	equ	0xFF7
  7758                           tblptrl	equ	0xFF6
  7759                           tablat	equ	0xFF5
  7760                           prodh	equ	0xFF4
  7761                           prodl	equ	0xFF3
  7762                           intcon	equ	0xFF2
  7763                           intcon2	equ	0xFF1
  7764                           intcon3	equ	0xFF0
  7765                           postinc0	equ	0xFEE
  7766                           wreg	equ	0xFE8
  7767                           postdec1	equ	0xFE5
  7768                           fsr1h	equ	0xFE2
  7769                           fsr1l	equ	0xFE1
  7770                           indf2	equ	0xFDF
  7771                           fsr2h	equ	0xFDA
  7772                           fsr2l	equ	0xFD9
  7773                           status	equ	0xFD8
  7774                           
  7775 ;; *************** function _write_leds *****************
  7776 ;; Defined at:
  7777 ;;		line 686 in file "clock.c"
  7778 ;; Parameters:    Size  Location     Type
  7779 ;;		None
  7780 ;; Auto vars:     Size  Location     Type
  7781 ;;		None
  7782 ;; Return value:  Size  Location     Type
  7783 ;;                  1    wreg      void 
  7784 ;; Registers used:
  7785 ;;		wreg, status,2, status,0
  7786 ;; Tracked objects:
  7787 ;;		On entry : 0/0
  7788 ;;		On exit  : 0/0
  7789 ;;		Unchanged: 0/0
  7790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7793 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7794 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7795 ;;Total ram usage:        1 bytes
  7796 ;; Hardware stack levels used:    1
  7797 ;; Hardware stack levels required when called:    2
  7798 ;; This function calls:
  7799 ;;		Nothing
  7800 ;; This function is called by:
  7801 ;;		_draw_time
  7802 ;;		_draw_alarm
  7803 ;;		_draw_test
  7804 ;;		_do_hour_up
  7805 ;;		_do_hour_down
  7806 ;; This function uses a non-reentrant model
  7807 ;;
  7808                           
  7809                           	psect	text31
  7810  0005B0                     __ptext31:
  7811                           	opt stack 0
  7812  0005B0                     _write_leds:
  7813                           	opt stack 0
  7814  0005B0  FFFF               	dw	65535	; assembler added errata NOP
  7815                           
  7816                           ;clock.c: 688: LATAbits.LATA0 = led_mask0 & 0x01;
  7817                           
  7818                           ;incstack = 0
  7819  0005B2  C04B  F014         	movff	_led_mask0,??_write_leds
  7820  0005B6  0E01               	movlw	1
  7821  0005B8  1614               	andwf	??_write_leds,f,c
  7822  0005BA  5089               	movf	3977,w,c	;volatile
  7823  0005BC  1814               	xorwf	??_write_leds,w,c
  7824  0005BE  0BFE               	andlw	-2
  7825  0005C0  1814               	xorwf	??_write_leds,w,c
  7826  0005C2  6E89               	movwf	3977,c	;volatile
  7827                           
  7828                           ;clock.c: 689: LATAbits.LATA1 = (led_mask0 & 0x02) ? 1 : 0;
  7829  0005C4  A24B               	btfss	_led_mask0,1,c
  7830  0005C6  D003               	goto	u4190
  7831  0005C8  6A14               	clrf	??_write_leds& (0+255),c
  7832  0005CA  2A14               	incf	??_write_leds& (0+255),f,c
  7833  0005CC  D002               	goto	u4208
  7834  0005CE                     u4190:
  7835  0005CE  FFFF               	dw	65535	; assembler added errata NOP
  7836  0005D0  6A14               	clrf	??_write_leds& (0+255),c
  7837  0005D2                     u4208:
  7838  0005D2  FFFF               	dw	65535	; assembler added errata NOP
  7839  0005D4  4614               	rlncf	??_write_leds,f,c
  7840  0005D6  5089               	movf	3977,w,c	;volatile
  7841  0005D8  1814               	xorwf	??_write_leds,w,c
  7842  0005DA  0BFD               	andlw	-3
  7843  0005DC  1814               	xorwf	??_write_leds,w,c
  7844  0005DE  6E89               	movwf	3977,c	;volatile
  7845                           
  7846                           ;clock.c: 690: LATAbits.LATA2 = (led_mask0 & 0x04) ? 1 : 0;
  7847  0005E0  A44B               	btfss	_led_mask0,2,c
  7848  0005E2  D003               	goto	u4210
  7849  0005E4  6A14               	clrf	??_write_leds& (0+255),c
  7850  0005E6  2A14               	incf	??_write_leds& (0+255),f,c
  7851  0005E8  D002               	goto	u4228
  7852  0005EA                     u4210:
  7853  0005EA  FFFF               	dw	65535	; assembler added errata NOP
  7854  0005EC  6A14               	clrf	??_write_leds& (0+255),c
  7855  0005EE                     u4228:
  7856  0005EE  FFFF               	dw	65535	; assembler added errata NOP
  7857  0005F0  4614               	rlncf	??_write_leds,f,c
  7858  0005F2  4614               	rlncf	??_write_leds,f,c
  7859  0005F4  5089               	movf	3977,w,c	;volatile
  7860  0005F6  1814               	xorwf	??_write_leds,w,c
  7861  0005F8  0BFB               	andlw	-5
  7862  0005FA  1814               	xorwf	??_write_leds,w,c
  7863  0005FC  6E89               	movwf	3977,c	;volatile
  7864                           
  7865                           ;clock.c: 691: LATAbits.LATA3 = (led_mask0 & 0x08) ? 1 : 0;
  7866  0005FE  A64B               	btfss	_led_mask0,3,c
  7867  000600  D003               	goto	u4230
  7868  000602  6A14               	clrf	??_write_leds& (0+255),c
  7869  000604  2A14               	incf	??_write_leds& (0+255),f,c
  7870  000606  D002               	goto	u4248
  7871  000608                     u4230:
  7872  000608  FFFF               	dw	65535	; assembler added errata NOP
  7873  00060A  6A14               	clrf	??_write_leds& (0+255),c
  7874  00060C                     u4248:
  7875  00060C  FFFF               	dw	65535	; assembler added errata NOP
  7876  00060E  4614               	rlncf	??_write_leds,f,c
  7877  000610  4614               	rlncf	??_write_leds,f,c
  7878  000612  4614               	rlncf	??_write_leds,f,c
  7879  000614  5089               	movf	3977,w,c	;volatile
  7880  000616  1814               	xorwf	??_write_leds,w,c
  7881  000618  0BF7               	andlw	-9
  7882  00061A  1814               	xorwf	??_write_leds,w,c
  7883  00061C  6E89               	movwf	3977,c	;volatile
  7884                           
  7885                           ;clock.c: 692: LATAbits.LATA5 = (led_mask0 & 0x10) ? 1 : 0;
  7886  00061E  A84B               	btfss	_led_mask0,4,c
  7887  000620  D003               	goto	u4250
  7888  000622  6A14               	clrf	??_write_leds& (0+255),c
  7889  000624  2A14               	incf	??_write_leds& (0+255),f,c
  7890  000626  D002               	goto	u4268
  7891  000628                     u4250:
  7892  000628  FFFF               	dw	65535	; assembler added errata NOP
  7893  00062A  6A14               	clrf	??_write_leds& (0+255),c
  7894  00062C                     u4268:
  7895  00062C  FFFF               	dw	65535	; assembler added errata NOP
  7896  00062E  3A14               	swapf	??_write_leds,f,c
  7897  000630  4614               	rlncf	??_write_leds,f,c
  7898  000632  5089               	movf	3977,w,c	;volatile
  7899  000634  1814               	xorwf	??_write_leds,w,c
  7900  000636  0BDF               	andlw	-33
  7901  000638  1814               	xorwf	??_write_leds,w,c
  7902  00063A  6E89               	movwf	3977,c	;volatile
  7903                           
  7904                           ;clock.c: 693: LATCbits.LATC0 = (led_mask0 & 0x20) ? 1 : 0;
  7905  00063C  AA4B               	btfss	_led_mask0,5,c
  7906  00063E  D003               	goto	u4270
  7907  000640  6A14               	clrf	??_write_leds& (0+255),c
  7908  000642  2A14               	incf	??_write_leds& (0+255),f,c
  7909  000644  D002               	goto	u4288
  7910  000646                     u4270:
  7911  000646  FFFF               	dw	65535	; assembler added errata NOP
  7912  000648  6A14               	clrf	??_write_leds& (0+255),c
  7913  00064A                     u4288:
  7914  00064A  FFFF               	dw	65535	; assembler added errata NOP
  7915  00064C  508B               	movf	3979,w,c	;volatile
  7916  00064E  1814               	xorwf	??_write_leds,w,c
  7917  000650  0BFE               	andlw	-2
  7918  000652  1814               	xorwf	??_write_leds,w,c
  7919  000654  6E8B               	movwf	3979,c	;volatile
  7920                           
  7921                           ;clock.c: 694: LATCbits.LATC1 = (led_mask0 & 0x40) ? 1 : 0;
  7922  000656  AC4B               	btfss	_led_mask0,6,c
  7923  000658  D003               	goto	u4290
  7924  00065A  6A14               	clrf	??_write_leds& (0+255),c
  7925  00065C  2A14               	incf	??_write_leds& (0+255),f,c
  7926  00065E  D002               	goto	u4308
  7927  000660                     u4290:
  7928  000660  FFFF               	dw	65535	; assembler added errata NOP
  7929  000662  6A14               	clrf	??_write_leds& (0+255),c
  7930  000664                     u4308:
  7931  000664  FFFF               	dw	65535	; assembler added errata NOP
  7932  000666  4614               	rlncf	??_write_leds,f,c
  7933  000668  508B               	movf	3979,w,c	;volatile
  7934  00066A  1814               	xorwf	??_write_leds,w,c
  7935  00066C  0BFD               	andlw	-3
  7936  00066E  1814               	xorwf	??_write_leds,w,c
  7937  000670  6E8B               	movwf	3979,c	;volatile
  7938                           
  7939                           ;clock.c: 695: LATCbits.LATC3 = (led_mask0 & 0x80) ? 1 : 0;
  7940  000672  AE4B               	btfss	_led_mask0,7,c
  7941  000674  D003               	goto	u4310
  7942  000676  6A14               	clrf	??_write_leds& (0+255),c
  7943  000678  2A14               	incf	??_write_leds& (0+255),f,c
  7944  00067A  D002               	goto	u4328
  7945  00067C                     u4310:
  7946  00067C  FFFF               	dw	65535	; assembler added errata NOP
  7947  00067E  6A14               	clrf	??_write_leds& (0+255),c
  7948  000680                     u4328:
  7949  000680  FFFF               	dw	65535	; assembler added errata NOP
  7950  000682  4614               	rlncf	??_write_leds,f,c
  7951  000684  4614               	rlncf	??_write_leds,f,c
  7952  000686  4614               	rlncf	??_write_leds,f,c
  7953  000688  508B               	movf	3979,w,c	;volatile
  7954  00068A  1814               	xorwf	??_write_leds,w,c
  7955  00068C  0BF7               	andlw	-9
  7956  00068E  1814               	xorwf	??_write_leds,w,c
  7957  000690  6E8B               	movwf	3979,c	;volatile
  7958                           
  7959                           ;clock.c: 696: LATCbits.LATC4 = led_mask1 & 0x01;
  7960  000692  C036  F014         	movff	_led_mask1,??_write_leds
  7961  000696  0E01               	movlw	1
  7962  000698  1614               	andwf	??_write_leds,f,c
  7963  00069A  3A14               	swapf	??_write_leds,f,c
  7964  00069C  508B               	movf	3979,w,c	;volatile
  7965  00069E  1814               	xorwf	??_write_leds,w,c
  7966  0006A0  0BEF               	andlw	-17
  7967  0006A2  1814               	xorwf	??_write_leds,w,c
  7968  0006A4  6E8B               	movwf	3979,c	;volatile
  7969                           
  7970                           ;clock.c: 697: LATCbits.LATC5 = (led_mask1 & 0x02) ? 1 : 0;
  7971  0006A6  A236               	btfss	_led_mask1,1,c
  7972  0006A8  D003               	goto	u4330
  7973  0006AA  6A14               	clrf	??_write_leds& (0+255),c
  7974  0006AC  2A14               	incf	??_write_leds& (0+255),f,c
  7975  0006AE  D002               	goto	u4348
  7976  0006B0                     u4330:
  7977  0006B0  FFFF               	dw	65535	; assembler added errata NOP
  7978  0006B2  6A14               	clrf	??_write_leds& (0+255),c
  7979  0006B4                     u4348:
  7980  0006B4  FFFF               	dw	65535	; assembler added errata NOP
  7981  0006B6  3A14               	swapf	??_write_leds,f,c
  7982  0006B8  4614               	rlncf	??_write_leds,f,c
  7983  0006BA  508B               	movf	3979,w,c	;volatile
  7984  0006BC  1814               	xorwf	??_write_leds,w,c
  7985  0006BE  0BDF               	andlw	-33
  7986  0006C0  1814               	xorwf	??_write_leds,w,c
  7987  0006C2  6E8B               	movwf	3979,c	;volatile
  7988                           
  7989                           ;clock.c: 698: LATEbits.LATE0 = (led_mask1 & 0x04) ? 1 : 0;
  7990  0006C4  A436               	btfss	_led_mask1,2,c
  7991  0006C6  D003               	goto	u4350
  7992  0006C8  6A14               	clrf	??_write_leds& (0+255),c
  7993  0006CA  2A14               	incf	??_write_leds& (0+255),f,c
  7994  0006CC  D002               	goto	u4368
  7995  0006CE                     u4350:
  7996  0006CE  FFFF               	dw	65535	; assembler added errata NOP
  7997  0006D0  6A14               	clrf	??_write_leds& (0+255),c
  7998  0006D2                     u4368:
  7999  0006D2  FFFF               	dw	65535	; assembler added errata NOP
  8000  0006D4  508D               	movf	3981,w,c	;volatile
  8001  0006D6  1814               	xorwf	??_write_leds,w,c
  8002  0006D8  0BFE               	andlw	-2
  8003  0006DA  1814               	xorwf	??_write_leds,w,c
  8004  0006DC  6E8D               	movwf	3981,c	;volatile
  8005                           
  8006                           ;clock.c: 699: LATEbits.LATE1 = (led_mask1 & 0x08) ? 1 : 0;
  8007  0006DE  A636               	btfss	_led_mask1,3,c
  8008  0006E0  D003               	goto	u4370
  8009  0006E2  6A14               	clrf	??_write_leds& (0+255),c
  8010  0006E4  2A14               	incf	??_write_leds& (0+255),f,c
  8011  0006E6  D002               	goto	u4388
  8012  0006E8                     u4370:
  8013  0006E8  FFFF               	dw	65535	; assembler added errata NOP
  8014  0006EA  6A14               	clrf	??_write_leds& (0+255),c
  8015  0006EC                     u4388:
  8016  0006EC  FFFF               	dw	65535	; assembler added errata NOP
  8017  0006EE  4614               	rlncf	??_write_leds,f,c
  8018  0006F0  508D               	movf	3981,w,c	;volatile
  8019  0006F2  1814               	xorwf	??_write_leds,w,c
  8020  0006F4  0BFD               	andlw	-3
  8021  0006F6  1814               	xorwf	??_write_leds,w,c
  8022  0006F8  6E8D               	movwf	3981,c	;volatile
  8023                           
  8024                           ;clock.c: 700: LATEbits.LATE2 = (led_mask1 & 0x10) ? 1 : 0;
  8025  0006FA  A836               	btfss	_led_mask1,4,c
  8026  0006FC  D003               	goto	u4390
  8027  0006FE  6A14               	clrf	??_write_leds& (0+255),c
  8028  000700  2A14               	incf	??_write_leds& (0+255),f,c
  8029  000702  D002               	goto	u4408
  8030  000704                     u4390:
  8031  000704  FFFF               	dw	65535	; assembler added errata NOP
  8032  000706  6A14               	clrf	??_write_leds& (0+255),c
  8033  000708                     u4408:
  8034  000708  FFFF               	dw	65535	; assembler added errata NOP
  8035  00070A  4614               	rlncf	??_write_leds,f,c
  8036  00070C  4614               	rlncf	??_write_leds,f,c
  8037  00070E  508D               	movf	3981,w,c	;volatile
  8038  000710  1814               	xorwf	??_write_leds,w,c
  8039  000712  0BFB               	andlw	-5
  8040  000714  1814               	xorwf	??_write_leds,w,c
  8041  000716  6E8D               	movwf	3981,c	;volatile
  8042                           
  8043                           ;clock.c: 701: LATEbits.LATE3 = (led_mask1 & 0x20) ? 1 : 0;
  8044  000718  AA36               	btfss	_led_mask1,5,c
  8045  00071A  D003               	goto	u4410
  8046  00071C  6A14               	clrf	??_write_leds& (0+255),c
  8047  00071E  2A14               	incf	??_write_leds& (0+255),f,c
  8048  000720  D002               	goto	u4428
  8049  000722                     u4410:
  8050  000722  FFFF               	dw	65535	; assembler added errata NOP
  8051  000724  6A14               	clrf	??_write_leds& (0+255),c
  8052  000726                     u4428:
  8053  000726  FFFF               	dw	65535	; assembler added errata NOP
  8054  000728  4614               	rlncf	??_write_leds,f,c
  8055  00072A  4614               	rlncf	??_write_leds,f,c
  8056  00072C  4614               	rlncf	??_write_leds,f,c
  8057  00072E  508D               	movf	3981,w,c	;volatile
  8058  000730  1814               	xorwf	??_write_leds,w,c
  8059  000732  0BF7               	andlw	-9
  8060  000734  1814               	xorwf	??_write_leds,w,c
  8061  000736  6E8D               	movwf	3981,c	;volatile
  8062                           
  8063                           ;clock.c: 702: LATEbits.LATE4 = (led_mask1 & 0x40) ? 1 : 0;
  8064  000738  AC36               	btfss	_led_mask1,6,c
  8065  00073A  D003               	goto	u4430
  8066  00073C  6A14               	clrf	??_write_leds& (0+255),c
  8067  00073E  2A14               	incf	??_write_leds& (0+255),f,c
  8068  000740  D002               	goto	u4448
  8069  000742                     u4430:
  8070  000742  FFFF               	dw	65535	; assembler added errata NOP
  8071  000744  6A14               	clrf	??_write_leds& (0+255),c
  8072  000746                     u4448:
  8073  000746  FFFF               	dw	65535	; assembler added errata NOP
  8074  000748  3A14               	swapf	??_write_leds,f,c
  8075  00074A  508D               	movf	3981,w,c	;volatile
  8076  00074C  1814               	xorwf	??_write_leds,w,c
  8077  00074E  0BEF               	andlw	-17
  8078  000750  1814               	xorwf	??_write_leds,w,c
  8079  000752  6E8D               	movwf	3981,c	;volatile
  8080                           
  8081                           ;clock.c: 703: LATEbits.LATE5 = (led_mask1 & 0x80) ? 1 : 0;
  8082  000754  AE36               	btfss	_led_mask1,7,c
  8083  000756  D003               	goto	u4450
  8084  000758  6A14               	clrf	??_write_leds& (0+255),c
  8085  00075A  2A14               	incf	??_write_leds& (0+255),f,c
  8086  00075C  D002               	goto	u4468
  8087  00075E                     u4450:
  8088  00075E  FFFF               	dw	65535	; assembler added errata NOP
  8089  000760  6A14               	clrf	??_write_leds& (0+255),c
  8090  000762                     u4468:
  8091  000762  FFFF               	dw	65535	; assembler added errata NOP
  8092  000764  3A14               	swapf	??_write_leds,f,c
  8093  000766  4614               	rlncf	??_write_leds,f,c
  8094  000768  508D               	movf	3981,w,c	;volatile
  8095  00076A  1814               	xorwf	??_write_leds,w,c
  8096  00076C  0BDF               	andlw	-33
  8097  00076E  1814               	xorwf	??_write_leds,w,c
  8098  000770  6E8D               	movwf	3981,c	;volatile
  8099                           
  8100                           ;clock.c: 704: LATEbits.LATE6 = led_mask2 & 0x01;
  8101  000772  C035  F014         	movff	_led_mask2,??_write_leds
  8102  000776  0E01               	movlw	1
  8103  000778  1614               	andwf	??_write_leds,f,c
  8104  00077A  3A14               	swapf	??_write_leds,f,c
  8105  00077C  4614               	rlncf	??_write_leds,f,c
  8106  00077E  4614               	rlncf	??_write_leds,f,c
  8107  000780  508D               	movf	3981,w,c	;volatile
  8108  000782  1814               	xorwf	??_write_leds,w,c
  8109  000784  0BBF               	andlw	-65
  8110  000786  1814               	xorwf	??_write_leds,w,c
  8111  000788  6E8D               	movwf	3981,c	;volatile
  8112                           
  8113                           ;clock.c: 705: LATEbits.LATE7 = (led_mask2 & 0x02) ? 1 : 0;
  8114  00078A  A235               	btfss	_led_mask2,1,c
  8115  00078C  D003               	goto	u4470
  8116  00078E  6A14               	clrf	??_write_leds& (0+255),c
  8117  000790  2A14               	incf	??_write_leds& (0+255),f,c
  8118  000792  D002               	goto	u4488
  8119  000794                     u4470:
  8120  000794  FFFF               	dw	65535	; assembler added errata NOP
  8121  000796  6A14               	clrf	??_write_leds& (0+255),c
  8122  000798                     u4488:
  8123  000798  FFFF               	dw	65535	; assembler added errata NOP
  8124  00079A  3214               	rrcf	??_write_leds,f,c
  8125  00079C  3214               	rrcf	??_write_leds,f,c
  8126  00079E  508D               	movf	3981,w,c	;volatile
  8127  0007A0  1814               	xorwf	??_write_leds,w,c
  8128  0007A2  0B7F               	andlw	-129
  8129  0007A4  1814               	xorwf	??_write_leds,w,c
  8130  0007A6  6E8D               	movwf	3981,c	;volatile
  8131                           
  8132                           ;clock.c: 706: LATFbits.LATF0 = (led_mask2 & 0x04) ? 1 : 0;
  8133  0007A8  A435               	btfss	_led_mask2,2,c
  8134  0007AA  D003               	goto	u4490
  8135  0007AC  6A14               	clrf	??_write_leds& (0+255),c
  8136  0007AE  2A14               	incf	??_write_leds& (0+255),f,c
  8137  0007B0  D002               	goto	u4508
  8138  0007B2                     u4490:
  8139  0007B2  FFFF               	dw	65535	; assembler added errata NOP
  8140  0007B4  6A14               	clrf	??_write_leds& (0+255),c
  8141  0007B6                     u4508:
  8142  0007B6  FFFF               	dw	65535	; assembler added errata NOP
  8143  0007B8  508E               	movf	3982,w,c	;volatile
  8144  0007BA  1814               	xorwf	??_write_leds,w,c
  8145  0007BC  0BFE               	andlw	-2
  8146  0007BE  1814               	xorwf	??_write_leds,w,c
  8147  0007C0  6E8E               	movwf	3982,c	;volatile
  8148                           
  8149                           ;clock.c: 707: LATFbits.LATF1 = (led_mask2 & 0x08) ? 1 : 0;
  8150  0007C2  A635               	btfss	_led_mask2,3,c
  8151  0007C4  D003               	goto	u4510
  8152  0007C6  6A14               	clrf	??_write_leds& (0+255),c
  8153  0007C8  2A14               	incf	??_write_leds& (0+255),f,c
  8154  0007CA  D002               	goto	u4528
  8155  0007CC                     u4510:
  8156  0007CC  FFFF               	dw	65535	; assembler added errata NOP
  8157  0007CE  6A14               	clrf	??_write_leds& (0+255),c
  8158  0007D0                     u4528:
  8159  0007D0  FFFF               	dw	65535	; assembler added errata NOP
  8160  0007D2  4614               	rlncf	??_write_leds,f,c
  8161  0007D4  508E               	movf	3982,w,c	;volatile
  8162  0007D6  1814               	xorwf	??_write_leds,w,c
  8163  0007D8  0BFD               	andlw	-3
  8164  0007DA  1814               	xorwf	??_write_leds,w,c
  8165  0007DC  6E8E               	movwf	3982,c	;volatile
  8166                           
  8167                           ;clock.c: 708: LATFbits.LATF2 = (led_mask2 & 0x10) ? 1 : 0;
  8168  0007DE  A835               	btfss	_led_mask2,4,c
  8169  0007E0  D003               	goto	u4530
  8170  0007E2  6A14               	clrf	??_write_leds& (0+255),c
  8171  0007E4  2A14               	incf	??_write_leds& (0+255),f,c
  8172  0007E6  D002               	goto	u4548
  8173  0007E8                     u4530:
  8174  0007E8  FFFF               	dw	65535	; assembler added errata NOP
  8175  0007EA  6A14               	clrf	??_write_leds& (0+255),c
  8176  0007EC                     u4548:
  8177  0007EC  FFFF               	dw	65535	; assembler added errata NOP
  8178  0007EE  4614               	rlncf	??_write_leds,f,c
  8179  0007F0  4614               	rlncf	??_write_leds,f,c
  8180  0007F2  508E               	movf	3982,w,c	;volatile
  8181  0007F4  1814               	xorwf	??_write_leds,w,c
  8182  0007F6  0BFB               	andlw	-5
  8183  0007F8  1814               	xorwf	??_write_leds,w,c
  8184  0007FA  6E8E               	movwf	3982,c	;volatile
  8185                           
  8186                           ;clock.c: 709: LATFbits.LATF3 = (led_mask2 & 0x20) ? 1 : 0;
  8187  0007FC  AA35               	btfss	_led_mask2,5,c
  8188  0007FE  D003               	goto	u4550
  8189  000800  6A14               	clrf	??_write_leds& (0+255),c
  8190  000802  2A14               	incf	??_write_leds& (0+255),f,c
  8191  000804  D002               	goto	u4568
  8192  000806                     u4550:
  8193  000806  FFFF               	dw	65535	; assembler added errata NOP
  8194  000808  6A14               	clrf	??_write_leds& (0+255),c
  8195  00080A                     u4568:
  8196  00080A  FFFF               	dw	65535	; assembler added errata NOP
  8197  00080C  4614               	rlncf	??_write_leds,f,c
  8198  00080E  4614               	rlncf	??_write_leds,f,c
  8199  000810  4614               	rlncf	??_write_leds,f,c
  8200  000812  508E               	movf	3982,w,c	;volatile
  8201  000814  1814               	xorwf	??_write_leds,w,c
  8202  000816  0BF7               	andlw	-9
  8203  000818  1814               	xorwf	??_write_leds,w,c
  8204  00081A  6E8E               	movwf	3982,c	;volatile
  8205                           
  8206                           ;clock.c: 710: LATFbits.LATF4 = (led_mask2 & 0x40) ? 1 : 0;
  8207  00081C  AC35               	btfss	_led_mask2,6,c
  8208  00081E  D003               	goto	u4570
  8209  000820  6A14               	clrf	??_write_leds& (0+255),c
  8210  000822  2A14               	incf	??_write_leds& (0+255),f,c
  8211  000824  D002               	goto	u4588
  8212  000826                     u4570:
  8213  000826  FFFF               	dw	65535	; assembler added errata NOP
  8214  000828  6A14               	clrf	??_write_leds& (0+255),c
  8215  00082A                     u4588:
  8216  00082A  FFFF               	dw	65535	; assembler added errata NOP
  8217  00082C  3A14               	swapf	??_write_leds,f,c
  8218  00082E  508E               	movf	3982,w,c	;volatile
  8219  000830  1814               	xorwf	??_write_leds,w,c
  8220  000832  0BEF               	andlw	-17
  8221  000834  1814               	xorwf	??_write_leds,w,c
  8222  000836  6E8E               	movwf	3982,c	;volatile
  8223                           
  8224                           ;clock.c: 711: LATFbits.LATF5 = (led_mask2 & 0x80) ? 1 : 0;
  8225  000838  AE35               	btfss	_led_mask2,7,c
  8226  00083A  D003               	goto	u4590
  8227  00083C  6A14               	clrf	??_write_leds& (0+255),c
  8228  00083E  2A14               	incf	??_write_leds& (0+255),f,c
  8229  000840  D002               	goto	u4608
  8230  000842                     u4590:
  8231  000842  FFFF               	dw	65535	; assembler added errata NOP
  8232  000844  6A14               	clrf	??_write_leds& (0+255),c
  8233  000846                     u4608:
  8234  000846  FFFF               	dw	65535	; assembler added errata NOP
  8235  000848  3A14               	swapf	??_write_leds,f,c
  8236  00084A  4614               	rlncf	??_write_leds,f,c
  8237  00084C  508E               	movf	3982,w,c	;volatile
  8238  00084E  1814               	xorwf	??_write_leds,w,c
  8239  000850  0BDF               	andlw	-33
  8240  000852  1814               	xorwf	??_write_leds,w,c
  8241  000854  6E8E               	movwf	3982,c	;volatile
  8242                           
  8243                           ;clock.c: 712: LATFbits.LATF6 = led_mask3 & 0x01;
  8244  000856  C034  F014         	movff	_led_mask3,??_write_leds
  8245  00085A  0E01               	movlw	1
  8246  00085C  1614               	andwf	??_write_leds,f,c
  8247  00085E  3A14               	swapf	??_write_leds,f,c
  8248  000860  4614               	rlncf	??_write_leds,f,c
  8249  000862  4614               	rlncf	??_write_leds,f,c
  8250  000864  508E               	movf	3982,w,c	;volatile
  8251  000866  1814               	xorwf	??_write_leds,w,c
  8252  000868  0BBF               	andlw	-65
  8253  00086A  1814               	xorwf	??_write_leds,w,c
  8254  00086C  6E8E               	movwf	3982,c	;volatile
  8255                           
  8256                           ;clock.c: 713: LATGbits.LATG0 = (led_mask3 & 0x02) ? 1 : 0;
  8257  00086E  A234               	btfss	_led_mask3,1,c
  8258  000870  D003               	goto	u4610
  8259  000872  6A14               	clrf	??_write_leds& (0+255),c
  8260  000874  2A14               	incf	??_write_leds& (0+255),f,c
  8261  000876  D002               	goto	u4628
  8262  000878                     u4610:
  8263  000878  FFFF               	dw	65535	; assembler added errata NOP
  8264  00087A  6A14               	clrf	??_write_leds& (0+255),c
  8265  00087C                     u4628:
  8266  00087C  FFFF               	dw	65535	; assembler added errata NOP
  8267  00087E  508F               	movf	3983,w,c	;volatile
  8268  000880  1814               	xorwf	??_write_leds,w,c
  8269  000882  0BFE               	andlw	-2
  8270  000884  1814               	xorwf	??_write_leds,w,c
  8271  000886  6E8F               	movwf	3983,c	;volatile
  8272                           
  8273                           ;clock.c: 714: LATGbits.LATG1 = (led_mask3 & 0x04) ? 1 : 0;
  8274  000888  A434               	btfss	_led_mask3,2,c
  8275  00088A  D003               	goto	u4630
  8276  00088C  6A14               	clrf	??_write_leds& (0+255),c
  8277  00088E  2A14               	incf	??_write_leds& (0+255),f,c
  8278  000890  D002               	goto	u4648
  8279  000892                     u4630:
  8280  000892  FFFF               	dw	65535	; assembler added errata NOP
  8281  000894  6A14               	clrf	??_write_leds& (0+255),c
  8282  000896                     u4648:
  8283  000896  FFFF               	dw	65535	; assembler added errata NOP
  8284  000898  4614               	rlncf	??_write_leds,f,c
  8285  00089A  508F               	movf	3983,w,c	;volatile
  8286  00089C  1814               	xorwf	??_write_leds,w,c
  8287  00089E  0BFD               	andlw	-3
  8288  0008A0  1814               	xorwf	??_write_leds,w,c
  8289  0008A2  6E8F               	movwf	3983,c	;volatile
  8290  0008A4  0012               	return		;funcret
  8291  0008A6  FFFF               	dw	65535	; errata NOP
  8292  0008A8                     __end_of_write_leds:
  8293                           	opt stack 0
  8294                           tblptru	equ	0xFF8
  8295                           tblptrh	equ	0xFF7
  8296                           tblptrl	equ	0xFF6
  8297                           tablat	equ	0xFF5
  8298                           prodh	equ	0xFF4
  8299                           prodl	equ	0xFF3
  8300                           intcon	equ	0xFF2
  8301                           intcon2	equ	0xFF1
  8302                           intcon3	equ	0xFF0
  8303                           postinc0	equ	0xFEE
  8304                           wreg	equ	0xFE8
  8305                           postdec1	equ	0xFE5
  8306                           fsr1h	equ	0xFE2
  8307                           fsr1l	equ	0xFE1
  8308                           indf2	equ	0xFDF
  8309                           fsr2h	equ	0xFDA
  8310                           fsr2l	equ	0xFD9
  8311                           status	equ	0xFD8
  8312                           
  8313 ;; *************** function ___awdiv *****************
  8314 ;; Defined at:
  8315 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awdiv.c"
  8316 ;; Parameters:    Size  Location     Type
  8317 ;;  dividend        2   19[COMRAM] int 
  8318 ;;  divisor         2   21[COMRAM] int 
  8319 ;; Auto vars:     Size  Location     Type
  8320 ;;  quotient        2   25[COMRAM] int 
  8321 ;;  sign            1   24[COMRAM] unsigned char 
  8322 ;;  counter         1   23[COMRAM] unsigned char 
  8323 ;; Return value:  Size  Location     Type
  8324 ;;                  2   19[COMRAM] int 
  8325 ;; Registers used:
  8326 ;;		wreg, status,2, status,0
  8327 ;; Tracked objects:
  8328 ;;		On entry : 0/0
  8329 ;;		On exit  : 0/0
  8330 ;;		Unchanged: 0/0
  8331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8332 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8333 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8335 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8336 ;;Total ram usage:        8 bytes
  8337 ;; Hardware stack levels used:    1
  8338 ;; Hardware stack levels required when called:    2
  8339 ;; This function calls:
  8340 ;;		Nothing
  8341 ;; This function is called by:
  8342 ;;		_draw_time
  8343 ;;		_draw_alarm
  8344 ;;		_print_number2
  8345 ;; This function uses a non-reentrant model
  8346 ;;
  8347                           
  8348                           	psect	text32
  8349  001538                     __ptext32:
  8350                           	opt stack 0
  8351  001538                     ___awdiv:
  8352                           	opt stack 0
  8353  001538  FFFF               	dw	65535	; assembler added errata NOP
  8354                           
  8355                           ;incstack = 0
  8356  00153A  0E00               	movlw	0
  8357  00153C  6E19               	movwf	___awdiv@sign,c
  8358  00153E  AE17               	btfss	___awdiv@divisor+1,7,c
  8359  001540  D006               	goto	l3381
  8360  001542  6C16               	negf	___awdiv@divisor,c
  8361  001544  1E17               	comf	___awdiv@divisor+1,f,c
  8362  001546  B0D8               	btfsc	status,0,c
  8363  001548  2A17               	incf	___awdiv@divisor+1,f,c
  8364  00154A  0E01               	movlw	1
  8365  00154C  6E19               	movwf	___awdiv@sign,c
  8366  00154E                     l3381:
  8367  00154E  FFFF               	dw	65535	; assembler added errata NOP
  8368  001550  AE15               	btfss	___awdiv@dividend+1,7,c
  8369  001552  D006               	goto	l3387
  8370  001554  6C14               	negf	___awdiv@dividend,c
  8371  001556  1E15               	comf	___awdiv@dividend+1,f,c
  8372  001558  B0D8               	btfsc	status,0,c
  8373  00155A  2A15               	incf	___awdiv@dividend+1,f,c
  8374  00155C  0E01               	movlw	1
  8375  00155E  1A19               	xorwf	___awdiv@sign,f,c
  8376  001560                     l3387:
  8377  001560  FFFF               	dw	65535	; assembler added errata NOP
  8378  001562  0E00               	movlw	0
  8379  001564  6E1B               	movwf	___awdiv@quotient+1,c
  8380  001566  0E00               	movlw	0
  8381  001568  6E1A               	movwf	___awdiv@quotient,c
  8382  00156A  5016               	movf	___awdiv@divisor,w,c
  8383  00156C  1017               	iorwf	___awdiv@divisor+1,w,c
  8384  00156E  B4D8               	btfsc	status,2,c
  8385  001570  D020               	goto	l3409
  8386  001572  0E01               	movlw	1
  8387  001574  6E18               	movwf	___awdiv@counter,c
  8388  001576  D005               	goto	l3395
  8389  001578                     l3393:
  8390  001578  FFFF               	dw	65535	; assembler added errata NOP
  8391  00157A  90D8               	bcf	status,0,c
  8392  00157C  3616               	rlcf	___awdiv@divisor,f,c
  8393  00157E  3617               	rlcf	___awdiv@divisor+1,f,c
  8394  001580  2A18               	incf	___awdiv@counter,f,c
  8395  001582                     l3395:
  8396  001582  FFFF               	dw	65535	; assembler added errata NOP
  8397  001584  AE17               	btfss	___awdiv@divisor+1,7,c
  8398  001586  D7F8               	goto	l3393
  8399  001588                     l3397:
  8400  001588  FFFF               	dw	65535	; assembler added errata NOP
  8401  00158A  90D8               	bcf	status,0,c
  8402  00158C  361A               	rlcf	___awdiv@quotient,f,c
  8403  00158E  361B               	rlcf	___awdiv@quotient+1,f,c
  8404  001590  5016               	movf	___awdiv@divisor,w,c
  8405  001592  5C14               	subwf	___awdiv@dividend,w,c
  8406  001594  5017               	movf	___awdiv@divisor+1,w,c
  8407  001596  5815               	subwfb	___awdiv@dividend+1,w,c
  8408  001598  A0D8               	btfss	status,0,c
  8409  00159A  D005               	goto	l3405
  8410  00159C  5016               	movf	___awdiv@divisor,w,c
  8411  00159E  5E14               	subwf	___awdiv@dividend,f,c
  8412  0015A0  5017               	movf	___awdiv@divisor+1,w,c
  8413  0015A2  5A15               	subwfb	___awdiv@dividend+1,f,c
  8414  0015A4  801A               	bsf	___awdiv@quotient,0,c
  8415  0015A6                     l3405:
  8416  0015A6  FFFF               	dw	65535	; assembler added errata NOP
  8417  0015A8  90D8               	bcf	status,0,c
  8418  0015AA  3217               	rrcf	___awdiv@divisor+1,f,c
  8419  0015AC  3216               	rrcf	___awdiv@divisor,f,c
  8420  0015AE  2E18               	decfsz	___awdiv@counter,f,c
  8421  0015B0  D7EB               	goto	l3397
  8422  0015B2                     l3409:
  8423  0015B2  FFFF               	dw	65535	; assembler added errata NOP
  8424  0015B4  5019               	movf	___awdiv@sign,w,c
  8425  0015B6  B4D8               	btfsc	status,2,c
  8426  0015B8  D004               	goto	l3413
  8427  0015BA  6C1A               	negf	___awdiv@quotient,c
  8428  0015BC  1E1B               	comf	___awdiv@quotient+1,f,c
  8429  0015BE  B0D8               	btfsc	status,0,c
  8430  0015C0  2A1B               	incf	___awdiv@quotient+1,f,c
  8431  0015C2                     l3413:
  8432  0015C2  FFFF               	dw	65535	; assembler added errata NOP
  8433  0015C4  C01A  F014         	movff	___awdiv@quotient,?___awdiv
  8434  0015C8  C01B  F015         	movff	___awdiv@quotient+1,?___awdiv+1
  8435  0015CC  0012               	return		;funcret
  8436  0015CE  FFFF               	dw	65535	; errata NOP
  8437  0015D0                     __end_of___awdiv:
  8438                           	opt stack 0
  8439                           tblptru	equ	0xFF8
  8440                           tblptrh	equ	0xFF7
  8441                           tblptrl	equ	0xFF6
  8442                           tablat	equ	0xFF5
  8443                           prodh	equ	0xFF4
  8444                           prodl	equ	0xFF3
  8445                           intcon	equ	0xFF2
  8446                           intcon2	equ	0xFF1
  8447                           intcon3	equ	0xFF0
  8448                           postinc0	equ	0xFEE
  8449                           wreg	equ	0xFE8
  8450                           postdec1	equ	0xFE5
  8451                           fsr1h	equ	0xFE2
  8452                           fsr1l	equ	0xFE1
  8453                           indf2	equ	0xFDF
  8454                           fsr2h	equ	0xFDA
  8455                           fsr2l	equ	0xFD9
  8456                           status	equ	0xFD8
  8457                           
  8458 ;; *************** function _isr *****************
  8459 ;; Defined at:
  8460 ;;		line 1615 in file "clock.c"
  8461 ;; Parameters:    Size  Location     Type
  8462 ;;		None
  8463 ;; Auto vars:     Size  Location     Type
  8464 ;;		None
  8465 ;; Return value:  Size  Location     Type
  8466 ;;                  1    wreg      void 
  8467 ;; Registers used:
  8468 ;;		wreg, status,2, status,0, cstack
  8469 ;; Tracked objects:
  8470 ;;		On entry : 0/0
  8471 ;;		On exit  : 0/0
  8472 ;;		Unchanged: 0/0
  8473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8476 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8477 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8478 ;;Total ram usage:       16 bytes
  8479 ;; Hardware stack levels used:    1
  8480 ;; Hardware stack levels required when called:    1
  8481 ;; This function calls:
  8482 ;;		_handle_audio
  8483 ;; This function is called by:
  8484 ;;		Interrupt level 2
  8485 ;; This function uses a non-reentrant model
  8486 ;;
  8487                           
  8488                           	psect	intcode
  8489  000008                     __pintcode:
  8490                           	opt stack 0
  8491  000008                     _isr:
  8492                           	opt stack 0
  8493  000008  FFFF               	dw	65535	; assembler added errata NOP
  8494                           
  8495                           ;incstack = 0
  8496  00000A  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8497  00000C  CFFA F006          	movff	pclath,??_isr+2
  8498  000010  CFFB F007          	movff	pclatu,??_isr+3
  8499  000014  CFE9 F008          	movff	fsr0l,??_isr+4
  8500  000018  CFEA F009          	movff	fsr0h,??_isr+5
  8501  00001C  CFE1 F00A          	movff	fsr1l,??_isr+6
  8502  000020  CFE2 F00B          	movff	fsr1h,??_isr+7
  8503  000024  CFD9 F00C          	movff	fsr2l,??_isr+8
  8504  000028  CFDA F00D          	movff	fsr2h,??_isr+9
  8505  00002C  CFF3 F00E          	movff	prodl,??_isr+10
  8506  000030  CFF4 F00F          	movff	prodh,??_isr+11
  8507  000034  CFF6 F010          	movff	tblptrl,??_isr+12
  8508  000038  CFF7 F011          	movff	tblptrh,??_isr+13
  8509  00003C  CFF8 F012          	movff	tblptru,??_isr+14
  8510  000040  CFF5 F013          	movff	tablat,??_isr+15
  8511  000044  D022               	goto	i2l3163
  8512  000046                     i2l3141:
  8513  000046  FFFF               	dw	65535	; assembler added errata NOP
  8514                           
  8515                           ; BSR set to: 0
  8516                           ;clock.c: 1619: {
  8517                           ;clock.c: 1620: interrupt_done = 1;
  8518  000048  0E01               	movlw	1
  8519  00004A  0100               	movlb	0	; () banked
  8520  00004C  6F7E               	movwf	_interrupt_done& (0+255),b
  8521                           
  8522                           ; BSR set to: 0
  8523                           ;clock.c: 1639: if(PIR1bits.TMR2IF)
  8524  00004E  A29E               	btfss	3998,1,c	;volatile
  8525  000050  D005               	goto	i2l3149
  8526                           
  8527                           ; BSR set to: 0
  8528                           ;clock.c: 1640: {
  8529                           ;clock.c: 1641: PIR1bits.TMR2IF = 0;
  8530  000052  929E               	bcf	3998,1,c	;volatile
  8531                           
  8532                           ;clock.c: 1642: CCPR1L = next_duty;
  8533  000054  C045  FFBE         	movff	_next_duty,4030	;volatile
  8534                           
  8535                           ; BSR set to: 0
  8536                           ;clock.c: 1643: handle_audio();
  8537  000058  EC84  F007         	call	_handle_audio	;wreg free
  8538  00005C                     i2l3149:
  8539  00005C  FFFF               	dw	65535	; assembler added errata NOP
  8540                           
  8541                           ;clock.c: 1645: }
  8542                           ;clock.c: 1649: if(INTCON3bits.INT3IF)
  8543  00005E  A4F0               	btfss	intcon3,2,c	;volatile
  8544  000060  D018               	goto	i2l3165
  8545                           
  8546                           ;clock.c: 1650: {
  8547                           ;clock.c: 1651: INTCON3bits.INT3IF = 0;
  8548  000062  94F0               	bcf	intcon3,2,c	;volatile
  8549                           
  8550                           ;clock.c: 1652: got_ir_int = 1;
  8551  000064  0E01               	movlw	1
  8552  000066  6E31               	movwf	_got_ir_int,c	;volatile
  8553                           
  8554                           ;clock.c: 1653: ir_time2 = TMR0L;
  8555  000068  CFD6 F068          	movff	4054,_ir_time2	;volatile
  8556  00006C  0100               	movlb	0	; () banked
  8557  00006E  6B69               	clrf	(_ir_time2+1)& (0+255),b	;volatile
  8558                           
  8559                           ; BSR set to: 0
  8560                           ;clock.c: 1654: ir_time2 |= ((uint16_t)TMR0H) << 8;
  8561  000070  50D7               	movf	4055,w,c	;volatile
  8562  000072  6E05               	movwf	(??_isr+1)& (0+255),c
  8563  000074  6A04               	clrf	??_isr& (0+255),c
  8564  000076  5004               	movf	??_isr,w,c
  8565  000078  0100               	movlb	0	; () banked
  8566  00007A  1368               	iorwf	_ir_time2& (0+255),f,b	;volatile
  8567  00007C  5005               	movf	??_isr+1,w,c
  8568  00007E  0100               	movlb	0	; () banked
  8569  000080  1369               	iorwf	(_ir_time2+1)& (0+255),f,b	;volatile
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;clock.c: 1655: TMR0H = 0;
  8573  000082  0E00               	movlw	0
  8574  000084  6ED7               	movwf	4055,c	;volatile
  8575                           
  8576                           ; BSR set to: 0
  8577                           ;clock.c: 1656: TMR0L = 0;
  8578  000086  0E00               	movlw	0
  8579  000088  6ED6               	movwf	4054,c	;volatile
  8580  00008A                     i2l3163:
  8581  00008A  FFFF               	dw	65535	; assembler added errata NOP
  8582                           
  8583                           ; BSR set to: 0
  8584                           ;clock.c: 1657: interrupt_done = 0;
  8585  00008C  0E00               	movlw	0
  8586  00008E  0100               	movlb	0	; () banked
  8587  000090  6F7E               	movwf	_interrupt_done& (0+255),b
  8588  000092                     i2l3165:
  8589  000092  FFFF               	dw	65535	; assembler added errata NOP
  8590  000094  0100               	movlb	0	; () banked
  8591  000096  517E               	movf	_interrupt_done& (0+255),w,b
  8592  000098  B4D8               	btfsc	status,2,c
  8593  00009A  D7D5               	goto	i2l3141
  8594                           
  8595                           ; BSR set to: 0
  8596                           
  8597                           ; BSR set to: 0
  8598  00009C  C013  FFF5         	movff	??_isr+15,tablat
  8599  0000A0  C012  FFF8         	movff	??_isr+14,tblptru
  8600  0000A4  C011  FFF7         	movff	??_isr+13,tblptrh
  8601  0000A8  C010  FFF6         	movff	??_isr+12,tblptrl
  8602  0000AC  C00F  FFF4         	movff	??_isr+11,prodh
  8603  0000B0  C00E  FFF3         	movff	??_isr+10,prodl
  8604  0000B4  C00D  FFDA         	movff	??_isr+9,fsr2h
  8605  0000B8  C00C  FFD9         	movff	??_isr+8,fsr2l
  8606  0000BC  C00B  FFE2         	movff	??_isr+7,fsr1h
  8607  0000C0  C00A  FFE1         	movff	??_isr+6,fsr1l
  8608  0000C4  C009  FFEA         	movff	??_isr+5,fsr0h
  8609  0000C8  C008  FFE9         	movff	??_isr+4,fsr0l
  8610  0000CC  C007  FFFB         	movff	??_isr+3,pclatu
  8611  0000D0  C006  FFFA         	movff	??_isr+2,pclath
  8612  0000D4  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8613  0000D6  0011               	retfie		f
  8614  0000D8  FFFF               	dw	65535	; errata NOP
  8615  0000DA                     __end_of_isr:
  8616                           	opt stack 0
  8617                           pclatu	equ	0xFFB
  8618                           pclath	equ	0xFFA
  8619                           tblptru	equ	0xFF8
  8620                           tblptrh	equ	0xFF7
  8621                           tblptrl	equ	0xFF6
  8622                           tablat	equ	0xFF5
  8623                           prodh	equ	0xFF4
  8624                           prodl	equ	0xFF3
  8625                           intcon	equ	0xFF2
  8626                           intcon2	equ	0xFF1
  8627                           intcon3	equ	0xFF0
  8628                           postinc0	equ	0xFEE
  8629                           fsr0h	equ	0xFEA
  8630                           fsr0l	equ	0xFE9
  8631                           wreg	equ	0xFE8
  8632                           postdec1	equ	0xFE5
  8633                           fsr1h	equ	0xFE2
  8634                           fsr1l	equ	0xFE1
  8635                           indf2	equ	0xFDF
  8636                           fsr2h	equ	0xFDA
  8637                           fsr2l	equ	0xFD9
  8638                           status	equ	0xFD8
  8639                           
  8640 ;; *************** function _handle_audio *****************
  8641 ;; Defined at:
  8642 ;;		line 1377 in file "clock.c"
  8643 ;; Parameters:    Size  Location     Type
  8644 ;;		None
  8645 ;; Auto vars:     Size  Location     Type
  8646 ;;  amplitude       1    2[COMRAM] unsigned char 
  8647 ;; Return value:  Size  Location     Type
  8648 ;;                  1    wreg      void 
  8649 ;; Registers used:
  8650 ;;		wreg, status,2, status,0
  8651 ;; Tracked objects:
  8652 ;;		On entry : 0/0
  8653 ;;		On exit  : 0/0
  8654 ;;		Unchanged: 0/0
  8655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8657 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8658 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8659 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8660 ;;Total ram usage:        3 bytes
  8661 ;; Hardware stack levels used:    1
  8662 ;; This function calls:
  8663 ;;		Nothing
  8664 ;; This function is called by:
  8665 ;;		_isr
  8666 ;; This function uses a non-reentrant model
  8667 ;;
  8668                           
  8669                           	psect	text34
  8670  000F08                     __ptext34:
  8671                           	opt stack 0
  8672  000F08                     _handle_audio:
  8673                           	opt stack 0
  8674  000F08  FFFF               	dw	65535	; assembler added errata NOP
  8675                           
  8676                           ;clock.c: 1380: decay_count++;
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;incstack = 0
  8680  000F0A  0100               	movlb	0	; () banked
  8681  000F0C  4B76               	infsnz	_decay_count& (0+255),f,b
  8682  000F0E  2B77               	incf	(_decay_count+1)& (0+255),f,b
  8683                           
  8684                           ; BSR set to: 0
  8685                           ;clock.c: 1381: if(decay_count > 512)
  8686  000F10  0100               	movlb	0	; () banked
  8687  000F12  0576               	decf	_decay_count& (0+255),w,b
  8688  000F14  0E02               	movlw	2
  8689  000F16  0100               	movlb	0	; () banked
  8690  000F18  5977               	subwfb	(_decay_count+1)& (0+255),w,b
  8691  000F1A  A0D8               	btfss	status,0,c
  8692  000F1C  D019               	goto	i2l3029
  8693                           
  8694                           ; BSR set to: 0
  8695                           ;clock.c: 1382: {
  8696                           ;clock.c: 1383: decay_count = 0;
  8697  000F1E  0E00               	movlw	0
  8698  000F20  0100               	movlb	0	; () banked
  8699  000F22  6F77               	movwf	(_decay_count+1)& (0+255),b
  8700  000F24  0E00               	movlw	0
  8701  000F26  6F76               	movwf	_decay_count& (0+255),b
  8702                           
  8703                           ;clock.c: 1384: if(osc1_volume > 0) osc1_volume--;
  8704  000F28  0100               	movlb	0	; () banked
  8705  000F2A  519C               	movf	_osc1_volume& (0+255),w,b
  8706  000F2C  B4D8               	btfsc	status,2,c
  8707  000F2E  D002               	goto	i2l3021
  8708                           
  8709                           ; BSR set to: 0
  8710  000F30  0100               	movlb	0	; () banked
  8711  000F32  079C               	decf	_osc1_volume& (0+255),f,b
  8712  000F34                     i2l3021:
  8713  000F34  FFFF               	dw	65535	; assembler added errata NOP
  8714                           
  8715                           ; BSR set to: 0
  8716                           ;clock.c: 1385: if(osc2_volume > 0) osc2_volume--;
  8717  000F36  0100               	movlb	0	; () banked
  8718  000F38  519B               	movf	_osc2_volume& (0+255),w,b
  8719  000F3A  B4D8               	btfsc	status,2,c
  8720  000F3C  D002               	goto	i2l3025
  8721                           
  8722                           ; BSR set to: 0
  8723  000F3E  0100               	movlb	0	; () banked
  8724  000F40  079B               	decf	_osc2_volume& (0+255),f,b
  8725  000F42                     i2l3025:
  8726  000F42  FFFF               	dw	65535	; assembler added errata NOP
  8727                           
  8728                           ; BSR set to: 0
  8729                           ;clock.c: 1386: if(osc3_volume > 0) osc3_volume--;
  8730  000F44  0100               	movlb	0	; () banked
  8731  000F46  519A               	movf	_osc3_volume& (0+255),w,b
  8732  000F48  B4D8               	btfsc	status,2,c
  8733  000F4A  D002               	goto	i2l3029
  8734                           
  8735                           ; BSR set to: 0
  8736  000F4C  0100               	movlb	0	; () banked
  8737  000F4E  079A               	decf	_osc3_volume& (0+255),f,b
  8738  000F50                     i2l3029:
  8739  000F50  FFFF               	dw	65535	; assembler added errata NOP
  8740                           
  8741                           ; BSR set to: 0
  8742                           ;clock.c: 1387: }
  8743                           ;clock.c: 1389: if(osc1_volume == 0 &&
  8744                           ;clock.c: 1390: osc2_volume == 0 &&
  8745                           ;clock.c: 1391: osc3_volume == 0)
  8746  000F52  0100               	movlb	0	; () banked
  8747  000F54  519C               	movf	_osc1_volume& (0+255),w,b
  8748  000F56  A4D8               	btfss	status,2,c
  8749  000F58  D017               	goto	i2l3043
  8750                           
  8751                           ; BSR set to: 0
  8752  000F5A  0100               	movlb	0	; () banked
  8753  000F5C  519B               	movf	_osc2_volume& (0+255),w,b
  8754  000F5E  A4D8               	btfss	status,2,c
  8755  000F60  D013               	goto	i2l3043
  8756                           
  8757                           ; BSR set to: 0
  8758  000F62  0100               	movlb	0	; () banked
  8759  000F64  519A               	movf	_osc3_volume& (0+255),w,b
  8760  000F66  A4D8               	btfss	status,2,c
  8761  000F68  D00F               	goto	i2l3043
  8762                           
  8763                           ; BSR set to: 0
  8764                           ;clock.c: 1392: {
  8765                           ;clock.c: 1393: if(powerdown_count < 8192)
  8766  000F6A  0E20               	movlw	32
  8767  000F6C  0100               	movlb	0	; () banked
  8768  000F6E  5D75               	subwf	(_powerdown_count+1)& (0+255),w,b
  8769  000F70  B0D8               	btfsc	status,0,c
  8770  000F72  D004               	goto	i2l3039
  8771                           
  8772                           ; BSR set to: 0
  8773                           ;clock.c: 1394: {
  8774                           ;clock.c: 1395: powerdown_count++;
  8775  000F74  0100               	movlb	0	; () banked
  8776  000F76  4B74               	infsnz	_powerdown_count& (0+255),f,b
  8777  000F78  2B75               	incf	(_powerdown_count+1)& (0+255),f,b
  8778                           
  8779                           ;clock.c: 1396: }
  8780  000F7A  D0A3               	goto	i2l488
  8781  000F7C                     i2l3039:
  8782  000F7C  FFFF               	dw	65535	; assembler added errata NOP
  8783                           
  8784                           ; BSR set to: 0
  8785                           ;clock.c: 1397: else
  8786                           ;clock.c: 1398: if(next_duty > 0)
  8787  000F7E  5045               	movf	_next_duty,w,c
  8788  000F80  B4D8               	btfsc	status,2,c
  8789  000F82  D09F               	goto	i2l488
  8790                           
  8791                           ; BSR set to: 0
  8792                           ;clock.c: 1399: {
  8793                           ;clock.c: 1401: next_duty--;
  8794  000F84  0645               	decf	_next_duty,f,c
  8795                           
  8796                           ; BSR set to: 0
  8797                           ;clock.c: 1402: }
  8798                           ;clock.c: 1403: }
  8799                           
  8800                           ; BSR set to: 0
  8801  000F86  D09D               	goto	i2l488
  8802  000F88                     i2l3043:
  8803  000F88  FFFF               	dw	65535	; assembler added errata NOP
  8804                           
  8805                           ; BSR set to: 0
  8806                           ;clock.c: 1404: else
  8807                           ;clock.c: 1405: {
  8808                           ;clock.c: 1406: powerdown_count = 0;
  8809  000F8A  0E00               	movlw	0
  8810  000F8C  0100               	movlb	0	; () banked
  8811  000F8E  6F75               	movwf	(_powerdown_count+1)& (0+255),b
  8812  000F90  0E00               	movlw	0
  8813  000F92  6F74               	movwf	_powerdown_count& (0+255),b
  8814                           
  8815                           ; BSR set to: 0
  8816                           ;clock.c: 1409: osc1_time += 0xff;
  8817  000F94  0EFF               	movlw	255
  8818  000F96  0100               	movlb	0	; () banked
  8819  000F98  2772               	addwf	_osc1_time& (0+255),f,b
  8820  000F9A  0E00               	movlw	0
  8821  000F9C  2373               	addwfc	(_osc1_time+1)& (0+255),f,b
  8822                           
  8823                           ; BSR set to: 0
  8824                           ;clock.c: 1410: osc2_time += 0xff;
  8825  000F9E  0EFF               	movlw	255
  8826  000FA0  0100               	movlb	0	; () banked
  8827  000FA2  2770               	addwf	_osc2_time& (0+255),f,b
  8828  000FA4  0E00               	movlw	0
  8829  000FA6  2371               	addwfc	(_osc2_time+1)& (0+255),f,b
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;clock.c: 1411: osc3_time += 0xff;
  8833  000FA8  0EFF               	movlw	255
  8834  000FAA  0100               	movlb	0	; () banked
  8835  000FAC  276E               	addwf	_osc3_time& (0+255),f,b
  8836  000FAE  0E00               	movlw	0
  8837  000FB0  236F               	addwfc	(_osc3_time+1)& (0+255),f,b
  8838                           
  8839                           ; BSR set to: 0
  8840                           ;clock.c: 1416: uint8_t amplitude = (0xff / 3);
  8841  000FB2  0E55               	movlw	85
  8842  000FB4  6E03               	movwf	handle_audio@amplitude,c
  8843                           
  8844                           ;clock.c: 1417: if(osc1_time >= osc1_period)
  8845  000FB6  0100               	movlb	0	; () banked
  8846  000FB8  5198               	movf	_osc1_period& (0+255),w,b
  8847  000FBA  0100               	movlb	0	; () banked
  8848  000FBC  5D72               	subwf	_osc1_time& (0+255),w,b
  8849  000FBE  0100               	movlb	0	; () banked
  8850  000FC0  5199               	movf	(_osc1_period+1)& (0+255),w,b
  8851  000FC2  0100               	movlb	0	; () banked
  8852  000FC4  5973               	subwfb	(_osc1_time+1)& (0+255),w,b
  8853  000FC6  A0D8               	btfss	status,0,c
  8854  000FC8  D009               	goto	i2l3055
  8855                           
  8856                           ; BSR set to: 0
  8857                           ;clock.c: 1418: {
  8858                           ;clock.c: 1419: osc1_time -= osc1_period;
  8859  000FCA  0100               	movlb	0	; () banked
  8860  000FCC  5198               	movf	_osc1_period& (0+255),w,b
  8861  000FCE  0100               	movlb	0	; () banked
  8862  000FD0  5F72               	subwf	_osc1_time& (0+255),f,b
  8863  000FD2  0100               	movlb	0	; () banked
  8864  000FD4  5199               	movf	(_osc1_period+1)& (0+255),w,b
  8865  000FD6  0100               	movlb	0	; () banked
  8866  000FD8  5B73               	subwfb	(_osc1_time+1)& (0+255),f,b
  8867  000FDA  D014               	goto	i2l3059
  8868  000FDC                     i2l3055:
  8869  000FDC  FFFF               	dw	65535	; assembler added errata NOP
  8870                           
  8871                           ; BSR set to: 0
  8872                           ;clock.c: 1422: else
  8873                           ;clock.c: 1423: if(osc1_time >= osc1_period / 2)
  8874  000FDE  90D8               	bcf	status,0,c
  8875  000FE0  0100               	movlb	0	; () banked
  8876  000FE2  3199               	rrcf	(_osc1_period+1)& (0+255),w,b
  8877  000FE4  6E02               	movwf	(??_handle_audio+1)& (0+255),c
  8878  000FE6  0100               	movlb	0	; () banked
  8879  000FE8  3198               	rrcf	_osc1_period& (0+255),w,b
  8880  000FEA  6E01               	movwf	??_handle_audio& (0+255),c
  8881  000FEC  5001               	movf	??_handle_audio,w,c
  8882  000FEE  0100               	movlb	0	; () banked
  8883  000FF0  5D72               	subwf	_osc1_time& (0+255),w,b
  8884  000FF2  5002               	movf	??_handle_audio+1,w,c
  8885  000FF4  0100               	movlb	0	; () banked
  8886  000FF6  5973               	subwfb	(_osc1_time+1)& (0+255),w,b
  8887  000FF8  A0D8               	btfss	status,0,c
  8888  000FFA  D004               	goto	i2l3059
  8889                           
  8890                           ; BSR set to: 0
  8891                           ;clock.c: 1424: {
  8892                           ;clock.c: 1425: amplitude -= osc1_volume;
  8893  000FFC  0100               	movlb	0	; () banked
  8894  000FFE  519C               	movf	_osc1_volume& (0+255),w,b
  8895  001000  5E03               	subwf	handle_audio@amplitude,f,c
  8896                           
  8897                           ;clock.c: 1426: }
  8898  001002  D004               	goto	i2l477
  8899  001004                     i2l3059:
  8900  001004  FFFF               	dw	65535	; assembler added errata NOP
  8901                           
  8902                           ; BSR set to: 0
  8903                           ;clock.c: 1427: else
  8904                           ;clock.c: 1428: {
  8905                           ;clock.c: 1429: amplitude += osc1_volume;
  8906  001006  0100               	movlb	0	; () banked
  8907  001008  519C               	movf	_osc1_volume& (0+255),w,b
  8908  00100A  2603               	addwf	handle_audio@amplitude,f,c
  8909  00100C                     i2l477:
  8910  00100C  FFFF               	dw	65535	; assembler added errata NOP
  8911                           
  8912                           ; BSR set to: 0
  8913                           ;clock.c: 1430: }
  8914                           ;clock.c: 1432: if(osc2_time >= osc2_period)
  8915  00100E  0100               	movlb	0	; () banked
  8916  001010  5196               	movf	_osc2_period& (0+255),w,b
  8917  001012  0100               	movlb	0	; () banked
  8918  001014  5D70               	subwf	_osc2_time& (0+255),w,b
  8919  001016  0100               	movlb	0	; () banked
  8920  001018  5197               	movf	(_osc2_period+1)& (0+255),w,b
  8921  00101A  0100               	movlb	0	; () banked
  8922  00101C  5971               	subwfb	(_osc2_time+1)& (0+255),w,b
  8923  00101E  A0D8               	btfss	status,0,c
  8924  001020  D009               	goto	i2l3063
  8925                           
  8926                           ; BSR set to: 0
  8927                           ;clock.c: 1433: {
  8928                           ;clock.c: 1434: osc2_time -= osc2_period;
  8929  001022  0100               	movlb	0	; () banked
  8930  001024  5196               	movf	_osc2_period& (0+255),w,b
  8931  001026  0100               	movlb	0	; () banked
  8932  001028  5F70               	subwf	_osc2_time& (0+255),f,b
  8933  00102A  0100               	movlb	0	; () banked
  8934  00102C  5197               	movf	(_osc2_period+1)& (0+255),w,b
  8935  00102E  0100               	movlb	0	; () banked
  8936  001030  5B71               	subwfb	(_osc2_time+1)& (0+255),f,b
  8937  001032  D014               	goto	i2l3067
  8938  001034                     i2l3063:
  8939  001034  FFFF               	dw	65535	; assembler added errata NOP
  8940                           
  8941                           ; BSR set to: 0
  8942                           ;clock.c: 1437: else
  8943                           ;clock.c: 1438: if(osc2_time >= osc2_period / 2)
  8944  001036  90D8               	bcf	status,0,c
  8945  001038  0100               	movlb	0	; () banked
  8946  00103A  3197               	rrcf	(_osc2_period+1)& (0+255),w,b
  8947  00103C  6E02               	movwf	(??_handle_audio+1)& (0+255),c
  8948  00103E  0100               	movlb	0	; () banked
  8949  001040  3196               	rrcf	_osc2_period& (0+255),w,b
  8950  001042  6E01               	movwf	??_handle_audio& (0+255),c
  8951  001044  5001               	movf	??_handle_audio,w,c
  8952  001046  0100               	movlb	0	; () banked
  8953  001048  5D70               	subwf	_osc2_time& (0+255),w,b
  8954  00104A  5002               	movf	??_handle_audio+1,w,c
  8955  00104C  0100               	movlb	0	; () banked
  8956  00104E  5971               	subwfb	(_osc2_time+1)& (0+255),w,b
  8957  001050  A0D8               	btfss	status,0,c
  8958  001052  D004               	goto	i2l3067
  8959                           
  8960                           ; BSR set to: 0
  8961                           ;clock.c: 1439: {
  8962                           ;clock.c: 1440: amplitude -= osc2_volume;
  8963  001054  0100               	movlb	0	; () banked
  8964  001056  519B               	movf	_osc2_volume& (0+255),w,b
  8965  001058  5E03               	subwf	handle_audio@amplitude,f,c
  8966                           
  8967                           ;clock.c: 1441: }
  8968  00105A  D004               	goto	i2l481
  8969  00105C                     i2l3067:
  8970  00105C  FFFF               	dw	65535	; assembler added errata NOP
  8971                           
  8972                           ; BSR set to: 0
  8973                           ;clock.c: 1442: else
  8974                           ;clock.c: 1443: {
  8975                           ;clock.c: 1444: amplitude += osc2_volume;
  8976  00105E  0100               	movlb	0	; () banked
  8977  001060  519B               	movf	_osc2_volume& (0+255),w,b
  8978  001062  2603               	addwf	handle_audio@amplitude,f,c
  8979  001064                     i2l481:
  8980  001064  FFFF               	dw	65535	; assembler added errata NOP
  8981                           
  8982                           ; BSR set to: 0
  8983                           ;clock.c: 1445: }
  8984                           ;clock.c: 1447: if(osc3_time >= osc3_period)
  8985  001066  0100               	movlb	0	; () banked
  8986  001068  5194               	movf	_osc3_period& (0+255),w,b
  8987  00106A  0100               	movlb	0	; () banked
  8988  00106C  5D6E               	subwf	_osc3_time& (0+255),w,b
  8989  00106E  0100               	movlb	0	; () banked
  8990  001070  5195               	movf	(_osc3_period+1)& (0+255),w,b
  8991  001072  0100               	movlb	0	; () banked
  8992  001074  596F               	subwfb	(_osc3_time+1)& (0+255),w,b
  8993  001076  A0D8               	btfss	status,0,c
  8994  001078  D009               	goto	i2l3071
  8995                           
  8996                           ; BSR set to: 0
  8997                           ;clock.c: 1448: {
  8998                           ;clock.c: 1449: osc3_time -= osc3_period;
  8999  00107A  0100               	movlb	0	; () banked
  9000  00107C  5194               	movf	_osc3_period& (0+255),w,b
  9001  00107E  0100               	movlb	0	; () banked
  9002  001080  5F6E               	subwf	_osc3_time& (0+255),f,b
  9003  001082  0100               	movlb	0	; () banked
  9004  001084  5195               	movf	(_osc3_period+1)& (0+255),w,b
  9005  001086  0100               	movlb	0	; () banked
  9006  001088  5B6F               	subwfb	(_osc3_time+1)& (0+255),f,b
  9007  00108A  D014               	goto	i2l3075
  9008  00108C                     i2l3071:
  9009  00108C  FFFF               	dw	65535	; assembler added errata NOP
  9010                           
  9011                           ; BSR set to: 0
  9012                           ;clock.c: 1452: else
  9013                           ;clock.c: 1453: if(osc3_time >= osc3_period / 2)
  9014  00108E  90D8               	bcf	status,0,c
  9015  001090  0100               	movlb	0	; () banked
  9016  001092  3195               	rrcf	(_osc3_period+1)& (0+255),w,b
  9017  001094  6E02               	movwf	(??_handle_audio+1)& (0+255),c
  9018  001096  0100               	movlb	0	; () banked
  9019  001098  3194               	rrcf	_osc3_period& (0+255),w,b
  9020  00109A  6E01               	movwf	??_handle_audio& (0+255),c
  9021  00109C  5001               	movf	??_handle_audio,w,c
  9022  00109E  0100               	movlb	0	; () banked
  9023  0010A0  5D6E               	subwf	_osc3_time& (0+255),w,b
  9024  0010A2  5002               	movf	??_handle_audio+1,w,c
  9025  0010A4  0100               	movlb	0	; () banked
  9026  0010A6  596F               	subwfb	(_osc3_time+1)& (0+255),w,b
  9027  0010A8  A0D8               	btfss	status,0,c
  9028  0010AA  D004               	goto	i2l3075
  9029                           
  9030                           ; BSR set to: 0
  9031                           ;clock.c: 1454: {
  9032                           ;clock.c: 1455: amplitude -= osc3_volume;
  9033  0010AC  0100               	movlb	0	; () banked
  9034  0010AE  519A               	movf	_osc3_volume& (0+255),w,b
  9035  0010B0  5E03               	subwf	handle_audio@amplitude,f,c
  9036                           
  9037                           ;clock.c: 1456: }
  9038  0010B2  D004               	goto	i2l3077
  9039  0010B4                     i2l3075:
  9040  0010B4  FFFF               	dw	65535	; assembler added errata NOP
  9041                           
  9042                           ; BSR set to: 0
  9043                           ;clock.c: 1457: else
  9044                           ;clock.c: 1458: {
  9045                           ;clock.c: 1459: amplitude += osc3_volume;
  9046  0010B6  0100               	movlb	0	; () banked
  9047  0010B8  519A               	movf	_osc3_volume& (0+255),w,b
  9048  0010BA  2603               	addwf	handle_audio@amplitude,f,c
  9049  0010BC                     i2l3077:
  9050  0010BC  FFFF               	dw	65535	; assembler added errata NOP
  9051                           
  9052                           ; BSR set to: 0
  9053                           ;clock.c: 1460: }
  9054                           ;clock.c: 1504: next_duty = amplitude;
  9055  0010BE  C003  F045         	movff	handle_audio@amplitude,_next_duty
  9056  0010C2                     i2l488:
  9057  0010C2  FFFF               	dw	65535	; assembler added errata NOP
  9058                           
  9059                           ; BSR set to: 0
  9060  0010C4  0012               	return		;funcret
  9061  0010C6  FFFF               	dw	65535	; errata NOP
  9062  0010C8                     __end_of_handle_audio:
  9063                           	opt stack 0
  9064                           pclatu	equ	0xFFB
  9065                           pclath	equ	0xFFA
  9066                           tblptru	equ	0xFF8
  9067                           tblptrh	equ	0xFF7
  9068                           tblptrl	equ	0xFF6
  9069                           tablat	equ	0xFF5
  9070                           prodh	equ	0xFF4
  9071                           prodl	equ	0xFF3
  9072                           intcon	equ	0xFF2
  9073                           intcon2	equ	0xFF1
  9074                           intcon3	equ	0xFF0
  9075                           postinc0	equ	0xFEE
  9076                           fsr0h	equ	0xFEA
  9077                           fsr0l	equ	0xFE9
  9078                           wreg	equ	0xFE8
  9079                           postdec1	equ	0xFE5
  9080                           fsr1h	equ	0xFE2
  9081                           fsr1l	equ	0xFE1
  9082                           indf2	equ	0xFDF
  9083                           fsr2h	equ	0xFDA
  9084                           fsr2l	equ	0xFD9
  9085                           status	equ	0xFD8
  9086                           pclatu	equ	0xFFB
  9087                           pclath	equ	0xFFA
  9088                           tblptru	equ	0xFF8
  9089                           tblptrh	equ	0xFF7
  9090                           tblptrl	equ	0xFF6
  9091                           tablat	equ	0xFF5
  9092                           prodh	equ	0xFF4
  9093                           prodl	equ	0xFF3
  9094                           intcon	equ	0xFF2
  9095                           intcon2	equ	0xFF1
  9096                           intcon3	equ	0xFF0
  9097                           postinc0	equ	0xFEE
  9098                           fsr0h	equ	0xFEA
  9099                           fsr0l	equ	0xFE9
  9100                           wreg	equ	0xFE8
  9101                           postdec1	equ	0xFE5
  9102                           fsr1h	equ	0xFE2
  9103                           fsr1l	equ	0xFE1
  9104                           indf2	equ	0xFDF
  9105                           fsr2h	equ	0xFDA
  9106                           fsr2l	equ	0xFD9
  9107                           status	equ	0xFD8
  9108                           
  9109                           	psect	rparam
  9110  0000                     pclatu	equ	0xFFB
  9111                           pclath	equ	0xFFA
  9112                           tblptru	equ	0xFF8
  9113                           tblptrh	equ	0xFF7
  9114                           tblptrl	equ	0xFF6
  9115                           tablat	equ	0xFF5
  9116                           prodh	equ	0xFF4
  9117                           prodl	equ	0xFF3
  9118                           intcon	equ	0xFF2
  9119                           intcon2	equ	0xFF1
  9120                           intcon3	equ	0xFF0
  9121                           postinc0	equ	0xFEE
  9122                           fsr0h	equ	0xFEA
  9123                           fsr0l	equ	0xFE9
  9124                           wreg	equ	0xFE8
  9125                           postdec1	equ	0xFE5
  9126                           fsr1h	equ	0xFE2
  9127                           fsr1l	equ	0xFE1
  9128                           indf2	equ	0xFDF
  9129                           fsr2h	equ	0xFDA
  9130                           fsr2l	equ	0xFD9
  9131                           status	equ	0xFD8
  9132                           
  9133                           	psect	temp
  9134  00004C                     btemp:
  9135                           	opt stack 0
  9136  00004C                     	ds	1
  9137  0000                     int$flags	set	btemp
  9138                           pclatu	equ	0xFFB
  9139                           pclath	equ	0xFFA
  9140                           tblptru	equ	0xFF8
  9141                           tblptrh	equ	0xFF7
  9142                           tblptrl	equ	0xFF6
  9143                           tablat	equ	0xFF5
  9144                           prodh	equ	0xFF4
  9145                           prodl	equ	0xFF3
  9146                           intcon	equ	0xFF2
  9147                           intcon2	equ	0xFF1
  9148                           intcon3	equ	0xFF0
  9149                           postinc0	equ	0xFEE
  9150                           fsr0h	equ	0xFEA
  9151                           fsr0l	equ	0xFE9
  9152                           wreg	equ	0xFE8
  9153                           postdec1	equ	0xFE5
  9154                           fsr1h	equ	0xFE2
  9155                           fsr1l	equ	0xFE1
  9156                           indf2	equ	0xFDF
  9157                           fsr2h	equ	0xFDA
  9158                           fsr2l	equ	0xFD9
  9159                           status	equ	0xFD8


Data Sizes:
    Strings     58
    Constant    1638
    Data        5
    BSS         1081
    Persistent  10
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      75
    BANK0           160     19      61
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    handle_ir@code.data	PTR const int  size(2) Largest target is 142
		 -> number3_data(CODE[142]), number2_data(CODE[142]), number1_data(CODE[142]), prev_track_data(CODE[142]), 
		 -> next_track_data(CODE[142]), volume_dn_data(CODE[142]), volume_up_data(CODE[142]), power_data(CODE[142]), 

    handle_ir@data	PTR const int  size(2) Largest target is 142
		 -> number3_data(CODE[142]), number2_data(CODE[142]), number1_data(CODE[142]), prev_track_data(CODE[142]), 
		 -> next_track_data(CODE[142]), volume_dn_data(CODE[142]), volume_up_data(CODE[142]), power_data(CODE[142]), 

    handle_ir@code	PTR const struct . size(2) Largest target is 40
		 -> ir_codes(CODE[32]), 

    draw_alarm@ptr	PTR const unsigned char  size(2) Largest target is 40
		 -> led_masks4(CODE[40]), led_masks3(CODE[40]), led_masks2(CODE[40]), 

    draw_time@ptr	PTR const unsigned char  size(2) Largest target is 40
		 -> led_masks4(CODE[40]), led_masks3(CODE[40]), led_masks2(CODE[40]), 

    play_song@ptr	PTR const struct . size(2) Largest target is 72
		 -> alarm_song(CODE[72]), dn_tone(CODE[12]), up_tone(CODE[12]), set_time_tone2(CODE[20]), 
		 -> set_time_tone1(CODE[20]), set_alarm_tone2(CODE[20]), set_alarm_tone1(CODE[20]), alarm_on_tone(CODE[36]), 
		 -> alarm_off_tone(CODE[36]), test_tone(CODE[12]), 

    song_ptr	PTR const struct . size(3) Largest target is 49151
		 -> ROM(CODE[49151]), alarm_song(CODE[72]), dn_tone(CODE[12]), up_tone(CODE[12]), 
		 -> set_time_tone2(CODE[20]), set_time_tone1(CODE[20]), set_alarm_tone2(CODE[20]), set_alarm_tone1(CODE[20]), 
		 -> alarm_on_tone(CODE[36]), alarm_off_tone(CODE[36]), test_tone(CODE[12]), 

    print_text@s	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_5(CODE[14]), STR_4(CODE[2]), STR_3(CODE[27]), STR_2(CODE[7]), 
		 -> STR_1(CODE[10]), 

    S26$data	PTR const int  size(2) Largest target is 142
		 -> number3_data(CODE[142]), number2_data(CODE[142]), number1_data(CODE[142]), prev_track_data(CODE[142]), 
		 -> next_track_data(CODE[142]), volume_dn_data(CODE[142]), volume_up_data(CODE[142]), power_data(CODE[142]), 

    ir_codes.data	PTR const int  size(2) Largest target is 142
		 -> number3_data(CODE[142]), number2_data(CODE[142]), number1_data(CODE[142]), prev_track_data(CODE[142]), 
		 -> next_track_data(CODE[142]), volume_dn_data(CODE[142]), volume_up_data(CODE[142]), power_data(CODE[142]), 


Critical Paths under _main in COMRAM

    _main->_handle_ir
    _start_alarm->_play_song
    _handle_time->_draw_time
    _print_text->_print_byte
    _print_number->_print_number_nospace
    _print_number_nospace->___lwmod
    ___lwmod->___lwdiv
    _draw_test->_write_leds
    _increment_time_minutes->_draw_time
    _increment_alarm_minutes->_draw_alarm
    _decrement_time_minutes->_draw_time
    _decrement_alarm_minutes->_draw_alarm
    _increment_time_hours->_draw_time
    _increment_alarm_hours->_draw_alarm
    _dump_leds->_print_bin_nospace
    _print_bin_nospace->_print_byte
    _decrement_time_hours->_draw_time
    _draw_time->___awdiv
    _decrement_alarm_hours->_draw_alarm
    _draw_alarm->___awdiv

Critical Paths under _isr in COMRAM

    _isr->_handle_audio

Critical Paths under _main in BANK0

    _main->_handle_ir

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   37484
                                             43 COMRAM     2     2      0
                                             14 BANK0      5     5      0
                          _draw_time
                          _handle_ir
                      _handle_repeat
                        _handle_time
                         _print_text
                        _start_alarm
 ---------------------------------------------------------------------------------
 (1) _start_alarm                                          0     0      0    1109
                          _play_song
 ---------------------------------------------------------------------------------
 (1) _handle_time                                          0     0      0    1424
                          _draw_time
                        _handle_song
 ---------------------------------------------------------------------------------
 (1) _handle_repeat                                        0     0      0   12604
                       _do_hour_down
                         _do_hour_up
                     _do_minute_down
                       _do_minute_up
 ---------------------------------------------------------------------------------
 (1) _handle_ir                                           20    20      0   20238
                                             37 COMRAM     6     6      0
                                              0 BANK0     14    14      0
                       _do_hour_down
                         _do_hour_up
                     _do_minute_down
                       _do_minute_up
                         _draw_alarm
                          _draw_test
                          _draw_time
                          _play_song
                         _print_byte
                       _print_number
                         _print_text
                          _stop_song
 ---------------------------------------------------------------------------------
 (2) _stop_song                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _print_text                                           2     0      2     481
                                             20 COMRAM     2     0      2
                         _print_byte
 ---------------------------------------------------------------------------------
 (2) _print_number                                         2     0      2    2308
                                             33 COMRAM     2     0      2
                         _print_byte
               _print_number_nospace
 ---------------------------------------------------------------------------------
 (3) _print_number_nospace                                 2     0      2    2092
                                             31 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
                         _print_byte
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     848
                                             26 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     857
                                             19 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _play_song                                            2     0      2    1109
                                             19 COMRAM     2     0      2
                        _handle_song
 ---------------------------------------------------------------------------------
 (3) _handle_song                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _draw_test                                            0     0      0       0
                         _write_leds
 ---------------------------------------------------------------------------------
 (2) _do_minute_up                                         0     0      0    2848
            _increment_alarm_minutes
             _increment_time_minutes
 ---------------------------------------------------------------------------------
 (3) _increment_time_minutes                               0     0      0    1424
                          _draw_time
 ---------------------------------------------------------------------------------
 (3) _increment_alarm_minutes                              0     0      0    1424
                         _draw_alarm
 ---------------------------------------------------------------------------------
 (2) _do_minute_down                                       0     0      0    2848
            _decrement_alarm_minutes
             _decrement_time_minutes
 ---------------------------------------------------------------------------------
 (3) _decrement_time_minutes                               0     0      0    1424
                          _draw_time
 ---------------------------------------------------------------------------------
 (3) _decrement_alarm_minutes                              0     0      0    1424
                         _draw_alarm
 ---------------------------------------------------------------------------------
 (2) _do_hour_up                                           0     0      0    3454
                          _dump_leds
              _increment_alarm_hours
               _increment_time_hours
                         _write_leds
 ---------------------------------------------------------------------------------
 (3) _increment_time_hours                                 0     0      0    1424
                          _draw_time
 ---------------------------------------------------------------------------------
 (3) _increment_alarm_hours                                0     0      0    1424
                         _draw_alarm
 ---------------------------------------------------------------------------------
 (2) _do_hour_down                                         0     0      0    3454
              _decrement_alarm_hours
               _decrement_time_hours
                          _dump_leds
                         _write_leds
 ---------------------------------------------------------------------------------
 (3) _dump_leds                                            0     0      0     606
                  _print_bin_nospace
                         _print_byte
 ---------------------------------------------------------------------------------
 (4) _print_bin_nospace                                   17    17      0     575
                                             20 COMRAM    17    17      0
                         _print_byte
 ---------------------------------------------------------------------------------
 (2) _print_byte                                           1     1      0      31
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _decrement_time_hours                                 0     0      0    1424
                          _draw_time
 ---------------------------------------------------------------------------------
 (2) _draw_time                                            6     6      0    1424
                                             27 COMRAM     6     6      0
                            ___awdiv
                         _write_leds
 ---------------------------------------------------------------------------------
 (3) _decrement_alarm_hours                                0     0      0    1424
                         _draw_alarm
 ---------------------------------------------------------------------------------
 (4) _draw_alarm                                           6     6      0    1424
                                             27 COMRAM     6     6      0
                            ___awdiv
                         _write_leds
 ---------------------------------------------------------------------------------
 (3) _write_leds                                           1     1      0       0
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     907
                                             19 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                 16    16      0      32
                                              3 COMRAM    16    16      0
                       _handle_audio
 ---------------------------------------------------------------------------------
 (7) _handle_audio                                         3     3      0      32
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _draw_time
     ___awdiv
     _write_leds
   _handle_ir
     _do_hour_down
       _decrement_alarm_hours
         _draw_alarm
           ___awdiv
           _write_leds
       _decrement_time_hours
         _draw_time
           ___awdiv
           _write_leds
       _dump_leds
         _print_bin_nospace
           _print_byte
         _print_byte
       _write_leds
     _do_hour_up
       _dump_leds
         _print_bin_nospace
           _print_byte
         _print_byte
       _increment_alarm_hours
         _draw_alarm
           ___awdiv
           _write_leds
       _increment_time_hours
         _draw_time
           ___awdiv
           _write_leds
       _write_leds
     _do_minute_down
       _decrement_alarm_minutes
         _draw_alarm
           ___awdiv
           _write_leds
       _decrement_time_minutes
         _draw_time
           ___awdiv
           _write_leds
     _do_minute_up
       _increment_alarm_minutes
         _draw_alarm
           ___awdiv
           _write_leds
       _increment_time_minutes
         _draw_time
           ___awdiv
           _write_leds
     _draw_alarm
       ___awdiv
       _write_leds
     _draw_test
       _write_leds
     _draw_time
       ___awdiv
       _write_leds
     _play_song
       _handle_song
     _print_byte
     _print_number
       _print_byte
       _print_number_nospace
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _print_byte
     _print_text
       _print_byte
     _stop_song
   _handle_repeat
     _do_hour_down
       _decrement_alarm_hours
         _draw_alarm
           ___awdiv
           _write_leds
       _decrement_time_hours
         _draw_time
           ___awdiv
           _write_leds
       _dump_leds
         _print_bin_nospace
           _print_byte
         _print_byte
       _write_leds
     _do_hour_up
       _dump_leds
         _print_bin_nospace
           _print_byte
         _print_byte
       _increment_alarm_hours
         _draw_alarm
           ___awdiv
           _write_leds
       _increment_time_hours
         _draw_time
           ___awdiv
           _write_leds
       _write_leds
     _do_minute_down
       _decrement_alarm_minutes
         _draw_alarm
           ___awdiv
           _write_leds
       _decrement_time_minutes
         _draw_time
           ___awdiv
           _write_leds
     _do_minute_up
       _increment_alarm_minutes
         _draw_alarm
           ___awdiv
           _write_leds
       _increment_time_minutes
         _draw_time
           ___awdiv
           _write_leds
   _handle_time
     _draw_time
       ___awdiv
       _write_leds
     _handle_song
   _print_text
     _print_byte
   _start_alarm
     _play_song
       _handle_song

 _isr (ROOT)
   _handle_audio

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0     400      31       30.8%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     13      3D       5       38.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      4B       1       79.8%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      88      20        0.0%
DATA                 0      0     488       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Mar 28 09:28:26 2017

                                              ??_do_hour_down 0026  
                                                ___awdiv@sign 0019  
                                              ??_do_minute_up 0022  
                                                         l221 18F8  
                                                         l400 1A96  
                                                         l304 0D24  
                                                         l233 1368  
                                                         l406 1AB6  
                                                         l504 1532  
                                                         l290 0D00  
                                                         l418 1710  
                                                         l522 09C8  
                                                         l523 0A54  
                                                         l380 163A  
                                                         l384 1662  
                                                         l464 05AA  
                                                         l394 16AA  
                                                         l491 14E0  
                                                         l492 14D8  
                                                         l940 1768  
                                                         l950 1812  
                                             _powerdown_count 0074  
                                                 _start_alarm 1B06  
                                                         _PR2 000FCB  
                                __end_of_increment_time_hours 186C  
                                                         _isr 0008  
                                                         prod 000FF3  
                                                         wreg 000FE8  
                                                __CFG_LVP$OFF 000000  
                                     ?_increment_time_minutes 0001  
                                                        l4001 038E  
                                                        l4011 03A8  
                                                        l4111 058C  
                                                        l4031 0406  
                                                        l4015 03BE  
                                                        l4103 056A  
                                                        l4025 03EE  
                                                        l4017 03CE  
                                                        l4107 0580  
                                                        l3413 15C2  
                                                        l3405 15A6  
                                                        l3421 139A  
                                                        l4053 045C  
                                                        l4045 043C  
                                                        l4141 14CC  
                                                        l4301 0A20  
                                                        l4039 0424  
                                                        l4311 0A4A  
                                                        l3409 15B2  
                                                        l4073 04A0  
                                                        l4065 0484  
                                                        l4057 0468  
                                                        l4153 150E  
                                                        l4305 0A2C  
                                                        l3531 0EE0  
                                                        l3611 1738  
                                                        l4083 04D4  
                                                        l4155 1514  
                                                        l4323 0A94  
                                                        l3381 154E  
                                                        l3461 1430  
                                                        l3453 1412  
                                                        l3445 13F4  
                                                        l3437 13D6  
                                                        l3429 13B8  
                                                        l3621 175C  
                                                        l3613 173E  
                                                        l4077 04B8  
                                                        l4325 0A9A  
                                                        l3543 0EFE  
                                                        l3631 17EA  
                                                        l4087 04EC  
                                                        l4095 0508  
                                                        l3393 1578  
                                                        l3529 0EDA  
                                                        l3609 172E  
                                                        l3633 17F0  
                                                        l4097 0558  
                                                        l4337 0AC8  
                                                        l4353 0AFA  
                                                        l3395 1582  
                                                        l3387 1560  
                                                        l3555 10EC  
                                                        l3539 0EF6  
                                                        l3491 0D4E  
                                                        l4099 0562  
                                                        l4275 09AE  
                                                        l4267 0998  
                                                        l3397 1588  
                                                        l3477 146C  
                                                        l3469 144E  
                                                        l3821 15F2  
                                                        l3717 1ACC  
                                                        l3709 19FC  
                                                        l3901 1A8A  
                                                        l3637 1806  
                                                        l3629 17E0  
                                                        l3653 132A  
                                                        l3645 12AE  
                                                        l3735 1AFC  
                                                        l3727 1A2A  
                                                        l3671 0C0A  
                                                        l3663 0B62  
                                                        l3761 1962  
                                                        l3745 1854  
                                                        l3649 12EC  
                                                        l3771 1890  
                                                        l3667 0BB6  
                                                        l3659 0B46  
                                                        l3923 16D2  
                                                        l3757 1954  
                                                        l3749 1862  
                                                        l3853 162E  
                                                        l3909 1AAA  
                                                        l3677 0C5E  
                                                        l3941 0102  
                                                        l3925 16DA  
                                                        l3933 16F2  
                                                        l3917 16C2  
                                                        l3783 19B0  
                                                        l3775 18AC  
                                                        l3847 1618  
                                                        l3695 0CDC  
                                                        l3679 0C8A  
                                                        l3791 1902  
                                                        l3927 16E2  
                                                        l3849 1620  
                                                        l3697 0CF0  
                                                        l3937 00F6  
                                                        l3929 16EA  
                                                        l3787 19CC  
                                                        l3795 191A  
                                                        l3963 0284  
                                                        l3893 169E  
                                                        l3973 02CC  
                                                        l3957 0210  
                                                        l3887 1688  
                                                        l3983 02F6  
                                                        l3967 02B4  
                                                        l3959 0266  
                                                        l3889 1690  
                                                        l3977 02D8  
                                                        ?_isr 0001  
                                                        l3997 036E  
                                                        STR_1 BFEE  
                                                        STR_2 BFF8  
                                                        STR_3 BFC5  
                                                        STR_4 BFDE  
                                                        STR_5 BFE0  
                                                        u4210 05EA  
                                                        u5100 184C  
                                                        u4310 067C  
                                                        u4230 0608  
                                                        u5110 1850  
                                                        u4208 05D2  
                                                        u5200 18A8  
                                                        u4410 0722  
                                                        u4330 06B0  
                                                        u4250 0628  
                                                        u4308 0664  
                                                        u4228 05EE  
                                                        u5140 194C  
                                                        u4510 07CC  
                                                        u4430 0742  
                                                        u4350 06CE  
                                                        u4270 0646  
                                                        u4190 05CE  
                                                        u5230 19C4  
                                                        u5150 1950  
                                                        u4408 0708  
                                                        u4328 0680  
                                                        u4248 060C  
                                                        u5240 19C8  
                                                        u4610 0878  
                                                        u4530 07E8  
                                                        u4450 075E  
                                                        u4370 06E8  
                                                        u4290 0660  
                                                        u4508 07B6  
                                                        u4428 0726  
                                                        u4348 06B4  
                                                        u4268 062C  
                                                        u4630 0892  
                                                        u4550 0806  
                                                        u4470 0794  
                                                        u4390 0704  
                                                        u5190 18A4  
                                                        u4608 0846  
                                                        u4528 07D0  
                                                        u4448 0746  
                                                        u4368 06D2  
                                                        u4288 064A  
                                                        u5520 029C  
                                                        u4570 0826  
                                                        u4490 07B2  
                                                        u4628 087C  
                                                        u4548 07EC  
                                                        u4468 0762  
                                                        u4388 06EC  
                                                        u4590 0842  
                                                        u4648 0896  
                                                        u4568 080A  
                                                        u4488 0798  
                                                        u5560 037A  
                                                        u5800 14FA  
                                                        u5570 037E  
                                                        u5810 14FE  
                                                        u4588 082A  
                                                        u5750 14C2  
                                                        u5760 14C6  
                                                        u4970 12FA  
                                                        u5930 0A6A  
                                                        u4980 1338  
                                                        u5948 0A6E  
                                      ??_decrement_time_hours 0022  
                                                        _ampm 003E  
                                                        _main 08A8  
                                                        _mode 003C  
                                                        fsr0h 000FEA  
                                                        fsr1h 000FE2  
                                                        fsr2h 000FDA  
                                                        fsr0l 000FE9  
                                                        indf2 000FDF  
                                                        fsr1l 000FE1  
                                                        fsr2l 000FD9  
                                                        btemp 004C  
                                            ??_do_minute_down 0022  
                                                        prodh 000FF4  
                                                        prodl 000FF3  
                                                        start 00DA  
                              __size_of_decrement_alarm_hours 0034  
                               __end_of_decrement_alarm_hours 19D6  
                                                ___param_bank 000000  
                                                       ??_isr 0004  
                                       _increment_alarm_hours 1936  
                                                       ?_main 0001  
                                             __end_of___awdiv 15D0  
                                                       _T0CON 000FD5  
                                             ___awdiv@divisor 0016  
                                                       _T1CON 000FCD  
                                                       _T2CON 000FCA  
                                             __end_of___lwdiv 1776  
                                             __end_of___lwmod 1820  
                                                       i2l481 1064  
                                                       i2l477 100C  
                                                       i2l488 10C2  
                                             ___awdiv@counter 0018  
                                                       _RCSTA 000FAB  
                                                       _TMR0H 000FD7  
                                                       _TMR0L 000FD6  
                                                       _SPBRG 000FAF  
                                                       _TRISE 000F96  
                                                       _TXREG 000FAD  
                                                       _TXSTA 000FAC  
                              __end_of_increment_time_minutes 1A06  
                                             __end_of_dn_tone BFAD  
                                                       _alarm 003D  
                                                       _colon 0049  
                                                       _freqs B95F  
                                                       _hours 004A  
                                                       main@i 0091  
                                                       pclath 000FFA  
                                                       tablat 000FF5  
                                       __end_of_alarm_on_tone BF0D  
                                             __end_of_up_tone BFB9  
                                                       status 000FD8  
                            __size_of_increment_alarm_minutes 001A  
                                             __initialization 1776  
                                                __end_of_main 0B44  
                               __size_of_print_number_nospace 0106  
                                    ?_decrement_alarm_minutes 0001  
                                                draw_time@ptr 0020  
                                              __CFG_OSC$HSPLL 000000  
                                       handle_audio@amplitude 0003  
                                                      ??_main 002C  
                                        __end_of_handle_audio 10C8  
                                               __activetblptr 000002  
                                              _alarm_off_tone BF0D  
                                                      _ADCON1 000FC1  
                                        __size_of_handle_time 00B6  
                                        __size_of_handle_song 01E6  
                                                      _CCPR2H 000FBC  
                                                      _CCPR1L 000FBE  
                                                      _CCPR2L 000FBB  
                                            ___awdiv@dividend 0014  
                                        __end_of_do_hour_down 16B0  
                                                      i2l3021 0F34  
                                                      i2l3025 0F42  
                                                      i2l3043 0F88  
                                                      i2l3029 0F50  
                                                      i2l3141 0046  
                                                      i2l3071 108C  
                                                      i2l3063 1034  
                                                      i2l3055 0FDC  
                                                      i2l3039 0F7C  
                                                      i2l3075 10B4  
                                                      i2l3067 105C  
                                                      i2l3059 1004  
                                                      i2l3163 008A  
                                                      i2l3077 10BC  
                                                      i2l3149 005C  
                                                      i2l3165 0092  
                                                      _SPBRGH 000F7F  
                                        __end_of_do_minute_up 1A9C  
                                              _alarm_sounding 0047  
                                        _increment_time_hours 1820  
                                                   ??___awdiv 0018  
                                    ??_decrement_time_minutes 0022  
                                      ?_increment_alarm_hours 0001  
                                                   ??___lwdiv 0018  
                                            __end_of_ir_codes BF51  
                                                   ??___lwmod 001F  
                                                      clear_0 179E  
                                                      clear_1 17B0  
                                                      clear_2 17BC  
                                            ___awdiv@quotient 001A  
                                               draw_alarm@ptr 0020  
                                                __pdataCOMRAM 0046  
                                      __end_of_alarm_off_tone BF31  
                                               main@test_time 008F  
                                                __mediumconst B95E  
                                                      tblptrh 000FF7  
                                                      tblptrl 000FF6  
                                                      tblptru 000FF8  
                                           handle_ir@ir_error 0084  
                                              _repeat_counter 003A  
                                                  __accesstop 0060  
                                     __end_of__initialization 17C2  
                                               ___rparam_used 000001  
                                       ?_increment_time_hours 0001  
                                              __pcstackCOMRAM 0001  
                                               __end_of_freqs B9A9  
                                                ?_start_alarm 0001  
                                          __size_of_handle_ir 04D2  
                                             handle_ir@failed 0081  
                                          draw_time@minutes10 001F  
                                          __size_of_draw_time 01DE  
                                          __size_of_draw_test 0012  
                                             handle_ir@got_it 0083  
                                                  __pbssBANK0 0060  
                                       __end_of_handle_repeat 1716  
                                     _increment_alarm_minutes 1ABC  
                                                  __pnvCOMRAM 004B  
                                          __size_of_dump_leds 0036  
                                                  _alarm_ampm 0038  
                                            draw_time@hours10 001E  
                                                  _alarm_time 0037  
                                                  _alarm_song BE29  
                                       __size_of_handle_audio 01C0  
                             __size_of_decrement_time_minutes 002E  
                                              _ir_code_failed 0060  
                                                     _CCP1CON 000FBD  
                                                     _CCP2CON 000FBA  
                                          __size_of_play_song 0024  
                                                     _BAUDCTL 000F7E  
                                                  _do_hour_up 15D0  
                                       __size_of_do_hour_down 0070  
                                       __size_of_do_minute_up 0020  
                                                  _draw_alarm 10C8  
                                                  _led_masks2 BEC1  
                                                  _led_masks3 BE99  
                                                  _led_masks4 BE71  
                                          __size_of_stop_song 0024  
                                      ??_increment_time_hours 0022  
                                                _handle_audio 0F08  
                                                  _need_audio 0080  
                                                  _first_edge 0046  
                               __size_of_decrement_time_hours 004A  
                                           __end_of_handle_ir 05B0  
                                                     __Hparam 0000  
                                                     __Lparam 0000  
                                                     ___awdiv 1538  
                                                  _got_ir_int 0031  
                                       _decrement_alarm_hours 19A2  
                                           __end_of_draw_time 0F08  
                                           __end_of_draw_test 1B2E  
                                                     ___lwdiv 1716  
                                                     ___lwmod 17D0  
                                           __end_of_hex_table B9B9  
                                                _do_hour_down 1640  
                                                     __pcinit 1776  
                                                     __ramtop 0D00  
                                                     __ptext0 08A8  
                                                     __ptext1 1B06  
                                                     __ptext2 1482  
                                                     __ptext3 16B0  
                                                     __ptext4 00DE  
                                                     __ptext5 1A34  
                                                     __ptext6 18FE  
                                                     __ptext7 1AD6  
                                                     __ptext8 1284  
                                                     __ptext9 17D0  
                                                     _dn_tone BFA1  
                                                     _have_ir 0032  
                                                _do_minute_up 1A7C  
                                           __end_of_dump_leds 19A2  
                                                     _ir_code 007F  
                                                     _ir_time 006A  
                                                     _ir_size 0033  
                                                __size_of_isr 00D2  
                                                     _minutes 003F  
                                                     _seconds 0040  
                                __end_of_print_number_nospace 138A  
                                                     _time_hz 0041  
                            __size_of_decrement_alarm_minutes 0018  
                                                     _up_tone BFAD  
                                      _decrement_time_minutes 1A06  
                                   ??_increment_alarm_minutes 0022  
                                        end_of_initialization 17C2  
                                          handle_ir@code_size 0082  
                                           __end_of_play_song 1A7C  
                                               __Lmediumconst B95E  
                                     ??_increment_alarm_hours 0022  
                                           __end_of_test_tone BFC5  
                                           draw_alarm@hours10 001E  
                                     print_bin_nospace@number 0025  
                                                     postdec1 000FE5  
                                                     postinc0 000FEE  
                                             _next_track_data BBF1  
                                       _print_bin_nospace$802 0015  
                                       _print_bin_nospace$803 0017  
                                       _print_bin_nospace$804 0019  
                                       _print_bin_nospace$805 001B  
                                       _print_bin_nospace$806 001D  
                                       _print_bin_nospace$807 001F  
                                       _print_bin_nospace$808 0021  
                                       _print_bin_nospace$809 0023  
                                                  handle_ir@i 008A  
                                                  handle_ir@j 008E  
                                     __size_of_do_minute_down 0020  
                                                 ?_do_hour_up 0001  
                                           __end_of_stop_song 1A58  
                                                  _print_byte 18B6  
                                                  _print_text 18FE  
                                               ??_handle_time 0022  
                                               ??_handle_song 0014  
                                                  _power_data BD9B  
                                                  _song_delay 0043  
                                        __size_of_start_alarm 0016  
                                                   _TRISAbits 000F92  
                                                   _TRISCbits 000F94  
                                                   _TRISDbits 000F95  
                                                   _TRISFbits 000F97  
                                                   _TRISGbits 000F98  
                                               ?_print_number 0022  
                                                 ?_draw_alarm 0001  
                                                  main@i_1023 0093  
                                                 print_byte@c 0014  
                                      ?_decrement_alarm_hours 0001  
                                                 print_text@s 0015  
                             __end_of_increment_alarm_minutes 1AD6  
                                               __pidataCOMRAM 1B2E  
                                                  _write_leds 05B0  
                                              _set_time_tone1 BF65  
                                              _set_time_tone2 BF51  
                                    ??_increment_time_minutes 0022  
                                             _prev_track_data BB63  
                                         start_initialization 1776  
                                              ??_print_number 0024  
                                                 __end_of_isr 00DA  
                                         __end_of_handle_time 1538  
                                         __end_of_handle_song 0D2A  
                                               _alarm_minutes 0039  
                                               _alarm_on_tone BEE9  
                                     __end_of_next_track_data BC7F  
                                         __size_of_do_hour_up 0070  
                                        _print_number_nospace 1284  
                                      __end_of_set_time_tone1 BF79  
                                      __end_of_set_time_tone2 BF65  
                                         __size_of_draw_alarm 01BC  
                                                 _decay_count 0076  
                                                 ?_print_byte 0001  
                                                 ?_print_text 0015  
                                                 __pbssBIGRAM 009D  
                                                 __pbssCOMRAM 002E  
                                              _volume_dn_data BC7F  
                                               __pcstackBANK0 0081  
                                     _decrement_alarm_minutes 1AEE  
                                                 _alarm_hours 0048  
                                              handle_ir@i_916 008B  
                                              _volume_up_data BD0D  
                                        __end_of_number1_data BB63  
                                        __end_of_number2_data BAD5  
                                        __end_of_number3_data BA47  
                                              handle_ir@error 0088  
                                                   __pnvBANK0 0094  
                                            ___lwdiv@dividend 0014  
                                       ?_print_number_nospace 0020  
                                                   __pintcode 0008  
                                               __pmediumconst B95E  
                                                    ?___awdiv 0014  
                                     __end_of_prev_track_data BBF1  
                                                   _handle_ir 00DE  
                                                    ?___lwdiv 0014  
                                                    ?___lwmod 001B  
                                              _do_minute_down 1A9C  
                                                 ?_write_leds 0001  
                                                _crystal_time 006C  
                                                   _led_mask0 004B  
                                                   _led_mask1 0036  
                                                   _led_mask2 0035  
                                                   _led_mask3 0034  
                             __size_of_increment_time_minutes 0030  
                                      __size_of_handle_repeat 0066  
                                      __end_of_volume_dn_data BD0D  
                                                   _draw_time 0D2A  
                                                   _draw_test 1B1C  
                                __end_of_decrement_time_hours 18B6  
                                                   _hex_table B9A9  
                                     ?_decrement_time_minutes 0001  
                                                 _handle_time 1482  
                                                 _handle_song 0B44  
                                                   _osc1_time 0072  
                                                   _dump_leds 196C  
                                                   _osc2_time 0070  
                                                   _osc3_time 006E  
                                            ___lwdiv@quotient 0019  
                                      __end_of_volume_up_data BD9B  
                                              _uart_position1 007A  
                                              _uart_position2 0078  
                                                    _LATAbits 000F89  
                                                    _LATCbits 000F8B  
                                                    _LATDbits 000F8C  
                                                    _LATEbits 000F8D  
                                                    _LATFbits 000F8E  
                                                    _LATGbits 000F8F  
                                                   _next_duty 0045  
                                                    _PIE1bits 000F9D  
                                                   _repeating 003B  
                                                   _play_song 1A58  
                               __size_of_increment_time_hours 004C  
                                         __size_of_print_byte 0048  
                                  print_number_nospace@number 0020  
                                         __size_of_print_text 0038  
                                                    _PIR1bits 000F9E  
                                                    _PIR2bits 000FA1  
                                        __end_of_print_number 1AEE  
                              __size_of_increment_alarm_hours 0036  
                               __end_of_increment_alarm_hours 196C  
                                      __end_of_do_minute_down 1ABC  
                                                  ?_handle_ir 0001  
                                                   _uart_size 007C  
                                                   _test_tone BFB9  
                                                ??_do_hour_up 0026  
                                                  ?_draw_time 0001  
                                                  ?_draw_test 0001  
                              __end_of_decrement_time_minutes 1A34  
                                   ??_decrement_alarm_minutes 0022  
                                          __end_of_alarm_song BE71  
                                                   _stop_song 1A34  
                                                  ?_dump_leds 0001  
                                                ??_draw_alarm 001C  
                                                 _INTCON2bits 000FF1  
                                                 _INTCON3bits 000FF0  
                                                   copy_data0 178A  
                                                play_song@ptr 0014  
                                           _print_bin_nospace 138A  
                                      _increment_time_minutes 19D6  
                                               _handle_repeat 16B0  
                                             _set_alarm_tone1 BF8D  
                                             _set_alarm_tone2 BF79  
                                         __size_of_write_leds 02F8  
                                          ?_print_bin_nospace 0001  
                                     ??_decrement_alarm_hours 0022  
                                                  ?_play_song 0014  
                                          __end_of_do_hour_up 1640  
                                                    __Hrparam 0000  
                                      ??_print_number_nospace 0022  
                                                    __Lrparam 0000  
                                         ??_print_bin_nospace 0015  
                                             ?_do_minute_down 0001  
                                                 _osc1_period 0098  
                                                 _osc2_period 0096  
                                                 _osc3_period 0094  
                                            __size_of___awdiv 0098  
                                                 _osc1_volume 009C  
                                          __end_of_draw_alarm 1284  
                                            __size_of___lwdiv 0060  
                                                 _osc2_volume 009B  
                                          __end_of_led_masks2 BEE9  
                                          __end_of_led_masks3 BEC1  
                                          __end_of_led_masks4 BE99  
                                            __size_of___lwmod 0050  
                                                 _osc3_volume 009A  
                                               ??_start_alarm 0016  
                                               handle_ir@data 0086  
                                               handle_ir@code 008C  
                                    ?_increment_alarm_minutes 0001  
                                             ___lwdiv@divisor 0016  
                                                  ?_stop_song 0001  
                                             ___lwdiv@counter 0018  
                                                    __ptext10 1716  
                                                    __ptext11 1A58  
                                                    __ptext20 15D0  
                                                    __ptext12 0B44  
                                                    __ptext21 1820  
                                                    __ptext13 1B1C  
                                                    __ptext30 10C8  
                                                    __ptext22 1936  
                                                    __ptext14 1A7C  
                                                    __ptext31 05B0  
                                                    __ptext23 1640  
                                                    __ptext15 19D6  
                                                    __ptext32 1538  
                                                    __ptext24 196C  
                                                    __ptext16 1ABC  
                                                    __ptext25 138A  
                                                    __ptext17 1A9C  
                                                    __ptext34 0F08  
                                                    __ptext26 18B6  
                                                    __ptext18 1A06  
                                                    __ptext27 186C  
                                                    __ptext19 1AEE  
                                                    __ptext28 0D2A  
                                                    __ptext29 19A2  
                                   __end_of_print_bin_nospace 1482  
                                              ?_handle_repeat 0001  
                                                    _ir_codes BF31  
                                                    _ir_time2 0068  
                                               __size_of_main 029C  
                             __end_of_decrement_alarm_minutes 1B06  
                                        _decrement_time_hours 186C  
                                                 ??_handle_ir 0026  
                                                    int$flags 004C  
                                                    _song_ptr 002E  
                                                _number1_data BAD5  
                                                _number2_data BA47  
                                                _number3_data B9B9  
                                                 ??_draw_time 001C  
                                                 ??_draw_test 0015  
                                         draw_alarm@minutes10 001F  
                                                ??_print_byte 0014  
                                                ??_print_text 0017  
                                                  _INTCONbits 000FF2  
                                                 ??_dump_leds 0026  
                                     __end_of_set_alarm_tone1 BFA1  
                                     __end_of_set_alarm_tone2 BF8D  
                                         __end_of_start_alarm 1B1C  
                                                    intlevel2 1B34  
                                          print_number@number 0022  
                                            ___lwmod@dividend 001B  
                                               ?_handle_audio 0001  
                                       __size_of_print_number 0018  
                                       ?_decrement_time_hours 0001  
                                                 ??_play_song 0016  
                                          __end_of_print_byte 18FE  
                                          __end_of_print_text 1936  
                                          __end_of_power_data BE29  
                                               ?_do_hour_down 0001  
                                                ??_write_leds 0014  
                                               ?_do_minute_up 0001  
                                                 _uart_buffer 009D  
                                             ___lwmod@divisor 001D  
                                              _interrupt_done 007E  
                                                ?_handle_time 0001  
                                             ___lwmod@counter 001F  
                                                ?_handle_song 0001  
                                                 ??_stop_song 0014  
                                                _print_number 1AD6  
                                  __size_of_print_bin_nospace 00F8  
                                             ??_handle_repeat 0026  
                                               _display_flash 0042  
                                              ??_handle_audio 0001  
                                          __end_of_write_leds 08A8  
                                                _song_counter 0044  

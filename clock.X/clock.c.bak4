// heroineclock 2


// remote is PWM modulated
// press tuner button to engage tuner codes



// pins:
// 
// A0 - LED
// A1 - LED
// A2 - LED
// A3 - LED
// A5 - LED
// B3 - IR RX
// C0 - LED
// C1 - LED
// C2/P1A - speaker
// C3 - LED
// C4 - LED
// C5 - LED
// C6/TX - DEBUG UART
// C7/RX - 
// E0 - LED
// E1 - LED
// E2 - LED
// E3 - LED
// E4 - LED
// E5 - LED
// E6 - LED
// E7 - LED
// F0 - LED
// F1 - LED
// F2 - LED
// F3 - LED
// F4 - LED
// F5 - LED
// F6 - LED
// G0 - LED
// G1 - LED



// CONFIG1H
#pragma config OSC = HSPLL      // Oscillator (HS oscillator with HW enabled 4x PLL)
#pragma config LVP = OFF        // Low Voltage Program (Low-voltage ICSP disabled)



#include <p18f6585.h>
#include <stdint.h>






#define ENABLE_DEBUG

#ifdef ENABLE_DEBUG
#define DEBUG_TRIS TRISDbits.TRISD7
#define DEBUG_LAT LATDbits.LATD7

// the clockspeed
#define CLOCKSPEED 40000000

// 115200 baud for debug
#define BAUD_CODE 87

#define UART_BUFSIZE 1024
uint8_t uart_buffer[UART_BUFSIZE];
uint16_t uart_size = 0;
uint16_t uart_position1 = 0;
uint16_t uart_position2 = 0;
#endif // ENABLE_DEBUG


// periods for different notes in CPU clocks
// divide by 4 to account for TMR2 postscaler
#define _C1 (uint16_t)(CLOCKSPEED / 4 / 130.81 / 4)
#define _D1 (uint16_t)(CLOCKSPEED / 4 / 146.83 / 4)
#define _E1 (uint16_t)(CLOCKSPEED / 4 / 164.81 / 4)
#define _F1 (uint16_t)(CLOCKSPEED / 4 / 174.61 / 4)
#define _G1 (uint16_t)(CLOCKSPEED / 4 / 196.00 / 4)
#define _A1 (uint16_t)(CLOCKSPEED / 4 / 220.00 / 4)
#define _B1 (uint16_t)(CLOCKSPEED / 4 / 246.94 / 4)
#define _C2 (uint16_t)(CLOCKSPEED / 4 / 261.62 / 4)
#define _D2 (uint16_t)(CLOCKSPEED / 4 / 293.66 / 4)
#define _E2 (uint16_t)(CLOCKSPEED / 4 / 329.63 / 4)
#define _F2 (uint16_t)(CLOCKSPEED / 4 / 349.23 / 4)
#define _G2 (uint16_t)(CLOCKSPEED / 4 / 392.00 / 4)
#define _A2 (uint16_t)(CLOCKSPEED / 4 / 440.00 / 4)
#define _B2 (uint16_t)(CLOCKSPEED / 4 / 493.88 / 4)
#define _C3 (uint16_t)(CLOCKSPEED / 4 / 523.25 / 4)



#define SPEAKER_TRIS TRISCbits.TRISC2
// period of the audio PWM
#define AUDIO_PERIOD 0xff
#define MAX_VOLUME (AUDIO_PERIOD / 2)
// periods for the oscillators in CPU clocks
uint16_t osc1_period = _C1;
uint16_t osc2_period = _E1;
uint16_t osc3_period = _G1;
// volume of the oscillators
uint8_t osc1_volume = MAX_VOLUME / 3;
uint8_t osc2_volume = MAX_VOLUME / 3;
uint8_t osc3_volume = MAX_VOLUME / 3;
// current time of the oscillator waveform in CPU clocks
uint16_t osc1_time = 0;
uint16_t osc2_time = 0;
uint16_t osc3_time = 0;



// mane timer period
#define TIMER_PERIOD 5000
// mane timer interrupts at this rate
#define HZ 250

#define ABS(x) ((x) < 0 ? (-(x)) : (x))

// time in seconds * HZ
volatile uint32_t time;
volatile uint8_t have_serial = 0;
volatile uint8_t serial_in = 0;




#define ENABLE_ALARM 0x00
#define HOUR_UP 0x01
#define HOUR_DN 0x02
#define MINUTE_UP 0x03
#define MINUTE_DN 0x04
#define SET_ALARM 0x05
#define SET_TIME 0x06
#define SET_TEST 0x07


typedef struct
{
    const int16_t *data;
    const uint8_t value;
} ir_code_t;


// remote control codes
#define CODE_SIZE 71
const int16_t power_data[] = 
{ 
	1408, 693, 117, 58, 115, 234, 112, 61, 115, 235, 110, 240, 108, 241,
	112, 238, 111, 62, 111, 238, 111, 62, 112, 238, 107, 65, 108, 65, 107,
	66, 107, 65, 108, 242, 108, 242, 109, 241, 108, 242, 108, 242, 107, 243,
	108, 65, 105, 68, 106, 67, 107, 66, 107, 66, 107, 66, 105, 68, 107, 66,
	106, 244, 104, 246, 106, 243, 107, 6193, 1390, 327, 107

};

const int16_t volume_up_data[] = 
{  
	1402, 701, 113, 60, 114, 236, 112, 61, 111, 239, 112, 237, 110, 239,
	112, 238, 111, 61, 111, 238, 108, 65, 107, 242, 109, 64, 107, 66, 108,
	65, 108, 65, 107, 242, 105, 68, 105, 245, 108, 65, 107, 242, 107, 242,
	107, 66, 106, 67, 107, 66, 107, 243, 107, 66, 107, 243, 108, 64, 106,
	67, 107, 242, 107, 243, 107, 243, 103, 6197, 1391, 327, 105
};

const int16_t volume_dn_data[] = 
{  
	1406, 694, 118, 58, 113, 236, 115, 57, 110, 240, 112, 238, 112, 237,
	109, 241, 109, 64, 108, 242, 110, 63, 111, 239, 108, 65, 108, 65, 108,
	65, 108, 65, 108, 242, 111, 239, 107, 243, 108, 65, 107, 242, 108, 241,
	107, 66, 107, 66, 107, 66, 107, 66, 107, 66, 107, 243, 107, 66, 107, 66,
	107, 243, 104, 246, 104, 246, 107, 6193, 1394, 323, 104
};

const int16_t next_track_data[] = 
{  
	1404, 698, 117, 57, 115, 235, 113, 59, 114, 237, 113, 239, 112, 235,
	113, 240, 112, 60, 109, 241, 111, 62, 110, 240, 109, 64, 108, 65, 108,
	65, 109, 64, 108, 242, 108, 65, 109, 240, 107, 66, 107, 66, 107, 242,
	105, 67, 107, 243, 106, 68, 105, 244, 107, 65, 105, 245, 107, 242, 103,
	70, 103, 247, 104, 69, 105, 245, 107, 6193, 1392, 326, 106
};

const int16_t prev_track_data[] = 
{  
	1404, 698, 115, 58, 112, 237, 118, 55, 115, 235, 112, 241, 111, 236,
	115, 235, 112, 64, 108, 242, 111, 62, 109, 241, 111, 62, 112, 61, 109,
	64, 111, 62, 112, 238, 108, 242, 108, 242, 105, 68, 105, 69, 106, 243,
	107, 65, 105, 245, 107, 66, 107, 66, 107, 66, 106, 243, 107, 243, 105,
	68, 104, 246, 105, 68, 104, 246, 106, 6194, 1391, 327, 103
};

const int16_t number1_data[] =     
{  
	1404, 699, 112, 61, 112, 238, 113, 59, 113, 237, 109, 241, 108, 242, 114, 235, 110, 63, 111, 238, 112, 62, 109, 241, 109, 64, 108, 65, 108, 65, 107, 66, 107, 242, 107, 243, 110, 63, 111, 238, 107, 66, 107, 243, 107, 66, 105, 68, 107, 66, 107, 66, 107, 243, 107, 66, 104, 246, 105, 69, 107, 242, 107, 242, 105, 245, 104, 6197, 1391, 326, 106
};

const int16_t number2_data[] =      
{  
	1402, 698, 119, 53, 116, 237, 112, 58, 115, 238, 112, 234, 111, 242, 109, 240, 112, 61, 112, 238, 108, 65, 111, 238, 109, 64, 108, 65, 108, 65, 107, 65, 107, 242, 107, 66, 105, 244, 105, 245, 108, 65, 108, 242, 107, 66, 107, 66, 107, 66, 107, 243, 107, 66, 106, 67, 106, 244, 106, 67, 104, 246, 107, 243, 107, 242, 104, 6197, 1390, 328, 107
};

const int16_t number3_data[] =      
{  
	1404, 697, 115, 58, 114, 236, 116, 57, 113, 236, 111, 239, 112, 240, 111, 236, 112, 64, 108, 242, 108, 65, 108, 242, 108, 64, 106, 67, 105, 68, 104, 68, 104, 245, 107, 66, 104, 69, 106, 66, 104, 246, 108, 242, 105, 68, 106, 67, 107, 66, 107, 243, 104, 246, 104, 246, 105, 68, 106, 67, 104, 246, 104, 246, 103, 247, 103, 6197, 1390, 327, 103
};




// translate the remote control buttons to clock buttons
const ir_code_t ir_codes[] = { 
    { power_data, ENABLE_ALARM },
	{ volume_up_data, HOUR_UP },
	{ volume_dn_data, HOUR_DN },
	{ next_track_data, MINUTE_UP },
	{ prev_track_data, MINUTE_DN },
	{ number1_data, SET_ALARM },
	{ number2_data, SET_TIME },
	{ number3_data, SET_TEST },
};

#define IR_MARGIN 16
#define IR_TIMEOUT 16000

int16_t ir_buffer[CODE_SIZE];
uint8_t ir_size = 0;
// biggest error encountered in code
uint16_t ir_error = 0;

void (*ir_state)();
void (*ir_state2)();
// IR interrupt fired
uint8_t got_ir_int = 0;
// time of IR interrupt in us / 4
uint16_t ir_time = 0;
uint8_t first_edge = 1;


#ifdef ENABLE_DEBUG


void print_byte(uint8_t c)
{
	if(uart_size < UART_BUFSIZE)
	{
		uart_buffer[uart_position1++] = c;
		uart_size++;
		if(uart_position1 >= UART_BUFSIZE)
		{
			uart_position1 = 0;
		}
	}
}

void print_text(const uint8_t *s)
{
	while(*s != 0)
	{
		print_byte(*s);
		s++;
	}
}


void print_number_nospace(uint16_t number)
{
	if(number >= 10000) print_byte('0' + (number / 10000));
	if(number >= 1000) print_byte('0' + ((number / 1000) % 10));
	if(number >= 100) print_byte('0' + ((number / 100) % 10));
	if(number >= 10) print_byte('0' + ((number / 10) % 10));
	print_byte('0' + (number % 10));
}

void print_number(uint16_t number)
{
    print_number_nospace(number);
   	print_byte(' ');
 
}

const char hex_table[] = 
{
	'0', '1', '2', '3', '4', '5', '6', '7', 
	'8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
};

void print_hex2(uint8_t number)
{
	print_byte(hex_table[(number >> 4) & 0xf]);
	print_byte(hex_table[number & 0xf]);
	print_byte(' ');
}

void print_bin_nospace(uint8_t number)
{
	print_byte((number & 0x80) ? '1' : '0');
	print_byte((number & 0x40) ? '1' : '0');
	print_byte((number & 0x20) ? '1' : '0');
	print_byte((number & 0x10) ? '1' : '0');
	print_byte((number & 0x8) ? '1' : '0');
	print_byte((number & 0x4) ? '1' : '0');
	print_byte((number & 0x2) ? '1' : '0');
	print_byte((number & 0x1) ? '1' : '0');
}








#else // ENABLE_DEBUG


#define print_text(x) ;
#define print_hex2(x) ;
#define print_number(x) ;
#define print_number_nospace(x) ;
#define print_byte(x) ;








#endif // !ENABLE_DEBUG

void falling_edge();


void get_timeout()
{
	print_number(ir_time);
}

void get_code()
{
    print_number_nospace(ir_time);
    print_text(", ");
//    return;
    
    
	if(ir_size < CODE_SIZE)
	{
		ir_buffer[ir_size++] = ir_time;
		
// search for the code
		if(ir_size >= CODE_SIZE)
		{
//			print_text("got code\n");

			
			uint8_t i;
			uint8_t j;
			uint8_t got_it = 0;
			for(j = 0; j < sizeof(ir_codes) / sizeof(ir_code_t); j++)
//			for(j = 0; j < 1; j++)
			{
				const ir_code_t *code = &ir_codes[j];
				const int16_t *data = code->data;
				uint8_t failed = 0;
				ir_error = 0;
				
				for(i = 0; i < CODE_SIZE; i++)
				{
					int16_t error = ABS(data[i] - ir_buffer[i]);
					if(error > ir_error)
					{
						ir_error = error;
					}
					
					
					if(error > IR_MARGIN)
					{
						print_text("failed at i=");
						print_number(i);
						print_text("j=");
						print_number(j);
						print_text("data=");
						print_number(data[i]);
						print_text("buffer=");
						print_number(ir_buffer[i]);
						print_byte('\n');
						
						failed = 1;
						break;
					}
				}
				
				
				if(!failed)
				{
					got_it = 1;
					print_text("IR code: ");
					print_number(code->value);
					print_text("error=");
					print_number(ir_error);
					print_byte('\n');
					ir_state2 = get_timeout;
					break;
				}
			}
		}
	}
}


// wait for rising edge
void rising_edge()
{
	if(got_ir_int)
	{
        got_ir_int = 0;
		INTCON2bits.INTEDG3 = 0; // interrupt on falling edge
		ir_state = falling_edge;
		ir_state2();
		
	}
}


// wait for falling edge
void falling_edge()
{
	if(got_ir_int)
	{
        got_ir_int = 0;

		INTCON2bits.INTEDG3 = 1; // interrupt on rising edge
		ir_state = rising_edge;
		
        if(first_edge)
        {
            first_edge = 0;
        }
        else
        {
 			ir_state2();
        }
	}
}


void handle_audio()
{
    osc1_time += AUDIO_PERIOD;
	osc2_time += AUDIO_PERIOD;
	osc3_time += AUDIO_PERIOD;
	uint8_t amplitude = AUDIO_PERIOD / 2;


// square wave synthesis
	if(osc1_time >= osc1_period)
	{
		osc1_time -= osc1_period;
        amplitude += osc1_volume;
	}
	else
	if(osc1_time >= osc1_period / 2)
	{
		amplitude -= osc1_volume;
	}
	else
	{
		amplitude += osc1_volume;
	}
return;

	if(osc2_time >= osc2_period)
	{
		osc2_time -= osc2_period;
        amplitude += osc2_volume;
	}
	else
	if(osc2_time >= osc2_period / 2)
	{
		amplitude -= osc2_volume;
	}
	else
	{
		amplitude += osc2_volume;
	}

	if(osc3_time >= osc3_period)
	{
		osc3_time -= osc3_period;
        amplitude += osc3_volume;
	}
	else
	if(osc3_time >= osc3_period / 2)
	{
		amplitude -= osc3_volume;
	}
	else
	{
		amplitude += osc3_volume;
	}



	// duty cycle is the amplitude
	CCPR1L = amplitude;

}

void interrupt isr()
{
    uint8_t interrupt_done = 0;
    
    while(!interrupt_done)
    {
        interrupt_done = 1;
        
		// UART receive
        if(PIR1bits.RCIF)
        {
            PIR1bits.RCIF = 0;
            serial_in = RCREG;
            have_serial = 1;
			interrupt_done = 0;
        }
        
		// IR timer
		if(INTCON3bits.INT3IF)
		{
			INTCON3bits.INT3IF = 0;
			got_ir_int = 1;
			ir_time = TMR0L;
			ir_time |= ((uint16_t)TMR0H) << 8;
			TMR0H = 0;
			TMR0L = 0;
			interrupt_done = 0;
		}
    }
    
    
}


void main()
{
    
    ADCON1 = 0xff; // all digital
    DEBUG_TRIS = 0; // output
    DEBUG_LAT = 1;
    
    // initialize serial port
    TXSTA = 0x24;
    RCSTA = 0x90;
    BAUDCTL = 0x08;
    SPBRGH = BAUD_CODE >> 8;
    SPBRG = BAUD_CODE & 0xff;
    PIR1bits.RCIF = 0;
    PIE1bits.RCIE = 1;
	
    
	// IR interrupt
	INTCON2bits.INTEDG3 = 0; // interrupt on falling edge
	INTCON3bits.INT3IE = 1;
	INTCON3bits.INT3IF = 0;
	ir_state = falling_edge;
	ir_state2 = get_code;
	ir_size = 0;
    first_edge = 1;
    
	
	// IR timer
	T0CON = 0x85;   // 1:64 prescaling
	INTCONbits.TMR0IF = 0;
	
	
	
    // the mane timer
	T1CON = 0xb1; // maximum prescale
	CCPR2H = TIMER_PERIOD >> 8;
	CCPR2L = TIMER_PERIOD & 0xff;
	CCP2CON = 0x0b;   // compare mode, reset timer1 on interrupt
	
	
	
	
	// the audio PWM
    T2CON = 0x1c;  // 4:1 postscaler
    PR2 = AUDIO_PERIOD; // period
	CCP1CON = 0x0c; // PWM mode
	CCPR1L = 0x80; // duty cycle
	SPEAKER_TRIS = 0;  // speaker off/input mode
	


    // enable all interrupts
    INTCONbits.PEIE = 1;
    INTCONbits.GIE = 1;
    
    // wait a while
    uint16_t i;
    for(i = 0; i < 32768; i++)
    {
        ClrWdt();
    }
	
	
	print_text("Welcome to Heroineclock 2\n");

// print_number(sizeof(power_data) / 2);
// print_number(sizeof(volume_up_data) / 2);
// print_number(sizeof(volume_dn_data) / 2);
// print_number(sizeof(next_track_data) / 2);
// print_number(sizeof(prev_track_data) / 2);
// print_number(sizeof(number1_data) / 2);
// print_number(sizeof(number2_data) / 2);
// print_number(sizeof(number3_data) / 2);
// print_byte('\n');
print_number(_C1);
print_number(_C2);
print_number(_C3);
print_byte('\n');

 	print_text("\n");
   
    while(1)
    {
        ClrWdt();

        if(have_serial)
		{
			have_serial = 0;
		}
        
		uint16_t test_time = TMR0L;
		test_time |= ((uint16_t)TMR0H) << 8;
// IR timed out
		if(test_time > IR_TIMEOUT &&
			!first_edge)
		{
            print_text("IR timed out\n");
			INTCON2bits.INTEDG3 = 0; // interrupt on falling edge
			ir_state = falling_edge;
			TMR0H = 0;
			TMR0L = 0;
            first_edge = 1;
			ir_state2 = get_code;
			ir_size = 0;
		}

		ir_state();


		// mane timer
        if(PIR2bits.CCP2IF)
        {
            PIR2bits.CCP2IF = 0;
            time++;
			DEBUG_LAT = !DEBUG_LAT;
        }
        
		
		// audio sample timer
		if(PIR1bits.TMR2IF)
		{
			PIR1bits.TMR2IF = 0;
            handle_audio();
		}

        
#ifdef ENABLE_DEBUG
        // send a UART char
        if(uart_size > 0 && PIR1bits.TXIF)
        {
            PIR1bits.TXIF = 0;
            TXREG = uart_buffer[uart_position2++];
			uart_size--;
			if(uart_position2 >= UART_BUFSIZE)
			{
				uart_position2 = 0;
			}
        }
#endif
    }
    
    
}








